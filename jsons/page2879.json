{
    "title": "Developing with user roles and capabilities | Learn WordPress ",
    "body": "\nSkip to content\n\n\nLog InRegister \n\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\n\n\n\nNewsDownload & ExtendGet WordPressThemesPatternsPluginsMobileHostingOpenverse \u2197\ufe0eLearnLearn WordPressDocumentationForumsDevelopersWordPress.tv \u2197\ufe0eCommunityMake WordPressPhoto DirectoryFive for the FutureWordCamp \u2197\ufe0eMeetups \u2197\ufe0eJob Board \u2197\ufe0eAboutAbout WordPressShowcaseEnterpriseGutenberg \u2197\ufe0eWordPress Swag Store \u2197\ufe0eGet WordPress\n\n\n\n\n\n\n\n\n\n\n\nSearch in WordPress.org\n\n\n\n\n\n\n\n\n\n\t\tGet WordPress\t\n\n\n\n\n\n\n\n\n\t\t\t\t\t\tLearn\t\t\t\t\t\tWordPress\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\t\t\tTutorials\t\t\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\t\t\t\tOnline Workshops\t\t\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\t\t\t\tCourses\t\t\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\t\t\t\tLesson Plans\t\t\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\t\t\t\tContribute\t\t\t\t\t\t\t\t\n\n\nSearch for:\n\n\n\n\n\t\t\tSearch\t\t\n\n\n\n\n\n\n\n\n\n\nLearn Home,  \u00bb Tutorials,  \u00bb Developing with user roles and capabilities \n\n\n\n\n\nDeveloping with user roles and capabilities\n\n\n\n\n \n\n\nIn this tutorial, you will learn how to develop with the built-in WordPress Roles and Capabilities system. You will learn how the user roles and capabilities are set up, how to create and apply user roles, and how to add or remove capabilities from a user role.\nLearning outcomes\n\nExplain the WordPress user roles and capabilities system \nAssign capabilities to an existing role \nCreate a new User Role and assign capabilities to it\n\nComprehension questions\n\nWhat is the name of the option which stores the default user roles and capabilities in the database?\nWhat is the name of the method on the Role class that you can use to add capacities to a role?\nWhich function can be used to create a new custom role, and assign capabilities to it?\nHow should you register new roles or assign new capabilities?\n\nView video transcript\nHey there, and welcome to Learn WordPress.\nIn this tutorial, you\u2019ll be learning how to leverage the WordPress user roles and capabilities system. After a brief introduction to the default WordPress roles and capabilities, how they are created and managed and how to assign them to users, you will learn how to add capabilities to an existing role, and also how to create a new user role and add capabilities to it.\nThe WordPress user roles and capabilities system is a powerful tool for managing access to your site. It allows for user roles with specific capabilities, and you can then assign those roles to users. This allows you to create a hierarchy of users with some users having more access than others.\nWordPress comes with several default user roles, namely administrator, editor, author, contributor and subscriber. There is one additional role but this is only available in multisite installations, and that\u2019s the Super Admin role. Each of these roles has a default set of capabilities, which are the things that the user can do in a WordPress site. For example, the administrator role has the capability to activate plugins while the subscriber role does not.\nWhen a new user is created in the WordPress dashboard, they are assigned the subscriber role by default. You can change this by assigning a different role. Once assigned to that role, the user will have the capabilities that are associated with that role.\nYou can read up on the full list of default user roles and capabilities in the official WordPress documentation.\nThe WordPress user roles and capabilities system is stored in the database during the WordPress installation process. The roles and capabilities are stored as a serialised array as site options in the options table in the user roles option. The prefix for this option will depend on the table prefix configured in WP config, or if this is a multisite installation.\nBy default on a single site installation this prefix will be wp_.\nSo the option will be wp_user_roles.\nIf you extract the value of the user roles option and unserialize the array, you will see that the array keys are the role names and the values are arrays of capabilities. Whenever an authenticated user is attempting to do something, this action is checked against the users role capabilities using the current_user_can function. If the user has the capability to perform the action, they will be allowed to do so. If they do not have the capability, they will be denied access.\nIf you take a look at line 270 of the wp-admin/includes/post.php file, you will see that the edit_post capability is checked before a post is edited or updated. If the user does not have the edit_post capability for this post, they will be informed that they do not have the required access to edit it.\nLet\u2019s say that you want to allow your editors to be able to do something that only admins can do, maybe install and update plugins. By default, the editor role does not have the activate_plugins or update_plugins capability. You can add this capability to the editor role by using the add_cap method of the WP_Role class. However, doing so will add this capability to the user roles stored in the database. So it\u2019s recommended to run this on something like plugin activation using the register_activation_hook function.\nThe register_activation_hook requires the path of the file that contains the hook callback and the hook callback function name, you can then add the capabilities to the editor role by using the get_role function to get the role object and then using the add_cap method to add the capabilities.\nSo what that would look like is you could say editor, get role editor. So that\u2019s the role that exists in the database. And then we could say editor add_cap and we want to allow the editor to activate plugins and we want to allow the editor to update plugins.\nAdding this code to a plugin and activating the plugin will trigger the activation hook and will update the editor role with a new plugin capabilities.\nLet us activate this plugin which will now add those capabilities to the editor role. Let\u2019s create a new editor user, just give it some random details, gonna keep the passwords simple for testing purposes and make it an editor. And if we log out and log in as the editor user, we are able to install, activate and update plugins.\nNote that because adding capabilities to a role is a permanent change, you should only do this when the plugin is activated and not on every page load. Additionally, if you want to remove a custom role, it\u2019s a good idea to do so on plugin deactivation using the register_deactivation_hook function.\nSo let\u2019s look at what that could look like. So the activation deactivation hook function and callback could look like that. And then we would say, get the role. And then we would remove capabilities by saying remove cap and the same capability. And copy paste the update plugins capability. And there\u2019s our plugin deactivation.\nThis is useful for two reasons. Firstly, you can add and remove capabilities when the plugin is activated and deactivated, which is useful when testing whether the capabilities you\u2019ve set or what you need. Secondly, if the user deactivates your plugin, the capabilities will be removed cleaning up any changes your plugin has made.\nJust as it is possible to assign existing capabilities to roles, you can also create your own custom roles and assign capabilities to them. This is useful if you want to create a role that has a specific set of capabilities and you don\u2019t want to use an existing role. For example, let\u2019s say you want to use a role which can only activate an update plugins, say an assistant to the administrator, you can create a new role using the add_role function and assign the activate_plugins and update_plugins capabilities to it.\nSo what that would look like in the code, let\u2019s grab the activation hook registration and update the callback to custom role. Let\u2019s create the function. And then we will use the role function which requires the role name. all lowercase a human readable string, which should be translated, but we won\u2019t worry about that now. And then an array of capabilities, which are passed in as key value pairs the key being the capability being set and the value being true or false. That then we\u2019ll set activate plugins to true and we will set update plugins to true.\nAgain, because the new role will be stored in the database, you should only run this code when the plug in is activated and not on every page load. Notice how the array of capabilities includes the read capability. This is because the read capability is required for a user attach to that role to be able to access the dashboard. Regardless of any other capabilities a user has, if they do not have the read capability, they will not be able to access the Dashboard menu in order to perform the specific task that they should be able to. You can also include a deactivation hook to remove the role when the plugin is deactivated, using the Remove role function.\nSo let\u2019s just steal the deactivation code here. I\u2019ll say remove custom role.\nAnd then we can simply say remove role and pass in the role now.\nBecause it made some changes to the activation and deactivation hooks now would be a good idea to deactivate and then reactivate the plugin for the role functionality to be updated.\nSo in our plugins, let\u2019s deactivate this plugin. And then let\u2019s activate.\nYou can now create a new user with the assistant capability. Then switch users and notice how that all that user can do is manage plugins.\nSo we\u2019re logged in as admin, go to the users, create a new user and give them the assistant capability And then fill in all the details of the most simple password for testing purposes and create the user and then log out and login as that user. And all we can really manage are the plugins.\nFor more information on developing user roles and capabilities, see the Roles and Capabilities section of the Plugin developer handbook at developer.wordpress.org.\nHappy Coding\n\nIntroduction\nHey there, and welcome to Learn WordPress!\nIn this tutorial, you\u2019ll be learning how to leverage the WordPress user roles and capabilities system.\nAfter a brief introduction to the default WordPress roles and capabilities, how they are created and managed, and how to assign them to users, you will learn how to add capabilities to an existing role, and how to create a new user role and add capabilities to it.\nWordPress User Roles and Capabilities\nThe WordPress user roles and capabilities system is a powerful tool for managing access to your site. It allows for user roles with specific capabilities, and you can then assign those roles to users. This allows you to create a hierarchy of users, with some users having more access than others.\nWordPress comes with several default user roles, namely Administrator, Editor, Author, Contributor, and Subscriber.\nThere is also one additional role, but this is only available in multisite installations, and that\u2019s the Super Admin role.\nEach of these roles has a set of capabilities, which are the things that the user can do in a WordPress site. For example, the Administrator role has the capability to manage users, while the Subscriber role does not.\nWhen a new user is created in the WordPress dashboard, they are assigned the Subscriber role by default. You can change this by assigning a different role. Once assigned to a role, the user will have the capabilities that are associated with that role.\nYou can read up on the full list of default user roles and capabilities in the official WordPress Documentation on Roles and Capabilities.\nRoles and Capabilities under the hood\nThe WordPress user roles and capabilities system is stored in the database during the WordPress installation process. The roles and capabilities are stored as a serialized array as site options the options table, in the user_roles option. The prefix for this option will depend on the table prefix configured in wp-config.php, or if this is a multisite installation. By default, on a single site installation, the prefix will be wp_, so the option name will be wp_user_roles.\nIf you extract the value of the user_roles option, and unserialize the array, you will see that the array keys are the role names, and the values are arrays of capabilities.\nWhenever an authenticated user is attempting to do something, this action is checked against the user\u2019s role capabilities, using the current_user_can function. If the user has the capability to perform the action, they will be allowed to do so. If they do not have the capability, they will be denied access.\nTake a look at line 270 of the wp-admin/includes/post.php file. Here you will see that the edit_post capability is checked before a post is edited/update. If the user does not have the edit_post capability for this post, they will be informed that they do not have the required access to edit it.\nAssign capabilities to an existing role\nLet\u2019s say that you want to allow your editors to be able to do something that only admins can do, maybe install and update plugins. By default, the Editor role does not have the activate_plugins or update_plugins capability.\n[Create editor user]\nYou can add this capability to the Editor role by using the add_cap method of the WP_Role class.\nHowever, doing so will add this capability to the user_roles stored in the database, so it\u2019s recommend to run this on something like plugin activation using the register_activation_hook function.\nregister_activation_hook( __FILE__, 'wp_learn_add_custom_caps' );\nfunction wp_learn_add_custom_caps() {\n    // do something\n}\nThe register_activation_hook requires the path to the file that contains the hook callback, and the hook callback function name.\nThen you can add the capabilities to the Editor role by using the get_role function to get the role object, and then using the add_cap method to add the capabilities.\nregister_activation_hook( __FILE__, 'wp_learn_add_custom_caps' );\nfunction wp_learn_add_custom_caps() {\n    // gets the author role\n    $role = get_role( 'editor' );\n    $role->add_cap( 'activate_plugins' );\n    $role->add_cap( 'update_plugins' );\n}\n\nFirst, you should hook into the register_activation_hook action, so that the code is only executed when the WP dashboard is loaded.\nThen, you get the role object by using the get_role function. The get_role function takes the role name as a parameter, and returns the role object.\nFinally, you use the role\u2019s add_cap method to add the activate_plugins and update_plugins capabilities to the role object.\n\nAdding this code to a plugin, and activating the plugin, triggering the activation hook, will update the Editor role with the new plugin capabilities.\nIf you switch to an editor user, you will see that the editor user can now update plugins.\n[Show how editor can active plugins]\nNote that because adding capabilities to a role is a permanent change, you should only do this when the plugin is activated, and not on every page load. Also, if you want to remove a custom role, it\u2019s a good idea to do so on plugin deactivation, using the register_deactivation_hook function.\nregister_deactivation_hook( __FILE__, 'wp_learn_remove_custom_caps' );\nfunction wp_learn_remove_custom_caps() {\n    $role = get_role( 'editor' );\n    $role->remove_cap( 'activate_plugins' );\n    $role->remove_cap( 'update_plugins' );\n}\nThis is useful for two reasons. Firstly, you can add and remove the capabilities when the plugin is activated and deactivated, which is useful when testing whether the capabilities you\u2019ve set are what you need. Secondly, if the user deactivates your plugin, the capabilities will be removed, cleaning up the changes your plugin has made.\nCreate a new User Role and assign capabilities to it\nJust as it is possible to assign existing capabilities to roles, you can also create your own custom roles, and assign capabilities to them. This is useful if you want to create a role that has a specific set of capabilities, and you don\u2019t want to use an existing role.\nFor example, lets say you want a user role who can only activate and update plugins, say an assistant to the administrator. You can create a new role, using the add_role function, and assign the activate_plugins and update_plugins capabilities to it.\nregister_activation_hook( __FILE__, 'wp_learn_add_custom_role' );\nfunction wp_learn_add_custom_role() {\n    add_role(\n        'assistant',\n        'Assistant',\n        array(\n            'read'         => true,\n            'activate_plugins'   => true,\n            'update_plugins' => true,\n        ),\n    );\n}\nAgain, because the new role will be stored in the database, you should only run this code when the plugin is activated, and not on every page load.\nNotice how the array of capabilities includes the read capability. This is because the read capability is required for a user to be able to access the dashboard. Regardless of any other capabilities a user has, if they do not have the read capability, they will not be able to access the dashboard menu, in order to perform a specific task they should be able to.\nYou can also include a deactivation hook to remove the role when the plugin is deactivated, using the remove_role function.\nregister_deactivation_hook( __FILE__, 'wp_learn_remove_custom_role' );\nfunction wp_learn_remove_custom_role() {\n    remove_role( 'assistant' );\n}\nCreate a new user, with the Assistant capability. Then switch users, and notice how all that user can do is manage plugins\nSummary\nFor more information on developing user roles and capabilities, see the Roles and Capabilities section of the Plugin developer handbook on developer.wordpress.org.\nHappy coding.\n\n\n\n\nWorkshop Details\n\n\nLength\n\n\t\t\t\t\t\t\t10 mins\t\t\t\t\t\t\n\n\nTopic\n\nExtending WordPress, Plugin Development \n\n\nRelated Version\n\n6.2 \n\n\nLanguage\n\nEnglish \n\n\nSubtitles\n\nEnglish \n\n\nPrint View\n\n\n\t\t\t\t\t\t\t\tView\t\t\t\t\t\t\t\n\n\n\n\n\n\t\t\t\tJoin a live Online Workshop\t\t\t\n\n\n\n\n\n\n\nPractise your skills on a private demo site\n\n\nSuggestions\n\nFound a typo, grammar error or outdated screenshot?\n\n\nLet us know!\n\n\n\n\n\n\n\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n\n \n\n \n \n\n \n\n\n\n\n\n\n\nAboutNewsHostingDonateSwag\nDocumentationDevelopersGet InvolvedLearn\nShowcasePluginsThemesPatterns\nWordCampWordPress.TVBuddyPressbbPress\nWordPress.comMattPrivacyPublic Code\n\n\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\nWordPress.org\n\n\n\n \n\n\n\nVisit our Facebook page\nVisit our Twitter account\nVisit our Instagram account\nVisit our LinkedIn account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n",
    "links": [
        "#main",
        "https://login.wordpress.org/?redirect_to=https%3A%2F%2Flearn.wordpress.org%2Ftutorial%2Fdeveloping-with-user-roles-and-capabilities%2F&locale=en_US",
        "https://login.wordpress.org/register?locale=en_US",
        "https://wordpress.org/",
        "https://wordpress.org/news/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/mobile/",
        "https://wordpress.org/hosting/",
        "https://openverse.org/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://wordpress.org/support/forums/",
        "https://developer.wordpress.org/",
        "https://wordpress.tv/",
        "https://make.wordpress.org/",
        "https://make.wordpress.org/",
        "https://wordpress.org/photos/",
        "https://wordpress.org/five-for-the-future/",
        "https://central.wordcamp.org/",
        "https://www.meetup.com/pro/wordpress/",
        "https://jobs.wordpress.net/",
        "https://wordpress.org/about/",
        "https://wordpress.org/about/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/enterprise/",
        "https://wordpress.org/gutenberg/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/tutorials/",
        "https://learn.wordpress.org/online-workshops/",
        "https://learn.wordpress.org/courses/",
        "https://learn.wordpress.org/lesson-plans/",
        "https://learn.wordpress.org/contribute/",
        "https://learn.wordpress.org",
        "https://learn.wordpress.org/tutorials",
        "https://wordpress.org/documentation/article/roles-and-capabilities/",
        "https://developer.wordpress.org/reference/functions/current_user_can/",
        "https://developer.wordpress.org/reference/classes/wp_role/add_cap/",
        "https://developer.wordpress.org/reference/functions/register_activation_hook/",
        "https://developer.wordpress.org/reference/functions/get_role/",
        "https://developer.wordpress.org/reference/classes/wp_role/add_cap/",
        "https://developer.wordpress.org/reference/functions/get_role/",
        "https://developer.wordpress.org/reference/classes/wp_role/add_cap/",
        "https://developer.wordpress.org/reference/functions/register_deactivation_hook/",
        "https://developer.wordpress.org/reference/functions/add_role/",
        "https://developer.wordpress.org/plugins/users/roles-and-capabilities/",
        "https://learn.wordpress.org/tutorials/?topic=38042",
        "https://learn.wordpress.org/tutorials/?topic=38043",
        "https://learn.wordpress.org/tutorials/?wp_version=45610",
        "https://learn.wordpress.org/tutorials/?language=en_US",
        "https://learn.wordpress.org/tutorials/?captions=en_US",
        "#",
        "https://learn.wordpress.org/online-workshops/",
        "https://developer.wordpress.org/playground/demo/?step=playground&theme=twentytwentythree",
        "https://learn.wordpress.org/report-content-errors/",
        "http://creativecommons.org/licenses/by-sa/4.0/",
        "http://creativecommons.org/licenses/by-sa/4.0/",
        "https://wordpress.org/about/",
        "https://wordpress.org/news/",
        "https://wordpress.org/hosting/",
        "https://wordpressfoundation.org/donate/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://developer.wordpress.org/",
        "https://make.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://central.wordcamp.org/",
        "https://wordpress.tv/",
        "https://buddypress.org/",
        "https://bbpress.org/",
        "https://wordpress.com/?ref=wporg-footer",
        "https://ma.tt/",
        "https://wordpress.org/about/privacy/",
        "https://publiccode.eu/",
        "https://wordpress.org/",
        "https://wordpress.org/",
        "https://www.facebook.com/WordPress/",
        "https://twitter.com/WordPress",
        "https://www.instagram.com/wordpress/",
        "https://www.linkedin.com/company/wordpress"
    ]
}