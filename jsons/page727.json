{
    "title": "GitHub Copilot \u00b7 Your AI pair programmer \u00b7 GitHub",
    "body": "\n\n\nSkip to content\n\n\n\n\n\n\n\nToggle navigation\n\n\n\n\n\n\n\n\n\n\n            Sign\u00a0up\n          \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n        Product\n        \n\n\n\n\n\n\n\n\n\n\n\n\nActions\n        Automate any workflow\n      \n\n\n\n\n\n\n\nPackages\n        Host and manage packages\n      \n\n\n\n\n\n\n\nSecurity\n        Find and fix vulnerabilities\n      \n\n\n\n\n\n\n\nCodespaces\n        Instant dev environments\n      \n\n\n\n\n\n\n\nCopilot\n        Write better code with AI\n      \n\n\n\n\n\n\n\nCode review\n        Manage code changes\n      \n\n\n\n\n\n\n\nIssues\n        Plan and track work\n      \n\n\n\n\n\n\n\nDiscussions\n        Collaborate outside of code\n      \n\n\n\n\nExplore\n\n\n\n      All features\n\n    \n\n\n\n      Documentation\n\n    \n\n\n\n\n\n      GitHub Skills\n\n    \n\n\n\n\n\n      Blog\n\n    \n\n\n\n\n\n\n\n\n\n        Solutions\n        \n\n\n\n\n\nFor\n\n\n\n      Enterprise\n\n    \n\n\n\n      Teams\n\n    \n\n\n\n      Startups\n\n    \n\n\n\n      Education\n\n    \n\n\n\n\n\n\nBy Solution\n\n\n\n      CI/CD & Automation\n\n    \n\n\n\n      DevOps\n\n    \n\n\n\n\n\n      DevSecOps\n\n    \n\n\n\n\n\n\nCase Studies\n\n\n\n      Customer Stories\n\n    \n\n\n\n      Resources\n\n    \n\n\n\n\n\n\n\n\n\n        Open Source\n        \n\n\n\n\n\n\n\n\n\nGitHub Sponsors\n        Fund open source developers\n      \n\n\n\n\n\n\n\n\nThe ReadME Project\n        GitHub community articles\n      \n\n\n\n\nRepositories\n\n\n\n      Topics\n\n    \n\n\n\n      Trending\n\n    \n\n\n\n      Collections\n\n    \n\n\n\n\n\n\nPricing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        Search\n      \n\n        All GitHub\n      \n\u21b5\n\n\n      Jump to\n      \u21b5\n\n\n\n\n\n\nNo suggested jump to results\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        Search\n      \n\n        All GitHub\n      \n\u21b5\n\n\n      Jump to\n      \u21b5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        Search\n      \n\n        All GitHub\n      \n\u21b5\n\n\n      Jump to\n      \u21b5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        Search\n      \n\n        All GitHub\n      \n\u21b5\n\n\n      Jump to\n      \u21b5\n\n\n\n\n\n\n \n\n\n\n\n              Sign in\n            \n\n\n              Sign up\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\nActions\nPackages\nSecurity\nCodespaces\nCopilot\nCode review\nSearch\nIssues\nDiscussions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour AI pair programmer\nGitHub Copilot uses the OpenAI Codex to suggest code and entire functions in real-time, right from your editor.\n\n\n\n  Start my free trial\n  \n  \n\n\n  Compare plans\n  \n  \n\n\n\n\n\n\n\n\n\n\n\nTypeScript\nsentiments.ts\n \nGo\nwrite_sql.go\n \nPython\nparse_expenses.py\n \nRuby\naddresses.rb\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n#!/usr/bin/env ts-node\n\nimport { fetch } from \"fetch-h2\";\n\n// Determine whether the sentiment of text is positive\n// Use a web service\nasync function isPositive(text: string): Promise<boolean> {\n  const response = await fetch(`http://text-processing.com/api/sentiment/`, {\n    method: \"POST\",\n    body: `text=${text}`,\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n  });\n  const json = await response.json();\n  return json.label === \"pos\";\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\npackage main\n\ntype CategorySummary struct {\n    Title       string\n    Tasks       int\n    AvgValue    float64\n}\n\nfunc createTables(db *sql.DB) {\n    db.Exec(\"CREATE TABLE tasks (id INTEGER PRIMARY KEY, title TEXT, value INTEGER, category TEXT)\")\n}\n\nfunc createCategorySummaries(db *sql.DB) ([]CategorySummary, error) {\n    var summaries []CategorySummary\n    rows, err := db.Query(\"SELECT category, COUNT(category), AVG(value) FROM tasks GROUP BY category\")\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n\n    for rows.Next() {\n        var summary CategorySummary\n        err := rows.Scan(&summary.Title, &summary.Tasks, &summary.AvgValue)\n        if err != nil {\n            return nil, err\n        }\n        summaries = append(summaries, summary)\n    }\n    return summaries, nil\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nimport datetime\n\ndef parse_expenses(expenses_string):\n    \"\"\"Parse the list of expenses and return the list of triples (date, value, currency).\n    Ignore lines starting with #.\n    Parse the date using datetime.\n    Example expenses_string:\n        2016-01-02 -34.01 USD\n        2016-01-03 2.59 DKK\n        2016-01-03 -2.72 EUR\n    \"\"\"\n    expenses = []\n    for line in expenses_string.splitlines():\n        if line.startswith(\"#\"):\n            continue\n        date, value, currency = line.split(\" \")\n        expenses.append((datetime.datetime.strptime(date, \"%Y-%m-%d\"),\n                        float(value),\n                        currency))\n    return expenses\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nclass CreateShippingAddresses < ActiveRecord::Migration\n  def change\n    create_table :shipping_addresses do |t|\n      t.string :name\n      t.string :address\n      t.string :city\n      t.string :zip\n      t.string :state\n      t.string :phone\n      t.string :email\n      t.references :shipping_method, index: true, foreign_key: true\n      t.references :customer, index: true, foreign_key: true\n\n      t.timestamps null: false\n    end\n  end\nend\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n\n\n\n\n\nTrained on billions of lines of code, GitHub Copilot turns natural language prompts into coding suggestions across dozens of languages.\n\n\n    Explore docs \n\n\n\n\n\n\n\n\n\n\n\n\nDon't fly solo\nDevelopers all over the world use GitHub Copilot to code faster, focus on business logic over boilerplate, and do what matters most: building great software.\n\n\n\n\n\n\n\n\n            Copilot for Individuals\n\n          \n\n\n\n$\n                  10\n              \n\nper month /\n$100 per year\n\n\n\n\n\n\n\n\n                Plugs right into your editor\n              \n\n\n\n\n                Turns natural language prompts into code\n              \n\n\n\n\n                Offers multi-line function suggestions\n              \n\n\n\n\n                Speeds up test generation\n              \n\n\n\n\n                Blocks suggestions matching public code\n              \n\n\n\n  Start a free trial\n  \n  \n\n\n\n\n\n\n\n\n\n\n            Copilot for Business\n\n              \n\nnew\n\n\n\n\n\n\n$\n                  19\n              \n\nper user\nper month\n\n\n\n\n\n\n\n\n                Everything included in Copilot for Individuals, plus...\n              \n\n\n\n\n                Simple license management\n              \n\n\n\n\n                Organization-wide policy management\n              \n\n\n\n\n                Industry-leading privacy\n              \n\n\n\n\n                Corporate proxy support\n              \n\n\n\n  Buy Now\n  \n  \n\n\n  Contact Sales\n  \n  \n\n\n\n\n\n\nLearn about GitHub Copilot Terms and Conditions\n\n\n\nFocus on solving bigger problems\nSpend less time creating boilerplate and repetitive code patterns, and more time on what matters: building great software. Write a comment describing the logic you want and GitHub Copilot will immediately suggest code to implement the solution.\n\n\n\n\n\n\n\n\n\n\nGo\nruntime.go\n \nRuby\ncourse.rb\n \nJavaScript\ntime.js\n \nJava\nIsPrimeTest.java\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\npackage main\n\ntype Run struct {\n    Time int // in milliseconds\n    Results string\n    Failed bool\n}\n\n// Get average runtime of successful runs in seconds\nfunc averageRuntimeInSeconds(runs []Run) float64 {\n    var totalTime int\n    var failedRuns int\n    for _, run := range runs {\n        if run.Failed {\n            failedRuns++\n        } else {\n            totalTime += run.Time\n        }\n    }\n\n    averageRuntime := float64(totalTime) / float64(len(runs) - failedRuns) / 1000\n    return averageRuntime\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nclass Course < ApplicationRecord\n  has_many :enrollments, dependent: :destroy\n  has_many :students, through: :enrollments, source: :user\n  has_many :teachers, through: :enrollments, source: :user\n  has_many :assignments, dependent: :destroy\n  has_many :submissions, through: :assignments\n\n  validates :name, presence: true\n  validates :start_date, presence: true\n  validates :end_date, presence: true\n  validates :term, presence: true\n  validates :year, presence: true\n\n  def self.find_by_name(name)\n    Course.find_by(name: name)\n  end\nend\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nconst seconds = 3600\nconst minutes = seconds / 60\nconst hours = minutes / 60\nconst days = hours / 24\nconst weeks = days / 7\nconst months = days / 30\nconst years = months / 12\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class IsPrimeTest {\n\n  // Math.isPrime(int) returns whether the given number is prime or not\n  @Test\n  public void testIsPrime() {\n    assertTrue(Math.isPrime(2));\n    assertTrue(Math.isPrime(3));\n    assertTrue(Math.isPrime(5));\n    assertTrue(Math.isPrime(7));\n    assertTrue(Math.isPrime(11));\n    assertTrue(Math.isPrime(13));\n    assertTrue(Math.isPrime(17));\n    assertTrue(Math.isPrime(19));\n    assertTrue(Math.isPrime(23));\n    assertTrue(Math.isPrime(29));\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGet AI-based suggestions, just for\u00a0you\nGitHub Copilot shares recommendations based on the project's context and style conventions. Quickly cycle through lines of code, complete function suggestions, and decide which to accept, reject, or edit.\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrevious\nNext\nAccept\n\n\n\nVisual Studio Code\n\n\n\n\nPython\nmax_sum_slice.py\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n\n\ndef max_sum_slice(xs):\n  max_ending = max_so_far = 0\n  for x in xs:\n      max_ending = max(0, max_ending + x)\n      max_so_far = max(max_so_far, max_ending)\n  return max_so_far\n\n\n\n        Copilot\n      \n\n\n \n\n\nVisual Studio Code\n\n\n\n\nPython\nmax_sum_slice.py\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\ndef max_sum_slice(xs):\n  if not xs:\n      return 0\n\n  max_ending = max_slice = 0\n  for x in xs:\n      max_ending = max(0, max_ending + x)\n      max_slice = max(max_slice, max_ending)\n  return max_slice\n\n\n\n        Copilot\n      \n\n\n \n\n\nVisual Studio Code\n\n\n\n\nPython\nmax_sum_slice.py\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\ndef max_sum_slice(xs):\n  max_ending = max_so_far = 0\n  begin = end = 0\n  for i, x in enumerate(xs):\n      if max_ending + x > 0:\n          max_ending += x\n      else:\n          max_ending = 0\n          begin = i\n      if max_ending > max_so_far:\n          max_so_far = max_ending\n          end = i\n  return begin, end, max_so_far\n\n\n\n        Copilot\n      \n\n\n \n\n\nVisual Studio Code\n\n\n\n\nPython\nmax_sum_slice.py\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ndef max_sum_slice(xs):\n  if not xs:\n      return 0\n\n  current_max = 0\n  max_so_far = 0\n\n  for x in xs:\n      current_max = max(0, current_max + x)\n      max_so_far = max(max_so_far, current_max)\n\n  return max_so_far\n\n\n\n        Copilot\n      \n\n\n \n\n\nVisual Studio Code\n\n\n\n\nPython\nmax_sum_slice.py\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\ndef max_sum_slice(xs):\n  max_sum = 0\n  max_sum_so_far = 0\n  start_index = 0\n  end_index = 0\n  for i in range(len(xs)):\n      max_sum_so_far += xs[i]\n      if max_sum_so_far > max_sum:\n          max_sum = max_sum_so_far\n          start_index = i\n          end_index = i\n      elif max_sum_so_far < 0:\n          max_sum_so_far = 0\n          start_index = i\n      else:\n          end_index = i\n  return (start_index, end_index, max_sum)\n\n\n\n        Copilot\n      \n\n\n \n\n\nVisual Studio Code\n\n\n\n\nPython\nmax_sum_slice.py\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\ndef max_sum_slice(xs):\n  if len(xs) == 0:\n      return 0\n\n  max_sum = 0\n  max_sum_ending_here = 0\n  max_ending_here = 0\n\n  for x in xs:\n      max_ending_here = max(0, max_ending_here + x)\n      max_sum_ending_here = max(max_sum_ending_here, max_ending_here)\n      max_sum = max(max_sum, max_sum_ending_here)\n\n  return max_sum\n\n\n\n        Copilot\n      \n\n\n \n\n\nVisual Studio Code\n\n\n\n\nPython\nmax_sum_slice.py\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\ndef max_sum_slice(xs):\n  best_sum, best_start, best_end = 0, None, None\n\n  for i, x in enumerate(xs):\n      if best_start is None or best_sum < x + best_sum:\n          best_sum = x + best_sum\n          best_start = i\n          best_end = i\n      elif best_sum > x + best_sum:\n          best_sum = x + best_sum\n          best_end = i\n\n  return best_sum, best_start, best_end\n\n\n\n        Copilot\n      \n\n\n \n\n\nVisual Studio Code\n\n\n\n\nPython\nmax_sum_slice.py\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\ndef max_sum_slice(xs):\n  \"\"\"\n  Return a tuple (i,j) where i is the index of the first slice with a max value,\n  and j is the index of the slice whose sum is the max\n  \"\"\"\n\n  if len(xs) == 0:\n      return None\n  elif len(xs) == 1:\n      return (0,0)\n  elif len(xs) == 2:\n      return (0,1) if xs[0] >= xs[1] else (1,0)\n  else:\n      return max_sum_slice_helper(xs,0,len(xs)-1)\n\n\n\n        Copilot\n      \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeep flying with your favorite editor\nGitHub Copilot integrates directly into your editor including Neovim, JetBrains IDEs, Visual Studio, and Visual Studio Code\u2014and is fast enough to use as you type.\n\n\n\n\nVisual Studio\n\n\n\n\n\n\n\n\nNeovim\n\n\n\n\n\n\n\n\nVS Code\n\n\n\n\n\n\n\n\nJetBrains IDEs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe numbers speak for themselves\nResearch has found GitHub Copilot helps developers code faster, focus on solving bigger problems, stay in the flow longer, and feel more fulfilled with their work.\n\n\n74%\nFocus on more satisfying work\n \n88%\nFeel more productive\n \n96%\nAre faster with repetitive tasks\n \n\n\n\n\n\n\n\n\n\n\nCode confidently in unfamiliar\u00a0territory\nWhether you\u2019re working in a new language or framework, or just learning to code, GitHub Copilot can help you find your way. Tackle a bug, or learn how to use a new framework without spending most of your time spelunking through the docs or searching the web.\n\n\n\n\n\n\n\n\n\n        Fetch tweets\n\n  \n\n\n\n\n\n        Draw a scatterplot\n\n  \n\n\n\n\n\n        Memoization\n\n  \n\n\n\n\n\n        Goodreads rating\n\n  \n \n\n\n\n\n\n\nJavaScript\nfetch_tweets.js\n \nPython\nfetch_tweets.py\n \nRuby\nfetch_tweets.rb\n \nTypeScript\nfetch_tweets.ts\n \nGo\nfetch_tweets.go\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nconst token = process.env[\"TWITTER_BEARER_TOKEN\"]\n\nconst fetchTweetsFromUser = async (screenName, count) => {\n  const response = await fetch(\n    `https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=${screenName}&count=${count}`,\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  )\n  const json = await response.json()\n  return json\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nimport tweepy, os # secrets in environment variables\n\ndef fetch_tweets_from_user(user_name):\n    # authentification\n    auth = tweepy.OAuthHandler(os.environ['TWITTER_KEY'], os.environ['TWITTER_SECRET'])\n    auth.set_access_token(os.environ['TWITTER_TOKEN'], os.environ['TWITTER_TOKEN_SECRET'])\n    api = tweepy.API(auth)\n\n    # fetch tweets\n    tweets = api.user_timeline(screen_name=user, count=200, include_rts=False)\n    return tweets\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nrequire 'twitter'\n\ndef fetch_tweets_from_user(handle)\n  twitter = Twitter::REST::Client.new do |config|\n    config.consumer_key        = ENV['TWITTER_CONSUMER_KEY']\n    config.consumer_secret     = ENV['TWITTER_CONSUMER_SECRET']\n    config.access_token        = ENV['TWITTER_ACCESS_TOKEN']\n    config.access_token_secret = ENV['TWITTER_ACCESS_TOKEN_SECRET']\n  end\n  tweets = twitter.user_timeline(handle)\n  tweets\nend\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\nconst token = process.env[\"TWITTER_BEARER_TOKEN\"]\n\nconst fetchTweetsFromUser = (userName: string) => {\n  const url = `https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=${userName}&count=20`\n  return fetch(url, {\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    }\n  })\n    .then(res => res.json())\n    .then(tweets => tweets.map(tweet => ({\n      id: tweet.id,\n      text: tweet.text,\n      created_at: tweet.created_at,\n      user: {\n        id: tweet.user.id,\n        name: tweet.user.name,\n        screen_name: tweet.user.screen_name,\n        profile_image_url: tweet.user.profile_image_url\n      }\n    })))\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\npackage main\n\nvar apiKey = os.Getenv(\"TWITTER_BEARER_TOKEN\")\ntype Tweet = struct{ Text string }\n\nfunc fetchTweetsFromUser(user string) ([]Tweet, error) {\n    url := \"https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=\" + user + \"&count=200\"\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        return nil, err\n    }\n    req.Header.Set(\"Authorization\", \"Bearer \"+apiKey)\n    resp, err := http.DefaultClient.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n    if resp.StatusCode != 200 {\n        return nil, fmt.Errorf(\"bad status: %d\", resp.StatusCode)\n    }\n    var tweets []Tweet\n    if err := json.NewDecoder(resp.Body).Decode(&tweets); err != nil {\n        return nil, err\n    }\n    return tweets, nil\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n\n\n\n\n\n\nJavaScript\ndraw_scatterplot.js\n \nPython\ndraw_scatterplot.py\n \nRuby\ndraw_scatterplot.rb\n \nTypeScript\ndraw_scatterplot.ts\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nimport d3 from \"d3\"\n\nconst drawScatterplot = (data, height, width) => {\n  const svg = d3.select(\"#scatterplot\")\n    .append(\"svg\")\n    .attr(\"height\", height)\n    .attr(\"width\", width)\n\n  svg.selectAll(\"circle\")\n    .data(data)\n    .enter()\n    .append(\"circle\")\n    .attr(\"cx\", d => d.x)\n    .attr(\"cy\", d => d.y)\n    .attr(\"r\", 5)\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport matplotlib.pyplot as plt\n\ndef draw_scatterplot(x_values, y_values):\n    plt.scatter(x_values, y_values, s=20)\n    plt.title(\"Scatter Plot\")\n    plt.xlabel(\"x values\")\n    plt.ylabel(\"y values\")\n    plt.show()\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nrequire 'gruff'\n\ndef draw_scatterplot(x_values, y_values)\n  g = Gruff::Scatter.new(400)\n  g.title = \"GCD\"\n  g.x_axis_label = \"X\"\n  g.y_axis_label = \"Y\"\n  g.data('data', x_values, y_values)\n  g.write(\"plot.png\")\nend\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\nimport d3 from \"d3\"\n\nconst drawScatterplot = (\n  data: Array<{ x: number; y: number; size: number }>,\n  x: d3.ScaleLinear<number, number>,\n  y: d3.ScaleLinear<number, number>,\n  svg: d3.Selection<SVGGElement, unknown, HTMLElement, any>,\n  margin: { top: number; bottom: number; left: number; right: number }\n) => {\n  const width = svg.attr(\"width\") - margin.left - margin.right\n  const height = svg.attr(\"height\") - margin.top - margin.bottom\n\n  svg.selectAll(\"*\").remove()\n\n  const g = svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n\n  const xAxis = g\n    .append(\"g\")\n    .attr(\"transform\", `translate(0, ${height})`)\n    .call(d3.axisBottom(x))\n...\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n\n\n\n\n\n\nJavaScript\nmemoize.js\n \nPython\nmemoize.py\n \nRuby\nmemoize.rb\n \nTypeScript\nmemoize.ts\n \nGo\nmemoize.go\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nconst memoize = fn => {\n  const cache = {};\n  return (...args) => {\n    const key = JSON.stringify(args);\n    return (cache[key] = cache[key] || fn(...args));\n  };\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\ndef memoize(func):\ncache = {}\n\ndef wrapper(*args):\n    if args in cache:\n        return cache[args]\n    else:\n        cache[args] = func(*args)\n        return cache[args]\nreturn wrapper\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n\n\ndef memoize(func)\n  cache = {}\n  lambda { |*args| cache[args] ||= func.call(*args) }\nend\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nconst memoize = (fn: Function): Function => {\n  const cache: { [key: string]: any } = {};\n  return (...args: any[]): any => {\n    const key = JSON.stringify(args);\n    if (cache[key]) {\n      return cache[key];\n    }\n    const result = fn(...args);\n    cache[key] = result;\n    return result;\n  };\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\npackage main\n  func Memoize(fn func(int) int) func(int) int {\n      cache := make(map[int]int)\n      return func(n int) int {\n          if v, ok := cache[n]; ok {\n              return v\n          }\n          cache[n] = fn(n)\n          return cache[n]\n      }\n  }\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n\n\n\n\n\n\nJavaScript\nrating.js\n \nPython\nrating.py\n \nRuby\nrating.rb\n \nTypeScript\nrating.ts\n \nGo\nrating.go\n \n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\nconst https = require('https')\nconst parseString = require('xml2js').parseString\nconst apiKey = process.env[\"GOODREADS_API_KEY\"]\n\nconst getRating = title => {\n  return new Promise((resolve, reject) => {\n    https.get(`https://www.goodreads.com/book/title.xml?key=${apiKey}&title=${title}`, res => {\n      let xml = ''\n      res.setEncoding('utf8')\n      res.on('data', chunk => {\n        xml += chunk\n      })\n      res.on('end', () => {\n        parseString(xml, (err, result) => {\n          if (err) {\n            reject(err)\n          } else {\n            resolve(result.GoodreadsResponse.book[0].average_rating)\n          }\n        })\n      })\n    })\n  })\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nimport os, requests, json, bs4\nkey = os.environ['GOODREADS_API_KEY']\n\ndef get_rating(title) :\n    \"\"\"Get the average rating of the book from GoodReads, and return a float.\"\"\"\n    url = 'https://www.goodreads.com/book/title.xml?key=' + key + '&title=' + title\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'xml')\n    rating = soup.find('average_rating').text\n    return float(rating)\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nrequire 'goodreads'\n\ndef get_rating_of_book_by_title(title)\n  client = Goodreads::Client.new(\n    api_key: \"YOUR_API_KEY\",\n    api_secret: \"YOUR_API_SECRET\"\n  )\n  book = client.book(title)\n  book.rating\nend\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nconst apiKey = process.env[\"GOODREADS_API_KEY\"]\n\nconst getRating = (title: string) => {\n  return fetch(`https://www.goodreads.com/book/title.xml?key=${apiKey}&title=${title}`)\n    .then(res => res.text())\n    .then(res => {\n      const parser = new DOMParser();\n      const xml = parser.parseFromString(res, \"text/xml\");\n      const rating = xml.getElementsByTagName(\"average_rating\")[0].textContent;\n      return rating;\n    })\n    .catch(error => console.log(error));\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\npackage main\nimport (\"log\"; \"net/http\"; \"net/url\"; \"os\"; \"strconv\"; \"github.com/beevik/etree\")\nvar (\n    apiKey = os.Getenv(\"GOODREADS_API_KEY\")\n)\n// GetRating gets the average rating of a book using the Goodreads API.\nfunc GetRating(title string) (float64, error) {\n    u := url.URL{\n        Scheme: \"https\",\n        Host:   \"www.goodreads.com\",\n        Path:   \"/book/title.xml\",\n        RawQuery: url.Values{\n            \"key\":   {apiKey},\n            \"title\": {title},\n    }.Encode(),\n  }\n  resp, err := http.Get(u.String())\n  if err != nil {\n      return 0, err\n  }\n  defer resp.Body.Close()\n  doc := etree.NewDocument()\n  if _, err := doc.ReadFrom(resp.Body); err != nil {\n      return 0, err\n  }\n  ratings := doc.FindElements(\"//average_rating\")\n  if len(ratings) == 0 {\n      return 0, nil\n  }\n  rating, err := strconv.ParseFloat(ratings[0].Text(), 64)\n  if err != nil {\n      return 0, err\n  }\n  return rating, nil\n}\n\n\n\n        Copilot\n      \n\n\n\n \n\nReplay\n \n \n\n \n\n\n\n\n\n\nFlight Reports\nThousands of engineers, including our own, use GitHub Copilot every day.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nElapsed time: 00:00\n\nElapsed time: 00:00\n           /\n          Total time: 00:00\n\n\n\n        Live\n      \n\nDisable captions\n        CC\n      \n\nMute\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter Fullscreen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI have felt improvements of 50%, the process of getting started is very simple.\nSebastian Barrios // VP of Technology\n\n\n\n\n\n\n\n\u201d\nGitHub Copilot works shockingly well. I will never develop software without it again.\n\n          Lars Gyrup Brink Nielsen\n          \n        \n\n\n\n\n\u201d\nI was stunned when I started writing Clojure with GitHub Copilot and it filled an idiomatic namespace require, just like I was going to write it.\n\n          Gunnika Batra\n          // Senior Analyst\n        \n\n\n\n\n\u201d\nTrying to code in an unfamiliar language by googling everything is like navigating a foreign country with just a phrasebook. Using GitHub Copilot is like hiring an interpreter.\n\n          Harri Edwards\n          // Open AI\n        \n\n\n\n\n\n\n\n\n\nFrequently asked\u00a0questions\nGeneral\n\n\n\n\n        What is GitHub Copilot?\n      \n\n\nGitHub Copilot is an AI pair programmer that helps you write code faster and with less work. It draws context from comments and code to suggest individual lines and whole functions instantly. GitHub Copilot is powered by OpenAI Codex, a generative pretrained language model created by OpenAI. It is available as an extension for Visual Studio Code, Visual Studio, Neovim, and the JetBrains suite of integrated development environments (IDEs).\n\n\n\n\n\n\n\n\n        What data has GitHub Copilot been trained on?\n      \n\n\nGitHub Copilot is powered by Codex, a generative pretrained AI model created by OpenAI. It has been trained on natural language text and source code from publicly available sources, including code in public repositories on GitHub.\n\n\n\n\n\n\n\n\n        Does GitHub Copilot write perfect code?\n      \n\n\nIn a recent evaluation, we found that users accepted on average 26% of all completions shown by GitHub Copilot. We also found that on average more than 27% of developers\u2019 code files were generated by GitHub Copilot, and in certain languages like Python that goes up to 40%. However, GitHub Copilot does not write perfect code. It is designed to generate the best code possible given the context it has access to, but it doesn\u2019t test the code it suggests so the code may not always work, or even make sense. GitHub Copilot can only hold a very limited context, so it may not make use of helpful functions defined elsewhere in your project or even in the same file. And it may suggest old or deprecated uses of libraries and languages. When converting comments written in non-English to code, there may be performance disparities when compared to English. For suggested code, certain languages like Python, JavaScript, TypeScript, and Go might perform better compared to other programming languages.\nLike any other code, code suggested by GitHub Copilot should be carefully tested, reviewed, and vetted. As the developer, you are always in charge.\n\n\n\n\n\n\n\n\n        Will GitHub Copilot help me write code for a new platform?\n      \n\n\nGitHub Copilot is trained on public code. When a new library, framework, or API is released, there is less public code available for the model to learn from. That reduces GitHub Copilot\u2019s ability to provide suggestions for the new codebase. As more examples enter the public space, we integrate them into the training set and suggestion relevance improves. In the future, we will provide ways to highlight newer APIs and samples to raise their relevance in GitHub Copilot\u2019s suggestions.\n\n\n\n\n\n\n\n\n        How does a customer get the most out of GitHub Copilot?\n      \n\n\nGitHub Copilot works best when you divide your code into small functions, use meaningful names for functions parameters, and write good docstrings and comments as you go. It also seems to do best when it\u2019s helping you navigate unfamiliar libraries or frameworks.\n\n\n\n\n\n\n\n\n        How can a customer contribute?\n      \n\n\nBy using GitHub Copilot and sharing your feedback in the feedback forum, you help to improve GitHub Copilot. Please also report incidents (e.g., offensive output, code vulnerabilities, apparent personal information in code generation) directly to copilot-safety@github.com so that we can improve our safeguards. GitHub takes safety and security very seriously and we are committed to continually improving.\n\n\n\n\nPrivacy \u2013 General\n\n\n\n\n        Will my code be shared with other users?\n      \n\n\nNo. We follow responsible practices in accordance with our Privacy Statement to ensure that neither your Prompts or Suggestions will be shared or used as suggested code for other users of GitHub Copilot.\n\n\n\n\n\n\n\n\n        How are the transmitted Prompts and Suggestions protected?\n      \n\n\nWe know that user edit actions, source code snippets, and URLs of repositories and file paths are sensitive data. Consequently, several measures of protection are applied, including:\n\nThe transmitted data is encrypted both in transit and at rest; Copilot-related data is encrypted in transit using TLS, and at rest using Microsoft Azure\u2019s data encryption (FIPS Publication 140-2 standards).\nAccess is strictly controlled. The data can only be accessed by (1) named GitHub personnel working on the GitHub Copilot team or on the GitHub platform health team and (2) Microsoft personnel working on or with the GitHub Copilot team.\nRole-based access controls and multi-factor authentication are required for personnel accessing Prompt or Suggestion data.\n\n\n\n\n\n\n\n\n\n        Does GitHub Copilot ever output personal data?\n      \n\n\nBecause Codex, the model powering GitHub Copilot, was trained on publicly available code, its training set included personal data that was included in that code. From our internal testing, we found it to be very rare that GitHub Copilot suggestions included personal data verbatim from the training set.\nIn some cases, the model will suggest what appears to be personal data \u2013 email addresses, phone numbers, etc. \u2013 but those suggestions are actually fictitious information synthesized from patterns in training data and therefore do not relate to any particular individual. For example, when one of our engineers prompted GitHub Copilot with, \u201cMy name is Mona and my birthdate is,\u201d GitHub Copilot suggested a random, fictitious date of \u201cDecember 12,\u201d which is not Mona\u2019s actual birthdate.\nWe have also implemented a filter that blocks emails when shown in standard formats, but it\u2019s still possible to get the model to suggest this sort of content if you try hard enough. We will keep improving the filter system to be more intelligent to detect and remove more personal data from the GitHub Copilot suggestions.\n\n\n\n\n\n\n\n\n        Where can I learn more about GitHub privacy and data protection?\n      \n\n\nFor more information on how GitHub processes and uses personal data, please see the GitHub Privacy Statement.\n\n\n\n\n\n\n\n\n        What if I\u2019m accused of copyright infringement based on using a GitHub Copilot suggestion?\n      \n\n\nGitHub will defend you as provided in the GitHub Copilot Product Specific Terms.\n\n\n\n\nHuman oversight\n\n\n\n\n        Can GitHub Copilot introduce insecure code in its suggestions?\n      \n\n\nPublic code may contain insecure coding patterns, bugs, or references to outdated APIs or idioms. When GitHub Copilot synthesizes code suggestions based on this data, it can also synthesize code that contains these undesirable patterns. This is something we care a lot about at GitHub, and in recent years we\u2019ve provided tools such as GitHub Actions, Dependabot, and CodeQL to open source projects to help improve code quality. Of course, you should always use GitHub Copilot together with good testing and code review practices and security tools, as well as your own judgment.\n\n\n\n\n\n\n\n\n        Does GitHub own the code generated by GitHub Copilot?\n      \n\n\nGitHub Copilot is a tool, like a compiler or a pen. GitHub does not own the suggestions GitHub Copilot provides to you. You are responsible for the code you write with GitHub Copilot\u2019s help. We recommend that you carefully test, review, and vet the code before pushing it to production, as you would with any code you write that incorporates material you did not independently originate.\n\n\n\n\n\n\n\n\n        Does GitHub Copilot copy code from the training set?\n      \n\n\nGitHub Copilot\u2019s suggestions are all generated through AI. GitHub Copilot generates new code in a probabilistic way, and the probability that they produce the same code as a snippet that occurred in training is low. The models do not contain a database of code, and they do not \u2018look up\u2019 snippets. Our latest internal research shows that about 1% of the time, a suggestion may contain some code snippets longer than ~150 characters that matches the training set. Previous research showed that many of these cases happen when GitHub Copilot is unable to glean sufficient context from the code you are writing, or when there is a common, perhaps even universal, solution to the problem.\n\n\n\n\n\n\n\n\n        What can I do to reduce GitHub Copilot\u2019s suggestion of code that matches public code?\n      \n\n\nWe built a filter to help detect and suppress GitHub Copilot suggestions which contain code that matches public code on GitHub.\nCopilot for Individual users have the choice to enable that filter during setup on their individual accounts. For Copilot for Business users, the Enterprise administrator controls how the filter is applied. They can control suggestions for all organizations or defer control to individual organization administrators. These organization administrators can turn the filter on or off during setup (assuming their Enterprise administrator has deferred control) for the users in their organization.\nWith the filter enabled, GitHub Copilot checks code suggestions with its surrounding code for matches or near matches (ignoring whitespace) against public code on GitHub of about 150 characters. If there is a match, the suggestion will not be shown to you. In addition, we have announced that we are building a feature that will provide a reference for suggestions that resemble public code on GitHub so that you can make a more informed decision about whether and how to use that code, as well as explore and learn how that code is used in other projects.\nJust like when you write any code that uses material you did not independently originate, you should take precautions to understand how it works and ensure its suitability. These include rigorous testing, IP scanning, and checking for security vulnerabilities. You should make sure your IDE or editor does not automatically compile or run generated code before you review it.\n\n\n\n\n\n\n\n\n        Other than the filter, what other measures can I take to assess code suggested by GitHub Copilot?\n      \n\n\nYou should take the same precautions as you would with any code you write that uses material you did not independently originate, and should take precautions to ensure its suitability. These include rigorous testing, IP scanning, and checking for security vulnerabilities. You should make sure your IDE or editor does not automatically compile or run generated code before you review it.\n\n\n\n\nFairness and broader impact\n\n\n\n\n        Will GitHub Copilot work as well using languages other than English?\n      \n\n\nGiven public sources are predominantly in English, GitHub Copilot will likely work less well in scenarios where natural language prompts provided by the developer are not in English and/or are grammatically incorrect. Therefore, non-English speakers might experience a lower quality of service.\n\n\n\n\n\n\n\n\n        Does GitHub Copilot support accessibility features?\n      \n\n\nWe are conducting internal testing of GitHub Copilot\u2019s ease of use by developers with disabilities and working to ensure that GitHub Copilot is accessible to all developers. Please feel free to share your feedback on GitHub Copilot accessibility in our feedback forum.\n\n\n\n\n\n\n\n\n        Does GitHub Copilot produce offensive outputs?\n      \n\n\nGitHub Copilot includes filters to block offensive language in the prompts and to avoid synthesizing suggestions in sensitive contexts. We continue to work on improving the filter system to more intelligently detect and remove offensive outputs. If you see offensive outputs, please report them directly to\u202fcopilot-safety@github.com so that we can improve our safeguards. GitHub takes this challenge very seriously and we are committed to addressing it.\n\n\n\n\n\n\n\n\n        How will advanced code generation tools like GitHub Copilot affect developer jobs?\n      \n\n\nBringing in more intelligent systems has the potential to bring enormous change to the developer experience. We do not expect GitHub Copilot to replace developers. Rather, we expect GitHub Copilot to partner with developers, augment their capabilities, and enable them to be more productive, reduce manual tasks, and help them focus on interesting work. We also believe that GitHub Copilot has the potential to lower barriers to entry, enabling more people to explore software development, and join the next generation of developers. We are working to test these hypotheses with both internal and external research.\n\n\n\n\nPrivacy \u2013 Copilot for Business\n\n\n\n\n        What data does Copilot for Business collect?\n      \n\n\nGitHub Copilot for Business relies on file content and additional data to work. It collects data to provide the service, some of which is then retained for further analysis and product improvements.\nCopilot for Business processes data as described below:\nPrompts\nA Prompt is the contextual information the GitHub Copilot extension sends when a user is working on a file and pauses typing, or when the user opens the Copilot pane. Copilot for Business Prompts are only transmitted in real-time. Copilot for Business does not retain Prompts.\nSuggestions\nA Suggestion is one or more lines of proposed text returned to the GitHub Copilot extension after a Prompt is received and processed by the AI-model. Copilot for Business Suggestions are only transmitted in real-time. Copilot for Business does not retain Suggestions.\nUser Engagement Data\nWhen you use GitHub Copilot it will collect User Engagement Data. This is usage information about events generated when interacting with the IDE or editor. These events include user edit actions like whether Suggestions are accepted or dismissed, and error and general usage data to identify metrics like latency and features engagement. This information may include personal data, such as pseudonymous identifiers.\n\n\n\n\n\n\n\n\n        How is the data in Copilot for Business used and shared?\n      \n\n\nUser Engagement Data is used by GitHub and Microsoft to provide the service and to enable improvements.\nSuch uses may include:\n\n\nEvaluating GitHub Copilot, e.g., by measuring the positive impact it has on the user\n\n\nFine tuning ranking and sorting algorithms and Prompt crafting\n\n\nDetecting potential abuse of GitHub Copilot or violation of Acceptable Use Policies\n\n\nConducting experiments and research related to developers and their use of developer tools and services\n\n\n\n\n\n\n\n\n\n\n        How can users of Copilot for Business control use of their data?\n      \n\n\nUser Engagement Data (which includes pseudonymous identifiers and general usage data), is required for the use of GitHub Copilot and will continue to be collected, processed, and shared with Microsoft when you use GitHub Copilot.\nGitHub Copilot for Business does not retain any Prompts or Suggestions.\n\n\n\n\nPrivacy \u2013 Copilot for Individuals\n\n\n\n\n        What data does Copilot for Individuals collect?\n      \n\n\nGitHub Copilot for Individuals relies on file content and additional data to work. It collects data to provide the service, some of which is then retained for further analysis and product improvements. GitHub Copilot processes the following data for individual users:\nUser Engagement Data\nWhen you use GitHub Copilot it will collect usage information about events generated when interacting with the IDE or editor. These events include user edit actions like if Suggestions are accepted or dismissed, and error and general usage data to identify metrics like latency and features engagement. This information may include personal data, such as pseudonymous identifiers.\nPrompts\nA Prompt is the bundle of contextual information the GitHub Copilot extension sends when a user is working on a file and pauses typing, or when the user opens the Copilot pane. Prompts are only transmitted in real-time unless you have enabled telemetry collection, in which case Prompts are retained.\nSuggestions\nA Suggestion is one or more lines of proposed text returned to the GitHub Copilot extension after a Prompt is received and processed by the AI-model. Suggestions are only transmitted in real-time unless you enabled telemetry collection, in which case Copilot retains Suggestions.\n\n\n\n\n\n\n\n\n        How is the data in Copilot for Individuals used and shared?\n      \n\n\nUser Engagement Data, Prompts and Suggestions are used by GitHub and Microsoft to improve GitHub Copilot and related services and to conduct product and academic research.\nSuch uses may include:\n\nDirectly improving GitHub Copilot, including assessing different strategies in processing and predicting which suggestions users may find helpful\nDeveloping and improving closely related developer products and services from GitHub and Microsoft\nInvestigating and detecting potential abuse of GitHub Copilot or violation of Acceptable Use Policies\nConducting experiments and research related to developers and their use of developer tools and services\nEvaluating GitHub Copilot, e.g., by measuring the positive impact it has on the user\nImproving the underlying code generation models, e.g., by providing positive and negative examples\nFine tuning ranking and sorting algorithms and Prompt crafting\n\nWhen processing Prompts and Suggestions, GitHub takes the protection measures described below in How is the transmitted Code Snippets data protected? and follows responsible practices in accordance with our Privacy Statement so that the use of your data to improve these models does not result in this data being shared with other GitHub Copilot users.\n\n\n\n\n\n\n\n\n        How is the transmitted Code Snippets data protected?\n      \n\n\nWe know that user edit actions, source code snippets, and URLs of repositories and file paths are sensitive data. Consequently, several measures of protection are applied, including:\n\nThe transmitted data is encrypted in transit and at rest\nAccess is strictly controlled. The data can only be accessed by (1) named GitHub personnel working on the GitHub Copilot team or on the GitHub platform health team, (2) Microsoft personnel working on or with the GitHub Copilot team, and (3) OpenAI personnel who work on GitHub Copilot\nRole-based access controls and multi-factor authentication are required for personnel accessing code snippet data\n\n\n\n\n\n\n\n\n\n        How can users of Copilot for Individuals control use of their Code Snippets Data?\n      \n\n\nGitHub Copilot gives you choices about how it uses the data it collects. User Engagement Data (which includes pseudonymous identifiers and general usage data), is required for the use of GitHub Copilot and will continue to be collected, processed, and shared with Microsoft as you use GitHub Copilot.\nUsers of GitHub Copilot for Individuals can choose whether Prompts and Suggestions are retained by GitHub and further processed and shared with Microsoft by adjusting user settings.\nUsers of GitHub Copilot for Individuals can request deletion of Prompts and Suggestions associated with their GitHub identity by filling out a support ticket.\n\n\n\n\n\n\n\n\n        Will my private code be shared with other users?\n      \n\n\nNo. We follow responsible practices in accordance with our Privacy Statement to ensure that your code snippets will not be used as suggested code for other users of GitHub Copilot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSubscribe to our newsletter\nGet product updates, company news, and more.\n\n  Subscribe\n  \n  \n\n\n\n\n\n          Product\n        \n\n\nFeatures\n\n\nSecurity\n\n\nTeam\n\n\nEnterprise\n\n\nCustomer stories\n\n\nThe ReadME Project\n\n\nPricing\n\n\nResources\n\n\nRoadmap\n\n\n\n\n\n          Platform\n        \n\n\nDeveloper API\n\n\nPartners\n\n\nElectron\n\n\nGitHub Desktop\n\n\n\n\n\n          Support\n        \n\n\nDocs\n\n\nCommunity Forum\n\n\nProfessional Services\n\n\nPremium Support\n\n\nSkills\n\n\nStatus\n\n\nContact GitHub\n\n\n\n\n\n          Company\n        \n\n\nAbout\n\n\nBlog\n\n\nCareers\n\n\nPress\n\n\nInclusion\n\n\nSocial Impact\n\n\nShop\n\n\n\n\n\n\n\n\n\n\n\nGitHub on Twitter\n\n\n\n\n\nGitHub on Facebook\n\n\n\n\n\nGitHub on LinkedIn\n\n\n\n\n\nGitHub on YouTube\n\n\n\n\n\nGitHub on Twitch\n\n\n\n\n\nGitHub on TikTok\n\n\n\n\n\nGitHub\u2019s organization on GitHub\n\n\n\n\n\n          \u00a9 2023 GitHub, Inc.\n        \n\nTerms\n\n\nPrivacy\n          (Updated 08/2022)\n        \n\nSitemap\n\n\nWhat is Git?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    You can\u2019t perform that action at this time.\n  \n\n\n\n\nYou signed in with another tab or window. Reload to refresh your session.\nYou signed out in another tab or window. Reload to refresh your session.\n\n\n\n\n\n\n\n\n\n",
    "links": [
        "#start-of-content",
        "https://github.com/",
        "/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2Ffeatures%2Fcopilot&source=header",
        "/features/actions",
        "/features/packages",
        "/features/security",
        "/features/codespaces",
        "/features/copilot",
        "/features/code-review",
        "/features/issues",
        "/features/discussions",
        "/features",
        "https://docs.github.com",
        "https://skills.github.com/",
        "https://github.blog",
        "/enterprise",
        "/team",
        "/enterprise/startups",
        "https://education.github.com",
        "/solutions/ci-cd/",
        "https://resources.github.com/devops/",
        "https://resources.github.com/devops/fundamentals/devsecops/",
        "/customer-stories",
        "https://resources.github.com/",
        "/sponsors",
        "/readme",
        "/topics",
        "/trending",
        "/collections",
        "/pricing",
        "",
        "",
        "",
        "",
        "/login?return_to=https%3A%2F%2Fgithub.com%2Ffeatures%2Fcopilot%2F",
        "/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2Ffeatures%2Fcopilot&source=header",
        "/features/",
        "/features/actions",
        "/features/packages",
        "/features/security",
        "/features/codespaces",
        "/features/copilot",
        "/features/code-review",
        "/features/code-search",
        "/features/issues",
        "/features/discussions",
        "/login?return_to=%2Fgithub-copilot%2Fsignup",
        "#pricing",
        "https://docs.github.com/copilot",
        "/login?return_to=%2Fgithub-copilot%2Fsignup",
        "/login?return_to=%2Fgithub-copilot%2Fbusiness_signup",
        "/enterprise/contact?ref_cta=Contact+Sales&ref_loc=pricing&ref_page=%2Ffeatures%2Fcopilot&scid=&utm_campaign=2023q2-site-ww-CopilotForBusiness&utm_content=Copilot&utm_medium=referral&utm_source=github",
        "https://docs.github.com/en/site-policy/github-terms/github-terms-for-additional-products-and-features#github-copilot",
        "https://marketplace.visualstudio.com/items?itemName=GitHub.copilotvs",
        "https://docs.github.com/copilot/getting-started-with-github-copilot/getting-started-with-github-copilot-in-neovim?platform=linux",
        "https://marketplace.visualstudio.com/items?itemName=GitHub.copilot",
        "https://plugins.jetbrains.com/plugin/17718-github-copilot",
        "https://github.blog/2022-09-07-research-quantifying-github-copilots-impact-on-developer-productivity-and-happiness/",
        "https://github.com/github-community/community/discussions/categories/copilot",
        "mailto:copilot-safety@github.com",
        "https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement",
        "https://docs.github.com/en/site-policy/privacy-policies/",
        "https://github.com/customer-terms/github-copilot-product-specific-terms",
        "https://github.blog/2021-06-30-github-copilot-research-recitation/",
        "https://docs.github.com/copilot/configuring-github-copilot/configuring-github-copilot-settings-on-githubcom",
        "https://github.blog/2022-11-01-preview-referencing-public-code-in-github-copilot",
        "https://github.com/github-community/community/discussions/categories/copilot",
        "mailto:copilot-safety@github.com",
        "https://docs.github.com/en/site-policy/acceptable-use-policies/github-acceptable-use-policies",
        "https://docs.github.com/en/site-policy/acceptable-use-policies/github-acceptable-use-policies",
        "#how-is-the-transmitted-code-snippets-data-protected",
        "https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement",
        "https://github.com/settings/copilot",
        "https://support.github.com/request",
        "https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement",
        "/",
        "https://resources.github.com/newsletter/",
        "/features",
        "/security",
        "/team",
        "/enterprise",
        "/customer-stories?type=enterprise",
        "/readme",
        "/pricing",
        "https://resources.github.com",
        "https://github.com/github/roadmap",
        "https://docs.github.com",
        "https://partner.github.com",
        "https://www.electronjs.org",
        "https://desktop.github.com/",
        "https://docs.github.com",
        "https://github.community",
        "https://services.github.com/",
        "/premium-support",
        "https://skills.github.com/",
        "https://www.githubstatus.com/",
        "https://support.github.com?tags=dotcom-footer",
        "https://github.com/about",
        "https://github.blog",
        "/about/careers",
        "/about/press",
        "/about/diversity",
        "https://socialimpact.github.com/",
        "https://shop.github.com",
        "https://twitter.com/github",
        "https://www.facebook.com/GitHub",
        "https://www.linkedin.com/company/github",
        "https://www.youtube.com/github",
        "https://www.twitch.tv/github",
        "https://www.tiktok.com/@github",
        "https://github.com/github",
        "https://docs.github.com/site-policy/github-terms/github-terms-of-service",
        "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement",
        "https://github.com/github/site-policy/pull/582",
        "/sitemap",
        "/git-guides",
        "",
        ""
    ]
}