{
    "title": "ECMAScript\u00ae 2022 Language\u00a0Specification",
    "body": "\n\nToggle shortcuts help?\nToggle \"can call user code\" annotationsu\nNavigate to/from multipagem\nJump to search box/\n\nMenu\n\nPinsTable of ContentsIntroduction1 Scope\u25e22 Conformance2.1 Example Normative Optional Clause Heading2.2 Example Legacy Clause Heading2.3 Example Legacy Normative Optional Clause Heading3 Normative References\u25e24 Overview4.1 Web Scripting4.2 Hosts and Implementations\u25e24.3 ECMAScript Overview4.3.1 Objects4.3.2 The Strict Variant of ECMAScript\u25e24.4 Terms and Definitions4.4.1 implementation-approximated4.4.2 implementation-defined4.4.3 host-defined4.4.4 type4.4.5 primitive value4.4.6 object4.4.7 constructor4.4.8 prototype4.4.9 ordinary object4.4.10 exotic object4.4.11 standard object4.4.12 built-in object4.4.13 undefined value4.4.14 Undefined type4.4.15 null value4.4.16 Null type4.4.17 Boolean value4.4.18 Boolean type4.4.19 Boolean object4.4.20 String value4.4.21 String type4.4.22 String object4.4.23 Number value4.4.24 Number type4.4.25 Number object4.4.26 Infinity4.4.27 NaN4.4.28 BigInt value4.4.29 BigInt type4.4.30 BigInt object4.4.31 Symbol value4.4.32 Symbol type4.4.33 Symbol object4.4.34 function4.4.35 built-in function4.4.36 property4.4.37 method4.4.38 built-in method4.4.39 attribute4.4.40 own property4.4.41 inherited property4.5 Organization of This Specification\u25e25 Notational Conventions\u25e25.1 Syntactic and Lexical Grammars5.1.1 Context-Free Grammars5.1.2 The Lexical and RegExp Grammars5.1.3 The Numeric String Grammar5.1.4 The Syntactic Grammar5.1.5 Grammar Notation\u25e25.2 Algorithm Conventions5.2.1 Abstract Operations5.2.2 Syntax-Directed Operations\u25e25.2.3 Runtime Semantics5.2.3.1 Completion ( completionRecord )5.2.3.2 Throw an Exception5.2.3.3 ReturnIfAbrupt5.2.3.4 ReturnIfAbrupt Shorthands5.2.3.5 Implicit Normal Completion5.2.4 Static Semantics5.2.5 Mathematical Operations5.2.6 Value Notation\u25e26 ECMAScript Data Types and Values\u25e26.1 ECMAScript Language Types6.1.1 The Undefined Type6.1.2 The Null Type6.1.3 The Boolean Type\u25e26.1.4 The String Type6.1.4.1 StringIndexOf ( string, searchValue, fromIndex )\u25e26.1.5 The Symbol Type6.1.5.1 Well-Known Symbols\u25e26.1.6 Numeric Types\u25e26.1.6.1 The Number Type6.1.6.1.1 Number::unaryMinus ( x )6.1.6.1.2 Number::bitwiseNOT ( x )6.1.6.1.3 Number::exponentiate ( base, exponent )6.1.6.1.4 Number::multiply ( x, y )6.1.6.1.5 Number::divide ( x, y )6.1.6.1.6 Number::remainder ( n, d )6.1.6.1.7 Number::add ( x, y )6.1.6.1.8 Number::subtract ( x, y )6.1.6.1.9 Number::leftShift ( x, y )6.1.6.1.10 Number::signedRightShift ( x, y )6.1.6.1.11 Number::unsignedRightShift ( x, y )6.1.6.1.12 Number::lessThan ( x, y )6.1.6.1.13 Number::equal ( x, y )6.1.6.1.14 Number::sameValue ( x, y )6.1.6.1.15 Number::sameValueZero ( x, y )6.1.6.1.16 NumberBitwiseOp ( op, x, y )6.1.6.1.17 Number::bitwiseAND ( x, y )6.1.6.1.18 Number::bitwiseXOR ( x, y )6.1.6.1.19 Number::bitwiseOR ( x, y )6.1.6.1.20 Number::toString ( x )\u25e26.1.6.2 The BigInt Type6.1.6.2.1 BigInt::unaryMinus ( x )6.1.6.2.2 BigInt::bitwiseNOT ( x )6.1.6.2.3 BigInt::exponentiate ( base, exponent )6.1.6.2.4 BigInt::multiply ( x, y )6.1.6.2.5 BigInt::divide ( x, y )6.1.6.2.6 BigInt::remainder ( n, d )6.1.6.2.7 BigInt::add ( x, y )6.1.6.2.8 BigInt::subtract ( x, y )6.1.6.2.9 BigInt::leftShift ( x, y )6.1.6.2.10 BigInt::signedRightShift ( x, y )6.1.6.2.11 BigInt::unsignedRightShift ( x, y )6.1.6.2.12 BigInt::lessThan ( x, y )6.1.6.2.13 BigInt::equal ( x, y )6.1.6.2.14 BigInt::sameValue ( x, y )6.1.6.2.15 BigInt::sameValueZero ( x, y )6.1.6.2.16 BinaryAnd ( x, y )6.1.6.2.17 BinaryOr ( x, y )6.1.6.2.18 BinaryXor ( x, y )6.1.6.2.19 BigIntBitwiseOp ( op, x, y )6.1.6.2.20 BigInt::bitwiseAND ( x, y )6.1.6.2.21 BigInt::bitwiseXOR ( x, y )6.1.6.2.22 BigInt::bitwiseOR ( x, y )6.1.6.2.23 BigInt::toString ( x )\u25e26.1.7 The Object Type6.1.7.1 Property Attributes6.1.7.2 Object Internal Methods and Internal Slots6.1.7.3 Invariants of the Essential Internal Methods6.1.7.4 Well-Known Intrinsic Objects\u25e26.2 ECMAScript Specification Types6.2.1 The List and Record Specification Types6.2.2 The Set and Relation Specification Types\u25e26.2.3 The Completion Record Specification Type6.2.3.1 Await6.2.3.2 NormalCompletion ( value )6.2.3.3 ThrowCompletion ( value )6.2.3.4 UpdateEmpty ( completionRecord, value )\u25e26.2.4 The Reference Record Specification Type6.2.4.1 IsPropertyReference ( V )6.2.4.2 IsUnresolvableReference ( V )6.2.4.3 IsSuperReference ( V )6.2.4.4 IsPrivateReference ( V )6.2.4.5 GetValue ( V )6.2.4.6 PutValue ( V, W )6.2.4.7 GetThisValue ( V )6.2.4.8 InitializeReferencedBinding ( V, W )6.2.4.9 MakePrivateReference ( baseValue, privateIdentifier )\u25e26.2.5 The Property Descriptor Specification Type6.2.5.1 IsAccessorDescriptor ( Desc )6.2.5.2 IsDataDescriptor ( Desc )6.2.5.3 IsGenericDescriptor ( Desc )6.2.5.4 FromPropertyDescriptor ( Desc )6.2.5.5 ToPropertyDescriptor ( Obj )6.2.5.6 CompletePropertyDescriptor ( Desc )6.2.6 The Environment Record Specification Type6.2.7 The Abstract Closure Specification Type\u25e26.2.8 Data Blocks6.2.8.1 CreateByteDataBlock ( size )6.2.8.2 CreateSharedByteDataBlock ( size )6.2.8.3 CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )6.2.9 The PrivateElement Specification Type6.2.10 The ClassFieldDefinition Record Specification Type6.2.11 Private Names6.2.12 The ClassStaticBlockDefinition Record Specification Type\u25e27 Abstract Operations\u25e27.1 Type Conversion\u25e27.1.1 ToPrimitive ( input [ , preferredType ] )7.1.1.1 OrdinaryToPrimitive ( O, hint )7.1.2 ToBoolean ( argument )7.1.3 ToNumeric ( value )\u25e27.1.4 ToNumber ( argument )\u25e27.1.4.1 ToNumber Applied to the String Type7.1.4.1.1 StringToNumber ( str )7.1.4.1.2 RS: StringNumericValue7.1.4.1.3 RoundMVResult ( n )7.1.5 ToIntegerOrInfinity ( argument )7.1.6 ToInt32 ( argument )7.1.7 ToUint32 ( argument )7.1.8 ToInt16 ( argument )7.1.9 ToUint16 ( argument )7.1.10 ToInt8 ( argument )7.1.11 ToUint8 ( argument )7.1.12 ToUint8Clamp ( argument )7.1.13 ToBigInt ( argument )\u25e27.1.14 StringToBigInt ( str )7.1.14.1 StringIntegerLiteral Grammar7.1.14.2 RS: MV7.1.15 ToBigInt64 ( argument )7.1.16 ToBigUint64 ( argument )7.1.17 ToString ( argument )7.1.18 ToObject ( argument )7.1.19 ToPropertyKey ( argument )7.1.20 ToLength ( argument )7.1.21 CanonicalNumericIndexString ( argument )7.1.22 ToIndex ( value )\u25e27.2 Testing and Comparison Operations7.2.1 RequireObjectCoercible ( argument )7.2.2 IsArray ( argument )7.2.3 IsCallable ( argument )7.2.4 IsConstructor ( argument )7.2.5 IsExtensible ( O )7.2.6 IsIntegralNumber ( argument )7.2.7 IsPropertyKey ( argument )7.2.8 IsRegExp ( argument )7.2.9 IsStringPrefix ( p, q )7.2.10 SS: IsStringWellFormedUnicode ( string )7.2.11 SameValue ( x, y )7.2.12 SameValueZero ( x, y )7.2.13 SameValueNonNumeric ( x, y )7.2.14 IsLessThan ( x, y, LeftFirst )7.2.15 IsLooselyEqual ( x, y )7.2.16 IsStrictlyEqual ( x, y )\u25e27.3 Operations on Objects7.3.1 MakeBasicObject ( internalSlotsList )7.3.2 Get ( O, P )7.3.3 GetV ( V, P )7.3.4 Set ( O, P, V, Throw )7.3.5 CreateDataProperty ( O, P, V )7.3.6 CreateMethodProperty ( O, P, V )7.3.7 CreateDataPropertyOrThrow ( O, P, V )7.3.8 CreateNonEnumerableDataPropertyOrThrow ( O, P, V )7.3.9 DefinePropertyOrThrow ( O, P, desc )7.3.10 DeletePropertyOrThrow ( O, P )7.3.11 GetMethod ( V, P )7.3.12 HasProperty ( O, P )7.3.13 HasOwnProperty ( O, P )7.3.14 Call ( F, V [ , argumentsList ] )7.3.15 Construct ( F [ , argumentsList [ , newTarget ] ] )7.3.16 SetIntegrityLevel ( O, level )7.3.17 TestIntegrityLevel ( O, level )7.3.18 CreateArrayFromList ( elements )7.3.19 LengthOfArrayLike ( obj )7.3.20 CreateListFromArrayLike ( obj [ , elementTypes ] )7.3.21 Invoke ( V, P [ , argumentsList ] )7.3.22 OrdinaryHasInstance ( C, O )7.3.23 SpeciesConstructor ( O, defaultConstructor )7.3.24 EnumerableOwnPropertyNames ( O, kind )7.3.25 GetFunctionRealm ( obj )7.3.26 CopyDataProperties ( target, source, excludedItems )7.3.27 PrivateElementFind ( O, P )7.3.28 PrivateFieldAdd ( O, P, value )7.3.29 PrivateMethodOrAccessorAdd ( O, method )7.3.30 PrivateGet ( O, P )7.3.31 PrivateSet ( O, P, value )7.3.32 DefineField ( receiver, fieldRecord )7.3.33 InitializeInstanceElements ( O, constructor )\u25e27.4 Operations on Iterator Objects7.4.1 Iterator Records7.4.2 GetIterator ( obj [ , hint [ , method ] ] )7.4.3 IteratorNext ( iteratorRecord [ , value ] )7.4.4 IteratorComplete ( iterResult )7.4.5 IteratorValue ( iterResult )7.4.6 IteratorStep ( iteratorRecord )7.4.7 IteratorClose ( iteratorRecord, completion )7.4.8 IfAbruptCloseIterator ( value, iteratorRecord )7.4.9 AsyncIteratorClose ( iteratorRecord, completion )7.4.10 CreateIterResultObject ( value, done )7.4.11 CreateListIteratorRecord ( list )7.4.12 IterableToList ( items [ , method ] )\u25e28 Syntax-Directed Operations\u25e28.1 Scope Analysis8.1.1 SS: BoundNames8.1.2 SS: DeclarationPart8.1.3 SS: IsConstantDeclaration8.1.4 SS: LexicallyDeclaredNames8.1.5 SS: LexicallyScopedDeclarations8.1.6 SS: VarDeclaredNames8.1.7 SS: VarScopedDeclarations8.1.8 SS: TopLevelLexicallyDeclaredNames8.1.9 SS: TopLevelLexicallyScopedDeclarations8.1.10 SS: TopLevelVarDeclaredNames8.1.11 SS: TopLevelVarScopedDeclarations\u25e28.2 Labels8.2.1 SS: ContainsDuplicateLabels8.2.2 SS: ContainsUndefinedBreakTarget8.2.3 SS: ContainsUndefinedContinueTarget\u25e28.3 Function Name Inference8.3.1 SS: HasName8.3.2 SS: IsFunctionDefinition8.3.3 SS: IsAnonymousFunctionDefinition ( expr )8.3.4 SS: IsIdentifierRef8.3.5 RS: NamedEvaluation\u25e28.4 Contains8.4.1 SS: Contains8.4.2 SS: ComputedPropertyContains\u25e28.5 Miscellaneous8.5.1 RS: InstantiateFunctionObject\u25e28.5.2 RS: BindingInitialization8.5.2.1 InitializeBoundName ( name, value, environment )8.5.3 RS: IteratorBindingInitialization8.5.4 SS: AssignmentTargetType8.5.5 SS: PropName\u25e29 Executable Code and Execution Contexts\u25e29.1 Environment Records\u25e29.1.1 The Environment Record Type Hierarchy\u25e29.1.1.1 Declarative Environment Records9.1.1.1.1 HasBinding ( N )9.1.1.1.2 CreateMutableBinding ( N, D )9.1.1.1.3 CreateImmutableBinding ( N, S )9.1.1.1.4 InitializeBinding ( N, V )9.1.1.1.5 SetMutableBinding ( N, V, S )9.1.1.1.6 GetBindingValue ( N, S )9.1.1.1.7 DeleteBinding ( N )9.1.1.1.8 HasThisBinding ( )9.1.1.1.9 HasSuperBinding ( )9.1.1.1.10 WithBaseObject ( )\u25e29.1.1.2 Object Environment Records9.1.1.2.1 HasBinding ( N )9.1.1.2.2 CreateMutableBinding ( N, D )9.1.1.2.3 CreateImmutableBinding ( N, S )9.1.1.2.4 InitializeBinding ( N, V )9.1.1.2.5 SetMutableBinding ( N, V, S )9.1.1.2.6 GetBindingValue ( N, S )9.1.1.2.7 DeleteBinding ( N )9.1.1.2.8 HasThisBinding ( )9.1.1.2.9 HasSuperBinding ( )9.1.1.2.10 WithBaseObject ( )\u25e29.1.1.3 Function Environment Records9.1.1.3.1 BindThisValue ( V )9.1.1.3.2 HasThisBinding ( )9.1.1.3.3 HasSuperBinding ( )9.1.1.3.4 GetThisBinding ( )9.1.1.3.5 GetSuperBase ( )\u25e29.1.1.4 Global Environment Records9.1.1.4.1 HasBinding ( N )9.1.1.4.2 CreateMutableBinding ( N, D )9.1.1.4.3 CreateImmutableBinding ( N, S )9.1.1.4.4 InitializeBinding ( N, V )9.1.1.4.5 SetMutableBinding ( N, V, S )9.1.1.4.6 GetBindingValue ( N, S )9.1.1.4.7 DeleteBinding ( N )9.1.1.4.8 HasThisBinding ( )9.1.1.4.9 HasSuperBinding ( )9.1.1.4.10 WithBaseObject ( )9.1.1.4.11 GetThisBinding ( )9.1.1.4.12 HasVarDeclaration ( N )9.1.1.4.13 HasLexicalDeclaration ( N )9.1.1.4.14 HasRestrictedGlobalProperty ( N )9.1.1.4.15 CanDeclareGlobalVar ( N )9.1.1.4.16 CanDeclareGlobalFunction ( N )9.1.1.4.17 CreateGlobalVarBinding ( N, D )9.1.1.4.18 CreateGlobalFunctionBinding ( N, V, D )\u25e29.1.1.5 Module Environment Records9.1.1.5.1 GetBindingValue ( N, S )9.1.1.5.2 DeleteBinding ( N )9.1.1.5.3 HasThisBinding ( )9.1.1.5.4 GetThisBinding ( )9.1.1.5.5 CreateImportBinding ( N, M, N2 )\u25e29.1.2 Environment Record Operations9.1.2.1 GetIdentifierReference ( env, name, strict )9.1.2.2 NewDeclarativeEnvironment ( E )9.1.2.3 NewObjectEnvironment ( O, W, E )9.1.2.4 NewFunctionEnvironment ( F, newTarget )9.1.2.5 NewGlobalEnvironment ( G, thisValue )9.1.2.6 NewModuleEnvironment ( E )\u25e29.2 PrivateEnvironment Records\u25e29.2.1 PrivateEnvironment Record Operations9.2.1.1 NewPrivateEnvironment ( outerPrivEnv )9.2.1.2 ResolvePrivateIdentifier ( privEnv, identifier )\u25e29.3 Realms9.3.1 CreateRealm ( )9.3.2 CreateIntrinsics ( realmRec )9.3.3 SetRealmGlobalObject ( realmRec, globalObj, thisValue )9.3.4 SetDefaultGlobalBindings ( realmRec )\u25e29.4 Execution Contexts9.4.1 GetActiveScriptOrModule ( )9.4.2 ResolveBinding ( name [ , env ] )9.4.3 GetThisEnvironment ( )9.4.4 ResolveThisBinding ( )9.4.5 GetNewTarget ( )9.4.6 GetGlobalObject ( )\u25e29.5 Jobs and Host Operations to Enqueue Jobs9.5.1 JobCallback Records9.5.2 HostMakeJobCallback ( callback )9.5.3 HostCallJobCallback ( jobCallback, V, argumentsList )9.5.4 HostEnqueuePromiseJob ( job, realm )9.6 InitializeHostDefinedRealm ( )\u25e29.7 Agents9.7.1 AgentSignifier ( )9.7.2 AgentCanSuspend ( )9.8 Agent Clusters9.9 Forward Progress\u25e29.10 Processing Model of WeakRef and FinalizationRegistry Objects9.10.1 Objectives9.10.2 Liveness9.10.3 Execution\u25e29.10.4 Host Hooks9.10.4.1 HostEnqueueFinalizationRegistryCleanupJob ( finalizationRegistry )9.11 ClearKeptObjects ( )9.12 AddToKeptObjects ( object )9.13 CleanupFinalizationRegistry ( finalizationRegistry )\u25e210 Ordinary and Exotic Objects Behaviours\u25e210.1 Ordinary Object Internal Methods and Internal Slots\u25e210.1.1 [[GetPrototypeOf]] ( )10.1.1.1 OrdinaryGetPrototypeOf ( O )\u25e210.1.2 [[SetPrototypeOf]] ( V )10.1.2.1 OrdinarySetPrototypeOf ( O, V )\u25e210.1.3 [[IsExtensible]] ( )10.1.3.1 OrdinaryIsExtensible ( O )\u25e210.1.4 [[PreventExtensions]] ( )10.1.4.1 OrdinaryPreventExtensions ( O )\u25e210.1.5 [[GetOwnProperty]] ( P )10.1.5.1 OrdinaryGetOwnProperty ( O, P )\u25e210.1.6 [[DefineOwnProperty]] ( P, Desc )10.1.6.1 OrdinaryDefineOwnProperty ( O, P, Desc )10.1.6.2 IsCompatiblePropertyDescriptor ( Extensible, Desc, Current )10.1.6.3 ValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )\u25e210.1.7 [[HasProperty]] ( P )10.1.7.1 OrdinaryHasProperty ( O, P )\u25e210.1.8 [[Get]] ( P, Receiver )10.1.8.1 OrdinaryGet ( O, P, Receiver )\u25e210.1.9 [[Set]] ( P, V, Receiver )10.1.9.1 OrdinarySet ( O, P, V, Receiver )10.1.9.2 OrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\u25e210.1.10 [[Delete]] ( P )10.1.10.1 OrdinaryDelete ( O, P )\u25e210.1.11 [[OwnPropertyKeys]] ( )10.1.11.1 OrdinaryOwnPropertyKeys ( O )10.1.12 OrdinaryObjectCreate ( proto [ , additionalInternalSlotsList ] )10.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )10.1.14 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )10.1.15 RequireInternalSlot ( O, internalSlot )\u25e210.2 ECMAScript Function Objects\u25e210.2.1 [[Call]] ( thisArgument, argumentsList )10.2.1.1 PrepareForOrdinaryCall ( F, newTarget )10.2.1.2 OrdinaryCallBindThis ( F, calleeContext, thisArgument )10.2.1.3 RS: EvaluateBody10.2.1.4 OrdinaryCallEvaluateBody ( F, argumentsList )10.2.2 [[Construct]] ( argumentsList, newTarget )10.2.3 OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, env, privateEnv )\u25e210.2.4 AddRestrictedFunctionProperties ( F, realm )10.2.4.1 %ThrowTypeError% ( )10.2.5 MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )10.2.6 MakeClassConstructor ( F )10.2.7 MakeMethod ( F, homeObject )10.2.8 DefineMethodProperty ( homeObject, key, closure, enumerable )10.2.9 SetFunctionName ( F, name [ , prefix ] )10.2.10 SetFunctionLength ( F, length )10.2.11 FunctionDeclarationInstantiation ( func, argumentsList )\u25e210.3 Built-in Function Objects10.3.1 [[Call]] ( thisArgument, argumentsList )10.3.2 [[Construct]] ( argumentsList, newTarget )10.3.3 CreateBuiltinFunction ( behaviour, length, name, additionalInternalSlotsList [ , realm [ , prototype [ , prefix ] ] ] )\u25e210.4 Built-in Exotic Object Internal Methods and Slots\u25e210.4.1 Bound Function Exotic Objects10.4.1.1 [[Call]] ( thisArgument, argumentsList )10.4.1.2 [[Construct]] ( argumentsList, newTarget )10.4.1.3 BoundFunctionCreate ( targetFunction, boundThis, boundArgs )\u25e210.4.2 Array Exotic Objects10.4.2.1 [[DefineOwnProperty]] ( P, Desc )10.4.2.2 ArrayCreate ( length [ , proto ] )10.4.2.3 ArraySpeciesCreate ( originalArray, length )10.4.2.4 ArraySetLength ( A, Desc )\u25e210.4.3 String Exotic Objects10.4.3.1 [[GetOwnProperty]] ( P )10.4.3.2 [[DefineOwnProperty]] ( P, Desc )10.4.3.3 [[OwnPropertyKeys]] ( )10.4.3.4 StringCreate ( value, prototype )10.4.3.5 StringGetOwnProperty ( S, P )\u25e210.4.4 Arguments Exotic Objects10.4.4.1 [[GetOwnProperty]] ( P )10.4.4.2 [[DefineOwnProperty]] ( P, Desc )10.4.4.3 [[Get]] ( P, Receiver )10.4.4.4 [[Set]] ( P, V, Receiver )10.4.4.5 [[Delete]] ( P )10.4.4.6 CreateUnmappedArgumentsObject ( argumentsList )\u25e210.4.4.7 CreateMappedArgumentsObject ( func, formals, argumentsList, env )10.4.4.7.1 MakeArgGetter ( name, env )10.4.4.7.2 MakeArgSetter ( name, env )\u25e210.4.5 Integer-Indexed Exotic Objects10.4.5.1 [[GetOwnProperty]] ( P )10.4.5.2 [[HasProperty]] ( P )10.4.5.3 [[DefineOwnProperty]] ( P, Desc )10.4.5.4 [[Get]] ( P, Receiver )10.4.5.5 [[Set]] ( P, V, Receiver )10.4.5.6 [[Delete]] ( P )10.4.5.7 [[OwnPropertyKeys]] ( )10.4.5.8 IntegerIndexedObjectCreate ( prototype )10.4.5.9 IsValidIntegerIndex ( O, index )10.4.5.10 IntegerIndexedElementGet ( O, index )10.4.5.11 IntegerIndexedElementSet ( O, index, value )\u25e210.4.6 Module Namespace Exotic Objects10.4.6.1 [[GetPrototypeOf]] ( )10.4.6.2 [[SetPrototypeOf]] ( V )10.4.6.3 [[IsExtensible]] ( )10.4.6.4 [[PreventExtensions]] ( )10.4.6.5 [[GetOwnProperty]] ( P )10.4.6.6 [[DefineOwnProperty]] ( P, Desc )10.4.6.7 [[HasProperty]] ( P )10.4.6.8 [[Get]] ( P, Receiver )10.4.6.9 [[Set]] ( P, V, Receiver )10.4.6.10 [[Delete]] ( P )10.4.6.11 [[OwnPropertyKeys]] ( )10.4.6.12 ModuleNamespaceCreate ( module, exports )\u25e210.4.7 Immutable Prototype Exotic Objects10.4.7.1 [[SetPrototypeOf]] ( V )10.4.7.2 SetImmutablePrototype ( O, V )\u25e210.5 Proxy Object Internal Methods and Internal Slots10.5.1 [[GetPrototypeOf]] ( )10.5.2 [[SetPrototypeOf]] ( V )10.5.3 [[IsExtensible]] ( )10.5.4 [[PreventExtensions]] ( )10.5.5 [[GetOwnProperty]] ( P )10.5.6 [[DefineOwnProperty]] ( P, Desc )10.5.7 [[HasProperty]] ( P )10.5.8 [[Get]] ( P, Receiver )10.5.9 [[Set]] ( P, V, Receiver )10.5.10 [[Delete]] ( P )10.5.11 [[OwnPropertyKeys]] ( )10.5.12 [[Call]] ( thisArgument, argumentsList )10.5.13 [[Construct]] ( argumentsList, newTarget )10.5.14 ProxyCreate ( target, handler )\u25e211 ECMAScript Language: Source Text\u25e211.1 Source Text11.1.1 SS: UTF16EncodeCodePoint ( cp )11.1.2 SS: CodePointsToString ( text )11.1.3 SS: UTF16SurrogatePairToCodePoint ( lead, trail )11.1.4 SS: CodePointAt ( string, position )11.1.5 SS: StringToCodePoints ( string )11.1.6 SS: ParseText ( sourceText, goalSymbol )\u25e211.2 Types of Source Code11.2.1 Directive Prologues and the Use Strict Directive11.2.2 Strict Mode Code11.2.3 Non-ECMAScript Functions\u25e212 ECMAScript Language: Lexical Grammar12.1 Unicode Format-Control Characters12.2 White Space12.3 Line Terminators12.4 Comments12.5 Tokens\u25e212.6 Names and Keywords\u25e212.6.1 Identifier Names12.6.1.1 SS: Early Errors12.6.1.2 SS: IdentifierCodePoints12.6.1.3 SS: IdentifierCodePoint12.6.2 Keywords and Reserved Words12.7 Punctuators\u25e212.8 Literals12.8.1 Null Literals12.8.2 Boolean Literals\u25e212.8.3 Numeric Literals12.8.3.1 SS: Early Errors12.8.3.2 SS: MV12.8.3.3 SS: NumericValue\u25e212.8.4 String Literals12.8.4.1 SS: Early Errors12.8.4.2 SS: SV12.8.4.3 SS: MV\u25e212.8.5 Regular Expression Literals12.8.5.1 SS: BodyText12.8.5.2 SS: FlagText\u25e212.8.6 Template Literal Lexical Components12.8.6.1 SS: TV12.8.6.2 SS: TRV\u25e212.9 Automatic Semicolon Insertion12.9.1 Rules of Automatic Semicolon Insertion12.9.2 Examples of Automatic Semicolon Insertion\u25e212.9.3 Interesting Cases of Automatic Semicolon Insertion12.9.3.1 Interesting Cases of Automatic Semicolon Insertion in Statement Lists\u25e212.9.3.2 Cases of Automatic Semicolon Insertion and \u201c[no LineTerminator here]\u201d12.9.3.2.1 List of Grammar Productions with Optional Operands and \u201c[no LineTerminator here]\u201d\u25e213 ECMAScript Language: Expressions\u25e213.1 Identifiers13.1.1 SS: Early Errors13.1.2 SS: StringValue13.1.3 RS: Evaluation\u25e213.2 Primary Expression\u25e213.2.1 The this Keyword13.2.1.1 RS: Evaluation13.2.2 Identifier Reference\u25e213.2.3 Literals13.2.3.1 RS: Evaluation\u25e213.2.4 Array Initializer13.2.4.1 RS: ArrayAccumulation13.2.4.2 RS: Evaluation\u25e213.2.5 Object Initializer13.2.5.1 SS: Early Errors13.2.5.2 SS: IsComputedPropertyKey13.2.5.3 SS: PropertyNameList13.2.5.4 RS: Evaluation13.2.5.5 RS: PropertyDefinitionEvaluation13.2.6 Function Defining Expressions\u25e213.2.7 Regular Expression Literals13.2.7.1 SS: Early Errors13.2.7.2 SS: IsValidRegularExpressionLiteral ( literal )13.2.7.3 RS: Evaluation\u25e213.2.8 Template Literals13.2.8.1 SS: Early Errors13.2.8.2 SS: TemplateStrings13.2.8.3 GetTemplateObject ( templateLiteral )13.2.8.4 RS: SubstitutionEvaluation13.2.8.5 RS: Evaluation\u25e213.2.9 The Grouping Operator13.2.9.1 SS: Early Errors13.2.9.2 RS: Evaluation\u25e213.3 Left-Hand-Side Expressions\u25e213.3.1 Static Semantics13.3.1.1 SS: Early Errors\u25e213.3.2 Property Accessors13.3.2.1 RS: Evaluation13.3.3 EvaluatePropertyAccessWithExpressionKey ( baseValue, expression, strict )13.3.4 EvaluatePropertyAccessWithIdentifierKey ( baseValue, identifierName, strict )\u25e213.3.5 The new Operator\u25e213.3.5.1 RS: Evaluation13.3.5.1.1 EvaluateNew ( constructExpr, arguments )\u25e213.3.6 Function Calls13.3.6.1 RS: Evaluation13.3.6.2 EvaluateCall ( func, ref, arguments, tailPosition )\u25e213.3.7 The super Keyword13.3.7.1 RS: Evaluation13.3.7.2 GetSuperConstructor ( )13.3.7.3 MakeSuperPropertyReference ( actualThis, propertyKey, strict )\u25e213.3.8 Argument Lists13.3.8.1 RS: ArgumentListEvaluation\u25e213.3.9 Optional Chains13.3.9.1 RS: Evaluation13.3.9.2 RS: ChainEvaluation\u25e213.3.10 Import Calls13.3.10.1 RS: Evaluation\u25e213.3.11 Tagged Templates13.3.11.1 RS: Evaluation\u25e213.3.12 Meta Properties\u25e213.3.12.1 RS: Evaluation13.3.12.1.1 HostGetImportMetaProperties ( moduleRecord )13.3.12.1.2 HostFinalizeImportMeta ( importMeta, moduleRecord )\u25e213.4 Update Expressions13.4.1 SS: Early Errors\u25e213.4.2 Postfix Increment Operator13.4.2.1 RS: Evaluation\u25e213.4.3 Postfix Decrement Operator13.4.3.1 RS: Evaluation\u25e213.4.4 Prefix Increment Operator13.4.4.1 RS: Evaluation\u25e213.4.5 Prefix Decrement Operator13.4.5.1 RS: Evaluation\u25e213.5 Unary Operators\u25e213.5.1 The delete Operator13.5.1.1 SS: Early Errors13.5.1.2 RS: Evaluation\u25e213.5.2 The void Operator13.5.2.1 RS: Evaluation\u25e213.5.3 The typeof Operator13.5.3.1 RS: Evaluation\u25e213.5.4 Unary + Operator13.5.4.1 RS: Evaluation\u25e213.5.5 Unary - Operator13.5.5.1 RS: Evaluation\u25e213.5.6 Bitwise NOT Operator ( ~ )13.5.6.1 RS: Evaluation\u25e213.5.7 Logical NOT Operator ( ! )13.5.7.1 RS: Evaluation\u25e213.6 Exponentiation Operator13.6.1 RS: Evaluation\u25e213.7 Multiplicative Operators13.7.1 RS: Evaluation\u25e213.8 Additive Operators\u25e213.8.1 The Addition Operator ( + )13.8.1.1 RS: Evaluation\u25e213.8.2 The Subtraction Operator ( - )13.8.2.1 RS: Evaluation\u25e213.9 Bitwise Shift Operators\u25e213.9.1 The Left Shift Operator ( << )13.9.1.1 RS: Evaluation\u25e213.9.2 The Signed Right Shift Operator ( >> )13.9.2.1 RS: Evaluation\u25e213.9.3 The Unsigned Right Shift Operator ( >>> )13.9.3.1 RS: Evaluation\u25e213.10 Relational Operators13.10.1 RS: Evaluation13.10.2 InstanceofOperator ( V, target )\u25e213.11 Equality Operators13.11.1 RS: Evaluation\u25e213.12 Binary Bitwise Operators13.12.1 RS: Evaluation\u25e213.13 Binary Logical Operators13.13.1 RS: Evaluation\u25e213.14 Conditional Operator ( ? : )13.14.1 RS: Evaluation\u25e213.15 Assignment Operators13.15.1 SS: Early Errors13.15.2 RS: Evaluation13.15.3 ApplyStringOrNumericBinaryOperator ( lval, opText, rval )13.15.4 EvaluateStringOrNumericBinaryExpression ( leftOperand, opText, rightOperand )\u25e213.15.5 Destructuring Assignment13.15.5.1 SS: Early Errors13.15.5.2 RS: DestructuringAssignmentEvaluation13.15.5.3 RS: PropertyDestructuringAssignmentEvaluation13.15.5.4 RS: RestDestructuringAssignmentEvaluation13.15.5.5 RS: IteratorDestructuringAssignmentEvaluation13.15.5.6 RS: KeyedDestructuringAssignmentEvaluation\u25e213.16 Comma Operator ( , )13.16.1 RS: Evaluation\u25e214 ECMAScript Language: Statements and Declarations\u25e214.1 Statement Semantics14.1.1 RS: Evaluation\u25e214.2 Block14.2.1 SS: Early Errors14.2.2 RS: Evaluation14.2.3 BlockDeclarationInstantiation ( code, env )\u25e214.3 Declarations and the Variable Statement\u25e214.3.1 Let and Const Declarations14.3.1.1 SS: Early Errors14.3.1.2 RS: Evaluation\u25e214.3.2 Variable Statement14.3.2.1 RS: Evaluation\u25e214.3.3 Destructuring Binding Patterns14.3.3.1 RS: PropertyBindingInitialization14.3.3.2 RS: RestBindingInitialization14.3.3.3 RS: KeyedBindingInitialization\u25e214.4 Empty Statement14.4.1 RS: Evaluation\u25e214.5 Expression Statement14.5.1 RS: Evaluation\u25e214.6 The if Statement14.6.1 SS: Early Errors14.6.2 RS: Evaluation\u25e214.7 Iteration Statements\u25e214.7.1 Semantics14.7.1.1 LoopContinues ( completion, labelSet )14.7.1.2 RS: LoopEvaluation\u25e214.7.2 The do-while Statement14.7.2.1 SS: Early Errors14.7.2.2 RS: DoWhileLoopEvaluation\u25e214.7.3 The while Statement14.7.3.1 SS: Early Errors14.7.3.2 RS: WhileLoopEvaluation\u25e214.7.4 The for Statement14.7.4.1 SS: Early Errors14.7.4.2 RS: ForLoopEvaluation14.7.4.3 ForBodyEvaluation ( test, increment, stmt, perIterationBindings, labelSet )14.7.4.4 CreatePerIterationEnvironment ( perIterationBindings )\u25e214.7.5 The for-in, for-of, and for-await-of Statements14.7.5.1 SS: Early Errors14.7.5.2 SS: IsDestructuring14.7.5.3 RS: ForDeclarationBindingInitialization14.7.5.4 RS: ForDeclarationBindingInstantiation14.7.5.5 RS: ForInOfLoopEvaluation14.7.5.6 ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )14.7.5.7 ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )14.7.5.8 RS: Evaluation14.7.5.9 EnumerateObjectProperties ( O )\u25e214.7.5.10 For-In Iterator Objects14.7.5.10.1 CreateForInIterator ( object )\u25e214.7.5.10.2 The %ForInIteratorPrototype% Object14.7.5.10.2.1 %ForInIteratorPrototype%.next ( )14.7.5.10.3 Properties of For-In Iterator Instances\u25e214.8 The continue Statement14.8.1 SS: Early Errors14.8.2 RS: Evaluation\u25e214.9 The break Statement14.9.1 SS: Early Errors14.9.2 RS: Evaluation\u25e214.10 The return Statement14.10.1 RS: Evaluation\u25e214.11 The with Statement14.11.1 SS: Early Errors14.11.2 RS: Evaluation\u25e214.12 The switch Statement14.12.1 SS: Early Errors14.12.2 RS: CaseBlockEvaluation14.12.3 CaseClauseIsSelected ( C, input )14.12.4 RS: Evaluation\u25e214.13 Labelled Statements14.13.1 SS: Early Errors14.13.2 SS: IsLabelledFunction ( stmt )14.13.3 RS: Evaluation14.13.4 RS: LabelledEvaluation\u25e214.14 The throw Statement14.14.1 RS: Evaluation\u25e214.15 The try Statement14.15.1 SS: Early Errors14.15.2 RS: CatchClauseEvaluation14.15.3 RS: Evaluation\u25e214.16 The debugger Statement14.16.1 RS: Evaluation\u25e215 ECMAScript Language: Functions and Classes\u25e215.1 Parameter Lists15.1.1 SS: Early Errors15.1.2 SS: ContainsExpression15.1.3 SS: IsSimpleParameterList15.1.4 SS: HasInitializer15.1.5 SS: ExpectedArgumentCount\u25e215.2 Function Definitions15.2.1 SS: Early Errors15.2.2 SS: FunctionBodyContainsUseStrict15.2.3 RS: EvaluateFunctionBody15.2.4 RS: InstantiateOrdinaryFunctionObject15.2.5 RS: InstantiateOrdinaryFunctionExpression15.2.6 RS: Evaluation\u25e215.3 Arrow Function Definitions15.3.1 SS: Early Errors15.3.2 SS: ConciseBodyContainsUseStrict15.3.3 RS: EvaluateConciseBody15.3.4 RS: InstantiateArrowFunctionExpression15.3.5 RS: Evaluation\u25e215.4 Method Definitions15.4.1 SS: Early Errors15.4.2 SS: HasDirectSuper15.4.3 SS: SpecialMethod15.4.4 RS: DefineMethod15.4.5 RS: MethodDefinitionEvaluation\u25e215.5 Generator Function Definitions15.5.1 SS: Early Errors15.5.2 RS: EvaluateGeneratorBody15.5.3 RS: InstantiateGeneratorFunctionObject15.5.4 RS: InstantiateGeneratorFunctionExpression15.5.5 RS: Evaluation\u25e215.6 Async Generator Function Definitions15.6.1 SS: Early Errors15.6.2 RS: EvaluateAsyncGeneratorBody15.6.3 RS: InstantiateAsyncGeneratorFunctionObject15.6.4 RS: InstantiateAsyncGeneratorFunctionExpression15.6.5 RS: Evaluation\u25e215.7 Class Definitions15.7.1 SS: Early Errors15.7.2 SS: ClassElementKind15.7.3 SS: ConstructorMethod15.7.4 SS: IsStatic15.7.5 SS: NonConstructorElements15.7.6 SS: PrototypePropertyNameList15.7.7 SS: AllPrivateIdentifiersValid15.7.8 SS: PrivateBoundIdentifiers15.7.9 SS: ContainsArguments15.7.10 RS: ClassFieldDefinitionEvaluation15.7.11 RS: ClassStaticBlockDefinitionEvaluation15.7.12 RS: EvaluateClassStaticBlockBody15.7.13 RS: ClassElementEvaluation15.7.14 RS: ClassDefinitionEvaluation15.7.15 RS: BindingClassDeclarationEvaluation15.7.16 RS: Evaluation\u25e215.8 Async Function Definitions15.8.1 SS: Early Errors15.8.2 RS: InstantiateAsyncFunctionObject15.8.3 RS: InstantiateAsyncFunctionExpression15.8.4 RS: EvaluateAsyncFunctionBody15.8.5 RS: Evaluation\u25e215.9 Async Arrow Function Definitions15.9.1 SS: Early Errors15.9.2 SS: AsyncConciseBodyContainsUseStrict15.9.3 RS: EvaluateAsyncConciseBody15.9.4 RS: InstantiateAsyncArrowFunctionExpression15.9.5 RS: Evaluation\u25e215.10 Tail Position Calls15.10.1 SS: IsInTailPosition ( call )\u25e215.10.2 SS: HasCallInTailPosition15.10.2.1 Statement Rules15.10.2.2 Expression Rules15.10.3 PrepareForTailCall ( )\u25e216 ECMAScript Language: Scripts and Modules\u25e216.1 Scripts16.1.1 SS: Early Errors16.1.2 SS: IsStrict16.1.3 RS: Evaluation16.1.4 Script Records16.1.5 ParseScript ( sourceText, realm, hostDefined )16.1.6 ScriptEvaluation ( scriptRecord )16.1.7 GlobalDeclarationInstantiation ( script, env )\u25e216.2 Modules\u25e216.2.1 Module Semantics16.2.1.1 SS: Early Errors16.2.1.2 SS: ImportedLocalNames ( importEntries )16.2.1.3 SS: ModuleRequests16.2.1.4 Abstract Module Records\u25e216.2.1.5 Cyclic Module Records\u25e216.2.1.5.1 Link ( )16.2.1.5.1.1 InnerModuleLinking ( module, stack, index )\u25e216.2.1.5.2 Evaluate ( )16.2.1.5.2.1 InnerModuleEvaluation ( module, stack, index )16.2.1.5.2.2 ExecuteAsyncModule ( module )16.2.1.5.2.3 GatherAvailableAncestors ( module, execList )16.2.1.5.2.4 AsyncModuleExecutionFulfilled ( module )16.2.1.5.2.5 AsyncModuleExecutionRejected ( module, error )16.2.1.5.3 Example Cyclic Module Record Graphs\u25e216.2.1.6 Source Text Module Records16.2.1.6.1 ParseModule ( sourceText, realm, hostDefined )16.2.1.6.2 GetExportedNames ( [ exportStarSet ] )16.2.1.6.3 ResolveExport ( exportName [ , resolveSet ] )16.2.1.6.4 InitializeEnvironment ( )16.2.1.6.5 ExecuteModule ( [ capability ] )16.2.1.7 HostResolveImportedModule ( referencingScriptOrModule, specifier )16.2.1.8 HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )16.2.1.9 FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, innerPromise )16.2.1.10 GetModuleNamespace ( module )16.2.1.11 RS: Evaluation\u25e216.2.2 Imports16.2.2.1 SS: Early Errors16.2.2.2 SS: ImportEntries16.2.2.3 SS: ImportEntriesForModule\u25e216.2.3 Exports16.2.3.1 SS: Early Errors16.2.3.2 SS: ExportedBindings16.2.3.3 SS: ExportedNames16.2.3.4 SS: ExportEntries16.2.3.5 SS: ExportEntriesForModule16.2.3.6 SS: ReferencedBindings16.2.3.7 RS: Evaluation\u25e217 Error Handling and Language Extensions17.1 Forbidden Extensions18 ECMAScript Standard Built-in Objects\u25e219 The Global Object\u25e219.1 Value Properties of the Global Object19.1.1 globalThis19.1.2 Infinity19.1.3 NaN19.1.4 undefined\u25e219.2 Function Properties of the Global Object\u25e219.2.1 eval ( x )19.2.1.1 PerformEval ( x, callerRealm, strictCaller, direct )19.2.1.2 HostEnsureCanCompileStrings ( callerRealm, calleeRealm )19.2.1.3 EvalDeclarationInstantiation ( body, varEnv, lexEnv, privateEnv, strict )19.2.2 isFinite ( number )19.2.3 isNaN ( number )19.2.4 parseFloat ( string )19.2.5 parseInt ( string, radix )\u25e219.2.6 URI Handling Functions\u25e219.2.6.1 URI Syntax and Semantics19.2.6.1.1 Encode ( string, unescapedSet )19.2.6.1.2 Decode ( string, reservedSet )19.2.6.2 decodeURI ( encodedURI )19.2.6.3 decodeURIComponent ( encodedURIComponent )19.2.6.4 encodeURI ( uri )19.2.6.5 encodeURIComponent ( uriComponent )\u25e219.3 Constructor Properties of the Global Object19.3.1 AggregateError ( . . . )19.3.2 Array ( . . . )19.3.3 ArrayBuffer ( . . . )19.3.4 BigInt ( . . . )19.3.5 BigInt64Array ( . . . )19.3.6 BigUint64Array ( . . . )19.3.7 Boolean ( . . . )19.3.8 DataView ( . . . )19.3.9 Date ( . . . )19.3.10 Error ( . . . )19.3.11 EvalError ( . . . )19.3.12 FinalizationRegistry ( . . . )19.3.13 Float32Array ( . . . )19.3.14 Float64Array ( . . . )19.3.15 Function ( . . . )19.3.16 Int8Array ( . . . )19.3.17 Int16Array ( . . . )19.3.18 Int32Array ( . . . )19.3.19 Map ( . . . )19.3.20 Number ( . . . )19.3.21 Object ( . . . )19.3.22 Promise ( . . . )19.3.23 Proxy ( . . . )19.3.24 RangeError ( . . . )19.3.25 ReferenceError ( . . . )19.3.26 RegExp ( . . . )19.3.27 Set ( . . . )19.3.28 SharedArrayBuffer ( . . . )19.3.29 String ( . . . )19.3.30 Symbol ( . . . )19.3.31 SyntaxError ( . . . )19.3.32 TypeError ( . . . )19.3.33 Uint8Array ( . . . )19.3.34 Uint8ClampedArray ( . . . )19.3.35 Uint16Array ( . . . )19.3.36 Uint32Array ( . . . )19.3.37 URIError ( . . . )19.3.38 WeakMap ( . . . )19.3.39 WeakRef ( . . . )19.3.40 WeakSet ( . . . )\u25e219.4 Other Properties of the Global Object19.4.1 Atomics19.4.2 JSON19.4.3 Math19.4.4 Reflect\u25e220 Fundamental Objects\u25e220.1 Object Objects\u25e220.1.1 The Object Constructor20.1.1.1 Object ( [ value ] )\u25e220.1.2 Properties of the Object Constructor20.1.2.1 Object.assign ( target, ...sources )20.1.2.2 Object.create ( O, Properties )\u25e220.1.2.3 Object.defineProperties ( O, Properties )20.1.2.3.1 ObjectDefineProperties ( O, Properties )20.1.2.4 Object.defineProperty ( O, P, Attributes )20.1.2.5 Object.entries ( O )20.1.2.6 Object.freeze ( O )20.1.2.7 Object.fromEntries ( iterable )20.1.2.8 Object.getOwnPropertyDescriptor ( O, P )20.1.2.9 Object.getOwnPropertyDescriptors ( O )20.1.2.10 Object.getOwnPropertyNames ( O )\u25e220.1.2.11 Object.getOwnPropertySymbols ( O )20.1.2.11.1 GetOwnPropertyKeys ( O, type )20.1.2.12 Object.getPrototypeOf ( O )20.1.2.13 Object.hasOwn ( O, P )20.1.2.14 Object.is ( value1, value2 )20.1.2.15 Object.isExtensible ( O )20.1.2.16 Object.isFrozen ( O )20.1.2.17 Object.isSealed ( O )20.1.2.18 Object.keys ( O )20.1.2.19 Object.preventExtensions ( O )20.1.2.20 Object.prototype20.1.2.21 Object.seal ( O )20.1.2.22 Object.setPrototypeOf ( O, proto )20.1.2.23 Object.values ( O )\u25e220.1.3 Properties of the Object Prototype Object20.1.3.1 Object.prototype.constructor20.1.3.2 Object.prototype.hasOwnProperty ( V )20.1.3.3 Object.prototype.isPrototypeOf ( V )20.1.3.4 Object.prototype.propertyIsEnumerable ( V )20.1.3.5 Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )20.1.3.6 Object.prototype.toString ( )20.1.3.7 Object.prototype.valueOf ( )\u25e220.1.3.8 Object.prototype.__proto__20.1.3.8.1 get Object.prototype.__proto__20.1.3.8.2 set Object.prototype.__proto__\u25e220.1.3.9 Legacy Object.prototype Accessor Methods20.1.3.9.1 Object.prototype.__defineGetter__ ( P, getter )20.1.3.9.2 Object.prototype.__defineSetter__ ( P, setter )20.1.3.9.3 Object.prototype.__lookupGetter__ ( P )20.1.3.9.4 Object.prototype.__lookupSetter__ ( P )20.1.4 Properties of Object Instances\u25e220.2 Function Objects\u25e220.2.1 The Function Constructor\u25e220.2.1.1 Function ( p1, p2, \u2026 , pn, body )20.2.1.1.1 CreateDynamicFunction ( constructor, newTarget, kind, args )\u25e220.2.2 Properties of the Function Constructor20.2.2.1 Function.length20.2.2.2 Function.prototype\u25e220.2.3 Properties of the Function Prototype Object20.2.3.1 Function.prototype.apply ( thisArg, argArray )20.2.3.2 Function.prototype.bind ( thisArg, ...args )20.2.3.3 Function.prototype.call ( thisArg, ...args )20.2.3.4 Function.prototype.constructor20.2.3.5 Function.prototype.toString ( )20.2.3.6 Function.prototype [ @@hasInstance ] ( V )\u25e220.2.4 Function Instances20.2.4.1 length20.2.4.2 name20.2.4.3 prototype20.2.5 HostHasSourceTextAvailable ( func )\u25e220.3 Boolean Objects\u25e220.3.1 The Boolean Constructor20.3.1.1 Boolean ( value )\u25e220.3.2 Properties of the Boolean Constructor20.3.2.1 Boolean.prototype\u25e220.3.3 Properties of the Boolean Prototype Object20.3.3.1 Boolean.prototype.constructor20.3.3.2 Boolean.prototype.toString ( )20.3.3.3 Boolean.prototype.valueOf ( )20.3.4 Properties of Boolean Instances\u25e220.4 Symbol Objects\u25e220.4.1 The Symbol Constructor20.4.1.1 Symbol ( [ description ] )\u25e220.4.2 Properties of the Symbol Constructor20.4.2.1 Symbol.asyncIterator20.4.2.2 Symbol.for ( key )20.4.2.3 Symbol.hasInstance20.4.2.4 Symbol.isConcatSpreadable20.4.2.5 Symbol.iterator20.4.2.6 Symbol.keyFor ( sym )20.4.2.7 Symbol.match20.4.2.8 Symbol.matchAll20.4.2.9 Symbol.prototype20.4.2.10 Symbol.replace20.4.2.11 Symbol.search20.4.2.12 Symbol.species20.4.2.13 Symbol.split20.4.2.14 Symbol.toPrimitive20.4.2.15 Symbol.toStringTag20.4.2.16 Symbol.unscopables\u25e220.4.3 Properties of the Symbol Prototype Object20.4.3.1 Symbol.prototype.constructor20.4.3.2 get Symbol.prototype.description\u25e220.4.3.3 Symbol.prototype.toString ( )20.4.3.3.1 SymbolDescriptiveString ( sym )20.4.3.4 Symbol.prototype.valueOf ( )20.4.3.5 Symbol.prototype [ @@toPrimitive ] ( hint )20.4.3.6 Symbol.prototype [ @@toStringTag ]20.4.4 Properties of Symbol Instances\u25e220.5 Error Objects\u25e220.5.1 The Error Constructor20.5.1.1 Error ( message [ , options ] )\u25e220.5.2 Properties of the Error Constructor20.5.2.1 Error.prototype\u25e220.5.3 Properties of the Error Prototype Object20.5.3.1 Error.prototype.constructor20.5.3.2 Error.prototype.message20.5.3.3 Error.prototype.name20.5.3.4 Error.prototype.toString ( )20.5.4 Properties of Error Instances\u25e220.5.5 Native Error Types Used in This Standard20.5.5.1 EvalError20.5.5.2 RangeError20.5.5.3 ReferenceError20.5.5.4 SyntaxError20.5.5.5 TypeError20.5.5.6 URIError\u25e220.5.6 NativeError Object Structure\u25e220.5.6.1 The NativeError Constructors20.5.6.1.1 NativeError ( message [ , options ] )\u25e220.5.6.2 Properties of the NativeError Constructors20.5.6.2.1 NativeError.prototype\u25e220.5.6.3 Properties of the NativeError Prototype Objects20.5.6.3.1 NativeError.prototype.constructor20.5.6.3.2 NativeError.prototype.message20.5.6.3.3 NativeError.prototype.name20.5.6.4 Properties of NativeError Instances\u25e220.5.7 AggregateError Objects\u25e220.5.7.1 The AggregateError Constructor20.5.7.1.1 AggregateError ( errors, message [ , options ] )\u25e220.5.7.2 Properties of the AggregateError Constructor20.5.7.2.1 AggregateError.prototype\u25e220.5.7.3 Properties of the AggregateError Prototype Object20.5.7.3.1 AggregateError.prototype.constructor20.5.7.3.2 AggregateError.prototype.message20.5.7.3.3 AggregateError.prototype.name20.5.7.4 Properties of AggregateError Instances\u25e220.5.8 Abstract Operations for Error Objects20.5.8.1 InstallErrorCause ( O, options )\u25e221 Numbers and Dates\u25e221.1 Number Objects\u25e221.1.1 The Number Constructor21.1.1.1 Number ( value )\u25e221.1.2 Properties of the Number Constructor21.1.2.1 Number.EPSILON21.1.2.2 Number.isFinite ( number )21.1.2.3 Number.isInteger ( number )21.1.2.4 Number.isNaN ( number )21.1.2.5 Number.isSafeInteger ( number )21.1.2.6 Number.MAX_SAFE_INTEGER21.1.2.7 Number.MAX_VALUE21.1.2.8 Number.MIN_SAFE_INTEGER21.1.2.9 Number.MIN_VALUE21.1.2.10 Number.NaN21.1.2.11 Number.NEGATIVE_INFINITY21.1.2.12 Number.parseFloat ( string )21.1.2.13 Number.parseInt ( string, radix )21.1.2.14 Number.POSITIVE_INFINITY21.1.2.15 Number.prototype\u25e221.1.3 Properties of the Number Prototype Object21.1.3.1 Number.prototype.constructor21.1.3.2 Number.prototype.toExponential ( fractionDigits )21.1.3.3 Number.prototype.toFixed ( fractionDigits )21.1.3.4 Number.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )21.1.3.5 Number.prototype.toPrecision ( precision )21.1.3.6 Number.prototype.toString ( [ radix ] )21.1.3.7 Number.prototype.valueOf ( )21.1.4 Properties of Number Instances\u25e221.2 BigInt Objects\u25e221.2.1 The BigInt Constructor\u25e221.2.1.1 BigInt ( value )21.2.1.1.1 NumberToBigInt ( number )\u25e221.2.2 Properties of the BigInt Constructor21.2.2.1 BigInt.asIntN ( bits, bigint )21.2.2.2 BigInt.asUintN ( bits, bigint )21.2.2.3 BigInt.prototype\u25e221.2.3 Properties of the BigInt Prototype Object21.2.3.1 BigInt.prototype.constructor21.2.3.2 BigInt.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )21.2.3.3 BigInt.prototype.toString ( [ radix ] )21.2.3.4 BigInt.prototype.valueOf ( )21.2.3.5 BigInt.prototype [ @@toStringTag ]\u25e221.3 The Math Object\u25e221.3.1 Value Properties of the Math Object21.3.1.1 Math.E21.3.1.2 Math.LN1021.3.1.3 Math.LN221.3.1.4 Math.LOG10E21.3.1.5 Math.LOG2E21.3.1.6 Math.PI21.3.1.7 Math.SQRT1_221.3.1.8 Math.SQRT221.3.1.9 Math [ @@toStringTag ]\u25e221.3.2 Function Properties of the Math Object21.3.2.1 Math.abs ( x )21.3.2.2 Math.acos ( x )21.3.2.3 Math.acosh ( x )21.3.2.4 Math.asin ( x )21.3.2.5 Math.asinh ( x )21.3.2.6 Math.atan ( x )21.3.2.7 Math.atanh ( x )21.3.2.8 Math.atan2 ( y, x )21.3.2.9 Math.cbrt ( x )21.3.2.10 Math.ceil ( x )21.3.2.11 Math.clz32 ( x )21.3.2.12 Math.cos ( x )21.3.2.13 Math.cosh ( x )21.3.2.14 Math.exp ( x )21.3.2.15 Math.expm1 ( x )21.3.2.16 Math.floor ( x )21.3.2.17 Math.fround ( x )21.3.2.18 Math.hypot ( ...args )21.3.2.19 Math.imul ( x, y )21.3.2.20 Math.log ( x )21.3.2.21 Math.log1p ( x )21.3.2.22 Math.log10 ( x )21.3.2.23 Math.log2 ( x )21.3.2.24 Math.max ( ...args )21.3.2.25 Math.min ( ...args )21.3.2.26 Math.pow ( base, exponent )21.3.2.27 Math.random ( )21.3.2.28 Math.round ( x )21.3.2.29 Math.sign ( x )21.3.2.30 Math.sin ( x )21.3.2.31 Math.sinh ( x )21.3.2.32 Math.sqrt ( x )21.3.2.33 Math.tan ( x )21.3.2.34 Math.tanh ( x )21.3.2.35 Math.trunc ( x )\u25e221.4 Date Objects\u25e221.4.1 Overview of Date Objects and Definitions of Abstract Operations21.4.1.1 Time Values and Time Range21.4.1.2 Day Number and Time within Day21.4.1.3 Year Number21.4.1.4 Month Number21.4.1.5 Date Number21.4.1.6 Week Day21.4.1.7 LocalTZA ( t, isUTC )21.4.1.8 LocalTime ( t )21.4.1.9 UTC ( t )21.4.1.10 Hours, Minutes, Second, and Milliseconds21.4.1.11 MakeTime ( hour, min, sec, ms )21.4.1.12 MakeDay ( year, month, date )21.4.1.13 MakeDate ( day, time )21.4.1.14 TimeClip ( time )\u25e221.4.1.15 Date Time String Format21.4.1.15.1 Expanded Years\u25e221.4.2 The Date Constructor21.4.2.1 Date ( ...values )\u25e221.4.3 Properties of the Date Constructor21.4.3.1 Date.now ( )21.4.3.2 Date.parse ( string )21.4.3.3 Date.prototype21.4.3.4 Date.UTC ( year [ , month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] ] )\u25e221.4.4 Properties of the Date Prototype Object21.4.4.1 Date.prototype.constructor21.4.4.2 Date.prototype.getDate ( )21.4.4.3 Date.prototype.getDay ( )21.4.4.4 Date.prototype.getFullYear ( )21.4.4.5 Date.prototype.getHours ( )21.4.4.6 Date.prototype.getMilliseconds ( )21.4.4.7 Date.prototype.getMinutes ( )21.4.4.8 Date.prototype.getMonth ( )21.4.4.9 Date.prototype.getSeconds ( )21.4.4.10 Date.prototype.getTime ( )21.4.4.11 Date.prototype.getTimezoneOffset ( )21.4.4.12 Date.prototype.getUTCDate ( )21.4.4.13 Date.prototype.getUTCDay ( )21.4.4.14 Date.prototype.getUTCFullYear ( )21.4.4.15 Date.prototype.getUTCHours ( )21.4.4.16 Date.prototype.getUTCMilliseconds ( )21.4.4.17 Date.prototype.getUTCMinutes ( )21.4.4.18 Date.prototype.getUTCMonth ( )21.4.4.19 Date.prototype.getUTCSeconds ( )21.4.4.20 Date.prototype.setDate ( date )21.4.4.21 Date.prototype.setFullYear ( year [ , month [ , date ] ] )21.4.4.22 Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )21.4.4.23 Date.prototype.setMilliseconds ( ms )21.4.4.24 Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )21.4.4.25 Date.prototype.setMonth ( month [ , date ] )21.4.4.26 Date.prototype.setSeconds ( sec [ , ms ] )21.4.4.27 Date.prototype.setTime ( time )21.4.4.28 Date.prototype.setUTCDate ( date )21.4.4.29 Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )21.4.4.30 Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )21.4.4.31 Date.prototype.setUTCMilliseconds ( ms )21.4.4.32 Date.prototype.setUTCMinutes ( min [ , sec [ , ms ] ] )21.4.4.33 Date.prototype.setUTCMonth ( month [ , date ] )21.4.4.34 Date.prototype.setUTCSeconds ( sec [ , ms ] )21.4.4.35 Date.prototype.toDateString ( )21.4.4.36 Date.prototype.toISOString ( )21.4.4.37 Date.prototype.toJSON ( key )21.4.4.38 Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )21.4.4.39 Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )21.4.4.40 Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )\u25e221.4.4.41 Date.prototype.toString ( )21.4.4.41.1 TimeString ( tv )21.4.4.41.2 DateString ( tv )21.4.4.41.3 TimeZoneString ( tv )21.4.4.41.4 ToDateString ( tv )21.4.4.42 Date.prototype.toTimeString ( )21.4.4.43 Date.prototype.toUTCString ( )21.4.4.44 Date.prototype.valueOf ( )21.4.4.45 Date.prototype [ @@toPrimitive ] ( hint )21.4.5 Properties of Date Instances\u25e222 Text Processing\u25e222.1 String Objects\u25e222.1.1 The String Constructor22.1.1.1 String ( value )\u25e222.1.2 Properties of the String Constructor22.1.2.1 String.fromCharCode ( ...codeUnits )22.1.2.2 String.fromCodePoint ( ...codePoints )22.1.2.3 String.prototype22.1.2.4 String.raw ( template, ...substitutions )\u25e222.1.3 Properties of the String Prototype Object22.1.3.1 String.prototype.at ( index )22.1.3.2 String.prototype.charAt ( pos )22.1.3.3 String.prototype.charCodeAt ( pos )22.1.3.4 String.prototype.codePointAt ( pos )22.1.3.5 String.prototype.concat ( ...args )22.1.3.6 String.prototype.constructor22.1.3.7 String.prototype.endsWith ( searchString [ , endPosition ] )22.1.3.8 String.prototype.includes ( searchString [ , position ] )22.1.3.9 String.prototype.indexOf ( searchString [ , position ] )22.1.3.10 String.prototype.lastIndexOf ( searchString [ , position ] )22.1.3.11 String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )22.1.3.12 String.prototype.match ( regexp )22.1.3.13 String.prototype.matchAll ( regexp )22.1.3.14 String.prototype.normalize ( [ form ] )22.1.3.15 String.prototype.padEnd ( maxLength [ , fillString ] )\u25e222.1.3.16 String.prototype.padStart ( maxLength [ , fillString ] )22.1.3.16.1 StringPad ( O, maxLength, fillString, placement )22.1.3.16.2 ToZeroPaddedDecimalString ( n, minLength )22.1.3.17 String.prototype.repeat ( count )\u25e222.1.3.18 String.prototype.replace ( searchValue, replaceValue )22.1.3.18.1 GetSubstitution ( matched, str, position, captures, namedCaptures, replacementTemplate )22.1.3.19 String.prototype.replaceAll ( searchValue, replaceValue )22.1.3.20 String.prototype.search ( regexp )22.1.3.21 String.prototype.slice ( start, end )22.1.3.22 String.prototype.split ( separator, limit )22.1.3.23 String.prototype.startsWith ( searchString [ , position ] )22.1.3.24 String.prototype.substring ( start, end )22.1.3.25 String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )22.1.3.26 String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )22.1.3.27 String.prototype.toLowerCase ( )22.1.3.28 String.prototype.toString ( )22.1.3.29 String.prototype.toUpperCase ( )\u25e222.1.3.30 String.prototype.trim ( )22.1.3.30.1 TrimString ( string, where )22.1.3.31 String.prototype.trimEnd ( )22.1.3.32 String.prototype.trimStart ( )22.1.3.33 String.prototype.valueOf ( )22.1.3.34 String.prototype [ @@iterator ] ( )\u25e222.1.4 Properties of String Instances22.1.4.1 length\u25e222.1.5 String Iterator Objects\u25e222.1.5.1 The %StringIteratorPrototype% Object22.1.5.1.1 %StringIteratorPrototype%.next ( )22.1.5.1.2 %StringIteratorPrototype% [ @@toStringTag ]\u25e222.2 RegExp (Regular Expression) Objects\u25e222.2.1 Patterns22.2.1.1 SS: Early Errors22.2.1.2 SS: CapturingGroupNumber22.2.1.3 SS: IsCharacterClass22.2.1.4 SS: CharacterValue22.2.1.5 SS: SourceText22.2.1.6 SS: CapturingGroupName22.2.1.7 SS: RegExpIdentifierCodePoints22.2.1.8 SS: RegExpIdentifierCodePoint\u25e222.2.2 Pattern Semantics22.2.2.1 Notation22.2.2.2 RS: CompilePattern\u25e222.2.2.3 RS: CompileSubpattern22.2.2.3.1 RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )\u25e222.2.2.4 RS: CompileAssertion22.2.2.4.1 IsWordChar ( e )22.2.2.5 RS: CompileQuantifier22.2.2.6 RS: CompileQuantifierPrefix\u25e222.2.2.7 RS: CompileAtom22.2.2.7.1 CharacterSetMatcher ( A, invert, direction )22.2.2.7.2 BackreferenceMatcher ( n, direction )22.2.2.7.3 Canonicalize ( ch )22.2.2.8 RS: CompileCharacterClass\u25e222.2.2.9 RS: CompileToCharSet22.2.2.9.1 CharacterRange ( A, B )22.2.2.9.2 UnicodeMatchProperty ( p )22.2.2.9.3 UnicodeMatchPropertyValue ( p, v )\u25e222.2.3 The RegExp Constructor22.2.3.1 RegExp ( pattern, flags )\u25e222.2.3.2 Abstract Operations for the RegExp Constructor22.2.3.2.1 RegExpAlloc ( newTarget )22.2.3.2.2 RegExpInitialize ( obj, pattern, flags )22.2.3.2.3 SS: ParsePattern ( patternText, u )22.2.3.2.4 RegExpCreate ( P, F )22.2.3.2.5 EscapeRegExpPattern ( P, F )\u25e222.2.4 Properties of the RegExp Constructor22.2.4.1 RegExp.prototype22.2.4.2 get RegExp [ @@species ]\u25e222.2.5 Properties of the RegExp Prototype Object22.2.5.1 RegExp.prototype.constructor\u25e222.2.5.2 RegExp.prototype.exec ( string )22.2.5.2.1 RegExpExec ( R, S )22.2.5.2.2 RegExpBuiltinExec ( R, S )22.2.5.2.3 AdvanceStringIndex ( S, index, unicode )22.2.5.2.4 GetStringIndex ( S, e )22.2.5.2.5 Match Records22.2.5.2.6 GetMatchString ( S, match )22.2.5.2.7 GetMatchIndexPair ( S, match )22.2.5.2.8 MakeMatchIndicesIndexPairArray ( S, indices, groupNames, hasGroups )\u25e222.2.5.3 get RegExp.prototype.dotAll22.2.5.3.1 RegExpHasFlag ( R, codeUnit )22.2.5.4 get RegExp.prototype.flags22.2.5.5 get RegExp.prototype.global22.2.5.6 get RegExp.prototype.hasIndices22.2.5.7 get RegExp.prototype.ignoreCase22.2.5.8 RegExp.prototype [ @@match ] ( string )22.2.5.9 RegExp.prototype [ @@matchAll ] ( string )22.2.5.10 get RegExp.prototype.multiline22.2.5.11 RegExp.prototype [ @@replace ] ( string, replaceValue )22.2.5.12 RegExp.prototype [ @@search ] ( string )22.2.5.13 get RegExp.prototype.source22.2.5.14 RegExp.prototype [ @@split ] ( string, limit )22.2.5.15 get RegExp.prototype.sticky22.2.5.16 RegExp.prototype.test ( S )22.2.5.17 RegExp.prototype.toString ( )22.2.5.18 get RegExp.prototype.unicode\u25e222.2.6 Properties of RegExp Instances22.2.6.1 lastIndex\u25e222.2.7 RegExp String Iterator Objects22.2.7.1 CreateRegExpStringIterator ( R, S, global, fullUnicode )\u25e222.2.7.2 The %RegExpStringIteratorPrototype% Object22.2.7.2.1 %RegExpStringIteratorPrototype%.next ( )22.2.7.2.2 %RegExpStringIteratorPrototype% [ @@toStringTag ]\u25e223 Indexed Collections\u25e223.1 Array Objects\u25e223.1.1 The Array Constructor23.1.1.1 Array ( ...values )\u25e223.1.2 Properties of the Array Constructor23.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )23.1.2.2 Array.isArray ( arg )23.1.2.3 Array.of ( ...items )23.1.2.4 Array.prototype23.1.2.5 get Array [ @@species ]\u25e223.1.3 Properties of the Array Prototype Object23.1.3.1 Array.prototype.at ( index )\u25e223.1.3.2 Array.prototype.concat ( ...items )23.1.3.2.1 IsConcatSpreadable ( O )23.1.3.3 Array.prototype.constructor23.1.3.4 Array.prototype.copyWithin ( target, start [ , end ] )23.1.3.5 Array.prototype.entries ( )23.1.3.6 Array.prototype.every ( callbackfn [ , thisArg ] )23.1.3.7 Array.prototype.fill ( value [ , start [ , end ] ] )23.1.3.8 Array.prototype.filter ( callbackfn [ , thisArg ] )23.1.3.9 Array.prototype.find ( predicate [ , thisArg ] )23.1.3.10 Array.prototype.findIndex ( predicate [ , thisArg ] )\u25e223.1.3.11 Array.prototype.flat ( [ depth ] )23.1.3.11.1 FlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction [ , thisArg ] ] )23.1.3.12 Array.prototype.flatMap ( mapperFunction [ , thisArg ] )23.1.3.13 Array.prototype.forEach ( callbackfn [ , thisArg ] )23.1.3.14 Array.prototype.includes ( searchElement [ , fromIndex ] )23.1.3.15 Array.prototype.indexOf ( searchElement [ , fromIndex ] )23.1.3.16 Array.prototype.join ( separator )23.1.3.17 Array.prototype.keys ( )23.1.3.18 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )23.1.3.19 Array.prototype.map ( callbackfn [ , thisArg ] )23.1.3.20 Array.prototype.pop ( )23.1.3.21 Array.prototype.push ( ...items )23.1.3.22 Array.prototype.reduce ( callbackfn [ , initialValue ] )23.1.3.23 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )23.1.3.24 Array.prototype.reverse ( )23.1.3.25 Array.prototype.shift ( )23.1.3.26 Array.prototype.slice ( start, end )23.1.3.27 Array.prototype.some ( callbackfn [ , thisArg ] )\u25e223.1.3.28 Array.prototype.sort ( comparefn )23.1.3.28.1 SortIndexedProperties ( obj, len, SortCompare )23.1.3.29 Array.prototype.splice ( start, deleteCount, ...items )23.1.3.30 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )23.1.3.31 Array.prototype.toString ( )23.1.3.32 Array.prototype.unshift ( ...items )23.1.3.33 Array.prototype.values ( )23.1.3.34 Array.prototype [ @@iterator ] ( )23.1.3.35 Array.prototype [ @@unscopables ]\u25e223.1.4 Properties of Array Instances23.1.4.1 length\u25e223.1.5 Array Iterator Objects23.1.5.1 CreateArrayIterator ( array, kind )\u25e223.1.5.2 The %ArrayIteratorPrototype% Object23.1.5.2.1 %ArrayIteratorPrototype%.next ( )23.1.5.2.2 %ArrayIteratorPrototype% [ @@toStringTag ]\u25e223.2 TypedArray Objects\u25e223.2.1 The %TypedArray% Intrinsic Object23.2.1.1 %TypedArray% ( )\u25e223.2.2 Properties of the %TypedArray% Intrinsic Object23.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )23.2.2.2 %TypedArray%.of ( ...items )23.2.2.3 %TypedArray%.prototype23.2.2.4 get %TypedArray% [ @@species ]\u25e223.2.3 Properties of the %TypedArray% Prototype Object23.2.3.1 %TypedArray%.prototype.at ( index )23.2.3.2 get %TypedArray%.prototype.buffer23.2.3.3 get %TypedArray%.prototype.byteLength23.2.3.4 get %TypedArray%.prototype.byteOffset23.2.3.5 %TypedArray%.prototype.constructor23.2.3.6 %TypedArray%.prototype.copyWithin ( target, start [ , end ] )23.2.3.7 %TypedArray%.prototype.entries ( )23.2.3.8 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )23.2.3.9 %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )23.2.3.10 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )23.2.3.11 %TypedArray%.prototype.find ( predicate [ , thisArg ] )23.2.3.12 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )23.2.3.13 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )23.2.3.14 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )23.2.3.15 %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )23.2.3.16 %TypedArray%.prototype.join ( separator )23.2.3.17 %TypedArray%.prototype.keys ( )23.2.3.18 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )23.2.3.19 get %TypedArray%.prototype.length23.2.3.20 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )23.2.3.21 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )23.2.3.22 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )23.2.3.23 %TypedArray%.prototype.reverse ( )\u25e223.2.3.24 %TypedArray%.prototype.set ( source [ , offset ] )23.2.3.24.1 SetTypedArrayFromTypedArray ( target, targetOffset, source )23.2.3.24.2 SetTypedArrayFromArrayLike ( target, targetOffset, source )23.2.3.25 %TypedArray%.prototype.slice ( start, end )23.2.3.26 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )23.2.3.27 %TypedArray%.prototype.sort ( comparefn )23.2.3.28 %TypedArray%.prototype.subarray ( begin, end )23.2.3.29 %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )23.2.3.30 %TypedArray%.prototype.toString ( )23.2.3.31 %TypedArray%.prototype.values ( )23.2.3.32 %TypedArray%.prototype [ @@iterator ] ( )23.2.3.33 get %TypedArray%.prototype [ @@toStringTag ]\u25e223.2.4 Abstract Operations for TypedArray Objects23.2.4.1 TypedArraySpeciesCreate ( exemplar, argumentList )23.2.4.2 TypedArrayCreate ( constructor, argumentList )23.2.4.3 ValidateTypedArray ( O )23.2.4.4 TypedArrayElementSize ( O )23.2.4.5 TypedArrayElementType ( O )\u25e223.2.5 The TypedArray Constructors\u25e223.2.5.1 TypedArray ( ...args )23.2.5.1.1 AllocateTypedArray ( constructorName, newTarget, defaultProto [ , length ] )23.2.5.1.2 InitializeTypedArrayFromTypedArray ( O, srcArray )23.2.5.1.3 InitializeTypedArrayFromArrayBuffer ( O, buffer, byteOffset, length )23.2.5.1.4 InitializeTypedArrayFromList ( O, values )23.2.5.1.5 InitializeTypedArrayFromArrayLike ( O, arrayLike )23.2.5.1.6 AllocateTypedArrayBuffer ( O, length )\u25e223.2.6 Properties of the TypedArray Constructors23.2.6.1 TypedArray.BYTES_PER_ELEMENT23.2.6.2 TypedArray.prototype\u25e223.2.7 Properties of the TypedArray Prototype Objects23.2.7.1 TypedArray.prototype.BYTES_PER_ELEMENT23.2.7.2 TypedArray.prototype.constructor23.2.8 Properties of TypedArray Instances\u25e224 Keyed Collections\u25e224.1 Map Objects\u25e224.1.1 The Map Constructor24.1.1.1 Map ( [ iterable ] )24.1.1.2 AddEntriesFromIterable ( target, iterable, adder )\u25e224.1.2 Properties of the Map Constructor24.1.2.1 Map.prototype24.1.2.2 get Map [ @@species ]\u25e224.1.3 Properties of the Map Prototype Object24.1.3.1 Map.prototype.clear ( )24.1.3.2 Map.prototype.constructor24.1.3.3 Map.prototype.delete ( key )24.1.3.4 Map.prototype.entries ( )24.1.3.5 Map.prototype.forEach ( callbackfn [ , thisArg ] )24.1.3.6 Map.prototype.get ( key )24.1.3.7 Map.prototype.has ( key )24.1.3.8 Map.prototype.keys ( )24.1.3.9 Map.prototype.set ( key, value )24.1.3.10 get Map.prototype.size24.1.3.11 Map.prototype.values ( )24.1.3.12 Map.prototype [ @@iterator ] ( )24.1.3.13 Map.prototype [ @@toStringTag ]24.1.4 Properties of Map Instances\u25e224.1.5 Map Iterator Objects24.1.5.1 CreateMapIterator ( map, kind )\u25e224.1.5.2 The %MapIteratorPrototype% Object24.1.5.2.1 %MapIteratorPrototype%.next ( )24.1.5.2.2 %MapIteratorPrototype% [ @@toStringTag ]\u25e224.2 Set Objects\u25e224.2.1 The Set Constructor24.2.1.1 Set ( [ iterable ] )\u25e224.2.2 Properties of the Set Constructor24.2.2.1 Set.prototype24.2.2.2 get Set [ @@species ]\u25e224.2.3 Properties of the Set Prototype Object24.2.3.1 Set.prototype.add ( value )24.2.3.2 Set.prototype.clear ( )24.2.3.3 Set.prototype.constructor24.2.3.4 Set.prototype.delete ( value )24.2.3.5 Set.prototype.entries ( )24.2.3.6 Set.prototype.forEach ( callbackfn [ , thisArg ] )24.2.3.7 Set.prototype.has ( value )24.2.3.8 Set.prototype.keys ( )24.2.3.9 get Set.prototype.size24.2.3.10 Set.prototype.values ( )24.2.3.11 Set.prototype [ @@iterator ] ( )24.2.3.12 Set.prototype [ @@toStringTag ]24.2.4 Properties of Set Instances\u25e224.2.5 Set Iterator Objects24.2.5.1 CreateSetIterator ( set, kind )\u25e224.2.5.2 The %SetIteratorPrototype% Object24.2.5.2.1 %SetIteratorPrototype%.next ( )24.2.5.2.2 %SetIteratorPrototype% [ @@toStringTag ]\u25e224.3 WeakMap Objects\u25e224.3.1 The WeakMap Constructor24.3.1.1 WeakMap ( [ iterable ] )\u25e224.3.2 Properties of the WeakMap Constructor24.3.2.1 WeakMap.prototype\u25e224.3.3 Properties of the WeakMap Prototype Object24.3.3.1 WeakMap.prototype.constructor24.3.3.2 WeakMap.prototype.delete ( key )24.3.3.3 WeakMap.prototype.get ( key )24.3.3.4 WeakMap.prototype.has ( key )24.3.3.5 WeakMap.prototype.set ( key, value )24.3.3.6 WeakMap.prototype [ @@toStringTag ]24.3.4 Properties of WeakMap Instances\u25e224.4 WeakSet Objects\u25e224.4.1 The WeakSet Constructor24.4.1.1 WeakSet ( [ iterable ] )\u25e224.4.2 Properties of the WeakSet Constructor24.4.2.1 WeakSet.prototype\u25e224.4.3 Properties of the WeakSet Prototype Object24.4.3.1 WeakSet.prototype.add ( value )24.4.3.2 WeakSet.prototype.constructor24.4.3.3 WeakSet.prototype.delete ( value )24.4.3.4 WeakSet.prototype.has ( value )24.4.3.5 WeakSet.prototype [ @@toStringTag ]24.4.4 Properties of WeakSet Instances\u25e225 Structured Data\u25e225.1 ArrayBuffer Objects25.1.1 Notation\u25e225.1.2 Abstract Operations For ArrayBuffer Objects25.1.2.1 AllocateArrayBuffer ( constructor, byteLength )25.1.2.2 IsDetachedBuffer ( arrayBuffer )25.1.2.3 DetachArrayBuffer ( arrayBuffer [ , key ] )25.1.2.4 CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength, cloneConstructor )25.1.2.5 IsUnsignedElementType ( type )25.1.2.6 IsUnclampedIntegerElementType ( type )25.1.2.7 IsBigIntElementType ( type )25.1.2.8 IsNoTearConfiguration ( type, order )25.1.2.9 RawBytesToNumeric ( type, rawBytes, isLittleEndian )25.1.2.10 GetValueFromBuffer ( arrayBuffer, byteIndex, type, isTypedArray, order [ , isLittleEndian ] )25.1.2.11 NumericToRawBytes ( type, value, isLittleEndian )25.1.2.12 SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )25.1.2.13 GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )\u25e225.1.3 The ArrayBuffer Constructor25.1.3.1 ArrayBuffer ( length )\u25e225.1.4 Properties of the ArrayBuffer Constructor25.1.4.1 ArrayBuffer.isView ( arg )25.1.4.2 ArrayBuffer.prototype25.1.4.3 get ArrayBuffer [ @@species ]\u25e225.1.5 Properties of the ArrayBuffer Prototype Object25.1.5.1 get ArrayBuffer.prototype.byteLength25.1.5.2 ArrayBuffer.prototype.constructor25.1.5.3 ArrayBuffer.prototype.slice ( start, end )25.1.5.4 ArrayBuffer.prototype [ @@toStringTag ]25.1.6 Properties of ArrayBuffer Instances\u25e225.2 SharedArrayBuffer Objects\u25e225.2.1 Abstract Operations for SharedArrayBuffer Objects25.2.1.1 AllocateSharedArrayBuffer ( constructor, byteLength )25.2.1.2 IsSharedArrayBuffer ( obj )\u25e225.2.2 The SharedArrayBuffer Constructor25.2.2.1 SharedArrayBuffer ( length )\u25e225.2.3 Properties of the SharedArrayBuffer Constructor25.2.3.1 SharedArrayBuffer.prototype25.2.3.2 get SharedArrayBuffer [ @@species ]\u25e225.2.4 Properties of the SharedArrayBuffer Prototype Object25.2.4.1 get SharedArrayBuffer.prototype.byteLength25.2.4.2 SharedArrayBuffer.prototype.constructor25.2.4.3 SharedArrayBuffer.prototype.slice ( start, end )25.2.4.4 SharedArrayBuffer.prototype [ @@toStringTag ]25.2.5 Properties of SharedArrayBuffer Instances\u25e225.3 DataView Objects\u25e225.3.1 Abstract Operations For DataView Objects25.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )25.3.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\u25e225.3.2 The DataView Constructor25.3.2.1 DataView ( buffer [ , byteOffset [ , byteLength ] ] )\u25e225.3.3 Properties of the DataView Constructor25.3.3.1 DataView.prototype\u25e225.3.4 Properties of the DataView Prototype Object25.3.4.1 get DataView.prototype.buffer25.3.4.2 get DataView.prototype.byteLength25.3.4.3 get DataView.prototype.byteOffset25.3.4.4 DataView.prototype.constructor25.3.4.5 DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )25.3.4.6 DataView.prototype.getBigUint64 ( byteOffset [ , littleEndian ] )25.3.4.7 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )25.3.4.8 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )25.3.4.9 DataView.prototype.getInt8 ( byteOffset )25.3.4.10 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )25.3.4.11 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )25.3.4.12 DataView.prototype.getUint8 ( byteOffset )25.3.4.13 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )25.3.4.14 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )25.3.4.15 DataView.prototype.setBigInt64 ( byteOffset, value [ , littleEndian ] )25.3.4.16 DataView.prototype.setBigUint64 ( byteOffset, value [ , littleEndian ] )25.3.4.17 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )25.3.4.18 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )25.3.4.19 DataView.prototype.setInt8 ( byteOffset, value )25.3.4.20 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )25.3.4.21 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )25.3.4.22 DataView.prototype.setUint8 ( byteOffset, value )25.3.4.23 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )25.3.4.24 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )25.3.4.25 DataView.prototype [ @@toStringTag ]25.3.5 Properties of DataView Instances\u25e225.4 The Atomics Object25.4.1 WaiterList Objects\u25e225.4.2 Abstract Operations for Atomics25.4.2.1 ValidateIntegerTypedArray ( typedArray [ , waitable ] )25.4.2.2 ValidateAtomicAccess ( typedArray, requestIndex )25.4.2.3 GetWaiterList ( block, i )25.4.2.4 EnterCriticalSection ( WL )25.4.2.5 LeaveCriticalSection ( WL )25.4.2.6 AddWaiter ( WL, W )25.4.2.7 RemoveWaiter ( WL, W )25.4.2.8 RemoveWaiters ( WL, c )25.4.2.9 SuspendAgent ( WL, W, timeout )25.4.2.10 NotifyWaiter ( WL, W )25.4.2.11 AtomicReadModifyWrite ( typedArray, index, value, op )25.4.2.12 ByteListBitwiseOp ( op, xBytes, yBytes )25.4.2.13 ByteListEqual ( xBytes, yBytes )25.4.3 Atomics.add ( typedArray, index, value )25.4.4 Atomics.and ( typedArray, index, value )25.4.5 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )25.4.6 Atomics.exchange ( typedArray, index, value )25.4.7 Atomics.isLockFree ( size )25.4.8 Atomics.load ( typedArray, index )25.4.9 Atomics.or ( typedArray, index, value )25.4.10 Atomics.store ( typedArray, index, value )25.4.11 Atomics.sub ( typedArray, index, value )25.4.12 Atomics.wait ( typedArray, index, value, timeout )25.4.13 Atomics.notify ( typedArray, index, count )25.4.14 Atomics.xor ( typedArray, index, value )25.4.15 Atomics [ @@toStringTag ]\u25e225.5 The JSON Object\u25e225.5.1 JSON.parse ( text [ , reviver ] )25.5.1.1 InternalizeJSONProperty ( holder, name, reviver )\u25e225.5.2 JSON.stringify ( value [ , replacer [ , space ] ] )25.5.2.1 SerializeJSONProperty ( state, key, holder )25.5.2.2 QuoteJSONString ( value )25.5.2.3 UnicodeEscape ( C )25.5.2.4 SerializeJSONObject ( state, value )25.5.2.5 SerializeJSONArray ( state, value )25.5.3 JSON [ @@toStringTag ]\u25e226 Managing Memory\u25e226.1 WeakRef Objects\u25e226.1.1 The WeakRef Constructor26.1.1.1 WeakRef ( target )\u25e226.1.2 Properties of the WeakRef Constructor26.1.2.1 WeakRef.prototype\u25e226.1.3 Properties of the WeakRef Prototype Object26.1.3.1 WeakRef.prototype.constructor26.1.3.2 WeakRef.prototype.deref ( )26.1.3.3 WeakRef.prototype [ @@toStringTag ]\u25e226.1.4 WeakRef Abstract Operations26.1.4.1 WeakRefDeref ( weakRef )26.1.5 Properties of WeakRef Instances\u25e226.2 FinalizationRegistry Objects\u25e226.2.1 The FinalizationRegistry Constructor26.2.1.1 FinalizationRegistry ( cleanupCallback )\u25e226.2.2 Properties of the FinalizationRegistry Constructor26.2.2.1 FinalizationRegistry.prototype\u25e226.2.3 Properties of the FinalizationRegistry Prototype Object26.2.3.1 FinalizationRegistry.prototype.constructor26.2.3.2 FinalizationRegistry.prototype.register ( target, heldValue [ , unregisterToken ] )26.2.3.3 FinalizationRegistry.prototype.unregister ( unregisterToken )26.2.3.4 FinalizationRegistry.prototype [ @@toStringTag ]26.2.4 Properties of FinalizationRegistry Instances\u25e227 Control Abstraction Objects\u25e227.1 Iteration\u25e227.1.1 Common Iteration Interfaces27.1.1.1 The Iterable Interface27.1.1.2 The Iterator Interface27.1.1.3 The AsyncIterable Interface27.1.1.4 The AsyncIterator Interface27.1.1.5 The IteratorResult Interface\u25e227.1.2 The %IteratorPrototype% Object27.1.2.1 %IteratorPrototype% [ @@iterator ] ( )\u25e227.1.3 The %AsyncIteratorPrototype% Object27.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\u25e227.1.4 Async-from-Sync Iterator Objects27.1.4.1 CreateAsyncFromSyncIterator ( syncIteratorRecord )\u25e227.1.4.2 The %AsyncFromSyncIteratorPrototype% Object27.1.4.2.1 %AsyncFromSyncIteratorPrototype%.next ( [ value ] )27.1.4.2.2 %AsyncFromSyncIteratorPrototype%.return ( [ value ] )27.1.4.2.3 %AsyncFromSyncIteratorPrototype%.throw ( [ value ] )27.1.4.3 Properties of Async-from-Sync Iterator Instances27.1.4.4 AsyncFromSyncIteratorContinuation ( result, promiseCapability )\u25e227.2 Promise Objects\u25e227.2.1 Promise Abstract Operations\u25e227.2.1.1 PromiseCapability Records27.2.1.1.1 IfAbruptRejectPromise ( value, capability )27.2.1.2 PromiseReaction Records\u25e227.2.1.3 CreateResolvingFunctions ( promise )27.2.1.3.1 Promise Reject Functions27.2.1.3.2 Promise Resolve Functions27.2.1.4 FulfillPromise ( promise, value )27.2.1.5 NewPromiseCapability ( C )27.2.1.6 IsPromise ( x )27.2.1.7 RejectPromise ( promise, reason )27.2.1.8 TriggerPromiseReactions ( reactions, argument )27.2.1.9 HostPromiseRejectionTracker ( promise, operation )\u25e227.2.2 Promise Jobs27.2.2.1 NewPromiseReactionJob ( reaction, argument )27.2.2.2 NewPromiseResolveThenableJob ( promiseToResolve, thenable, then )\u25e227.2.3 The Promise Constructor27.2.3.1 Promise ( executor )\u25e227.2.4 Properties of the Promise Constructor\u25e227.2.4.1 Promise.all ( iterable )27.2.4.1.1 GetPromiseResolve ( promiseConstructor )27.2.4.1.2 PerformPromiseAll ( iteratorRecord, constructor, resultCapability, promiseResolve )27.2.4.1.3 Promise.all Resolve Element Functions\u25e227.2.4.2 Promise.allSettled ( iterable )27.2.4.2.1 PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability, promiseResolve )27.2.4.2.2 Promise.allSettled Resolve Element Functions27.2.4.2.3 Promise.allSettled Reject Element Functions\u25e227.2.4.3 Promise.any ( iterable )27.2.4.3.1 PerformPromiseAny ( iteratorRecord, constructor, resultCapability, promiseResolve )27.2.4.3.2 Promise.any Reject Element Functions27.2.4.4 Promise.prototype\u25e227.2.4.5 Promise.race ( iterable )27.2.4.5.1 PerformPromiseRace ( iteratorRecord, constructor, resultCapability, promiseResolve )27.2.4.6 Promise.reject ( r )\u25e227.2.4.7 Promise.resolve ( x )27.2.4.7.1 PromiseResolve ( C, x )27.2.4.8 get Promise [ @@species ]\u25e227.2.5 Properties of the Promise Prototype Object27.2.5.1 Promise.prototype.catch ( onRejected )27.2.5.2 Promise.prototype.constructor27.2.5.3 Promise.prototype.finally ( onFinally )\u25e227.2.5.4 Promise.prototype.then ( onFulfilled, onRejected )27.2.5.4.1 PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] )27.2.5.5 Promise.prototype [ @@toStringTag ]27.2.6 Properties of Promise Instances\u25e227.3 GeneratorFunction Objects\u25e227.3.1 The GeneratorFunction Constructor27.3.1.1 GeneratorFunction ( p1, p2, \u2026 , pn, body )\u25e227.3.2 Properties of the GeneratorFunction Constructor27.3.2.1 GeneratorFunction.length27.3.2.2 GeneratorFunction.prototype\u25e227.3.3 Properties of the GeneratorFunction Prototype Object27.3.3.1 GeneratorFunction.prototype.constructor27.3.3.2 GeneratorFunction.prototype.prototype27.3.3.3 GeneratorFunction.prototype [ @@toStringTag ]\u25e227.3.4 GeneratorFunction Instances27.3.4.1 length27.3.4.2 name27.3.4.3 prototype\u25e227.4 AsyncGeneratorFunction Objects\u25e227.4.1 The AsyncGeneratorFunction Constructor27.4.1.1 AsyncGeneratorFunction ( p1, p2, \u2026 , pn, body )\u25e227.4.2 Properties of the AsyncGeneratorFunction Constructor27.4.2.1 AsyncGeneratorFunction.length27.4.2.2 AsyncGeneratorFunction.prototype\u25e227.4.3 Properties of the AsyncGeneratorFunction Prototype Object27.4.3.1 AsyncGeneratorFunction.prototype.constructor27.4.3.2 AsyncGeneratorFunction.prototype.prototype27.4.3.3 AsyncGeneratorFunction.prototype [ @@toStringTag ]\u25e227.4.4 AsyncGeneratorFunction Instances27.4.4.1 length27.4.4.2 name27.4.4.3 prototype\u25e227.5 Generator Objects\u25e227.5.1 Properties of the Generator Prototype Object27.5.1.1 Generator.prototype.constructor27.5.1.2 Generator.prototype.next ( value )27.5.1.3 Generator.prototype.return ( value )27.5.1.4 Generator.prototype.throw ( exception )27.5.1.5 Generator.prototype [ @@toStringTag ]27.5.2 Properties of Generator Instances\u25e227.5.3 Generator Abstract Operations27.5.3.1 GeneratorStart ( generator, generatorBody )27.5.3.2 GeneratorValidate ( generator, generatorBrand )27.5.3.3 GeneratorResume ( generator, value, generatorBrand )27.5.3.4 GeneratorResumeAbrupt ( generator, abruptCompletion, generatorBrand )27.5.3.5 GetGeneratorKind ( )27.5.3.6 GeneratorYield ( iterNextObj )27.5.3.7 Yield ( value )27.5.3.8 CreateIteratorFromClosure ( closure, generatorBrand, generatorPrototype )\u25e227.6 AsyncGenerator Objects\u25e227.6.1 Properties of the AsyncGenerator Prototype Object27.6.1.1 AsyncGenerator.prototype.constructor27.6.1.2 AsyncGenerator.prototype.next ( value )27.6.1.3 AsyncGenerator.prototype.return ( value )27.6.1.4 AsyncGenerator.prototype.throw ( exception )27.6.1.5 AsyncGenerator.prototype [ @@toStringTag ]27.6.2 Properties of AsyncGenerator Instances\u25e227.6.3 AsyncGenerator Abstract Operations27.6.3.1 AsyncGeneratorRequest Records27.6.3.2 AsyncGeneratorStart ( generator, generatorBody )27.6.3.3 AsyncGeneratorValidate ( generator, generatorBrand )27.6.3.4 AsyncGeneratorEnqueue ( generator, completion, promiseCapability )27.6.3.5 AsyncGeneratorCompleteStep ( generator, completion, done [ , realm ] )27.6.3.6 AsyncGeneratorResume ( generator, completion )27.6.3.7 AsyncGeneratorUnwrapYieldResumption ( resumptionValue )27.6.3.8 AsyncGeneratorYield ( value )27.6.3.9 AsyncGeneratorAwaitReturn ( generator )27.6.3.10 AsyncGeneratorDrainQueue ( generator )27.6.3.11 CreateAsyncIteratorFromClosure ( closure, generatorBrand, generatorPrototype )\u25e227.7 AsyncFunction Objects\u25e227.7.1 The AsyncFunction Constructor27.7.1.1 AsyncFunction ( p1, p2, \u2026 , pn, body )\u25e227.7.2 Properties of the AsyncFunction Constructor27.7.2.1 AsyncFunction.length27.7.2.2 AsyncFunction.prototype\u25e227.7.3 Properties of the AsyncFunction Prototype Object27.7.3.1 AsyncFunction.prototype.constructor27.7.3.2 AsyncFunction.prototype [ @@toStringTag ]\u25e227.7.4 AsyncFunction Instances27.7.4.1 length27.7.4.2 name\u25e227.7.5 Async Functions Abstract Operations27.7.5.1 AsyncFunctionStart ( promiseCapability, asyncFunctionBody )27.7.5.2 AsyncBlockStart ( promiseCapability, asyncBody, asyncContext )\u25e228 Reflection\u25e228.1 The Reflect Object28.1.1 Reflect.apply ( target, thisArgument, argumentsList )28.1.2 Reflect.construct ( target, argumentsList [ , newTarget ] )28.1.3 Reflect.defineProperty ( target, propertyKey, attributes )28.1.4 Reflect.deleteProperty ( target, propertyKey )28.1.5 Reflect.get ( target, propertyKey [ , receiver ] )28.1.6 Reflect.getOwnPropertyDescriptor ( target, propertyKey )28.1.7 Reflect.getPrototypeOf ( target )28.1.8 Reflect.has ( target, propertyKey )28.1.9 Reflect.isExtensible ( target )28.1.10 Reflect.ownKeys ( target )28.1.11 Reflect.preventExtensions ( target )28.1.12 Reflect.set ( target, propertyKey, V [ , receiver ] )28.1.13 Reflect.setPrototypeOf ( target, proto )28.1.14 Reflect [ @@toStringTag ]\u25e228.2 Proxy Objects\u25e228.2.1 The Proxy Constructor28.2.1.1 Proxy ( target, handler )\u25e228.2.2 Properties of the Proxy Constructor28.2.2.1 Proxy.revocable ( target, handler )\u25e228.3 Module Namespace Objects28.3.1 @@toStringTag\u25e229 Memory Model29.1 Memory Model Fundamentals29.2 Agent Events Records29.3 Chosen Value Records29.4 Candidate Executions\u25e229.5 Abstract Operations for the Memory Model29.5.1 EventSet ( execution )29.5.2 SharedDataBlockEventSet ( execution )29.5.3 HostEventSet ( execution )29.5.4 ComposeWriteEventBytes ( execution, byteIndex, Ws )29.5.5 ValueOfReadEvent ( execution, R )\u25e229.6 Relations of Candidate Executions29.6.1 agent-order29.6.2 reads-bytes-from29.6.3 reads-from29.6.4 host-synchronizes-with29.6.5 synchronizes-with29.6.6 happens-before\u25e229.7 Properties of Valid Executions29.7.1 Valid Chosen Reads29.7.2 Coherent Reads29.7.3 Tear Free Reads29.7.4 Sequentially Consistent Atomics29.7.5 Valid Executions29.8 Races29.9 Data Races29.10 Data Race Freedom29.11 Shared Memory Guidelines\u25e2A Grammar SummaryA.1 Lexical GrammarA.2 ExpressionsA.3 StatementsA.4 Functions and ClassesA.5 Scripts and ModulesA.6 Number ConversionsA.7 Universal Resource Identifier Character ClassesA.8 Regular Expressions\u25e2B Additional ECMAScript Features for Web Browsers\u25e2B.1 Additional SyntaxB.1.1 HTML-like Comments\u25e2B.1.2 Regular Expressions PatternsB.1.2.1 SS: Early ErrorsB.1.2.2 SS: IsCharacterClassB.1.2.3 SS: CharacterValueB.1.2.4 RS: CompileSubpatternB.1.2.5 RS: CompileAssertionB.1.2.6 RS: CompileAtom\u25e2B.1.2.7 RS: CompileToCharSetB.1.2.7.1 CharacterRangeOrUnion ( A, B )\u25e2B.2 Additional Built-in Properties\u25e2B.2.1 Additional Properties of the Global ObjectB.2.1.1 escape ( string )B.2.1.2 unescape ( string )\u25e2B.2.2 Additional Properties of the String.prototype ObjectB.2.2.1 String.prototype.substr ( start, length )\u25e2B.2.2.2 String.prototype.anchor ( name )B.2.2.2.1 CreateHTML ( string, tag, attribute, value )B.2.2.3 String.prototype.big ( )B.2.2.4 String.prototype.blink ( )B.2.2.5 String.prototype.bold ( )B.2.2.6 String.prototype.fixed ( )B.2.2.7 String.prototype.fontcolor ( color )B.2.2.8 String.prototype.fontsize ( size )B.2.2.9 String.prototype.italics ( )B.2.2.10 String.prototype.link ( url )B.2.2.11 String.prototype.small ( )B.2.2.12 String.prototype.strike ( )B.2.2.13 String.prototype.sub ( )B.2.2.14 String.prototype.sup ( )B.2.2.15 String.prototype.trimLeft ( )B.2.2.16 String.prototype.trimRight ( )\u25e2B.2.3 Additional Properties of the Date.prototype ObjectB.2.3.1 Date.prototype.getYear ( )B.2.3.2 Date.prototype.setYear ( year )B.2.3.3 Date.prototype.toGMTString ( )\u25e2B.2.4 Additional Properties of the RegExp.prototype ObjectB.2.4.1 RegExp.prototype.compile ( pattern, flags )\u25e2B.3 Other Additional FeaturesB.3.1 Labelled Function Declarations\u25e2B.3.2 Block-Level Function Declarations Web Legacy Compatibility SemanticsB.3.2.1 Changes to FunctionDeclarationInstantiationB.3.2.2 Changes to GlobalDeclarationInstantiationB.3.2.3 Changes to EvalDeclarationInstantiationB.3.2.4 Changes to Block SS: Early ErrorsB.3.2.5 Changes to switch Statement SS: Early ErrorsB.3.2.6 Changes to BlockDeclarationInstantiationB.3.3 FunctionDeclarations in IfStatement Statement ClausesB.3.4 VariableStatements in Catch BlocksB.3.5 Initializers in ForIn Statement Heads\u25e2B.3.6 The [[IsHTMLDDA]] Internal SlotB.3.6.1 Changes to ToBooleanB.3.6.2 Changes to IsLooselyEqualB.3.6.3 Changes to the typeof OperatorC The Strict Mode of ECMAScript\u25e2D Host Layering PointsD.1 Host HooksD.2 Host-defined FieldsD.3 Host-defined ObjectsD.4 Running JobsD.5 Internal Methods of Exotic ObjectsD.6 Built-in Objects and MethodsE Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility ImpactF Additions and Changes That Introduce Incompatibilities with Prior EditionsG ColophonH BibliographyI Copyright & Software License\nECMA-262, 13th edition, June 2022\nECMAScript\u00ae 2022 Language\u00a0Specification\n\n\n\n\nAbout this Specification\nThe document at https://tc39.es/ecma262/\n is the most accurate and up-to-date ECMAScript specification. It \ncontains the content of the most recent yearly snapshot plus any finished proposals (those that have reached Stage\u00a04 in the proposal process and thus are implemented in several implementations and will be in the next practical revision) since that snapshot was taken.\nThis document is available as a single page and as multiple pages.\nContributing to this Specification\nThis specification is developed on GitHub with the help of the \nECMAScript community. There are a number of ways to contribute to the \ndevelopment of this specification:\n\nGitHub Repository: https://github.com/tc39/ecma262\nIssues: All Issues, File a New Issue\nPull Requests: All Pull Requests, Create a New Pull Request\nTest Suite: Test262\n\n      Editors:\n      \nShu-yu Guo (@_shu)\nMichael Ficarra (@smooshMap)\nKevin Gibbons (@bakkoting)\n\n\n\n      Community:\n      \nDiscourse: https://es.discourse.group\nChat: Matrix\nMailing List Archives: https://esdiscuss.org/\n\n\n\nRefer to the colophon for more information on how this document is created.\n\n\nIntroduction\nThis Ecma Standard defines the ECMAScript 2022 Language. It is the \nthirteenth edition of the ECMAScript Language Specification. Since \npublication of the first edition in 1997, ECMAScript has grown to be one\n of the world's most widely used general-purpose programming languages. \nIt is best known as the language embedded in web browsers but has also \nbeen widely adopted for server and embedded applications.\nECMAScript is based on several originating technologies, the most \nwell-known being JavaScript (Netscape) and JScript (Microsoft). The \nlanguage was invented by Brendan Eich at Netscape and first appeared in \nthat company's Navigator 2.0 browser. It has appeared in all subsequent \nbrowsers from Netscape and in all browsers from Microsoft starting with \nInternet Explorer 3.0.\nThe development of the ECMAScript Language Specification started in\n November 1996. The first edition of this Ecma Standard was adopted by \nthe Ecma General Assembly of June 1997.\nThat Ecma Standard was submitted to ISO/IEC JTC 1 for adoption \nunder the fast-track procedure, and approved as international standard \nISO/IEC 16262, in April 1998. The Ecma General Assembly of June 1998 \napproved the second edition of ECMA-262 to keep it fully aligned with \nISO/IEC 16262. Changes between the first and the second edition are \neditorial in nature.\nThe third edition of the Standard introduced powerful regular \nexpressions, better string handling, new control statements, try/catch \nexception handling, tighter definition of errors, formatting for numeric\n output and minor changes in anticipation of future language growth. The\n third edition of the ECMAScript standard was adopted by the Ecma \nGeneral Assembly of December 1999 and published as ISO/IEC 16262:2002 in\n June 2002.\nAfter publication of the third edition, ECMAScript achieved massive\n adoption in conjunction with the World Wide Web where it has become the\n programming language that is supported by essentially all web browsers.\n Significant work was done to develop a fourth edition of ECMAScript. \nHowever, that work was not completed and not published as the fourth \nedition of ECMAScript but some of it was incorporated into the \ndevelopment of the sixth edition.\nThe fifth edition of ECMAScript (published as ECMA-262 5th\n edition) codified de facto interpretations of the language \nspecification that have become common among browser implementations and \nadded support for new features that had emerged since the publication of\n the third edition. Such features include accessor properties,\n reflective creation and inspection of objects, program control of \nproperty attributes, additional array manipulation functions, support \nfor the JSON object encoding format, and a strict mode that provides \nenhanced error checking and program security. The fifth edition was \nadopted by the Ecma General Assembly of December 2009.\nThe fifth edition was submitted to ISO/IEC JTC 1 for adoption under\n the fast-track procedure, and approved as international standard \nISO/IEC 16262:2011. Edition 5.1 of the ECMAScript Standard incorporated \nminor corrections and is the same text as ISO/IEC 16262:2011. The 5.1 \nEdition was adopted by the Ecma General Assembly of June 2011.\nFocused development of the sixth edition started in 2009, as the \nfifth edition was being prepared for publication. However, this was \npreceded by significant experimentation and language enhancement design \nefforts dating to the publication of the third edition in 1999. In a \nvery real sense, the completion of the sixth edition is the culmination \nof a fifteen year effort. The goals for this edition included providing \nbetter support for large applications, library creation, and for use of \nECMAScript as a compilation target for other languages. Some of its \nmajor enhancements included modules, class declarations, lexical block \nscoping, iterators and generators, promises for asynchronous \nprogramming, destructuring patterns, and proper tail calls. The \nECMAScript library of built-ins was expanded to support additional data \nabstractions including maps, sets, and arrays of binary numeric values \nas well as additional support for Unicode supplemental characters in \nstrings and regular expressions. The built-ins were also made extensible\n via subclassing. The sixth edition provides the foundation for regular,\n incremental language and library enhancements. The sixth edition was \nadopted by the General Assembly of June 2015.\nECMAScript 2016 was the first ECMAScript edition released under \nEcma TC39's new yearly release cadence and open development process. A \nplain-text source document was built from the ECMAScript 2015 source \ndocument to serve as the base for further development entirely on \nGitHub. Over the year of this standard's development, hundreds of pull \nrequests and issues were filed representing thousands of bug fixes, \neditorial fixes and other improvements. Additionally, numerous software \ntools were developed to aid in this effort including Ecmarkup, \nEcmarkdown, and Grammarkdown. ES2016 also included support for a new \nexponentiation operator and adds a new method to Array.prototype called includes.\nECMAScript 2017 introduced Async Functions, Shared Memory, and \nAtomics along with smaller language and library enhancements, bug fixes,\n and editorial updates. Async functions improve the asynchronous \nprogramming experience by providing syntax for promise-returning \nfunctions. Shared Memory and Atomics introduce a new memory model that allows multi-agent\n programs to communicate using atomic operations that ensure a \nwell-defined execution order even on parallel CPUs. It also included new\n static methods on Object: Object.values, Object.entries, and Object.getOwnPropertyDescriptors.\nECMAScript 2018 introduced support for asynchronous iteration via \nthe AsyncIterator protocol and async generators. It also included four \nnew regular expression features: the dotAll flag, named \ncapture groups, Unicode property escapes, and look-behind assertions. \nLastly it included object rest and spread properties.\nECMAScript 2019 introduced a few new built-in functions: flat and flatMap on Array.prototype for flattening arrays, Object.fromEntries for directly turning the return value of Object.entries into a new Object, and trimStart and trimEnd on String.prototype as better-named alternatives to the widely implemented but non-standard String.prototype.trimLeft and trimRight\n built-ins. In addition, it included a few minor updates to syntax and \nsemantics. Updated syntax included optional catch binding parameters and\n allowing U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) in \nstring literals to align with JSON. Other updates included requiring \nthat Array.prototype.sort be a stable sort, requiring that JSON.stringify return well-formed UTF-8 regardless of input, and clarifying Function.prototype.toString by requiring that it either return the corresponding original source text or a standard placeholder.\nECMAScript 2020, the 11th edition, introduced the matchAll method for Strings, to produce an iterator for all match objects generated by a global regular expression; import(), a syntax to asynchronously import Modules with a dynamic specifier; BigInt, a new number primitive for working with arbitrary precision integers; Promise.allSettled, a new Promise combinator that does not short-circuit; globalThis, a universal way to access the global this value; dedicated export * as ns from 'module' syntax for use within modules; increased standardization of for-in enumeration order; import.meta, a host-populated\n object available in Modules that may contain contextual information \nabout the Module; as well as adding two new syntax features to improve \nworking with \u201cnullish\u201d values (null or undefined):\n nullish coalescing, a value selection operator; and optional chaining, a\n property access and function invocation operator that short-circuits if\n the value to access/invoke is nullish.\nECMAScript 2021, the 12th edition, introduced the replaceAll method for Strings; Promise.any, a Promise combinator that short-circuits when an input value is fulfilled; AggregateError, a new Error type to represent multiple errors at once; logical assignment operators (??=, &&=, ||=); WeakRef, for referring to a target object without preserving it from garbage collection, and FinalizationRegistry,\n to manage registration and unregistration of cleanup operations \nperformed when target objects are garbage collected; separators for \nnumeric literals (1_000); and Array.prototype.sort was made more precise, reducing the amount of cases that result in an implementation-defined sort order.\nECMAScript 2022, the 13th edition, introduced top-level await, allowing the keyword\n to be used at the top level of modules; new class elements: public and \nprivate instance fields, public and private static fields, private \ninstance methods and accessors, and private static methods and \naccessors; static blocks inside classes, to perform per-class evaluation\n initialization; the #x in obj syntax, to test for presence of private fields on objects; regular expression match indices via the /d flag, which provides start and end indices for matched substrings; the cause property on Error objects, which can be used to record a causation chain in errors; the at method for Strings, Arrays, and TypedArrays, which allows relative indexing; and Object.hasOwn, a convenient alternative to Object.prototype.hasOwnProperty.\nDozens of individuals representing many organizations have made \nvery significant contributions within Ecma TC39 to the development of \nthis edition and to the prior editions. In addition, a vibrant community\n has emerged supporting TC39's ECMAScript efforts. This community has \nreviewed numerous drafts, filed thousands of bug reports, performed \nimplementation experiments, contributed test suites, and educated the \nworld-wide developer community about ECMAScript. Unfortunately, it is \nimpossible to identify and acknowledge every person and organization who\n has contributed to this effort.\n\n    Allen Wirfs-Brock\n    ECMA-262, Project Editor, 6th Edition\n  \n\n    Brian Terlson\n    ECMA-262, Project Editor, 7th through 10th Editions\n  \n\n    Jordan Harband\n    ECMA-262, Project Editor, 10th through 12th Editions\n  \n\n\n1 Scope\nThis Standard defines the ECMAScript 2022 general-purpose programming language.\n\n\n2 Conformance\nA conforming implementation of ECMAScript must provide and support \nall the types, values, objects, properties, functions, and program \nsyntax and semantics described in this specification.\nA conforming implementation of ECMAScript must interpret source \ntext input in conformance with the latest version of the Unicode \nStandard and ISO/IEC 10646.\nA conforming implementation of ECMAScript that provides an \napplication programming interface (API) that supports programs that need\n to adapt to the linguistic and cultural conventions used by different \nhuman languages and countries must implement the interface defined by \nthe most recent edition of ECMA-402 that is compatible with this \nspecification.\nA conforming implementation of ECMAScript may provide additional \ntypes, values, objects, properties, and functions beyond those described\n in this specification. In particular, a conforming implementation of \nECMAScript may provide properties not described in this specification, \nand values for those properties, for objects that are described in this \nspecification.\nA conforming implementation of ECMAScript may support program and \nregular expression syntax not described in this specification. In \nparticular, a conforming implementation of ECMAScript may support \nprogram syntax that makes use of any \u201cfuture reserved words\u201d noted in subclause 12.6.2 of this specification.\nA conforming implementation of ECMAScript must not implement any extension that is listed as a Forbidden Extension in subclause 17.1.\nA conforming implementation of ECMAScript must not redefine any facilities that are not implementation-defined, implementation-approximated, or host-defined.\nA conforming implementation of ECMAScript may choose to implement or not implement Normative Optional\n subclauses. If any Normative Optional behaviour is implemented, all of \nthe behaviour in the containing Normative Optional clause must be \nimplemented. A Normative Optional clause is denoted in this \nspecification with the words \"Normative Optional\" in a coloured box, as \nshown below.\nNormative Optional\n2.1 Example Normative Optional Clause Heading\nExample clause contents.\n\nA conforming implementation of ECMAScript must implement Legacy\n subclauses, unless they are also marked as Normative Optional. All of \nthe language features and behaviours specified within Legacy subclauses \nhave one or more undesirable characteristics. However, their continued \nusage in existing applications prevents their removal from this \nspecification. These features are not considered part of the core \nECMAScript language. Programmers should not use or assume the existence \nof these features and behaviours when writing new ECMAScript code.\nLegacy\n2.2 Example Legacy Clause Heading\nExample clause contents.\n\nNormative Optional, Legacy\n2.3 Example Legacy Normative Optional Clause Heading\nExample clause contents.\n\n\n\n3 Normative References\nThe following referenced documents are indispensable for the \napplication of this document. For dated references, only the edition \ncited applies. For undated references, the latest edition of the \nreferenced document (including any amendments) applies.\nISO/IEC 10646 Information Technology \u2014 Universal Multiple-Octet \nCoded Character Set (UCS) plus Amendment 1:2005, Amendment 2:2006, \nAmendment 3:2008, and Amendment 4:2008, plus additional amendments and corrigenda, or successor\n\n    ECMA-402, ECMAScript 2015 Internationalization API Specification.\nhttps://ecma-international.org/publications/standards/Ecma-402.htm\n\n\n    ECMA-404, The JSON Data Interchange Format.\nhttps://ecma-international.org/publications/standards/Ecma-404.htm\n\n\n\n4 Overview\nThis section contains a non-normative overview of the ECMAScript language.\nECMAScript is an object-oriented programming language for \nperforming computations and manipulating computational objects within a host environment.\n ECMAScript as defined here is not intended to be computationally \nself-sufficient; indeed, there are no provisions in this specification \nfor input of external data or output of computed results. Instead, it is\n expected that the computational environment of an ECMAScript program \nwill provide not only the objects and other facilities described in this\n specification but also certain environment-specific objects, whose \ndescription and behaviour are beyond the scope of this specification \nexcept to indicate that they may provide certain properties that can be \naccessed and certain functions that can be called from an ECMAScript \nprogram.\nECMAScript was originally designed to be used as a scripting \nlanguage, but has become widely used as a general-purpose programming \nlanguage. A scripting language is a programming language that \nis used to manipulate, customize, and automate the facilities of an \nexisting system. In such systems, useful functionality is already \navailable through a user interface, and the scripting language is a \nmechanism for exposing that functionality to program control. In this \nway, the existing system is said to provide a host environment\n of objects and facilities, which completes the capabilities of the \nscripting language. A scripting language is intended for use by both \nprofessional and non-professional programmers.\nECMAScript was originally designed to be a Web scripting language,\n providing a mechanism to enliven Web pages in browsers and to perform \nserver computation as part of a Web-based client-server architecture. \nECMAScript is now used to provide core scripting capabilities for a \nvariety of host environments. Therefore the core language is specified in this document apart from any particular host environment.\nECMAScript usage has moved beyond simple scripting and it is now \nused for the full spectrum of programming tasks in many different \nenvironments and scales. As the usage of ECMAScript has expanded, so \nhave the features and facilities it provides. ECMAScript is now a fully \nfeatured general-purpose programming language.\n\n4.1 Web Scripting\nA web browser provides an ECMAScript host environment\n for client-side computation including, for instance, objects that \nrepresent windows, menus, pop-ups, dialog boxes, text areas, anchors, \nframes, history, cookies, and input/output. Further, the host environment\n provides a means to attach scripting code to events such as change of \nfocus, page and image loading, unloading, error and abort, selection, \nform submission, and mouse actions. Scripting code appears within the \nHTML and the displayed page is a combination of user interface elements \nand fixed and computed text and images. The scripting code is reactive \nto user interaction, and there is no need for a main program.\nA web server provides a different host environment\n for server-side computation including objects representing requests, \nclients, and files; and mechanisms to lock and share data. By using \nbrowser-side and server-side scripting together, it is possible to \ndistribute computation between the client and server while providing a \ncustomized user interface for a Web-based application.\nEach Web browser and server that supports ECMAScript supplies its own host environment, completing the ECMAScript execution environment.\n\n\n4.2 Hosts and Implementations\nTo aid integrating ECMAScript into host environments, this specification defers the definition of certain facilities (e.g., abstract operations),\n either in whole or in part, to a source outside of this specification. \nEditorially, this specification distinguishes the following kinds of \ndeferrals.\n\nAn implementation is an external source that further defines facilities enumerated in Annex D or those that are marked as implementation-defined or implementation-approximated. In informal use, an implementation refers to a concrete artefact, such as a particular web browser.\nAn implementation-defined \nfacility is one that defers its definition to an external source without\n further qualification. This specification does not make any \nrecommendations for particular behaviours, and conforming \nimplementations are free to choose any behaviour within the constraints \nput forth by this specification.\nAn implementation-approximated\n facility is one that defers its definition to an external source while \nrecommending an ideal behaviour. While conforming implementations are \nfree to choose any behaviour within the constraints put forth by this \nspecification, they are encouraged to strive to approximate the ideal. \nSome mathematical operations, such as Math.exp, are implementation-approximated.\nA host is an external source that further defines facilities listed in Annex D but does not further define other implementation-defined or implementation-approximated facilities. In informal use, a host\n refers to the set of all implementations, such as the set of all web \nbrowsers, that interface with this specification in the same way via \nAnnex D. A host is often an external specification, such as WHATWG HTML (https://html.spec.whatwg.org/). In other words, facilities that are host-defined are often further defined in external specifications.\nA host hook is an abstract operation that is defined in whole or in part by an external source. All host hooks must be listed in Annex D. A host hook must conform to at least the following requirements:\n\nIt must return either a normal completion or a throw completion.\n\nA host-defined facility is one that defers its definition to an external source without further qualification and is listed in Annex D. Implementations that are not hosts may also provide definitions for host-defined facilities.\nA host environment is a particular choice of definition for all host-defined facilities. A host environment typically includes objects or functions which allow obtaining input and providing output as host-defined properties of the global object.\nThis specification follows the editorial convention of always using the most specific term. For example, if a facility is host-defined, it should not be referred to as implementation-defined.\nBoth hosts and implementations may interface with this specification via the language types, specification types, abstract operations, grammar productions, intrinsic objects, and intrinsic symbols defined herein.\n\n\n4.3 ECMAScript Overview\nThe following is an informal overview of ECMAScript\u2014not all parts\n of the language are described. This overview is not part of the \nstandard proper.\nECMAScript is object-based: basic language and host facilities are provided by objects, and an ECMAScript program is a cluster of communicating objects. In ECMAScript, an object is a collection of zero or more properties each with attributes that determine how each property can be used\u2014for example, when the Writable attribute for a property is set to false,\n any attempt by executed ECMAScript code to assign a different value to \nthe property fails. Properties are containers that hold other objects, primitive values, or functions. A primitive value is a member of one of the following built-in types: Undefined, Null, Boolean, Number, BigInt, String, and Symbol; an object is a member of the built-in type Object; and a function is a callable object. A function that is associated with an object via a property is called a method.\nECMAScript defines a collection of built-in objects that round out the definition of ECMAScript entities. These built-in objects include the global object; objects that are fundamental to the runtime semantics of the language including Object, Function, Boolean, Symbol, and various Error objects; objects that represent and manipulate numeric values including Math, Number, and Date; the text processing objects String and RegExp; objects that are indexed collections of values including Array\n and nine different kinds of Typed Arrays whose elements all have a \nspecific numeric data representation; keyed collections including Map and Set objects; objects supporting structured data including the JSON object, ArrayBuffer, SharedArrayBuffer, and DataView; objects supporting control abstractions including generator functions and Promise objects; and reflection objects including Proxy and Reflect.\nECMAScript also defines a set of built-in operators. \nECMAScript operators include various unary operations, multiplicative \noperators, additive operators, bitwise shift operators, relational \noperators, equality operators, binary bitwise operators, binary logical \noperators, assignment operators, and the comma operator.\nLarge ECMAScript programs are supported by modules which\n allow a program to be divided into multiple sequences of statements and\n declarations. Each module explicitly identifies declarations it uses \nthat need to be provided by other modules and which of its declarations \nare available for use by other modules.\nECMAScript syntax intentionally resembles Java syntax. ECMAScript\n syntax is relaxed to enable it to serve as an easy-to-use scripting \nlanguage. For example, a variable is not required to have its type \ndeclared nor are types associated with properties, and defined functions\n are not required to have their declarations appear textually before \ncalls to them.\n\n4.3.1 Objects\nEven though ECMAScript includes syntax for class definitions, \nECMAScript objects are not fundamentally class-based such as those in \nC++, Smalltalk, or Java. Instead objects may be created in various ways \nincluding via a literal notation or via constructors\n which create objects and then execute code that initializes all or part\n of them by assigning initial values to their properties. Each constructor is a function that has a property named \"prototype\" that is used to implement prototype-based inheritance and shared properties. Objects are created by using constructors in new expressions; for example, new Date(2009, 11) creates a new Date object. Invoking a constructor without using new has consequences that depend on the constructor. For example, Date() produces a string representation of the current date and time rather than an object.\nEvery object created by a constructor has an implicit reference (called the object's prototype) to the value of its constructor's \"prototype\" property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain.\n When a reference is made to a property in an object, that reference is \nto the property of that name in the first object in the prototype chain \nthat contains a property of that name. In other words, first the object \nmentioned directly is examined for such a property; if that object \ncontains the named property, that is the property to which the reference\n refers; if that object does not contain the named property, the \nprototype for that object is examined next; and so on.\n\n\nFigure 1: Object/Prototype Relationships\n\n\nIn a class-based object-oriented language, in general, state is\n carried by instances, methods are carried by classes, and inheritance \nis only of structure and behaviour. In ECMAScript, the state and methods\n are carried by objects, while structure, behaviour, and state are all \ninherited.\nAll objects that do not directly contain a particular property \nthat their prototype contains share that property and its value. Figure 1\n illustrates this:\nCF is a constructor (and also an object). Five objects have been created by using new expressions: cf1, cf2, cf3, cf4, and cf5. Each of these objects contains properties named \"q1\" and \"q2\". The dashed lines represent the implicit prototype relationship; so, for example, cf3's prototype is CFp. The constructor, CF, has two properties itself, named \"P1\" and \"P2\", which are not visible to CFp, cf1, cf2, cf3, cf4, or cf5. The property named \"CFP1\" in CFp is shared by cf1, cf2, cf3, cf4, and cf5 (but not by CF), as are any properties found in CFp's implicit prototype chain that are not named \"q1\", \"q2\", or \"CFP1\". Notice that there is no implicit prototype link between CF and CFp.\nUnlike most class-based object languages, properties can be added to objects dynamically by assigning values to them. That is, constructors\n are not required to name or assign values to all or any of the \nconstructed object's properties. In the above diagram, one could add a \nnew shared property for cf1, cf2, cf3, cf4, and cf5 by assigning a new value to the property in CFp.\nAlthough ECMAScript objects are not inherently class-based, it \nis often convenient to define class-like abstractions based upon a \ncommon pattern of constructor\n functions, prototype objects, and methods. The ECMAScript built-in \nobjects themselves follow such a class-like pattern. Beginning with \nECMAScript 2015, the ECMAScript language includes syntactic class \ndefinitions that permit programmers to concisely define objects that \nconform to the same class-like abstraction pattern used by the built-in \nobjects.\n\n\n4.3.2 The Strict Variant of ECMAScript\nThe ECMAScript Language recognizes the possibility that some \nusers of the language may wish to restrict their usage of some features \navailable in the language. They might do so in the interests of \nsecurity, to avoid what they consider to be error-prone features, to get\n enhanced error checking, or for other reasons of their choosing. In \nsupport of this possibility, ECMAScript defines a strict variant of the \nlanguage. The strict variant of the language excludes some specific \nsyntactic and semantic features of the regular ECMAScript language and \nmodifies the detailed semantics of some features. The strict variant \nalso specifies additional error conditions that must be reported by \nthrowing error exceptions in situations that are not specified as errors\n by the non-strict form of the language.\nThe strict variant of ECMAScript is commonly referred to as the strict mode\n of the language. Strict mode selection and use of the strict mode \nsyntax and semantics of ECMAScript is explicitly made at the level of \nindividual ECMAScript source text units as described in 11.2.2.\n Because strict mode is selected at the level of a syntactic source text\n unit, strict mode only imposes restrictions that have local effect \nwithin such a source text unit. Strict mode does not restrict or modify \nany aspect of the ECMAScript semantics that must operate consistently \nacross multiple source text units. A complete ECMAScript program may be \ncomposed of both strict mode and non-strict mode ECMAScript source text \nunits. In this case, strict mode only applies when actually executing \ncode that is defined within a strict mode source text unit.\nIn order to conform to this specification, an ECMAScript \nimplementation must implement both the full unrestricted ECMAScript \nlanguage and the strict variant of the ECMAScript language as defined by\n this specification. In addition, an implementation must support the \ncombination of unrestricted and strict mode source text units into a \nsingle composite program.\n\n\n\n4.4 Terms and Definitions\nFor the purposes of this document, the following terms and definitions apply.\n\n4.4.1 implementation-approximated\nan implementation-approximated facility is defined in whole or in part by an external source but has a recommended, ideal behaviour in this specification\n\n\n4.4.2 implementation-defined\nan implementation-defined facility is defined in whole or in part by an external source to this specification\n\n\n4.4.3 host-defined\nsame as implementation-defined\nNote\nEditorially, see clause 4.2.\n\n\n\n4.4.4 type\nset of data values as defined in clause 6\n\n\n4.4.5 primitive value\nmember of one of the types Undefined, Null, Boolean, Number, BigInt, Symbol, or String as defined in clause 6\nNote\nA primitive value is a datum that is represented directly at the lowest level of the language implementation.\n\n\n\n4.4.6 object\nmember of the type Object\nNote\nAn object is a collection of properties and has a single prototype object. The prototype may be the null value.\n\n\n\n4.4.7 constructor\nfunction object that creates and initializes objects\nNote\nThe value of a constructor's \"prototype\" property is a prototype object that is used to implement inheritance and shared properties.\n\n\n\n4.4.8 prototype\nobject that provides shared properties for other objects\nNote\nWhen a constructor creates an object, that object implicitly references the constructor's \"prototype\" property for the purpose of resolving property references. The constructor's \"prototype\" property can be referenced by the program expression constructor.prototype,\n and properties added to an object's prototype are shared, through \ninheritance, by all objects sharing the prototype. Alternatively, a new \nobject may be created with an explicitly specified prototype by using \nthe Object.create built-in function.\n\n\n\n4.4.9 ordinary object\nobject that has the default behaviour for the essential internal methods that must be supported by all objects\n\n\n4.4.10 exotic object\nobject that does not have the default behaviour for one or more of the essential internal methods\nNote\nAny object that is not an ordinary object is an exotic object.\n\n\n\n4.4.11 standard object\nobject whose semantics are defined by this specification\n\n\n4.4.12 built-in object\nobject specified and supplied by an ECMAScript implementation\nNote\nStandard built-in objects are defined in this specification. \nAn ECMAScript implementation may specify and supply additional kinds of \nbuilt-in objects. A built-in constructor is a built-in object that is also a constructor.\n\n\n\n4.4.13 undefined value\nprimitive value used when a variable has not been assigned a value\n\n\n4.4.14 Undefined type\ntype whose sole value is the undefined value\n\n\n4.4.15 null value\nprimitive value that represents the intentional absence of any object value\n\n\n4.4.16 Null type\ntype whose sole value is the null value\n\n\n4.4.17 Boolean value\nmember of the Boolean type\nNote\nThere are only two Boolean values, true and false.\n\n\n\n4.4.18 Boolean type\ntype consisting of the primitive values true and false\n\n\n4.4.19 Boolean object\nmember of the Object type that is an instance of the standard built-in Boolean constructor\nNote\nA Boolean object is created by using the Boolean constructor in a new\n expression, supplying a Boolean value as an argument. The resulting \nobject has an internal slot whose value is the Boolean value. A Boolean \nobject can be coerced to a Boolean value.\n\n\n\n4.4.20 String value\nprimitive value that is a finite ordered sequence of zero or more 16-bit unsigned integer values\nNote\nA String value is a member of the String type. Each integer\n value in the sequence usually represents a single 16-bit unit of UTF-16\n text. However, ECMAScript does not place any restrictions or \nrequirements on the values except that they must be 16-bit unsigned integers.\n\n\n\n4.4.21 String type\nset of all possible String values\n\n\n4.4.22 String object\nmember of the Object type that is an instance of the standard built-in String constructor\nNote\nA String object is created by using the String constructor in a new\n expression, supplying a String value as an argument. The resulting \nobject has an internal slot whose value is the String value. A String \nobject can be coerced to a String value by calling the String constructor as a function (22.1.1.1).\n\n\n\n4.4.23 Number value\nprimitive value corresponding to a double-precision 64-bit binary format IEEE 754-2019 value\nNote\nA Number value is a member of the Number type and is a direct representation of a number.\n\n\n\n4.4.24 Number type\nset of all possible Number values including the special \u201cNot-a-Number\u201d (NaN) value, positive infinity, and negative infinity\n\n\n4.4.25 Number object\nmember of the Object type that is an instance of the standard built-in Number constructor\nNote\nA Number object is created by using the Number constructor in a new expression, supplying a Number value as an argument. The resulting object has an internal slot whose value is the Number value. A Number object can be coerced to a Number value by calling the Number constructor as a function (21.1.1.1).\n\n\n\n4.4.26 Infinity\nNumber value that is the positive infinite Number value\n\n\n4.4.27 NaN\nNumber value that is an IEEE 754-2019 \u201cNot-a-Number\u201d value\n\n\n4.4.28 BigInt value\nprimitive value corresponding to an arbitrary-precision integer value\n\n\n4.4.29 BigInt type\nset of all possible BigInt values\n\n\n4.4.30 BigInt object\nmember of the Object type that is an instance of the standard built-in BigInt constructor\n\n\n4.4.31 Symbol value\nprimitive value that represents a unique, non-String Object property key\n\n\n4.4.32 Symbol type\nset of all possible Symbol values\n\n\n4.4.33 Symbol object\nmember of the Object type that is an instance of the standard built-in Symbol constructor\n\n\n4.4.34 function\nmember of the Object type that may be invoked as a subroutine\nNote\nIn addition to its properties, a function contains executable\n code and state that determine how it behaves when invoked. A function's\n code may or may not be written in ECMAScript.\n\n\n\n4.4.35 built-in function\nbuilt-in object that is a function\nNote\nExamples of built-in functions include parseInt and Math.exp. A host or implementation may provide additional built-in functions that are not described in this specification.\n\n\n\n4.4.36 property\npart of an object that associates a key (either a String value or a Symbol value) and a value\nNote\nDepending upon the form of the property the value may be \nrepresented either directly as a data value (a primitive value, an \nobject, or a function object) or indirectly by a pair of accessor functions.\n\n\n\n4.4.37 method\nfunction that is the value of a property\nNote\nWhen a function is called as a method of an object, the object is passed to the function as its this value.\n\n\n\n4.4.38 built-in method\nmethod that is a built-in function\nNote\nStandard built-in methods are defined in this specification. A host or implementation may provide additional built-in methods that are not described in this specification.\n\n\n\n4.4.39 attribute\ninternal value that defines some characteristic of a property\n\n\n4.4.40 own property\nproperty that is directly contained by its object\n\n\n4.4.41 inherited property\nproperty of an object that is not an own property but is a property (either own or inherited) of the object's prototype\n\n\n\n4.5 Organization of This Specification\nThe remainder of this specification is organized as follows:\nClause 5 defines the notational conventions used throughout the specification.\nClauses 6 through 10 define the execution environment within which ECMAScript programs operate.\nClauses 11 through 17\n define the actual ECMAScript programming language including its \nsyntactic encoding and the execution semantics of all language features.\nClauses 18 through 28\n define the ECMAScript standard library. They include the definitions of\n all of the standard objects that are available for use by ECMAScript \nprograms as they execute.\nClause 29 describes the memory consistency model of accesses on SharedArrayBuffer-backed memory and methods of the Atomics object.\n\n\n\n5 Notational Conventions\n\n5.1 Syntactic and Lexical Grammars\n\n5.1.1 Context-Free Grammars\nA context-free grammar consists of a number of productions. Each production has an abstract symbol called a nonterminal as its left-hand side, and a sequence of zero or more nonterminal and terminal symbols as its right-hand side. For each grammar, the terminal symbols are drawn from a specified alphabet.\nA chain production is a production that has exactly one nonterminal symbol on its right-hand side along with zero or more terminal symbols.\nStarting from a sentence consisting of a single distinguished nonterminal, called the goal symbol, a given context-free grammar specifies a language,\n namely, the (perhaps infinite) set of possible sequences of terminal \nsymbols that can result from repeatedly replacing any nonterminal in the\n sequence with a right-hand side of a production for which the \nnonterminal is the left-hand side.\n\n\n5.1.2 The Lexical and RegExp Grammars\nA lexical grammar for ECMAScript is given in clause 12. This grammar has as its terminal symbols Unicode code points that conform to the rules for SourceCharacter defined in 11.1. It defines a set of productions, starting from the goal symbol InputElementDiv, InputElementTemplateTail, or InputElementRegExp, or InputElementRegExpOrTemplateTail, that describe how sequences of such code points are translated into a sequence of input elements.\nInput elements other than white space and comments form the \nterminal symbols for the syntactic grammar for ECMAScript and are called\n ECMAScript tokens. These tokens are the reserved words,\n identifiers, literals, and punctuators of the ECMAScript language. \nMoreover, line terminators, although not considered to be tokens, also \nbecome part of the stream of input elements and guide the process of \nautomatic semicolon insertion (12.9).\n Simple white space and single-line comments are discarded and do not \nappear in the stream of input elements for the syntactic grammar. A MultiLineComment (that is, a comment of the form /*\u2026*/ regardless of whether it spans more than one line) is likewise simply discarded if it contains no line terminator; but if a MultiLineComment\n contains one or more line terminators, then it is replaced by a single \nline terminator, which becomes part of the stream of input elements for \nthe syntactic grammar.\nA RegExp grammar for ECMAScript is given in 22.2.1. This grammar also has as its terminal symbols the code points as defined by SourceCharacter. It defines a set of productions, starting from the goal symbol Pattern, that describe how sequences of code points are translated into regular expression patterns.\nProductions of the lexical and RegExp grammars are distinguished by having two colons \u201c::\u201d as separating punctuation. The lexical and RegExp grammars share some productions.\n\n\n5.1.3 The Numeric String Grammar\nAnother grammar is used for translating Strings into numeric \nvalues. This grammar is similar to the part of the lexical grammar \nhaving to do with numeric literals and has as its terminal symbols SourceCharacter. This grammar appears in 7.1.4.1.\nProductions of the numeric string grammar are distinguished by having three colons \u201c:::\u201d as punctuation.\n\n\n5.1.4 The Syntactic Grammar\nThe syntactic grammar for ECMAScript is given in clauses 13 through 16. This grammar has ECMAScript tokens defined by the lexical grammar as its terminal symbols (5.1.2). It defines a set of productions, starting from two alternative goal symbols Script and Module, that describe how sequences of tokens form syntactically correct independent components of ECMAScript programs.\nWhen a stream of code points is to be parsed as an ECMAScript Script or Module,\n it is first converted to a stream of input elements by repeated \napplication of the lexical grammar; this stream of input elements is \nthen parsed by a single application of the syntactic grammar. The input \nstream is syntactically in error if the tokens in the stream of input \nelements cannot be parsed as a single instance of the goal nonterminal (Script or Module), with no tokens left over.\nWhen a parse is successful, it constructs a parse tree, a rooted tree structure in which each node is a Parse Node. Each Parse Node is an instance\n of a symbol in the grammar; it represents a span of the source text \nthat can be derived from that symbol. The root node of the parse tree, \nrepresenting the whole of the source text, is an instance of the parse's\n goal symbol.\n When a Parse Node is an instance of a nonterminal, it is also an \ninstance of some production that has that nonterminal as its left-hand \nside. Moreover, it has zero or more children, one for each \nsymbol on the production's right-hand side: each child is a Parse Node \nthat is an instance of the corresponding symbol.\nNew Parse Nodes are instantiated for each invocation of the \nparser and never reused between parses even of identical source text. \nParse Nodes are considered the same Parse Node if and only if\n they represent the same span of source text, are instances of the same \ngrammar symbol, and resulted from the same parser invocation.\nNote 1\nParsing the same String multiple times will lead to different Parse Nodes. For example, consider:\nlet str = \"1 + 1;\";\neval(str);\neval(str);\nEach call to eval converts the value of str\n into ECMAScript source text and performs an independent parse that \ncreates its own separate tree of Parse Nodes. The trees are distinct \neven though each parse operates upon a source text that was derived from\n the same String value.\n\nNote 2Parse Nodes are specification artefacts, and implementations are not required to use an analogous data structure.\nProductions of the syntactic grammar are distinguished by having just one colon \u201c:\u201d as punctuation.\nThe syntactic grammar as presented in clauses 13 through 16 is not a complete account of which token sequences are accepted as a correct ECMAScript Script or Module.\n Certain additional token sequences are also accepted, namely, those \nthat would be described by the grammar if only semicolons were added to \nthe sequence in certain places (such as before line terminator \ncharacters). Furthermore, certain token sequences that are described by \nthe grammar are not considered acceptable if a line terminator character\n appears in certain \u201cawkward\u201d places.\nIn certain cases, in order to avoid ambiguities, the syntactic \ngrammar uses generalized productions that permit token sequences that do\n not form a valid ECMAScript Script or Module. For example, this technique is used for object literals and object destructuring patterns. In such cases a more restrictive supplemental grammar is provided that further restricts the acceptable token sequences. Typically, an early error rule will then state that, in certain contexts, \"P must cover an N\", where P is a Parse Node (an instance of the generalized production) and N is a nonterminal from the supplemental grammar. This means:\n\nThe sequence of tokens originally matched by P is parsed again using N as the goal symbol. If N takes grammatical parameters, then they are set to the same values used when P was originally parsed.\nIf the sequence of tokens can be parsed as a single instance of N, with no tokens left over, then:\n          \nWe refer to that instance of N (a Parse Node, unique for a given P) as \"the N that is covered by P\".\nAll Early Error rules for N and its derived productions also apply to the N that is covered by P.\n\n\nOtherwise (if the parse fails), it is an early Syntax Error.\n\n\n\n5.1.5 Grammar Notation\nIn the ECMAScript grammars, some terminal symbols are shown in fixed-width\n font. These are to appear in a source text exactly as written. All \nterminal symbol code points specified in this way are to be understood \nas the appropriate Unicode code points from the Basic Latin range, as \nopposed to any similar-looking code points from other Unicode ranges. A \ncode point in a terminal symbol cannot be expressed by a \\ UnicodeEscapeSequence.\nIn grammars whose terminal symbols are individual Unicode code \npoints (i.e., the lexical, RegExp, and numeric string grammars), a \ncontiguous run of multiple fixed-width code points appearing in a \nproduction is a simple shorthand for the same sequence of code points, \nwritten as standalone terminal symbols.\nFor example, the production:\n\nHexIntegerLiteral :: \n0x\nHexDigits\n\n\n\nis a shorthand for:\n\nHexIntegerLiteral :: \n0\nx\nHexDigits\n\n\n\nIn contrast, in the syntactic grammar, a contiguous run of fixed-width code points is a single terminal symbol.\nTerminal symbols come in two other forms:\n\nIn the lexical and RegExp grammars, Unicode code points \nwithout a conventional printed representation are instead shown in the \nform \"<ABBREV>\" where \"ABBREV\" is a mnemonic for the code point. \nThese forms are defined in Unicode Format-Control Characters and White Space.\nIn the syntactic grammar, certain terminal symbols (e.g. IdentifierName and RegularExpressionLiteral) are shown in italics, as they refer to the nonterminals of the same name in the lexical grammar.\n\nNonterminal symbols are shown in italic type. The \ndefinition of a nonterminal (also called a \u201cproduction\u201d) is introduced \nby the name of the nonterminal being defined followed by one or more \ncolons. (The number of colons indicates to which grammar the production \nbelongs.) One or more alternative right-hand sides for the nonterminal \nthen follow on succeeding lines. For example, the syntactic definition:\n\nWhileStatement : \nwhile\n(\nExpression\n)\nStatement\n\n\n\nstates that the nonterminal WhileStatement represents the token while, followed by a left parenthesis token, followed by an Expression, followed by a right parenthesis token, followed by a Statement. The occurrences of Expression and Statement are themselves nonterminals. As another example, the syntactic definition:\n\nArgumentList : \nAssignmentExpression\n\n\nArgumentList\n,\nAssignmentExpression\n\n\n\nstates that an ArgumentList may represent either a single AssignmentExpression or an ArgumentList, followed by a comma, followed by an AssignmentExpression. This definition of ArgumentList is recursive, that is, it is defined in terms of itself. The result is that an ArgumentList may contain any positive number of arguments, separated by commas, where each argument expression is an AssignmentExpression. Such recursive definitions of nonterminals are common.\nThe subscripted suffix \u201copt\u201d, which may appear after\n a terminal or nonterminal, indicates an optional symbol. The \nalternative containing the optional symbol actually specifies two \nright-hand sides, one that omits the optional element and one that \nincludes it. This means that:\n\nVariableDeclaration : \nBindingIdentifier\nInitializeropt\n\n\n\nis a convenient abbreviation for:\n\nVariableDeclaration : \nBindingIdentifier\n\n\nBindingIdentifier\nInitializer\n\n\n\nand that:\n\nForStatement : \nfor\n(\nLexicalDeclaration\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\nis a convenient abbreviation for:\n\nForStatement : \nfor\n(\nLexicalDeclaration\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nLexicalDeclaration\nExpression\n;\nExpressionopt\n)\nStatement\n\n\n\nwhich in turn is an abbreviation for:\n\nForStatement : \nfor\n(\nLexicalDeclaration\n;\n)\nStatement\n\n\nfor\n(\nLexicalDeclaration\n;\nExpression\n)\nStatement\n\n\nfor\n(\nLexicalDeclaration\nExpression\n;\n)\nStatement\n\n\nfor\n(\nLexicalDeclaration\nExpression\n;\nExpression\n)\nStatement\n\n\n\nso, in this example, the nonterminal ForStatement actually has four alternative right-hand sides.\nA production may be parameterized by a subscripted annotation of the form \u201c[parameters]\u201d, which may appear as a suffix to the nonterminal symbol defined by the production. \u201cparameters\u201d\n may be either a single name or a comma separated list of names. A \nparameterized production is shorthand for a set of productions defining \nall combinations of the parameter names, preceded by an underscore, \nappended to the parameterized nonterminal symbol. This means that:\n\nStatementList[Return] : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nis a convenient abbreviation for:\n\nStatementList : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nStatementList_Return : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nand that:\n\nStatementList[Return, In] : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nis an abbreviation for:\n\nStatementList : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nStatementList_Return : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nStatementList_In : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nStatementList_Return_In : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nMultiple parameters produce a combinatory number of \nproductions, not all of which are necessarily referenced in a complete \ngrammar.\nReferences to nonterminals on the right-hand side of a production can also be parameterized. For example:\n\nStatementList : \nReturnStatement\n\n\nExpressionStatement[+In]\n\n\n\nis equivalent to saying:\n\nStatementList : \nReturnStatement\n\n\nExpressionStatement_In\n\n\n\nand:\n\nStatementList : \nReturnStatement\n\n\nExpressionStatement[~In]\n\n\n\nis equivalent to:\n\nStatementList : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nA nonterminal reference may have both a parameter list and an \u201copt\u201d suffix. For example:\n\nVariableDeclaration : \nBindingIdentifier\nInitializer[+In]opt\n\n\n\nis an abbreviation for:\n\nVariableDeclaration : \nBindingIdentifier\n\n\nBindingIdentifier\nInitializer_In\n\n\n\nPrefixing a parameter name with \u201c?\u201d on a right-hand \nside nonterminal reference makes that parameter value dependent upon the\n occurrence of the parameter name on the reference to the current \nproduction's left-hand side symbol. For example:\n\nVariableDeclaration[In] : \nBindingIdentifier\nInitializer[?In]\n\n\n\nis an abbreviation for:\n\nVariableDeclaration : \nBindingIdentifier\nInitializer\n\n\n\nVariableDeclaration_In : \nBindingIdentifier\nInitializer_In\n\n\n\nIf a right-hand side alternative is prefixed with \n\u201c[+parameter]\u201d that alternative is only available if the named parameter\n was used in referencing the production's nonterminal symbol. If a \nright-hand side alternative is prefixed with \u201c[~parameter]\u201d that \nalternative is only available if the named parameter was not used in referencing the production's nonterminal symbol. This means that:\n\nStatementList[Return] : [+Return]\nReturnStatement\n\n\nExpressionStatement\n\n\n\nis an abbreviation for:\n\nStatementList : \nExpressionStatement\n\n\n\nStatementList_Return : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nand that:\n\nStatementList[Return] : [~Return]\nReturnStatement\n\n\nExpressionStatement\n\n\n\nis an abbreviation for:\n\nStatementList : \nReturnStatement\n\n\nExpressionStatement\n\n\n\nStatementList_Return : \nExpressionStatement\n\n\n\nWhen the words \u201cone of\u201d follow the colon(s) in a grammar\n definition, they signify that each of the terminal symbols on the \nfollowing line or lines is an alternative definition. For example, the \nlexical grammar for ECMAScript contains the production:\n\nNonZeroDigit :: one of 1 2 3 4 5 6 7 8 9\n\n\nwhich is merely a convenient abbreviation for:\n\nNonZeroDigit :: \n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n7\n\n\n8\n\n\n9\n\n\n\nIf the phrase \u201c[empty]\u201d appears as the right-hand side of a \nproduction, it indicates that the production's right-hand side contains \nno terminals or nonterminals.\nIf the phrase \u201c[lookahead = seq]\u201d appears in the right-hand side of a production, it indicates that the production may only be used if the token sequence seq is a prefix of the immediately following input token sequence. Similarly, \u201c[lookahead \u2208 set]\u201d, where set is a finite nonempty set of token sequences, indicates that the production may only be used if some element of set\n is a prefix of the immediately following token sequence. For \nconvenience, the set can also be written as a nonterminal, in which case\n it represents the set of all token sequences to which that nonterminal \ncould expand. It is considered an editorial error if the nonterminal \ncould expand to infinitely many distinct token sequences.\nThese conditions may be negated. \u201c[lookahead \u2260 seq]\u201d indicates that the containing production may only be used if seq is not a prefix of the immediately following input token sequence, and \u201c[lookahead \u2209 set]\u201d indicates that the production may only be used if no element of set is a prefix of the immediately following token sequence.\nAs an example, given the definitions:\n\nDecimalDigit :: one of 0 1 2 3 4 5 6 7 8 9\n\n\nDecimalDigits :: \nDecimalDigit\n\n\nDecimalDigits\nDecimalDigit\n\n\n\nthe definition:\n\nLookaheadExample :: \nn\n[lookahead \u2209 { 1, 3, 5, 7, 9 }]\nDecimalDigits\n\n\nDecimalDigit\n[lookahead \u2209 DecimalDigit]\n\n\n\nmatches either the letter n followed by one or more decimal digits the first of which is even, or a decimal digit not followed by another decimal digit.\nNote that when these phrases are used in the syntactic grammar,\n it may not be possible to unambiguously identify the immediately \nfollowing token sequence because determining later tokens requires \nknowing which lexical goal symbol\n to use at later positions. As such, when these are used in the \nsyntactic grammar, it is considered an editorial error for a token \nsequence seq to appear in a lookahead restriction (including as part of a set of sequences) if the choices of lexical goal symbols to use could change whether or not seq would be a prefix of the resulting token sequence.\nIf the phrase \u201c[no LineTerminator here]\u201d appears in the right-hand side of a production of the syntactic grammar, it indicates that the production is a restricted production: it may not be used if a LineTerminator occurs in the input stream at the indicated position. For example, the production:\n\nThrowStatement : \nthrow\n[no LineTerminator here]\nExpression\n;\n\n\n\nindicates that the production may not be used if a LineTerminator occurs in the script between the throw token and the Expression.\nUnless the presence of a LineTerminator is forbidden by a restricted production, any number of occurrences of LineTerminator\n may appear between any two consecutive tokens in the stream of input \nelements without affecting the syntactic acceptability of the script.\nThe right-hand side of a production may specify that certain expansions are not permitted by using the phrase \u201cbut not\u201d and then indicating the expansions to be excluded. For example, the production:\n\nIdentifier :: \nIdentifierName but not ReservedWord\n\n\n\nmeans that the nonterminal Identifier may be replaced by any sequence of code points that could replace IdentifierName provided that the same sequence of code points could not replace ReservedWord.\nFinally, a few nonterminal symbols are described by a \ndescriptive phrase in sans-serif type in cases where it would be \nimpractical to list all the alternatives:\n\nSourceCharacter :: \nany Unicode code point\n\n\n\n\n\n\n5.2 Algorithm Conventions\nThe specification often uses a numbered list to specify steps in \nan algorithm. These algorithms are used to precisely specify the \nrequired semantics of ECMAScript language constructs. The algorithms are\n not intended to imply the use of any specific implementation technique.\n In practice, there may be more efficient algorithms available to \nimplement a given feature.\nAlgorithms may be explicitly parameterized with an ordered, \ncomma-separated sequence of alias names which may be used within the \nalgorithm steps to reference the argument passed in that position. \nOptional parameters are denoted with surrounding brackets ([ , name\n ]) and are no different from required parameters within algorithm \nsteps. A rest parameter may appear at the end of a parameter list, \ndenoted with leading ellipsis (, ...name). The rest parameter captures all of the arguments provided following the required and optional parameters into a List. If there are no such additional arguments, that List is empty.\nAlgorithm steps may be subdivided into sequential substeps. \nSubsteps are indented and may themselves be further divided into \nindented substeps. Outline numbering conventions are used to identify \nsubsteps with the first level of substeps labelled with lowercase \nalphabetic characters and the second level of substeps labelled with \nlowercase roman numerals. If more than three levels are required these \nrules repeat with the fourth level using numeric labels. For example:\n1. Top-level stepa. Substep.b. Substep.i. Subsubstep.1. Subsubsubstepa. Subsubsubsubstepi. Subsubsubsubsubstep\nA step or substep may be written as an \u201cif\u201d predicate that \nconditions its substeps. In this case, the substeps are only applied if \nthe predicate is true. If a step or substep begins with the word \u201celse\u201d,\n it is a predicate that is the negation of the preceding \u201cif\u201d predicate \nstep at the same level.\nA step may specify the iterative application of its substeps.\nA step that begins with \u201cAssert:\u201d asserts \nan invariant condition of its algorithm. Such assertions are used to \nmake explicit algorithmic invariants that would otherwise be implicit. \nSuch assertions add no additional semantic requirements and hence need \nnot be checked by an implementation. They are used simply to clarify \nalgorithms.\nAlgorithm steps may declare named aliases for any value using the form \u201cLet x be someValue\u201d. These aliases are reference-like in that both x and someValue\n refer to the same underlying data and modifications to either are \nvisible to both. Algorithm steps that want to avoid this reference-like \nbehaviour should explicitly make a copy of the right-hand side: \u201cLet x be a copy of someValue\u201d creates a shallow copy of someValue.\nOnce declared, an alias may be referenced in any subsequent steps\n and must not be referenced from steps prior to the alias's declaration.\n Aliases may be modified using the form \u201cSet x to someOtherValue\u201d.\n\n5.2.1 Abstract Operations\nIn order to facilitate their use in multiple parts of this specification, some algorithms, called abstract operations,\n are named and written in parameterized functional form so that they may\n be referenced by name from within other algorithms. Abstract operations\n are typically referenced using a functional application style such as \nOperationName(arg1, arg2). Some abstract \noperations are treated as polymorphically dispatched methods of \nclass-like specification abstractions. Such method-like abstract \noperations are typically referenced using a method application style \nsuch as someValue.OperationName(arg1, arg2).\n\n\n5.2.2 Syntax-Directed Operations\nA syntax-directed operation\n is a named operation whose definition consists of algorithms, each of \nwhich is associated with one or more productions from one of the \nECMAScript grammars. A production that has multiple alternative \ndefinitions will typically have a distinct algorithm for each \nalternative. When an algorithm is associated with a grammar production, \nit may reference the terminal and nonterminal symbols of the production \nalternative as if they were parameters of the algorithm. When used in \nthis manner, nonterminal symbols refer to the actual alternative \ndefinition that is matched when parsing the source text. The source text matched by a grammar production or Parse Node\n derived from it is the portion of the source text that starts at the \nbeginning of the first terminal that participated in the match and ends \nat the end of the last terminal that participated in the match.\nWhen an algorithm is associated with a production alternative, \nthe alternative is typically shown without any \u201c[ ]\u201d grammar \nannotations. Such annotations should only affect the syntactic \nrecognition of the alternative and have no effect on the associated \nsemantics for the alternative.\nSyntax-directed operations are invoked with a parse node and, optionally, other parameters by using the conventions on steps 1, 3, and 4 in the following algorithm:\n1. Let status be SyntaxDirectedOperation of SomeNonTerminal.2. Let someParseNode be the parse of some source text.3. Perform SyntaxDirectedOperation of someParseNode.4. Perform SyntaxDirectedOperation of someParseNode with argument \"value\".\nUnless explicitly specified otherwise, all chain productions\n have an implicit definition for every operation that might be applied \nto that production's left-hand side nonterminal. The implicit definition\n simply reapplies the same operation with the same parameters, if any, \nto the chain production's\n sole right-hand side nonterminal and then returns the result. For \nexample, assume that some algorithm has a step of the form: \u201cReturn the \nresult of evaluating Block\u201d and that there is a production:\n\nBlock : \n{\nStatementList\n}\n\n\n\nbut the Evaluation operation does not associate an algorithm \nwith that production. In that case, the Evaluation operation implicitly \nincludes an association of the form:\nRuntime Semantics: Evaluation\n\nBlock : \n{\nStatementList\n}\n\n\n\n1. Return the result of evaluating StatementList.\n\n\n5.2.3 Runtime Semantics\nAlgorithms which specify semantics that must be called at runtime are called runtime semantics. Runtime semantics are defined by abstract operations or syntax-directed operations.\n\n5.2.3.1 Completion ( completionRecord )\nThe abstract operation Completion takes argument completionRecord (a Completion Record) and returns a Completion Record. It is used to emphasize that a Completion Record is being returned. It performs the following steps when called:\n1. Assert: completionRecord is a Completion Record.2. Return completionRecord.\n\n\n5.2.3.2 Throw an Exception\nAlgorithms steps that say to throw an exception, such as\n1. Throw a TypeError exception.\nmean the same things as:\n1. Return ThrowCompletion(a newly created TypeError object).\n\n\n5.2.3.3 ReturnIfAbrupt\nAlgorithms steps that say or are otherwise equivalent to:\n1. ReturnIfAbrupt(argument).\nmean the same thing as:\n1. If argument is an abrupt completion, return Completion(argument).2. Else if argument is a Completion Record, set argument to argument.[[Value]].\nAlgorithms steps that say or are otherwise equivalent to:\n1. ReturnIfAbrupt(AbstractOperation()).\nmean the same thing as:\n1. Let hygienicTemp be AbstractOperation().2. If hygienicTemp is an abrupt completion, return Completion(hygienicTemp).3. Else if hygienicTemp is a Completion Record, set hygienicTemp to hygienicTemp.[[Value]].\nWhere hygienicTemp is ephemeral and visible only in the steps pertaining to ReturnIfAbrupt.\nAlgorithms steps that say or are otherwise equivalent to:\n1. Let result be AbstractOperation(ReturnIfAbrupt(argument)).\nmean the same thing as:\n1. If argument is an abrupt completion, return Completion(argument).2. If argument is a Completion Record, set argument to argument.[[Value]].3. Let result be AbstractOperation(argument).\n\n\n5.2.3.4 ReturnIfAbrupt Shorthands\nInvocations of abstract operations and syntax-directed operations that are prefixed by ? indicate that ReturnIfAbrupt should be applied to the resulting Completion Record. For example, the step:\n1. ?\u00a0OperationName().\nis equivalent to the following step:\n1. ReturnIfAbrupt(OperationName()).\nSimilarly, for method application style, the step:\n1. ?\u00a0someValue.OperationName().\nis equivalent to:\n1. ReturnIfAbrupt(someValue.OperationName()).\nSimilarly, prefix ! is used to indicate that the following invocation of an abstract or syntax-directed operation will never return an abrupt completion and that the resulting Completion Record's [[Value]] field should be used in place of the return value of the operation. For example, the step:\n1. Let val be !\u00a0OperationName().\nis equivalent to the following steps:\n1. Let val be OperationName().2. Assert: val is never an abrupt completion.3. If val is a Completion Record, set val to val.[[Value]].\nSyntax-directed operations for runtime semantics make use of this shorthand by placing ! or ? before the invocation of the operation:\n1. Perform !\u00a0SyntaxDirectedOperation of NonTerminal.\n\n\n5.2.3.5 Implicit Normal Completion\nIn algorithms within abstract operations which are declared to return a Completion Record, within the Evaluation syntax-directed operation, and within all built-in functions, the returned value is first passed to NormalCompletion, and the result is used instead. This rule does not apply within the Completion algorithm or when the value being returned is clearly marked as a Completion Record in that step; these cases are:\n\nwhen the result of applying Completion, NormalCompletion, or ThrowCompletion is directly returned\nwhen the result of constructing a Completion Record is directly returned\nwhen directly returning with the phrase \"the result of evaluating\"\n\nIt is an editorial error if a Completion Record is returned from such an abstract operation through any other means. For example, within these abstract operations,\n1. Return true.\nmeans the same things as any of\n1. Return NormalCompletion(true).\nor\n1. Let completion be NormalCompletion(true).2. Return Completion(completion).\nor\n1. Return Completion Record { [[Type]]: normal, [[Value]]: true, [[Target]]: empty }.\nNote that, through the ReturnIfAbrupt expansion, the following example is allowed, as within the expanded steps, the result of applying Completion is returned directly in the abrupt case and the implicit NormalCompletion application occurs after unwrapping in the normal case.\n1. Return ?\u00a0completion.\nThe following example would be an editorial error because a Completion Record is being returned without being annotated in that step.\n1. Let completion be NormalCompletion(true).2. Return completion.\n\n\n\n5.2.4 Static Semantics\nContext-free grammars are not sufficiently powerful to express \nall the rules that define whether a stream of input elements form a \nvalid ECMAScript Script or Module\n that may be evaluated. In some situations additional rules are needed \nthat may be expressed using either ECMAScript algorithm conventions or \nprose requirements. Such rules are always associated with a production \nof a grammar and are called the static semantics of the production.\nStatic Semantic Rules have names and typically are defined \nusing an algorithm. Named Static Semantic Rules are associated with \ngrammar productions and a production that has multiple alternative \ndefinitions will typically have for each alternative a distinct \nalgorithm for each applicable named static semantic rule.\nA special kind of static semantic rule is an Early Error Rule. Early error rules define early error conditions (see clause 17) that are associated with specific grammar productions. Evaluation of most early error\n rules are not explicitly invoked within the algorithms of this \nspecification. A conforming implementation must, prior to the first \nevaluation of a Script or Module, validate all of the early error rules of the productions used to parse that Script or Module. If any of the early error rules are violated the Script or Module is invalid and cannot be evaluated.\n\n\n5.2.5 Mathematical Operations\nThis specification makes reference to these kinds of numeric values:\n\nMathematical values: Arbitrary real numbers, used as the default numeric type.\nExtended mathematical values: Mathematical values together with +\u221e and -\u221e.\nNumbers: IEEE 754-2019 double-precision floating point values.\nBigInts: ECMAScript language values representing arbitrary integers in a one-to-one correspondence.\n\nIn the language of this specification, numerical values are \ndistinguished among different numeric kinds using subscript suffixes. \nThe subscript \ud835\udd3d refers to Numbers, and the subscript \u2124 refers to BigInts. Numeric values without a subscript suffix refer to mathematical values.\nNumeric operators such as +, \u00d7, =, and \u2265 refer to those \noperations as determined by the type of the operands. When applied to \nmathematical values, the operators refer to the usual mathematical \noperations. When applied to extended mathematical values, the operators \nrefer to the usual mathematical operations over the extended real \nnumbers; indeterminate forms are not defined and their use in this \nspecification should be considered an editorial error. When applied to \nNumbers, the operators refer to the relevant operations within IEEE 754-2019. When applied to BigInts, the operators refer to the usual mathematical operations applied to the mathematical value of the BigInt.\nIn general, when this specification refers to a numerical value, such as in the phrase, \"the length of y\" or \"the integer represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a mathematical value. Phrases which refer to a Number or a BigInt value are explicitly annotated as such; for example, \"the Number value for the number of code points in \u2026\" or \"the BigInt value for \u2026\".\nNumeric operators applied to mixed-type operands (such as a Number and a mathematical value) are not defined and should be considered an editorial error in this specification.\nThis specification denotes most numeric values in base 10; it \nalso uses numeric values of the form 0x followed by digits 0-9 or A-F as\n base-16 values.\nWhen the term integer is used in this specification, it refers to a mathematical value which is in the set of integers, unless otherwise stated. When the term integral Number is used in this specification, it refers to a Number value whose mathematical value is in the set of integers.\nConversions between mathematical values and Numbers or BigInts are always explicit in this document. A conversion from a mathematical value or extended mathematical value x to a Number is denoted as \"the Number value for x\" or \ud835\udd3d(x), and is defined in 6.1.6.1. A conversion from an integer x to a BigInt is denoted as \"the BigInt value for x\" or \u2124(x). A conversion from a Number or BigInt x to a mathematical value is denoted as \"the mathematical value of x\", or \u211d(x). The mathematical value of +0\ud835\udd3d and -0\ud835\udd3d is the mathematical value 0. The mathematical value of non-finite values is not defined. The extended mathematical value of x is the mathematical value of x for finite values, and is +\u221e and -\u221e for +\u221e\ud835\udd3d and -\u221e\ud835\udd3d respectively; it is not defined for NaN.\nThe mathematical function abs(x) produces the absolute value of x, which is -x if x < 0 and otherwise is x itself.\nThe mathematical function min(x1, x2, \u2026 , xN) produces the mathematically smallest of x1 through xN. The mathematical function max(x1, x2, ..., xN) produces the mathematically largest of x1 through xN. The domain and range of these mathematical functions are the extended mathematical values.\nThe notation \u201cx modulo y\u201d (y must be finite and non-zero) computes a value k of the same sign as y (or zero) such that abs(k) < abs(y) and x - k = q \u00d7 y for some integer q.\nThe phrase \"the result of clamping x between lower and upper\" (where x is an extended mathematical value and lower and upper are mathematical values such that lower \u2264 upper) produces lower if x < lower, produces upper if x > upper, and otherwise produces x.\nThe mathematical function floor(x) produces the largest integer (closest to +\u221e) that is not larger than x.\nMathematical functions min, max, abs, and floor are not defined for Numbers and BigInts, and any usage of those methods that have non-mathematical value arguments would be an editorial error in this specification.\nNote\nfloor(x) = x - (x modulo 1).\n\n\n\n5.2.6 Value Notation\nIn this specification, ECMAScript language values are displayed in bold. Examples include null, true, or \"hello\". These are distinguished from longer ECMAScript code sequences such as Function.prototype.apply or let n = 42;.\nValues which are internal to the specification and not directly observable from ECMAScript code are indicated with a sans-serif typeface. For instance, a Completion Record's [[Type]] field takes on values like normal, return, or throw.\n\n\n\n\n6 ECMAScript Data Types and Values\nAlgorithms within this specification manipulate values each of \nwhich has an associated type. The possible value types are exactly those\n defined in this clause. Types are further subclassified into ECMAScript language types and specification types.\nWithin this specification, the notation \u201cType(x)\u201d is used as shorthand for \u201cthe type of x\u201d\n where \u201ctype\u201d refers to the ECMAScript language and specification types \ndefined in this clause. When the term \u201cempty\u201d is used as if it was \nnaming a value, it is equivalent to saying \u201cno value of any type\u201d.\n\n6.1 ECMAScript Language Types\nAn ECMAScript language type\n corresponds to values that are directly manipulated by an ECMAScript \nprogrammer using the ECMAScript language. The ECMAScript language types \nare Undefined, Null, Boolean, String, Symbol, Number, BigInt, and \nObject. An ECMAScript language value is a value that is characterized by an ECMAScript language type.\n\n6.1.1 The Undefined Type\nThe Undefined type has exactly one value, called undefined. Any variable that has not been assigned a value has the value undefined.\n\n\n6.1.2 The Null Type\nThe Null type has exactly one value, called null.\n\n\n6.1.3 The Boolean Type\nThe Boolean type represents a logical entity having two values, called true and false.\n\n\n6.1.4 The String Type\nThe String type is the set of all ordered sequences of zero or more 16-bit unsigned integer values (\u201celements\u201d) up to a maximum length of 253\n - 1 elements. The String type is generally used to represent textual \ndata in a running ECMAScript program, in which case each element in the \nString is treated as a UTF-16 code unit value. Each element is regarded \nas occupying a position within the sequence. These positions are indexed\n with non-negative integers.\n The first element (if any) is at index 0, the next element (if any) at \nindex 1, and so on. The length of a String is the number of elements \n(i.e., 16-bit values) within it. The empty String has length zero and \ntherefore contains no elements.\nECMAScript operations that do not interpret String contents \napply no further semantics. Operations that do interpret String values \ntreat each element as a single UTF-16 code unit. However, ECMAScript \ndoes not restrict the value of or relationships between these code \nunits, so operations that further interpret String contents as sequences\n of Unicode code points encoded in UTF-16 must account for ill-formed \nsubsequences. Such operations apply special treatment to every code unit\n with a numeric value in the inclusive range 0xD800 to 0xDBFF (defined \nby the Unicode Standard as a leading surrogate, or more formally as a high-surrogate code unit) and every code unit with a numeric value in the inclusive range 0xDC00 to 0xDFFF (defined as a trailing surrogate, or more formally as a low-surrogate code unit) using the following rules:\n\n\n          A code unit that is not a leading surrogate and not a trailing surrogate is interpreted as a code point with the same value.\n        \n\n          A sequence of two code units, where the first code unit c1 is a leading surrogate and the second code unit c2 a trailing surrogate, is a surrogate pair and is interpreted as a code point with the value (c1 - 0xD800) \u00d7 0x400 + (c2 - 0xDC00) + 0x10000. (See 11.1.3)\n        \n\n          A code unit that is a leading surrogate or trailing surrogate, but is not part of a surrogate pair, is interpreted as a code point with the same value.\n        \n\nThe function String.prototype.normalize (see 22.1.3.14) can be used to explicitly normalize a String value. String.prototype.localeCompare (see 22.1.3.11)\n internally normalizes String values, but no other operations implicitly\n normalize the strings upon which they operate. Operation results are \nnot language- and/or locale-sensitive unless stated otherwise.\nNote\nThe rationale behind this design was to keep the \nimplementation of Strings as simple and high-performing as possible. If \nECMAScript source text is in Normalized Form C, string literals are \nguaranteed to also be normalized, as long as they do not contain any \nUnicode escape sequences.\n\nIn this specification, the phrase \"the string-concatenation of A, B,\n ...\" (where each argument is a String value, a code unit, or a sequence\n of code units) denotes the String value whose sequence of code units is\n the concatenation of the code units (in order) of each of the arguments\n (in order).\nThe phrase \"the substring of S from inclusiveStart to exclusiveEnd\" (where S is a String value or a sequence of code units and inclusiveStart and exclusiveEnd are integers) denotes the String value consisting of the consecutive code units of S beginning at index inclusiveStart and ending immediately before index exclusiveEnd (which is the empty String when inclusiveStart = exclusiveEnd). If the \"to\" suffix is omitted, the length of S is used as the value of exclusiveEnd.\n\n6.1.4.1 StringIndexOf ( string, searchValue, fromIndex )\nThe abstract operation StringIndexOf takes arguments string (a String), searchValue (a String), and fromIndex (a non-negative integer) and returns an integer. It performs the following steps when called:\n1. Let len be the length of string.2. If searchValue is the empty String and fromIndex \u2264 len, return fromIndex.3. Let searchLen be the length of searchValue.4. For each integer i starting with fromIndex such that i \u2264 len - searchLen, in ascending order, doa. Let candidate be the substring of string from i to i + searchLen.b. If candidate is the same sequence of code units as searchValue, return i.5. Return -1.\nNote 1\nIf searchValue is the empty String and fromIndex is less than or equal to the length of string, this algorithm returns fromIndex. The empty String is effectively found at every position within a string, including after the last code unit.\n\nNote 2\nThis algorithm always returns -1 if fromIndex > the length of string.\n\n\n\n\n6.1.5 The Symbol Type\nThe Symbol type is the set of all non-String values that may be used as the key of an Object property (6.1.7).\nEach possible Symbol value is unique and immutable.\nEach Symbol value immutably holds an associated value called [[Description]] that is either undefined or a String value.\n\n6.1.5.1 Well-Known Symbols\nWell-known symbols are built-in Symbol values that are \nexplicitly referenced by algorithms of this specification. They are \ntypically used as the keys of properties whose values serve as extension\n points of a specification algorithm. Unless otherwise specified, \nwell-known symbols values are shared by all realms (9.3).\nWithin this specification a well-known symbol is referred to \nby using a notation of the form @@name, where \u201cname\u201d is one of the \nvalues listed in Table 1.\nTable 1: Well-known Symbols\n\n\n\n                Specification Name\n              \n\n                [[Description]]\n              \n\n                Value and Purpose\n              \n\n\n\n@@asyncIterator\n\n\n\"Symbol.asyncIterator\"\n\n\n                A method that returns the default AsyncIterator for an object. Called by the semantics of the for-await-of statement.\n              \n\n\n\n@@hasInstance\n\n\n\"Symbol.hasInstance\"\n\n\n                A method that determines if a constructor object recognizes an object as one of the constructor's instances. Called by the semantics of the instanceof operator.\n              \n\n\n\n@@isConcatSpreadable\n\n\n\"Symbol.isConcatSpreadable\"\n\n\n                A Boolean valued property that if true indicates that an object should be flattened to its array elements by Array.prototype.concat.\n              \n\n\n\n@@iterator\n\n\n\"Symbol.iterator\"\n\n\n                A method that returns the default Iterator for an object. Called by the semantics of the for-of statement.\n              \n\n\n\n@@match\n\n\n\"Symbol.match\"\n\n\n                A regular expression method that matches the regular expression against a string. Called by the String.prototype.match method.\n              \n\n\n\n@@matchAll\n\n\n\"Symbol.matchAll\"\n\n\n                A regular expression method that returns an iterator, \nthat yields matches of the regular expression against a string. Called \nby the String.prototype.matchAll method.\n              \n\n\n\n@@replace\n\n\n\"Symbol.replace\"\n\n\n                A regular expression method that replaces matched substrings of a string. Called by the String.prototype.replace method.\n              \n\n\n\n@@search\n\n\n\"Symbol.search\"\n\n\n                A regular expression method that returns the index \nwithin a string that matches the regular expression. Called by the String.prototype.search method.\n              \n\n\n\n@@species\n\n\n\"Symbol.species\"\n\n\n                A function valued property that is the constructor function that is used to create derived objects.\n              \n\n\n\n@@split\n\n\n\"Symbol.split\"\n\n\n                A regular expression method that splits a string at the \nindices that match the regular expression. Called by the String.prototype.split method.\n              \n\n\n\n@@toPrimitive\n\n\n\"Symbol.toPrimitive\"\n\n\n                A method that converts an object to a corresponding primitive value. Called by the ToPrimitive abstract operation.\n              \n\n\n\n@@toStringTag\n\n\n\"Symbol.toStringTag\"\n\n\n                A String valued property that is used in the creation of\n the default string description of an object. Accessed by the built-in \nmethod Object.prototype.toString.\n              \n\n\n\n@@unscopables\n\n\n\"Symbol.unscopables\"\n\n\n                An object valued property whose own and inherited property names are property names that are excluded from the with environment bindings of the associated object.\n              \n\n\n\n\n\n\n6.1.6 Numeric Types\nECMAScript has two built-in numeric types: Number and BigInt. The following abstract operations\n are defined over these numeric types. The \"Result\" column shows the \nreturn type, along with an indication if it is possible for some \ninvocations of the operation to return an abrupt completion.\nTable 2: Numeric Type Operations\n\n\n\n              Operation\n            \n\n              Example source\n            \n\n              Invoked by the Evaluation semantics of ...\n            \n\n              Result\n            \n\n\n\nNumber::unaryMinus\n\n\n-x\n\n\nUnary - Operator\n\n\n              Number\n            \n\n\n\nBigInt::unaryMinus\n\n\n              BigInt\n            \n\n\n\nNumber::bitwiseNOT\n\n\n~x\n\n\nBitwise NOT Operator ( ~ )\n\n\n              Number\n            \n\n\n\nBigInt::bitwiseNOT\n\n\n              BigInt\n            \n\n\n\nNumber::exponentiate\n\n\nx\u00a0**\u00a0y\n\n\nExponentiation Operator\n              and Math.pow ( base, exponent )\n\n\n              Number\n            \n\n\n\nBigInt::exponentiate\n\n\n              either a normal completion containing a BigInt or an abrupt completion\n\n\n\n\nNumber::multiply\n\n\nx\u00a0*\u00a0y\n\n\nMultiplicative Operators\n\n\n              Number\n            \n\n\n\nBigInt::multiply\n\n\n              BigInt\n            \n\n\n\nNumber::divide\n\n\nx\u00a0/\u00a0y\n\n\nMultiplicative Operators\n\n\n              Number\n            \n\n\n\nBigInt::divide\n\n\n              either a normal completion containing a BigInt or an abrupt completion\n\n\n\n\nNumber::remainder\n\n\nx\u00a0%\u00a0y\n\n\nMultiplicative Operators\n\n\n              Number\n            \n\n\n\nBigInt::remainder\n\n\n              either a normal completion containing a BigInt or an abrupt completion\n\n\n\n\nNumber::add\n\n\nx ++\n++ x\nx\u00a0+\u00a0y\n\n\nPostfix Increment Operator,\n              Prefix Increment Operator,\n              and The Addition Operator ( + )\n\n\n              Number\n            \n\n\n\nBigInt::add\n\n\n              BigInt\n            \n\n\n\nNumber::subtract\n\n\nx --\n-- x\nx\u00a0-\u00a0y\n\n\nPostfix Decrement Operator,\n              Prefix Decrement Operator,\n              and The Subtraction Operator ( - )\n\n\n              Number\n            \n\n\n\nBigInt::subtract\n\n\n              BigInt\n            \n\n\n\nNumber::leftShift\n\n\nx\u00a0<<\u00a0y\n\n\nThe Left Shift Operator ( << )\n\n\n              Number\n            \n\n\n\nBigInt::leftShift\n\n\n              BigInt\n            \n\n\n\nNumber::signedRightShift\n\n\nx\u00a0>>\u00a0y\n\n\nThe Signed Right Shift Operator ( >> )\n\n\n              Number\n            \n\n\n\nBigInt::signedRightShift\n\n\n              BigInt\n            \n\n\n\nNumber::unsignedRightShift\n\n\nx\u00a0>>>\u00a0y\n\n\nThe Unsigned Right Shift Operator ( >>> )\n\n\n              Number\n            \n\n\n\nBigInt::unsignedRightShift\n\n\n              a throw completion\n\n\n\n\nNumber::lessThan\n\n\nx\u00a0<\u00a0y\nx\u00a0>\u00a0y\nx\u00a0<=\u00a0y\nx\u00a0>=\u00a0y\n\n\nRelational Operators,\n              via IsLessThan ( x, y, LeftFirst )\n\n\n              Boolean or undefined (for unordered inputs)\n            \n\n\n\nBigInt::lessThan\n\n\n              Boolean\n            \n\n\n\nNumber::equal\n\n\nx\u00a0==\u00a0y\nx\u00a0!=\u00a0y\nx\u00a0===\u00a0y\nx\u00a0!==\u00a0y\n\n\nEquality Operators,\n              via IsStrictlyEqual ( x, y )\n\n\n              Boolean\n            \n\n\n\nBigInt::equal\n\n\n\n\nNumber::sameValue\n\n\nObject.is(x, y)\n\n\n              Object internal methods,\n              via SameValue ( x, y ),\n              to test exact value equality\n            \n\n              Boolean\n            \n\n\n\nBigInt::sameValue\n\n\n\n\nNumber::sameValueZero\n\n\n[x].includes(y)\n\n\n              Array, Map, and Set methods,\n              via SameValueZero ( x, y ),\n              to test value equality, ignoring the difference between +0\ud835\udd3d and -0\ud835\udd3d\n\n\n              Boolean\n            \n\n\n\nBigInt::sameValueZero\n\n\n\n\nNumber::bitwiseAND\n\n\nx\u00a0&\u00a0y\n\n\nBinary Bitwise Operators\n\n\n              Number\n            \n\n\n\nBigInt::bitwiseAND\n\n\n              BigInt\n            \n\n\n\nNumber::bitwiseXOR\n\n\nx\u00a0^\u00a0y\n\n\n              Number\n            \n\n\n\nBigInt::bitwiseXOR\n\n\n              BigInt\n            \n\n\n\nNumber::bitwiseOR\n\n\nx\u00a0|\u00a0y\n\n\n              Number\n            \n\n\n\nBigInt::bitwiseOR\n\n\n              BigInt\n            \n\n\n\nNumber::toString\n\n\nString(x)\n\n\n              Many expressions and built-in functions, via ToString ( argument )\n\n\n              String\n            \n\n\n\nBigInt::toString\n\n\n\n\nBecause the numeric types are in general not convertible \nwithout loss of precision or truncation, the ECMAScript language \nprovides no implicit conversion among these types. Programmers must \nexplicitly call Number and BigInt functions to convert among types when calling a function which requires another type.\nNote\nThe first and subsequent editions of ECMAScript have \nprovided, for certain operators, implicit numeric conversions that could\n lose precision or truncate. These legacy implicit conversions are \nmaintained for backward compatibility, but not provided for BigInt in \norder to minimize opportunity for programmer error, and to leave open \nthe option of generalized value types in a future edition.\n\n\n6.1.6.1 The Number Type\nThe Number type has exactly 18,437,736,874,454,810,627 (that is, 264 - 253 + 3) values, representing the double-precision 64-bit format IEEE 754-2019 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9,007,199,254,740,990 (that is, 253 - 2) distinct \u201cNot-a-Number\u201d values of the IEEE Standard are represented in ECMAScript as a single special NaN value. (Note that the NaN value is produced by the program expression NaN.)\n In some implementations, external code might be able to detect a \ndifference between various Not-a-Number values, but such behaviour is implementation-defined; to ECMAScript code, all NaN values are indistinguishable from each other.\nNote\nThe bit pattern that might be observed in an ArrayBuffer (see 25.1) or a SharedArrayBuffer (see 25.2) after a Number value has been stored into it is not necessarily the same as the internal representation of that Number value used by the ECMAScript implementation.\n\nThere are two other special values, called positive Infinity and negative Infinity. For brevity, these values are also referred to for expository purposes by the symbols +\u221e\ud835\udd3d and -\u221e\ud835\udd3d, respectively. (Note that these two infinite Number values are produced by the program expressions +Infinity (or simply Infinity) and -Infinity.)\nThe other 18,437,736,874,454,810,624 (that is, 264 - 253)\n values are called the finite numbers. Half of these are positive \nnumbers and half are negative numbers; for every finite positive Number value there is a corresponding negative value having the same magnitude.\nNote that there is both a positive zero and a negative zero. For brevity, these values are also referred to for expository purposes by the symbols +0\ud835\udd3d and -0\ud835\udd3d, respectively. (Note that these two different zero Number values are produced by the program expressions +0 (or simply 0) and -0.)\nThe 18,437,736,874,454,810,622 (that is, 264 - 253 - 2) finite non-zero values are of two kinds:\n18,428,729,675,200,069,632 (that is, 264 - 254) of them are normalized, having the form\n\ns \u00d7 m \u00d7 2e\n\nwhere s is 1 or -1, m is an integer such that 252 \u2264 m < 253, and e is an integer such that -1074 \u2264 e \u2264 971.\nThe remaining 9,007,199,254,740,990 (that is, 253 - 2) values are denormalized, having the form\n\ns \u00d7 m \u00d7 2e\n\nwhere s is 1 or -1, m is an integer such that 0 < m < 252, and e is -1074.\nNote that all the positive and negative integers whose magnitude is no greater than 253 are representable in the Number type. The integer 0 has two representations in the Number type: +0\ud835\udd3d and -0\ud835\udd3d.\nA finite number has an odd significand if it is non-zero and the integer m used to express it (in one of the two forms shown above) is odd. Otherwise, it has an even significand.\nIn this specification, the phrase \u201cthe Number value for x\u201d where x represents an exact real mathematical quantity (which might even be an irrational number such as \u03c0) means a Number value chosen in the following manner. Consider the set of all finite values of the Number type, with -0\ud835\udd3d removed and with two additional values added to it that are not representable in the Number type, namely 21024 (which is +1 \u00d7 253 \u00d7 2971) and -21024 (which is -1 \u00d7 253 \u00d7 2971). Choose the member of this set that is closest in value to x.\n If two values of the set are equally close, then the one with an even \nsignificand is chosen; for this purpose, the two extra values 21024 and -21024 are considered to have even significands. Finally, if 21024 was chosen, replace it with +\u221e\ud835\udd3d; if -21024 was chosen, replace it with -\u221e\ud835\udd3d; if +0\ud835\udd3d was chosen, replace it with -0\ud835\udd3d if and only if x < 0; any other chosen value is used unchanged. The result is the Number value for x. (This procedure corresponds exactly to the behaviour of the IEEE 754-2019 roundTiesToEven mode.)\nThe Number value for +\u221e is +\u221e\ud835\udd3d, and the Number value for -\u221e is -\u221e\ud835\udd3d.\nSome ECMAScript operators deal only with integers in specific ranges such as -231 through 231 - 1, inclusive, or in the range 0 through 216 - 1, inclusive. These operators accept any value of the Number type but first convert each such value to an integer value in the expected range. See the descriptions of the numeric conversion operations in 7.1.\n\n6.1.6.1.1 Number::unaryMinus ( x )\nThe abstract operation Number::unaryMinus takes argument x (a Number) and returns a Number. It performs the following steps when called:\n1. If x is NaN, return NaN.2. Return the result of negating x; that is, compute a Number with the same magnitude but opposite sign.\n\n\n6.1.6.1.2 Number::bitwiseNOT ( x )\nThe abstract operation Number::bitwiseNOT takes argument x (a Number) and returns an integral Number. It performs the following steps when called:\n1. Let oldValue be !\u00a0ToInt32(x).2. Return the result of applying bitwise complement to oldValue. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.\n\n\n6.1.6.1.3 Number::exponentiate ( base, exponent )\nThe abstract operation Number::exponentiate takes arguments base (a Number) and exponent (a Number) and returns a Number. It returns an implementation-approximated value representing the result of raising base to the exponent power. It performs the following steps when called:\n1. If exponent is NaN, return NaN.2. If exponent is +0\ud835\udd3d or exponent is -0\ud835\udd3d, return 1\ud835\udd3d.3. If base is NaN, return NaN.4. If base is +\u221e\ud835\udd3d, thena. If exponent > +0\ud835\udd3d, return +\u221e\ud835\udd3d. Otherwise, return +0\ud835\udd3d.5. If base is -\u221e\ud835\udd3d, thena. If exponent > +0\ud835\udd3d, theni. If exponent is an odd integral Number, return -\u221e\ud835\udd3d. Otherwise, return +\u221e\ud835\udd3d.b. Else,i. If exponent is an odd integral Number, return -0\ud835\udd3d. Otherwise, return +0\ud835\udd3d.6. If base is +0\ud835\udd3d, thena. If exponent > +0\ud835\udd3d, return +0\ud835\udd3d. Otherwise, return +\u221e\ud835\udd3d.7. If base is -0\ud835\udd3d, thena. If exponent > +0\ud835\udd3d, theni. If exponent is an odd integral Number, return -0\ud835\udd3d. Otherwise, return +0\ud835\udd3d.b. Else,i. If exponent is an odd integral Number, return -\u221e\ud835\udd3d. Otherwise, return +\u221e\ud835\udd3d.8. Assert: base is finite and is neither +0\ud835\udd3d nor -0\ud835\udd3d.9. If exponent is +\u221e\ud835\udd3d, thena. If abs(\u211d(base)) > 1, return +\u221e\ud835\udd3d.b. If abs(\u211d(base)) is 1, return NaN.c. If abs(\u211d(base)) < 1, return +0\ud835\udd3d.10. If exponent is -\u221e\ud835\udd3d, thena. If abs(\u211d(base)) > 1, return +0\ud835\udd3d.b. If abs(\u211d(base)) is 1, return NaN.c. If abs(\u211d(base)) < 1, return +\u221e\ud835\udd3d.11. Assert: exponent is finite and is neither +0\ud835\udd3d nor -0\ud835\udd3d.12. If base < -0\ud835\udd3d and exponent is not an integral Number, return NaN.13. Return an implementation-approximated Number value representing the result of raising \u211d(base) to the \u211d(exponent) power.\nNote\nThe result of base ** exponent when base is 1\ud835\udd3d or -1\ud835\udd3d and exponent is +\u221e\ud835\udd3d or -\u221e\ud835\udd3d, or when base is 1\ud835\udd3d and exponent is NaN, differs from IEEE 754-2019. The first edition of ECMAScript specified a result of NaN for this operation, whereas later versions of IEEE 754-2019 specified 1\ud835\udd3d. The historical ECMAScript behaviour is preserved for compatibility reasons.\n\n\n\n6.1.6.1.4 Number::multiply ( x, y )\nThe abstract operation Number::multiply takes arguments x (a Number) and y (a Number) and returns a Number. It performs multiplication according to the rules of IEEE 754-2019 binary double-precision arithmetic, producing the product of x and y. It performs the following steps when called:\n1. If x is NaN or y is NaN, return NaN.2. If x is +\u221e\ud835\udd3d or x is -\u221e\ud835\udd3d, thena. If y is +0\ud835\udd3d or y is -0\ud835\udd3d, return NaN.b. If y > +0\ud835\udd3d, return x.c. Return -x.3. If y is +\u221e\ud835\udd3d or y is -\u221e\ud835\udd3d, thena. If x is +0\ud835\udd3d or x is -0\ud835\udd3d, return NaN.b. If x > +0\ud835\udd3d, return y.c. Return -y.4. If x is -0\ud835\udd3d, thena. If y is -0\ud835\udd3d or y < -0\ud835\udd3d, return +0\ud835\udd3d.b. Else, return -0\ud835\udd3d.5. If y is -0\ud835\udd3d, thena. If x < -0\ud835\udd3d, return +0\ud835\udd3d.b. Else, return -0\ud835\udd3d.6. Return \ud835\udd3d(\u211d(x) \u00d7 \u211d(y)).\nNote\nFinite-precision multiplication is commutative, but not always associative.\n\n\n\n6.1.6.1.5 Number::divide ( x, y )\nThe abstract operation Number::divide takes arguments x (a Number) and y (a Number) and returns a Number. It performs division according to the rules of IEEE 754-2019 binary double-precision arithmetic, producing the quotient of x and y where x is the dividend and y is the divisor. It performs the following steps when called:\n1. If x is NaN or y is NaN, return NaN.2. If x is +\u221e\ud835\udd3d or x is -\u221e\ud835\udd3d, thena. If y is +\u221e\ud835\udd3d or y is -\u221e\ud835\udd3d, return NaN.b. If y is +0\ud835\udd3d or y > +0\ud835\udd3d, return x.c. Return -x.3. If y is +\u221e\ud835\udd3d, thena. If x is +0\ud835\udd3d or x > +0\ud835\udd3d, return +0\ud835\udd3d. Otherwise, return -0\ud835\udd3d.4. If y is -\u221e\ud835\udd3d, thena. If x is +0\ud835\udd3d or x > +0\ud835\udd3d, return -0\ud835\udd3d. Otherwise, return +0\ud835\udd3d.5. If x is +0\ud835\udd3d or x is -0\ud835\udd3d, thena. If y is +0\ud835\udd3d or y is -0\ud835\udd3d, return NaN.b. If y > +0\ud835\udd3d, return x.c. Return -x.6. If y is +0\ud835\udd3d, thena. If x > +0\ud835\udd3d, return +\u221e\ud835\udd3d. Otherwise, return -\u221e\ud835\udd3d.7. If y is -0\ud835\udd3d, thena. If x > +0\ud835\udd3d, return -\u221e\ud835\udd3d. Otherwise, return +\u221e\ud835\udd3d.8. Return \ud835\udd3d(\u211d(x) / \u211d(y)).\n\n\n6.1.6.1.6 Number::remainder ( n, d )\nThe abstract operation Number::remainder takes arguments n (a Number) and d (a Number) and returns a Number. It yields the remainder from an implied division of its operands where n is the dividend and d is the divisor. It performs the following steps when called:\n1. If n is NaN or d is NaN, return NaN.2. If n is +\u221e\ud835\udd3d or n is -\u221e\ud835\udd3d, return NaN.3. If d is +\u221e\ud835\udd3d or d is -\u221e\ud835\udd3d, return n.4. If d is +0\ud835\udd3d or d is -0\ud835\udd3d, return NaN.5. If n is +0\ud835\udd3d or n is -0\ud835\udd3d, return n.6. Assert: n and d are finite and non-zero.7. Let r be \u211d(n) - (\u211d(d) \u00d7 q) where q is an integer that is negative if and only if n and d have opposite sign, and whose magnitude is as large as possible without exceeding the magnitude of \u211d(n) / \u211d(d).8. If r is 0 and n < -0\ud835\udd3d, return -0\ud835\udd3d.9. Return \ud835\udd3d(r).\nNote 1\nIn C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating-point operands.\n\nNote 2The result of a floating-point remainder operation as computed by the % operator is not the same as the \u201cremainder\u201d operation defined by IEEE 754-2019. The IEEE 754-2019\n \u201cremainder\u201d operation computes the remainder from a rounding division, \nnot a truncating division, and so its behaviour is not analogous to that\n of the usual integer remainder operator. Instead the ECMAScript language defines % on floating-point operations to behave in a manner analogous to that of the Java integer remainder operator; this may be compared with the C library function fmod.\n\n\n6.1.6.1.7 Number::add ( x, y )\nThe abstract operation Number::add takes arguments x (a Number) and y (a Number) and returns a Number. It performs addition according to the rules of IEEE 754-2019 binary double-precision arithmetic, producing the sum of its arguments. It performs the following steps when called:\n1. If x is NaN or y is NaN, return NaN.2. If x is +\u221e\ud835\udd3d and y is -\u221e\ud835\udd3d, return NaN.3. If x is -\u221e\ud835\udd3d and y is +\u221e\ud835\udd3d, return NaN.4. If x is +\u221e\ud835\udd3d or x is -\u221e\ud835\udd3d, return x.5. If y is +\u221e\ud835\udd3d or y is -\u221e\ud835\udd3d, return y.6. Assert: x and y are both finite.7. If x is -0\ud835\udd3d and y is -0\ud835\udd3d, return -0\ud835\udd3d.8. Return \ud835\udd3d(\u211d(x) + \u211d(y)).\nNote\nFinite-precision addition is commutative, but not always associative.\n\n\n\n6.1.6.1.8 Number::subtract ( x, y )\nThe abstract operation Number::subtract takes arguments x (a Number) and y (a Number) and returns a Number. It performs subtraction, producing the difference of its operands; x is the minuend and y is the subtrahend. It performs the following steps when called:\n1. Return Number::add(x, Number::unaryMinus(y)).\nNote\nIt is always the case that x - y produces the same result as x + (-y).\n\n\n\n6.1.6.1.9 Number::leftShift ( x, y )\nThe abstract operation Number::leftShift takes arguments x (a Number) and y (a Number) and returns an integral Number. It performs the following steps when called:\n1. Let lnum be !\u00a0ToInt32(x).2. Let rnum be !\u00a0ToUint32(y).3. Let shiftCount be \u211d(rnum) modulo 32.4. Return the result of left shifting lnum by shiftCount bits. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.\n\n\n6.1.6.1.10 Number::signedRightShift ( x, y )\nThe abstract operation Number::signedRightShift takes arguments x (a Number) and y (a Number) and returns an integral Number. It performs the following steps when called:\n1. Let lnum be !\u00a0ToInt32(x).2. Let rnum be !\u00a0ToUint32(y).3. Let shiftCount be \u211d(rnum) modulo 32.4. Return the result of performing a sign-extending right shift of lnum by shiftCount bits. The most significant bit is propagated. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.\n\n\n6.1.6.1.11 Number::unsignedRightShift ( x, y )\nThe abstract operation Number::unsignedRightShift takes arguments x (a Number) and y (a Number) and returns an integral Number. It performs the following steps when called:\n1. Let lnum be !\u00a0ToUint32(x).2. Let rnum be !\u00a0ToUint32(y).3. Let shiftCount be \u211d(rnum) modulo 32.4. Return the result of performing a zero-filling right shift of lnum by shiftCount bits. Vacated bits are filled with zero. The mathematical value of the result is exactly representable as a 32-bit unsigned bit string.\n\n\n6.1.6.1.12 Number::lessThan ( x, y )\nThe abstract operation Number::lessThan takes arguments x (a Number) and y (a Number) and returns a Boolean or undefined. It performs the following steps when called:\n1. If x is NaN, return undefined.2. If y is NaN, return undefined.3. If x and y are the same Number value, return false.4. If x is +0\ud835\udd3d and y is -0\ud835\udd3d, return false.5. If x is -0\ud835\udd3d and y is +0\ud835\udd3d, return false.6. If x is +\u221e\ud835\udd3d, return false.7. If y is +\u221e\ud835\udd3d, return true.8. If y is -\u221e\ud835\udd3d, return false.9. If x is -\u221e\ud835\udd3d, return true.10. Assert: x and y are finite and non-zero.11. If \u211d(x) < \u211d(y), return true. Otherwise, return false.\n\n\n6.1.6.1.13 Number::equal ( x, y )\nThe abstract operation Number::equal takes arguments x (a Number) and y (a Number) and returns a Boolean. It performs the following steps when called:\n1. If x is NaN, return false.2. If y is NaN, return false.3. If x is the same Number value as y, return true.4. If x is +0\ud835\udd3d and y is -0\ud835\udd3d, return true.5. If x is -0\ud835\udd3d and y is +0\ud835\udd3d, return true.6. Return false.\n\n\n6.1.6.1.14 Number::sameValue ( x, y )\nThe abstract operation Number::sameValue takes arguments x (a Number) and y (a Number) and returns a Boolean. It performs the following steps when called:\n1. If x is NaN and y is NaN, return true.2. If x is +0\ud835\udd3d and y is -0\ud835\udd3d, return false.3. If x is -0\ud835\udd3d and y is +0\ud835\udd3d, return false.4. If x is the same Number value as y, return true.5. Return false.\n\n\n6.1.6.1.15 Number::sameValueZero ( x, y )\nThe abstract operation Number::sameValueZero takes arguments x (a Number) and y (a Number) and returns a Boolean. It performs the following steps when called:\n1. If x is NaN and y is NaN, return true.2. If x is +0\ud835\udd3d and y is -0\ud835\udd3d, return true.3. If x is -0\ud835\udd3d and y is +0\ud835\udd3d, return true.4. If x is the same Number value as y, return true.5. Return false.\n\n\n6.1.6.1.16 NumberBitwiseOp ( op, x, y )\nThe abstract operation NumberBitwiseOp takes arguments op (&, ^, or |), x (a Number), and y (a Number) and returns an integral Number. It performs the following steps when called:\n1. Let lnum be !\u00a0ToInt32(x).2. Let rnum be !\u00a0ToInt32(y).3. Let lbits be the 32-bit two's complement bit string representing \u211d(lnum).4. Let rbits be the 32-bit two's complement bit string representing \u211d(rnum).5. If op is &, let result be the result of applying the bitwise AND operation to lbits and rbits.6. Else if op is ^, let result be the result of applying the bitwise exclusive OR (XOR) operation to lbits and rbits.7. Else, op is |. Let result be the result of applying the bitwise inclusive OR operation to lbits and rbits.8. Return the Number value for the integer represented by the 32-bit two's complement bit string result.\n\n\n6.1.6.1.17 Number::bitwiseAND ( x, y )\nThe abstract operation Number::bitwiseAND takes arguments x (a Number) and y (a Number) and returns an integral Number. It performs the following steps when called:\n1. Return NumberBitwiseOp(&, x, y).\n\n\n6.1.6.1.18 Number::bitwiseXOR ( x, y )\nThe abstract operation Number::bitwiseXOR takes arguments x (a Number) and y (a Number) and returns an integral Number. It performs the following steps when called:\n1. Return NumberBitwiseOp(^, x, y).\n\n\n6.1.6.1.19 Number::bitwiseOR ( x, y )\nThe abstract operation Number::bitwiseOR takes arguments x (a Number) and y (a Number) and returns an integral Number. It performs the following steps when called:\n1. Return NumberBitwiseOp(|, x, y).\n\n\n6.1.6.1.20 Number::toString ( x )\nThe abstract operation Number::toString takes argument x (a Number) and returns a String. It converts x to String format. It performs the following steps when called:\n1. If x is NaN, return the String \"NaN\".2. If x is +0\ud835\udd3d or -0\ud835\udd3d, return the String \"0\".3. If x < -0\ud835\udd3d, return the string-concatenation of \"-\" and Number::toString(-x).4. If x is +\u221e\ud835\udd3d, return the String \"Infinity\".5. Otherwise, let n, k, and s be integers such that k \u2265 1, 10k - 1 \u2264 s < 10k, \ud835\udd3d(s \u00d7 10n - k) is x, and k is as small as possible. Note that k is the number of digits in the decimal representation of s, that s is not divisible by 10, and that the least significant digit of s is not necessarily uniquely determined by these criteria.6. If k \u2264 n \u2264 21, return the string-concatenation of:the code units of the k digits of the decimal representation of s (in order, with no leading zeroes)n - k occurrences of the code unit 0x0030 (DIGIT ZERO)7. If 0 < n \u2264 21, return the string-concatenation of:the code units of the most significant n digits of the decimal representation of sthe code unit 0x002E (FULL STOP)the code units of the remaining k - n digits of the decimal representation of s8. If -6 < n \u2264 0, return the string-concatenation of:the code unit 0x0030 (DIGIT ZERO)the code unit 0x002E (FULL STOP)-n occurrences of the code unit 0x0030 (DIGIT ZERO)the code units of the k digits of the decimal representation of s9. Otherwise, if k = 1, return the string-concatenation of:the code unit of the single digit of sthe code unit 0x0065 (LATIN SMALL LETTER E)the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether n - 1 is positive or negativethe code units of the decimal representation of the integer abs(n - 1) (with no leading zeroes)10. Return the string-concatenation of:the code units of the most significant digit of the decimal representation of sthe code unit 0x002E (FULL STOP)the code units of the remaining k - 1 digits of the decimal representation of sthe code unit 0x0065 (LATIN SMALL LETTER E)the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether n - 1 is positive or negativethe code units of the decimal representation of the integer abs(n - 1) (with no leading zeroes)\nNote 1\nThe following observations may be useful as guidelines \nfor implementations, but are not part of the normative requirements of \nthis Standard:\n\n\n                If x is any Number value other than -0\ud835\udd3d, then ToNumber(ToString(x)) is exactly the same Number value as x.\n              \n\n                The least significant digit of s is not always uniquely determined by the requirements listed in step 5.\n              \n\n\nNote 2\nFor implementations that provide more accurate \nconversions than required by the rules above, it is recommended that the\n following alternative version of step 5 be used as a guideline:\n1. Otherwise, let n, k, and s be integers such that k \u2265 1, 10k - 1 \u2264 s < 10k, \ud835\udd3d(s \u00d7 10n - k) is x, and k is as small as possible. If there are multiple possibilities for s, choose the value of s for which s \u00d7 10n - k is closest in value to \u211d(x). If there are two such possible values of s, choose the one that is even. Note that k is the number of digits in the decimal representation of s and that s is not divisible by 10.\n\nNote 3\nImplementers of ECMAScript may find useful the paper and \ncode written by David M. Gay for binary-to-decimal conversion of \nfloating-point numbers:\n\n              Gay, David M. Correctly Rounded Binary-Decimal and \nDecimal-Binary Conversions. Numerical Analysis, Manuscript 90-10. \nAT&T Bell Laboratories (Murray Hill, New Jersey). 30 November 1990. \nAvailable as\nhttp://ampl.com/REFS/abstracts.html#rounding. Associated code available as\nhttp://netlib.sandia.gov/fp/dtoa.c and as\nhttp://netlib.sandia.gov/fp/g_fmt.c and may also be found at the various netlib mirror sites.\n            \n\n\n\n\n6.1.6.2 The BigInt Type\nThe BigInt type represents an integer\n value. The value may be any size and is not limited to a particular \nbit-width. Generally, where not otherwise noted, operations are designed\n to return exact mathematically-based answers. For binary operations, \nBigInts act as two's complement binary strings, with negative numbers \ntreated as having bits set infinitely to the left.\n\n6.1.6.2.1 BigInt::unaryMinus ( x )\nThe abstract operation BigInt::unaryMinus takes argument x (a BigInt) and returns a BigInt. It performs the following steps when called:\n1. If x is 0\u2124, return 0\u2124.2. Return the BigInt value that represents the negation of \u211d(x).\n\n\n6.1.6.2.2 BigInt::bitwiseNOT ( x )\nThe abstract operation BigInt::bitwiseNOT takes argument x (a BigInt) and returns a BigInt. It returns the one's complement of x. It performs the following steps when called:\n1. Return -x - 1\u2124.\n\n\n6.1.6.2.3 BigInt::exponentiate ( base, exponent )\nThe abstract operation BigInt::exponentiate takes arguments base (a BigInt) and exponent (a BigInt) and returns either a normal completion containing a BigInt or an abrupt completion. It performs the following steps when called:\n1. If exponent < 0\u2124, throw a RangeError exception.2. If base is 0\u2124 and exponent is 0\u2124, return 1\u2124.3. Return the BigInt value that represents \u211d(base) raised to the power \u211d(exponent).\n\n\n6.1.6.2.4 BigInt::multiply ( x, y )\nThe abstract operation BigInt::multiply takes arguments x (a BigInt) and y (a BigInt) and returns a BigInt. It performs the following steps when called:\n1. Return the BigInt value that represents the product of x and y.\nNoteEven if the result has a much larger bit width than the input, the exact mathematical answer is given.\n\n\n6.1.6.2.5 BigInt::divide ( x, y )\nThe abstract operation BigInt::divide takes arguments x (a BigInt) and y (a BigInt) and returns either a normal completion containing a BigInt or an abrupt completion. It performs the following steps when called:\n1. If y is 0\u2124, throw a RangeError exception.2. Let quotient be \u211d(x) / \u211d(y).3. Return the BigInt value that represents quotient rounded towards 0 to the next integer value.\n\n\n6.1.6.2.6 BigInt::remainder ( n, d )\nThe abstract operation BigInt::remainder takes arguments n (a BigInt) and d (a BigInt) and returns either a normal completion containing a BigInt or an abrupt completion. It performs the following steps when called:\n1. If d is 0\u2124, throw a RangeError exception.2. If n is 0\u2124, return 0\u2124.3. Let r be the BigInt defined by the mathematical relation r = n - (d \u00d7 q) where q is a BigInt that is negative only if n/d is negative and positive only if n/d is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of n and d.4. Return r.\nNoteThe sign of the result equals the sign of the dividend.\n\n\n6.1.6.2.7 BigInt::add ( x, y )\nThe abstract operation BigInt::add takes arguments x (a BigInt) and y (a BigInt) and returns a BigInt. It performs the following steps when called:\n1. Return the BigInt value that represents the sum of x and y.\n\n\n6.1.6.2.8 BigInt::subtract ( x, y )\nThe abstract operation BigInt::subtract takes arguments x (a BigInt) and y (a BigInt) and returns a BigInt. It performs the following steps when called:\n1. Return the BigInt value that represents the difference x minus y.\n\n\n6.1.6.2.9 BigInt::leftShift ( x, y )\nThe abstract operation BigInt::leftShift takes arguments x (a BigInt) and y (a BigInt) and returns a BigInt. It performs the following steps when called:\n1. If y < 0\u2124, thena. Return the BigInt value that represents \u211d(x) / 2-y, rounding down to the nearest integer, including for negative numbers.2. Return the BigInt value that represents \u211d(x) \u00d7 2y.\nNoteSemantics\n here should be equivalent to a bitwise shift, treating the BigInt as an\n infinite length string of binary two's complement digits.\n\n\n6.1.6.2.10 BigInt::signedRightShift ( x, y )\nThe abstract operation BigInt::signedRightShift takes arguments x (a BigInt) and y (a BigInt) and returns a BigInt. It performs the following steps when called:\n1. Return BigInt::leftShift(x, -y).\n\n\n6.1.6.2.11 BigInt::unsignedRightShift ( x, y )\nThe abstract operation BigInt::unsignedRightShift takes arguments x (a BigInt) and y (a BigInt) and returns a throw completion. It performs the following steps when called:\n1. Throw a TypeError exception.\n\n\n6.1.6.2.12 BigInt::lessThan ( x, y )\nThe abstract operation BigInt::lessThan takes arguments x (a BigInt) and y (a BigInt) and returns a Boolean. It performs the following steps when called:\n1. If \u211d(x) < \u211d(y), return true; otherwise return false.\n\n\n6.1.6.2.13 BigInt::equal ( x, y )\nThe abstract operation BigInt::equal takes arguments x (a BigInt) and y (a BigInt) and returns a Boolean. It performs the following steps when called:\n1. If \u211d(x) = \u211d(y), return true; otherwise return false.\n\n\n6.1.6.2.14 BigInt::sameValue ( x, y )\nThe abstract operation BigInt::sameValue takes arguments x (a BigInt) and y (a BigInt) and returns a Boolean. It performs the following steps when called:\n1. Return BigInt::equal(x, y).\n\n\n6.1.6.2.15 BigInt::sameValueZero ( x, y )\nThe abstract operation BigInt::sameValueZero takes arguments x (a BigInt) and y (a BigInt) and returns a Boolean. It performs the following steps when called:\n1. Return BigInt::equal(x, y).\n\n\n6.1.6.2.16 BinaryAnd ( x, y )\nThe abstract operation BinaryAnd takes arguments x (0 or 1) and y (0 or 1) and returns 0 or 1. It performs the following steps when called:\n1. If x is 1 and y is 1, return 1.2. Else, return 0.\n\n\n6.1.6.2.17 BinaryOr ( x, y )\nThe abstract operation BinaryOr takes arguments x (0 or 1) and y (0 or 1) and returns 0 or 1. It performs the following steps when called:\n1. If x is 1 or y is 1, return 1.2. Else, return 0.\n\n\n6.1.6.2.18 BinaryXor ( x, y )\nThe abstract operation BinaryXor takes arguments x (0 or 1) and y (0 or 1) and returns 0 or 1. It performs the following steps when called:\n1. If x is 1 and y is 0, return 1.2. Else if x is 0 and y is 1, return 1.3. Else, return 0.\n\n\n6.1.6.2.19 BigIntBitwiseOp ( op, x, y )\nThe abstract operation BigIntBitwiseOp takes arguments op (&, ^, or |), x (a BigInt), and y (a BigInt) and returns a BigInt. It performs the following steps when called:\n1. Set x to \u211d(x).2. Set y to \u211d(y).3. Let result be 0.4. Let shift be 0.5. Repeat, until (x = 0 or x = -1) and (y = 0 or y = -1),a. Let xDigit be x modulo 2.b. Let yDigit be y modulo 2.c. If op is &, set result to result + 2shift \u00d7 BinaryAnd(xDigit, yDigit).d. Else if op is |, set result to result + 2shift \u00d7 BinaryOr(xDigit, yDigit).e. Else,i. Assert: op is ^.ii. Set result to result + 2shift \u00d7 BinaryXor(xDigit, yDigit).f. Set shift to shift + 1.g. Set x to (x - xDigit) / 2.h. Set y to (y - yDigit) / 2.6. If op is &, let tmp be BinaryAnd(x modulo 2, y modulo 2).7. Else if op is |, let tmp be BinaryOr(x modulo 2, y modulo 2).8. Else,a. Assert: op is ^.b. Let tmp be BinaryXor(x modulo 2, y modulo 2).9. If tmp \u2260 0, thena. Set result to result - 2shift.b. NOTE: This extends the sign.10. Return the BigInt value for result.\n\n\n6.1.6.2.20 BigInt::bitwiseAND ( x, y )\nThe abstract operation BigInt::bitwiseAND takes arguments x (a BigInt) and y (a BigInt) and returns a BigInt. It performs the following steps when called:\n1. Return BigIntBitwiseOp(&, x, y).\n\n\n6.1.6.2.21 BigInt::bitwiseXOR ( x, y )\nThe abstract operation BigInt::bitwiseXOR takes arguments x (a BigInt) and y (a BigInt) and returns a BigInt. It performs the following steps when called:\n1. Return BigIntBitwiseOp(^, x, y).\n\n\n6.1.6.2.22 BigInt::bitwiseOR ( x, y )\nThe abstract operation BigInt::bitwiseOR takes arguments x (a BigInt) and y (a BigInt) and returns a BigInt. It performs the following steps when called:\n1. Return BigIntBitwiseOp(|, x, y).\n\n\n6.1.6.2.23 BigInt::toString ( x )\nThe abstract operation BigInt::toString takes argument x (a BigInt) and returns a String. It converts x to String format. It performs the following steps when called:\n1. If x < 0\u2124, return the string-concatenation of the String \"-\" and BigInt::toString(-x).2. Return the String value consisting of the code units of the digits of the decimal representation of x.\n\n\n\n\n6.1.7 The Object Type\nAn Object is logically a collection of properties. Each property is either a data property, or an accessor property:\n\n\n          A data property associates a key value with an ECMAScript language value and a set of Boolean attributes.\n        \n\n          An accessor property\n associates a key value with one or two accessor functions, and a set of\n Boolean attributes. The accessor functions are used to store or \nretrieve an ECMAScript language value that is associated with the property.\n        \n\nProperties are identified using key values. A property key\n value is either an ECMAScript String value or a Symbol value. All \nString and Symbol values, including the empty String, are valid as \nproperty keys. A property name is a property key that is a String value.\nAn integer index is a String-valued property key that is a canonical numeric String (see 7.1.21) and whose numeric value is either +0\ud835\udd3d or a positive integral Number \u2264 \ud835\udd3d(253 - 1). An array index is an integer index whose numeric value i is in the range +0\ud835\udd3d \u2264 i < \ud835\udd3d(232 - 1).\nProperty keys are used to access properties and their values. There are two kinds of access for properties: get and set, corresponding to value retrieval and assignment, respectively. The properties accessible via get and set access includes both own properties that are a direct part of an object and inherited properties\n which are provided by another associated object via a property \ninheritance relationship. Inherited properties may be either own or \ninherited properties of the associated object. Each own property of an \nobject must each have a key value that is distinct from the key values \nof the other own properties of that object.\nAll objects are logically collections of properties, but there \nare multiple forms of objects that differ in their semantics for \naccessing and manipulating their properties. Please see 6.1.7.2 for definitions of the multiple forms of objects.\n\n6.1.7.1 Property Attributes\nAttributes are used in this specification to define and explain the state of Object properties as described in Table 3. Unless specified explicitly, the initial value of each attribute is its Default Value.\nTable 3: Attributes of an Object property\n\n\nAttribute Name\nTypes of property for which it is present\nValue Domain\nDefault Value\nDescription\n\n\n\n                [[Value]]\n              \n\ndata property\n\n\n                an ECMAScript language value\n\n\nundefined\n\n\n                The value retrieved by a get access of the property.\n              \n\n\n\n                [[Writable]]\n              \n\ndata property\n\n\n                a Boolean\n              \n\nfalse\n\n\n                If false, attempts by ECMAScript code to change the property's [[Value]] attribute using [[Set]] will not succeed.\n              \n\n\n\n                [[Get]]\n              \n\naccessor property\n\n\n                an Object or undefined\n\n\nundefined\n\n\n                If the value is an Object it must be a function object. The function's [[Call]] internal method (Table 5) is called with an empty arguments list to retrieve the property value each time a get access of the property is performed.\n              \n\n\n\n                [[Set]]\n              \n\naccessor property\n\n\n                an Object or undefined\n\n\nundefined\n\n\n                If the value is an Object it must be a function object. The function's [[Call]] internal method (Table 5)\n is called with an arguments list containing the assigned value as its \nsole argument each time a set access of the property is performed. The \neffect of a property's [[Set]] internal method may, but is not required \nto, have an effect on the value returned by subsequent calls to the \nproperty's [[Get]] internal method.\n              \n\n\n\n                [[Enumerable]]\n              \n\ndata property or accessor property\n\n\n                a Boolean\n              \n\nfalse\n\n\n                If true, the property will be enumerated by a for-in enumeration (see 14.7.5). Otherwise, the property is said to be non-enumerable.\n              \n\n\n\n                [[Configurable]]\n              \n\ndata property or accessor property\n\n\n                a Boolean\n              \n\nfalse\n\n\n                If false, attempts to delete the property, change it from a data property to an accessor property or from an accessor property to a data property, or make any changes to its attributes (other than replacing an existing [[Value]] or setting [[Writable]] to false) will fail.\n              \n\n\n\n\n\n6.1.7.2 Object Internal Methods and Internal Slots\nThe actual semantics of objects, in ECMAScript, are specified via algorithms called internal methods.\n Each object in an ECMAScript engine is associated with a set of \ninternal methods that defines its runtime behaviour. These internal \nmethods are not part of the ECMAScript language. They are defined by \nthis specification purely for expository purposes. However, each object \nwithin an implementation of ECMAScript must behave as specified by the \ninternal methods associated with it. The exact manner in which this is \naccomplished is determined by the implementation.\nInternal method names are polymorphic. This means that \ndifferent object values may perform different algorithms when a common \ninternal method name is invoked upon them. That actual object upon which\n an internal method is invoked is the \u201ctarget\u201d of the invocation. If, at\n runtime, the implementation of an algorithm attempts to use an internal\n method of an object that the object does not support, a TypeError exception is thrown.\nInternal slots correspond to internal state that is \nassociated with objects and used by various ECMAScript specification \nalgorithms. Internal slots are not object properties and they are not \ninherited. Depending upon the specific internal slot specification, such\n state may consist of values of any ECMAScript language type\n or of specific ECMAScript specification type values. Unless explicitly \nspecified otherwise, internal slots are allocated as part of the process\n of creating an object and may not be dynamically added to an object. \nUnless specified otherwise, the initial value of an internal slot is the\n value undefined. Various algorithms within this \nspecification create objects that have internal slots. However, the \nECMAScript language provides no direct way to associate internal slots \nwith an object.\nAll objects have an internal slot named [[PrivateElements]], which is a List of PrivateElements. This List represents the values of the private fields, methods, and accessors for the object. Initially, it is an empty List.\nInternal methods and internal slots are identified within \nthis specification using names enclosed in double square brackets [[ ]].\nTable 4 summarizes the essential internal methods\n used by this specification that are applicable to all objects created \nor manipulated by ECMAScript code. Every object must have algorithms for\n all of the essential internal methods. However, all objects do not \nnecessarily use the same algorithms for those methods.\nAn ordinary object is an object that satisfies all of the following criteria:\n\n\n            For the internal methods listed in Table 4, the object uses those defined in 10.1.\n          \n\n            If the object has a [[Call]] internal method, it uses the one defined in 10.2.1.\n          \n\n            If the object has a [[Construct]] internal method, it uses the one defined in 10.2.2.\n          \n\nAn exotic object is an object that is not an ordinary object.\nThis specification recognizes different kinds of exotic objects by those objects' internal methods. An object that is behaviourally equivalent to a particular kind of exotic object (such as an Array exotic object or a bound function exotic object), but does not have the same collection of internal methods specified for that kind, is not recognized as that kind of exotic object.\nThe \u201cSignature\u201d column of Table 4\n and other similar tables describes the invocation pattern for each \ninternal method. The invocation pattern always includes a parenthesized \nlist of descriptive parameter names. If a parameter name is the same as \nan ECMAScript type name then the name describes the required type of the\n parameter value. If an internal method explicitly returns a value, its \nparameter list is followed by the symbol \u201c\u2192\u201d and the type name of the \nreturned value. The type names used in signatures refer to the types \ndefined in clause 6 augmented by the following additional names. \u201cany\u201d means the value may be any ECMAScript language type.\nIn addition to its parameters, an internal method always has access to the object that is the target of the method invocation.\nAn internal method implicitly returns a Completion Record, either a normal completion that wraps a value of the return type shown in its invocation pattern, or a throw completion.\nTable 4: Essential Internal Methods\n\n\n\n                Internal Method\n              \n\n                Signature\n              \n\n                Description\n              \n\n\n\n                [[GetPrototypeOf]]\n              \n\n                ( ) \u2192 Object | Null\n              \n\n                Determine the object that provides inherited properties for this object. A null value indicates that there are no inherited properties.\n              \n\n\n\n                [[SetPrototypeOf]]\n              \n\n                (Object | Null) \u2192 Boolean\n              \n\n                Associate this object with another object that provides inherited properties. Passing null indicates that there are no inherited properties. Returns true indicating that the operation was completed successfully or false indicating that the operation was not successful.\n              \n\n\n\n                [[IsExtensible]]\n              \n\n                ( ) \u2192 Boolean\n              \n\n                Determine whether it is permitted to add additional properties to this object.\n              \n\n\n\n                [[PreventExtensions]]\n              \n\n                ( ) \u2192 Boolean\n              \n\n                Control whether new properties may be added to this object. Returns true if the operation was successful or false if the operation was unsuccessful.\n              \n\n\n\n                [[GetOwnProperty]]\n              \n\n                (propertyKey) \u2192 Undefined | Property Descriptor\n\n\n                Return a Property Descriptor for the own property of this object whose key is propertyKey, or undefined if no such property exists.\n              \n\n\n\n                [[DefineOwnProperty]]\n              \n\n                (propertyKey, PropertyDescriptor) \u2192 Boolean\n              \n\n                Create or alter the own property, whose key is propertyKey, to have the state described by PropertyDescriptor. Return true if that property was successfully created/updated or false if the property could not be created or updated.\n              \n\n\n\n                [[HasProperty]]\n              \n\n                (propertyKey) \u2192 Boolean\n              \n\n                Return a Boolean value indicating whether this object \nalready has either an own or inherited property whose key is propertyKey.\n              \n\n\n\n                [[Get]]\n              \n\n                (propertyKey, Receiver) \u2192 any\n\n\n                Return the value of the property whose key is propertyKey from this object. If any ECMAScript code must be executed to retrieve the property value, Receiver is used as the this value when evaluating the code.\n              \n\n\n\n                [[Set]]\n              \n\n                (propertyKey, value, Receiver) \u2192 Boolean\n              \n\n                Set the value of the property whose key is propertyKey to value. If any ECMAScript code must be executed to set the property value, Receiver is used as the this value when evaluating the code. Returns true if the property value was set or false if it could not be set.\n              \n\n\n\n                [[Delete]]\n              \n\n                (propertyKey) \u2192 Boolean\n              \n\n                Remove the own property whose key is propertyKey from this object. Return false if the property was not deleted and is still present. Return true if the property was deleted or is not present.\n              \n\n\n\n                [[OwnPropertyKeys]]\n              \n\n                ( ) \u2192 List of property keys\n\n\n                Return a List whose elements are all of the own property keys for the object.\n              \n\n\n\nTable 5 summarizes additional essential internal methods that are supported by objects that may be called as functions. A function object is an object that supports the [[Call]] internal method. A constructor\n is an object that supports the [[Construct]] internal method. Every \nobject that supports [[Construct]] must support [[Call]]; that is, every\n constructor must be a function object. Therefore, a constructor may also be referred to as a constructor function or constructor function object.\nTable 5: Additional Essential Internal Methods of Function Objects\n\n\n\n                Internal Method\n              \n\n                Signature\n              \n\n                Description\n              \n\n\n\n                [[Call]]\n              \n\n                (any, a List of any) \u2192 any\n\n\n                Executes code associated with this object. Invoked via a\n function call expression. The arguments to the internal method are a this value and a List whose elements are the arguments passed to the function by a call expression. Objects that implement this internal method are callable.\n              \n\n\n\n                [[Construct]]\n              \n\n                (a List of any, Object) \u2192 Object\n              \n\n                Creates an object. Invoked via the new operator or a super call. The first argument to the internal method is a List whose elements are the arguments of the constructor invocation or the super call. The second argument is the object to which the new operator was initially applied. Objects that implement this internal method are called constructors. A function object is not necessarily a constructor and such non-constructor function objects do not have a [[Construct]] internal method.\n              \n\n\n\nThe semantics of the essential internal methods for ordinary objects and standard exotic objects are specified in clause 10. If any specified use of an internal method of an exotic object is not supported by an implementation, that usage must throw a TypeError exception when attempted.\n\n\n6.1.7.3 Invariants of the Essential Internal Methods\nThe Internal Methods of Objects of an ECMAScript engine must \nconform to the list of invariants specified below. Ordinary ECMAScript \nObjects as well as all standard exotic objects\n in this specification maintain these invariants. ECMAScript Proxy \nobjects maintain these invariants by means of runtime checks on the \nresult of traps invoked on the [[ProxyHandler]] object.\nAny implementation provided exotic objects\n must also maintain these invariants for those objects. Violation of \nthese invariants may cause ECMAScript code to have unpredictable \nbehaviour and create security issues. However, violation of these \ninvariants must never compromise the memory safety of an implementation.\nAn implementation must not allow these invariants to be \ncircumvented in any manner such as by providing alternative interfaces \nthat implement the functionality of the essential internal methods \nwithout enforcing their invariants.\nDefinitions:\n\n\n            The target of an internal method is the object upon which the internal method is called.\n          \n\n            A target is non-extensible if it has been observed to return false from its [[IsExtensible]] internal method, or true from its [[PreventExtensions]] internal method.\n          \n\n            A non-existent property is a property that does not exist as an own property on a non-extensible target.\n          \n\n            All references to SameValue are according to the definition of the SameValue algorithm.\n          \n\nReturn value:\nThe value returned by any internal method must be a Completion Record with either:\n\n[[Type]] = normal, [[Target]] = empty, and [[Value]] = a value of the \"normal return type\" shown below for that internal method, or\n[[Type]] = throw, [[Target]] = empty, and [[Value]] = any ECMAScript language value.\n\nNote 1\nAn internal method must not return a continue completion, a break completion, or a return completion.\n\n[[GetPrototypeOf]] ( )\n\n\n            The normal return type is either Object or Null.\n          \n\n            If target is non-extensible, and [[GetPrototypeOf]] returns a value V, then any future calls to [[GetPrototypeOf]] should return the SameValue as V.\n          \n\nNote 2\nAn object's prototype chain should have finite length (that\n is, starting from any object, recursively applying the \n[[GetPrototypeOf]] internal method to its result should eventually lead \nto the value null). However, this requirement is not enforceable as an object level invariant if the prototype chain includes any exotic objects that do not use the ordinary object\n definition of [[GetPrototypeOf]]. Such a circular prototype chain may \nresult in infinite loops when accessing object properties.\n\n[[SetPrototypeOf]] ( V )\n\n\n            The normal return type is Boolean.\n          \n\n            If target is non-extensible, [[SetPrototypeOf]] must return false, unless V is the SameValue as the target's observed [[GetPrototypeOf]] value.\n          \n\n[[IsExtensible]] ( )\n\n\n            The normal return type is Boolean.\n          \n\n            If [[IsExtensible]] returns false, all future calls to [[IsExtensible]] on the target must return false.\n          \n\n[[PreventExtensions]] ( )\n\n\n            The normal return type is Boolean.\n          \n\n            If [[PreventExtensions]] returns true, all future calls to [[IsExtensible]] on the target must return false and the target is now considered non-extensible.\n          \n\n[[GetOwnProperty]] ( P )\n\n\n            The normal return type is either Property Descriptor or Undefined.\n          \n\n            If the Type of the return value is Property Descriptor, the return value must be a fully populated Property Descriptor.\n          \n\n            If P is described as a non-configurable, non-writable own data property, all future calls to [[GetOwnProperty]] ( P ) must return Property Descriptor whose [[Value]] is SameValue as P's [[Value]] attribute.\n          \n\n            If P's attributes other than [[Writable]] may change over time or if the property might be deleted, then P's [[Configurable]] attribute must be true.\n          \n\n            If the [[Writable]] attribute may change from false to true, then the [[Configurable]] attribute must be true.\n          \n\n            If the target is non-extensible and P is non-existent, then all future calls to [[GetOwnProperty]] (P) on the target must describe P as non-existent (i.e. [[GetOwnProperty]] (P) must return undefined).\n          \n\nNote 3\nAs a consequence of the third invariant, if a property is described as a data property and it may return different values over time, then either or both of the [[Writable]] and [[Configurable]] attributes must be true even if no mechanism to change the value is exposed via the other essential internal methods.\n\n[[DefineOwnProperty]] ( P, Desc )\n\n\n            The normal return type is Boolean.\n          \n\n            [[DefineOwnProperty]] must return false if P has previously been observed as a non-configurable own property of the target, unless either:\n            \n\nP is a writable data property. A non-configurable writable data property can be changed into a non-configurable non-writable data property.\n              \n\n                All attributes of Desc are the SameValue as P's attributes.\n              \n\n\n\n            [[DefineOwnProperty]] (P, Desc) must return false if target is non-extensible and P is a non-existent own property. That is, a non-extensible target object cannot be extended with new properties.\n          \n\n[[HasProperty]] ( P )\n\n\n            The normal return type is Boolean.\n          \n\n            If P was previously observed as a non-configurable own data or accessor property of the target, [[HasProperty]] must return true.\n          \n\n[[Get]] ( P, Receiver )\n\n\n            The normal return type is any ECMAScript language type.\n          \n\n            If P was previously observed as a non-configurable, non-writable own data property of the target with value V, then [[Get]] must return the SameValue as V.\n          \n\n            If P was previously observed as a non-configurable own accessor property of the target whose [[Get]] attribute is undefined, the [[Get]] operation must return undefined.\n          \n\n[[Set]] ( P, V, Receiver )\n\n\n            The normal return type is Boolean.\n          \n\n            If P was previously observed as a non-configurable, non-writable own data property of the target, then [[Set]] must return false unless V is the SameValue as P's [[Value]] attribute.\n          \n\n            If P was previously observed as a non-configurable own accessor property of the target whose [[Set]] attribute is undefined, the [[Set]] operation must return false.\n          \n\n[[Delete]] ( P )\n\n\n            The normal return type is Boolean.\n          \n\n            If P was previously observed as a non-configurable own data or accessor property of the target, [[Delete]] must return false.\n          \n\n[[OwnPropertyKeys]] ( )\n\n\n            The normal return type is List.\n          \n\n            The returned List must not contain any duplicate entries.\n          \n\n            The Type of each element of the returned List is either String or Symbol.\n          \n\n            The returned List must contain at least the keys of all non-configurable own properties that have previously been observed.\n          \n\n            If the target is non-extensible, the returned List must contain only the keys of all own properties of the target that are observable using [[GetOwnProperty]].\n          \n\n[[Call]] ( )\n\n\n            The normal return type is any ECMAScript language type.\n          \n\n[[Construct]] ( )\n\n\n            The normal return type is Object.\n          \n\n            The target must also have a [[Call]] internal method.\n          \n\n\n\n6.1.7.4 Well-Known Intrinsic Objects\nWell-known intrinsics are built-in objects that are \nexplicitly referenced by the algorithms of this specification and which \nusually have realm-specific\n identities. Unless otherwise specified each intrinsic object actually \ncorresponds to a set of similar objects, one per realm.\nWithin this specification a reference such as %name% means the intrinsic object, associated with the current realm,\n corresponding to the name. A reference such as %name.a.b% means, as if \nthe \"b\" property of the \"a\" property of the intrinsic object %name% was \naccessed prior to any ECMAScript code being evaluated. Determination of \nthe current realm and its intrinsics is described in 9.4. The well-known intrinsics are listed in Table 6.\nTable 6: Well-Known Intrinsic Objects\n\n\n\n                Intrinsic Name\n              \n\n                Global Name\n              \n\n                ECMAScript Language Association\n              \n\n\n\n%AggregateError%\n\n\nAggregateError\n\n\n                The AggregateError constructor (20.5.7.1)\n              \n\n\n\n%Array%\n\n\nArray\n\n\n                The Array constructor (23.1.1)\n              \n\n\n\n%ArrayBuffer%\n\n\nArrayBuffer\n\n\n                The ArrayBuffer constructor (25.1.3)\n              \n\n\n\n%ArrayIteratorPrototype%\n\n\n\n\n                The prototype of Array iterator objects (23.1.5)\n              \n\n\n\n%AsyncFromSyncIteratorPrototype%\n\n\n\n\n                The prototype of async-from-sync iterator objects (27.1.4)\n              \n\n\n\n%AsyncFunction%\n\n\n\n\n                The constructor of async function objects (27.7.1)\n              \n\n\n\n%AsyncGeneratorFunction%\n\n\n\n\n                The constructor of async iterator objects (27.4.1)\n              \n\n\n\n%AsyncIteratorPrototype%\n\n\n\n\n                An object that all standard built-in async iterator objects indirectly inherit from\n              \n\n\n\n%Atomics%\n\n\nAtomics\n\n\n                The Atomics object (25.4)\n              \n\n\n\n%BigInt%\n\n\nBigInt\n\n\n                The BigInt constructor (21.2.1)\n              \n\n\n\n%BigInt64Array%\n\n\nBigInt64Array\n\n\n                The BigInt64Array constructor (23.2)\n              \n\n\n\n%BigUint64Array%\n\n\nBigUint64Array\n\n\n                The BigUint64Array constructor (23.2)\n              \n\n\n\n%Boolean%\n\n\nBoolean\n\n\n                The Boolean constructor (20.3.1)\n              \n\n\n\n%DataView%\n\n\nDataView\n\n\n                The DataView constructor (25.3.2)\n              \n\n\n\n%Date%\n\n\nDate\n\n\n                The Date constructor (21.4.2)\n              \n\n\n\n%decodeURI%\n\n\ndecodeURI\n\n\n                The decodeURI function (19.2.6.2)\n              \n\n\n\n%decodeURIComponent%\n\n\ndecodeURIComponent\n\n\n                The decodeURIComponent function (19.2.6.3)\n              \n\n\n\n%encodeURI%\n\n\nencodeURI\n\n\n                The encodeURI function (19.2.6.4)\n              \n\n\n\n%encodeURIComponent%\n\n\nencodeURIComponent\n\n\n                The encodeURIComponent function (19.2.6.5)\n              \n\n\n\n%Error%\n\n\nError\n\n\n                The Error constructor (20.5.1)\n              \n\n\n\n%eval%\n\n\neval\n\n\n                The eval function (19.2.1)\n              \n\n\n\n%EvalError%\n\n\nEvalError\n\n\n                The EvalError constructor (20.5.5.1)\n              \n\n\n\n%FinalizationRegistry%\n\n\nFinalizationRegistry\n\n\n                The FinalizationRegistry constructor (26.2.1)\n              \n\n\n\n%Float32Array%\n\n\nFloat32Array\n\n\n                The Float32Array constructor (23.2)\n              \n\n\n\n%Float64Array%\n\n\nFloat64Array\n\n\n                The Float64Array constructor (23.2)\n              \n\n\n\n%ForInIteratorPrototype%\n\n\n\n\n                The prototype of For-In iterator objects (14.7.5.10)\n              \n\n\n\n%Function%\n\n\nFunction\n\n\n                The Function constructor (20.2.1)\n              \n\n\n\n%GeneratorFunction%\n\n\n\n\n                The constructor of Generators (27.3.1)\n              \n\n\n\n%Int8Array%\n\n\nInt8Array\n\n\n                The Int8Array constructor (23.2)\n              \n\n\n\n%Int16Array%\n\n\nInt16Array\n\n\n                The Int16Array constructor (23.2)\n              \n\n\n\n%Int32Array%\n\n\nInt32Array\n\n\n                The Int32Array constructor (23.2)\n              \n\n\n\n%isFinite%\n\n\nisFinite\n\n\n                The isFinite function (19.2.2)\n              \n\n\n\n%isNaN%\n\n\nisNaN\n\n\n                The isNaN function (19.2.3)\n              \n\n\n\n%IteratorPrototype%\n\n\n\n\n                An object that all standard built-in iterator objects indirectly inherit from\n              \n\n\n\n%JSON%\n\n\nJSON\n\n\n                The JSON object (25.5)\n              \n\n\n\n%Map%\n\n\nMap\n\n\n                The Map constructor (24.1.1)\n              \n\n\n\n%MapIteratorPrototype%\n\n\n\n\n                The prototype of Map iterator objects (24.1.5)\n              \n\n\n\n%Math%\n\n\nMath\n\n\n                The Math object (21.3)\n              \n\n\n\n%Number%\n\n\nNumber\n\n\n                The Number constructor (21.1.1)\n              \n\n\n\n%Object%\n\n\nObject\n\n\n                The Object constructor (20.1.1)\n              \n\n\n\n%parseFloat%\n\n\nparseFloat\n\n\n                The parseFloat function (19.2.4)\n              \n\n\n\n%parseInt%\n\n\nparseInt\n\n\n                The parseInt function (19.2.5)\n              \n\n\n\n%Promise%\n\n\nPromise\n\n\n                The Promise constructor (27.2.3)\n              \n\n\n\n%Proxy%\n\n\nProxy\n\n\n                The Proxy constructor (28.2.1)\n              \n\n\n\n%RangeError%\n\n\nRangeError\n\n\n                The RangeError constructor (20.5.5.2)\n              \n\n\n\n%ReferenceError%\n\n\nReferenceError\n\n\n                The ReferenceError constructor (20.5.5.3)\n              \n\n\n\n%Reflect%\n\n\nReflect\n\n\n                The Reflect object (28.1)\n              \n\n\n\n%RegExp%\n\n\nRegExp\n\n\n                The RegExp constructor (22.2.3)\n              \n\n\n\n%RegExpStringIteratorPrototype%\n\n\n\n\n                The prototype of RegExp String Iterator objects (22.2.7)\n              \n\n\n\n%Set%\n\n\nSet\n\n\n                The Set constructor (24.2.1)\n              \n\n\n\n%SetIteratorPrototype%\n\n\n\n\n                The prototype of Set iterator objects (24.2.5)\n              \n\n\n\n%SharedArrayBuffer%\n\n\nSharedArrayBuffer\n\n\n                The SharedArrayBuffer constructor (25.2.2)\n              \n\n\n\n%String%\n\n\nString\n\n\n                The String constructor (22.1.1)\n              \n\n\n\n%StringIteratorPrototype%\n\n\n\n\n                The prototype of String iterator objects (22.1.5)\n              \n\n\n\n%Symbol%\n\n\nSymbol\n\n\n                The Symbol constructor (20.4.1)\n              \n\n\n\n%SyntaxError%\n\n\nSyntaxError\n\n\n                The SyntaxError constructor (20.5.5.4)\n              \n\n\n\n%ThrowTypeError%\n\n\n\n\n                A function object that unconditionally throws a new instance of %TypeError%\n\n\n\n\n%TypedArray%\n\n\n\n\n                The super class of all typed Array constructors (23.2.1)\n              \n\n\n\n%TypeError%\n\n\nTypeError\n\n\n                The TypeError constructor (20.5.5.5)\n              \n\n\n\n%Uint8Array%\n\n\nUint8Array\n\n\n                The Uint8Array constructor (23.2)\n              \n\n\n\n%Uint8ClampedArray%\n\n\nUint8ClampedArray\n\n\n                The Uint8ClampedArray constructor (23.2)\n              \n\n\n\n%Uint16Array%\n\n\nUint16Array\n\n\n                The Uint16Array constructor (23.2)\n              \n\n\n\n%Uint32Array%\n\n\nUint32Array\n\n\n                The Uint32Array constructor (23.2)\n              \n\n\n\n%URIError%\n\n\nURIError\n\n\n                The URIError constructor (20.5.5.6)\n              \n\n\n\n%WeakMap%\n\n\nWeakMap\n\n\n                The WeakMap constructor (24.3.1)\n              \n\n\n\n%WeakRef%\n\n\nWeakRef\n\n\n                The WeakRef constructor (26.1.1)\n              \n\n\n\n%WeakSet%\n\n\nWeakSet\n\n\n                The WeakSet constructor (24.4.1)\n              \n\n\n\nNote\nAdditional entries in Table 93.\n\n\n\n\n\n6.2 ECMAScript Specification Types\nA specification type corresponds to meta-values that are used \nwithin algorithms to describe the semantics of ECMAScript language \nconstructs and ECMAScript language types. The specification types include Reference, List, Completion Record, Property Descriptor, Environment Record, Abstract Closure, and Data Block.\n Specification type values are specification artefacts that do not \nnecessarily correspond to any specific entity within an ECMAScript \nimplementation. Specification type values may be used to describe \nintermediate results of ECMAScript expression evaluation but such values\n cannot be stored as properties of objects or values of ECMAScript \nlanguage variables.\n\n6.2.1 The List and Record Specification Types\nThe List type is used to explain the evaluation of argument lists (see 13.3.8) in new\n expressions, in function calls, and in other algorithms where a simple \nordered list of values is needed. Values of the List type are simply \nordered sequences of list elements containing the individual values. \nThese sequences may be of any length. The elements of a list may be \nrandomly accessed using 0-origin indices. For notational convenience an \narray-like syntax can be used to access List elements. For example, arguments[2] is shorthand for saying the 3rd element of the List arguments.\nWhen an algorithm iterates over the elements of a List without \nspecifying an order, the order used is the order of the elements in the \nList.\nFor notational convenience within this specification, a literal\n syntax can be used to express a new List value. For example, \u00ab 1, 2 \u00bb \ndefines a List value that has two elements each of which is initialized \nto a specific value. A new empty List can be expressed as \u00ab \u00bb.\nIn this specification, the phrase \"the list-concatenation of A, B,\n ...\" (where each argument is a possibly empty List) denotes a new List \nvalue whose elements are the concatenation of the elements (in order) of\n each of the arguments (in order).\nThe Record type is used to \ndescribe data aggregations within the algorithms of this specification. A\n Record type value consists of one or more named fields. The value of \neach field is an ECMAScript language value or specification value. Field names are always enclosed in double brackets, for example [[Value]].\nFor notational convenience within this specification, an object\n literal-like syntax can be used to express a Record value. For example,\n { [[Field1]]: 42, [[Field2]]: false, [[Field3]]: empty\n } defines a Record value that has three fields, each of which is \ninitialized to a specific value. Field name order is not significant. \nAny fields that are not explicitly listed are considered to be absent.\nIn specification text and algorithms, dot notation may be used \nto refer to a specific field of a Record value. For example, if R is the\n record shown in the previous paragraph then R.[[Field2]] is shorthand \nfor \u201cthe field of R named [[Field2]]\u201d.\nSchema for commonly used Record field combinations may be \nnamed, and that name may be used as a prefix to a literal Record value \nto identify the specific kind of aggregations that is being described. \nFor example: PropertyDescriptor { [[Value]]: 42, [[Writable]]: false, [[Configurable]]: true }.\n\n\n6.2.2 The Set and Relation Specification Types\nThe Set type is used to explain a collection of unordered elements for use in the memory model.\n It is distinct from the ECMAScript collection type of the same name. To\n disambiguate, instances of the ECMAScript collection are consistently \nreferred to as \"Set objects\" within this specification. Values of the \nSet type are simple collections of elements, where no element appears \nmore than once. Elements may be added to and removed from Sets. Sets may\n be unioned, intersected, or subtracted from each other.\nThe Relation type is used to explain constraints on \nSets. Values of the Relation type are Sets of ordered pairs of values \nfrom its value domain. For example, a Relation on events is a set of \nordered pairs of events. For a Relation R and two values a and b in the value domain of R, a R b is shorthand for saying the ordered pair (a, b) is a member of R. A Relation is least with respect to some conditions when it is the smallest Relation that satisfies those conditions.\nA strict partial order is a Relation value R that satisfies the following.\n\n\nFor all a, b, and c in R's domain:\n\nIt is not the case that a R a, and\nIf a R b and b R c, then a R c.\n\n\n\nNote 1\nThe two properties above are called irreflexivity and transitivity, respectively.\n\nA strict total order is a Relation value R that satisfies the following.\n\n\nFor all a, b, and c in R's domain:\n\na is identical to b or a R b or b R a, and\nIt is not the case that a R a, and\nIf a R b and b R c, then a R c.\n\n\n\nNote 2\nThe three properties above are called totality, irreflexivity, and transitivity, respectively.\n\n\n\n6.2.3 The Completion Record Specification Type\nThe Completion Record specification type is used to explain the runtime propagation of values and control flow such as the behaviour of statements (break, continue, return and throw) that perform nonlocal transfers of control.\nCompletion Records have the fields defined in Table 7.\nTable 7: Completion Record Fields\n\n\n\n              Field Name\n            \n\n              Value\n            \n\n              Meaning\n            \n\n\n\n              [[Type]]\n            \n\nnormal, break, continue, return, or throw\n\n\n              The type of completion that occurred.\n            \n\n\n\n              [[Value]]\n            \n\n              any value except a Completion Record\n\n\n              The value that was produced.\n            \n\n\n\n              [[Target]]\n            \n\n              a String or empty\n\n\n              The target label for directed control transfers.\n            \n\n\n\nThe following shorthand terms are sometimes used to refer to Completion Records.\n\nnormal completion refers to any Completion Record with a [[Type]] value of normal.\nbreak completion refers to any Completion Record with a [[Type]] value of break.\ncontinue completion refers to any Completion Record with a [[Type]] value of continue.\nreturn completion refers to any Completion Record with a [[Type]] value of return.\nthrow completion refers to any Completion Record with a [[Type]] value of throw.\nabrupt completion refers to any Completion Record with a [[Type]] value other than normal.\na normal completion containing some type of value refers to a normal completion that has a value of that type in its [[Value]] field.\n\nCallable objects that are defined in this specification only \nreturn a normal completion or a throw completion. Returning any other \nkind of Completion Record is considered an editorial error.\nImplementation-defined callable objects must return either a normal completion or a throw completion.\n\n6.2.3.1 Await\nAlgorithm steps that say\n1. Let completion be Await(value).\nmean the same thing as:\n1. Let asyncContext be the running execution context.2. Let promise be ?\u00a0PromiseResolve(%Promise%, value).3. Let fulfilledClosure be a new Abstract Closure with parameters (value) that captures asyncContext and performs the following steps when called:a. Let prevContext be the running execution context.b. Suspend prevContext.c. Push asyncContext onto the execution context stack; asyncContext is now the running execution context.d. Resume the suspended evaluation of asyncContext using NormalCompletion(value) as the result of the operation that suspended it.e. Assert: When we reach this step, asyncContext has already been removed from the execution context stack and prevContext is the currently running execution context.f. Return undefined.4. Let onFulfilled be CreateBuiltinFunction(fulfilledClosure, 1, \"\", \u00ab \u00bb).5. Let rejectedClosure be a new Abstract Closure with parameters (reason) that captures asyncContext and performs the following steps when called:a. Let prevContext be the running execution context.b. Suspend prevContext.c. Push asyncContext onto the execution context stack; asyncContext is now the running execution context.d. Resume the suspended evaluation of asyncContext using ThrowCompletion(reason) as the result of the operation that suspended it.e. Assert: When we reach this step, asyncContext has already been removed from the execution context stack and prevContext is the currently running execution context.f. Return undefined.6. Let onRejected be CreateBuiltinFunction(rejectedClosure, 1, \"\", \u00ab \u00bb).7. Perform PerformPromiseThen(promise, onFulfilled, onRejected).8. Remove asyncContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.9. Set the code evaluation state of asyncContext such that when evaluation is resumed with a Completion Record completion, the following steps of the algorithm that invoked Await will be performed, with completion available.10. Return NormalCompletion(unused).11. NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of asyncContext.\nwhere all aliases in the above steps, with the exception of completion, are ephemeral and visible only in the steps pertaining to Await.\nNote\nAwait can be combined with the ? and ! prefixes, so that for example\n1. Let result be ?\u00a0Await(value).\nmeans the same thing as:\n1. Let result be Await(value).2. ReturnIfAbrupt(result).\n\n\n\n6.2.3.2 NormalCompletion ( value )\nThe abstract operation NormalCompletion takes argument value and returns a normal completion. It performs the following steps when called:\n1. Return Completion Record { [[Type]]: normal, [[Value]]: value, [[Target]]: empty }.\n\n\n6.2.3.3 ThrowCompletion ( value )\nThe abstract operation ThrowCompletion takes argument value (an ECMAScript language value) and returns a throw completion. It performs the following steps when called:\n1. Return Completion Record { [[Type]]: throw, [[Value]]: value, [[Target]]: empty }.\n\n\n6.2.3.4 UpdateEmpty ( completionRecord, value )\nThe abstract operation UpdateEmpty takes arguments completionRecord (a Completion Record) and value and returns a Completion Record. It performs the following steps when called:\n1. Assert: If completionRecord.[[Type]] is either return or throw, then completionRecord.[[Value]] is not empty.2. If completionRecord.[[Value]] is not empty, return ?\u00a0completionRecord.3. Return Completion Record { [[Type]]: completionRecord.[[Type]], [[Value]]: value, [[Target]]: completionRecord.[[Target]] }.\n\n\n\n6.2.4 The Reference Record Specification Type\nThe Reference Record type is used to explain the behaviour of such operators as delete, typeof, the assignment operators, the super keyword and other language features. For example, the left-hand operand of an assignment is expected to produce a Reference Record.\nA Reference Record is a resolved name or property binding; its fields are defined by Table 8.\nTable 8: Reference Record Fields\n\n\nField Name\nValue\nMeaning\n\n\n[[Base]]\nan ECMAScript language value, an Environment Record, or unresolvable\nThe value or Environment Record which holds the binding. A [[Base]] of unresolvable indicates that the binding could not be resolved.\n\n\n[[ReferencedName]]\na String, a Symbol, or a Private Name\nThe name of the binding. Always a String if [[Base]] value is an Environment Record.\n\n\n[[Strict]]\na Boolean\ntrue if the Reference Record originated in strict mode code, false otherwise.\n\n\n[[ThisValue]]\nan ECMAScript language value or empty\nIf not empty, the Reference Record represents a property binding that was expressed using the super keyword; it is called a Super Reference Record and its [[Base]] value will never be an Environment Record. In that case, the [[ThisValue]] field holds the this value at the time the Reference Record was created.\n\n\n\nThe following abstract operations are used in this specification to operate upon Reference Records:\n\n6.2.4.1 IsPropertyReference ( V )\nThe abstract operation IsPropertyReference takes argument V (a Reference Record) and returns a Boolean. It performs the following steps when called:\n1. If V.[[Base]] is unresolvable, return false.2. If V.[[Base]] is an Environment Record, return false; otherwise return true.\n\n\n6.2.4.2 IsUnresolvableReference ( V )\nThe abstract operation IsUnresolvableReference takes argument V (a Reference Record) and returns a Boolean. It performs the following steps when called:\n1. If V.[[Base]] is unresolvable, return true; otherwise return false.\n\n\n6.2.4.3 IsSuperReference ( V )\nThe abstract operation IsSuperReference takes argument V (a Reference Record) and returns a Boolean. It performs the following steps when called:\n1. If V.[[ThisValue]] is not empty, return true; otherwise return false.\n\n\n6.2.4.4 IsPrivateReference ( V )\nThe abstract operation IsPrivateReference takes argument V (a Reference Record) and returns a Boolean. It performs the following steps when called:\n1. If V.[[ReferencedName]] is a Private Name, return true; otherwise return false.\n\n\n6.2.4.5 GetValue ( V )\nThe abstract operation GetValue takes argument V and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. ReturnIfAbrupt(V).2. If V is not a Reference Record, return V.3. If IsUnresolvableReference(V) is true, throw a ReferenceError exception.4. If IsPropertyReference(V) is true, thena. Let baseObj be ?\u00a0ToObject(V.[[Base]]).b. If IsPrivateReference(V) is true, theni. Return ?\u00a0PrivateGet(baseObj, V.[[ReferencedName]]).c. Return ?\u00a0baseObj.[[Get]](V.[[ReferencedName]], GetThisValue(V)).5. Else,a. Let base be V.[[Base]].b. Assert: base is an Environment Record.c. Return ?\u00a0base.GetBindingValue(V.[[ReferencedName]], V.[[Strict]]) (see 9.1).\nNote\nThe object that may be created in step 4.a is not accessible outside of the above abstract operation and the ordinary object [[Get]] internal method. An implementation might choose to avoid the actual creation of the object.\n\n\n\n6.2.4.6 PutValue ( V, W )\nThe abstract operation PutValue takes arguments V and W and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. ReturnIfAbrupt(V).2. ReturnIfAbrupt(W).3. If V is not a Reference Record, throw a ReferenceError exception.4. If IsUnresolvableReference(V) is true, thena. If V.[[Strict]] is true, throw a ReferenceError exception.b. Let globalObj be GetGlobalObject().c. Perform ?\u00a0Set(globalObj, V.[[ReferencedName]], W, false).d. Return unused.5. If IsPropertyReference(V) is true, thena. Let baseObj be ?\u00a0ToObject(V.[[Base]]).b. If IsPrivateReference(V) is true, theni. Return ?\u00a0PrivateSet(baseObj, V.[[ReferencedName]], W).c. Let succeeded be ?\u00a0baseObj.[[Set]](V.[[ReferencedName]], W, GetThisValue(V)).d. If succeeded is false and V.[[Strict]] is true, throw a TypeError exception.e. Return unused.6. Else,a. Let base be V.[[Base]].b. Assert: base is an Environment Record.c. Return ?\u00a0base.SetMutableBinding(V.[[ReferencedName]], W, V.[[Strict]]) (see 9.1).\nNote\nThe object that may be created in step 5.a is not accessible outside of the above abstract operation and the ordinary object [[Set]] internal method. An implementation might choose to avoid the actual creation of that object.\n\n\n\n6.2.4.7 GetThisValue ( V )\nThe abstract operation GetThisValue takes argument V and returns an ECMAScript language value. It performs the following steps when called:\n1. Assert: IsPropertyReference(V) is true.2. If IsSuperReference(V) is true, return V.[[ThisValue]]; otherwise return V.[[Base]].\n\n\n6.2.4.8 InitializeReferencedBinding ( V, W )\nThe abstract operation InitializeReferencedBinding takes arguments V and W and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. ReturnIfAbrupt(V).2. ReturnIfAbrupt(W).3. Assert: V is a Reference Record.4. Assert: IsUnresolvableReference(V) is false.5. Let base be V.[[Base]].6. Assert: base is an Environment Record.7. Return ?\u00a0base.InitializeBinding(V.[[ReferencedName]], W).\n\n\n6.2.4.9 MakePrivateReference ( baseValue, privateIdentifier )\nThe abstract operation MakePrivateReference takes arguments baseValue (an ECMAScript language value) and privateIdentifier (a String) and returns a Reference Record. It performs the following steps when called:\n1. Let privEnv be the running execution context's PrivateEnvironment.2. Assert: privEnv is not null.3. Let privateName be ResolvePrivateIdentifier(privEnv, privateIdentifier).4. Return the Reference Record { [[Base]]: baseValue, [[ReferencedName]]: privateName, [[Strict]]: true, [[ThisValue]]: empty }.\n\n\n\n6.2.5 The Property Descriptor Specification Type\nThe Property Descriptor type is used to explain the manipulation and reification of Object property attributes. A Property Descriptor is a Record\n with zero or more fields, where each field's name is an attribute name \nand its value is a corresponding attribute value as specified in 6.1.7.1.\n The schema name used within this specification to tag literal \ndescriptions of Property Descriptor records is \u201cPropertyDescriptor\u201d.\nProperty Descriptor values may be further classified as data \nProperty Descriptors and accessor Property Descriptors based upon the \nexistence or use of certain fields. A data Property Descriptor is one \nthat includes any fields named either [[Value]] or [[Writable]]. An \naccessor Property Descriptor is one that includes any fields named \neither [[Get]] or [[Set]]. Any Property Descriptor may have fields named\n [[Enumerable]] and [[Configurable]]. A Property Descriptor value may \nnot be both a data Property Descriptor and an accessor Property \nDescriptor; however, it may be neither (in which case it is a generic \nProperty Descriptor). A fully populated Property Descriptor \nis one that is either an accessor Property Descriptor or a data Property\n Descriptor and that has all of the corresponding fields defined in Table 3.\nThe following abstract operations are used in this specification to operate upon Property Descriptor values:\n\n6.2.5.1 IsAccessorDescriptor ( Desc )\nThe abstract operation IsAccessorDescriptor takes argument Desc (a Property Descriptor or undefined) and returns a Boolean. It performs the following steps when called:\n1. If Desc is undefined, return false.2. If Desc has a [[Get]] field, return true.3. If Desc has a [[Set]] field, return true.4. Return false.\n\n\n6.2.5.2 IsDataDescriptor ( Desc )\nThe abstract operation IsDataDescriptor takes argument Desc (a Property Descriptor or undefined) and returns a Boolean. It performs the following steps when called:\n1. If Desc is undefined, return false.2. If Desc has a [[Value]] field, return true.3. If Desc has a [[Writable]] field, return true.4. Return false.\n\n\n6.2.5.3 IsGenericDescriptor ( Desc )\nThe abstract operation IsGenericDescriptor takes argument Desc (a Property Descriptor or undefined) and returns a Boolean. It performs the following steps when called:\n1. If Desc is undefined, return false.2. If IsAccessorDescriptor(Desc) is true, return false.3. If IsDataDescriptor(Desc) is true, return false.4. Return true.\n\n\n6.2.5.4 FromPropertyDescriptor ( Desc )\nThe abstract operation FromPropertyDescriptor takes argument Desc (a Property Descriptor or undefined) and returns an Object or undefined. It performs the following steps when called:\n1. If Desc is undefined, return undefined.2. Let obj be OrdinaryObjectCreate(%Object.prototype%).3. Assert: obj is an extensible ordinary object with no own properties.4. If Desc has a [[Value]] field, thena. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"value\", Desc.[[Value]]).5. If Desc has a [[Writable]] field, thena. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"writable\", Desc.[[Writable]]).6. If Desc has a [[Get]] field, thena. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"get\", Desc.[[Get]]).7. If Desc has a [[Set]] field, thena. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"set\", Desc.[[Set]]).8. If Desc has an [[Enumerable]] field, thena. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"enumerable\", Desc.[[Enumerable]]).9. If Desc has a [[Configurable]] field, thena. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"configurable\", Desc.[[Configurable]]).10. Return obj.\n\n\n6.2.5.5 ToPropertyDescriptor ( Obj )\nThe abstract operation ToPropertyDescriptor takes argument Obj and returns either a normal completion containing a Property Descriptor or an abrupt completion. It performs the following steps when called:\n1. If Type(Obj) is not Object, throw a TypeError exception.2. Let desc be a new Property Descriptor that initially has no fields.3. Let hasEnumerable be ?\u00a0HasProperty(Obj, \"enumerable\").4. If hasEnumerable is true, thena. Let enumerable be ToBoolean(? Get(Obj, \"enumerable\")).b. Set desc.[[Enumerable]] to enumerable.5. Let hasConfigurable be ?\u00a0HasProperty(Obj, \"configurable\").6. If hasConfigurable is true, thena. Let configurable be ToBoolean(? Get(Obj, \"configurable\")).b. Set desc.[[Configurable]] to configurable.7. Let hasValue be ?\u00a0HasProperty(Obj, \"value\").8. If hasValue is true, thena. Let value be ?\u00a0Get(Obj, \"value\").b. Set desc.[[Value]] to value.9. Let hasWritable be ?\u00a0HasProperty(Obj, \"writable\").10. If hasWritable is true, thena. Let writable be ToBoolean(? Get(Obj, \"writable\")).b. Set desc.[[Writable]] to writable.11. Let hasGet be ?\u00a0HasProperty(Obj, \"get\").12. If hasGet is true, thena. Let getter be ?\u00a0Get(Obj, \"get\").b. If IsCallable(getter) is false and getter is not undefined, throw a TypeError exception.c. Set desc.[[Get]] to getter.13. Let hasSet be ?\u00a0HasProperty(Obj, \"set\").14. If hasSet is true, thena. Let setter be ?\u00a0Get(Obj, \"set\").b. If IsCallable(setter) is false and setter is not undefined, throw a TypeError exception.c. Set desc.[[Set]] to setter.15. If desc has a [[Get]] field or desc has a [[Set]] field, thena. If desc has a [[Value]] field or desc has a [[Writable]] field, throw a TypeError exception.16. Return desc.\n\n\n6.2.5.6 CompletePropertyDescriptor ( Desc )\nThe abstract operation CompletePropertyDescriptor takes argument Desc (a Property Descriptor) and returns unused. It performs the following steps when called:\n1. Let like be the Record { [[Value]]: undefined, [[Writable]]: false, [[Get]]: undefined, [[Set]]: undefined, [[Enumerable]]: false, [[Configurable]]: false }.2. If IsGenericDescriptor(Desc) is true or IsDataDescriptor(Desc) is true, thena. If Desc does not have a [[Value]] field, set Desc.[[Value]] to like.[[Value]].b. If Desc does not have a [[Writable]] field, set Desc.[[Writable]] to like.[[Writable]].3. Else,a. If Desc does not have a [[Get]] field, set Desc.[[Get]] to like.[[Get]].b. If Desc does not have a [[Set]] field, set Desc.[[Set]] to like.[[Set]].4. If Desc does not have an [[Enumerable]] field, set Desc.[[Enumerable]] to like.[[Enumerable]].5. If Desc does not have a [[Configurable]] field, set Desc.[[Configurable]] to like.[[Configurable]].6. Return unused.\n\n\n\n6.2.6 The Environment Record Specification Type\nThe Environment Record\n type is used to explain the behaviour of name resolution in nested \nfunctions and blocks. This type and the operations upon it are defined \nin 9.1.\n\n\n6.2.7 The Abstract Closure Specification Type\nThe Abstract Closure \nspecification type is used to refer to algorithm steps together with a \ncollection of values. Abstract Closures are meta-values and are invoked \nusing function application style such as closure(arg1, arg2). Like abstract operations, invocations perform the algorithm steps described by the Abstract Closure.\nIn algorithm steps that create an Abstract Closure, values are \ncaptured with the verb \"capture\" followed by a list of aliases. When an \nAbstract Closure is created, it captures the value that is associated \nwith each alias at that time. In steps that specify the algorithm to be \nperformed when an Abstract Closure is called, each captured value is \nreferred to by the alias that was used to capture the value.\nIf an Abstract Closure returns a Completion Record, that Completion Record's [[Type]] must be either normal or throw.\nAbstract Closures are created inline as part of other algorithms, shown in the following example.\n1. Let addend be 41.2. Let closure be a new Abstract Closure with parameters (x) that captures addend and performs the following steps when called:a. Return x + addend.3. Let val be closure(1).4. Assert: val is 42.\n\n\n6.2.8 Data Blocks\nThe Data Block specification type is used to describe a distinct and mutable sequence of byte-sized (8 bit) numeric values. A byte value is an integer\n value in the range 0 through 255, inclusive. A Data Block value is \ncreated with a fixed number of bytes that each have the initial value 0.\nFor notational convenience within this specification, an \narray-like syntax can be used to access the individual bytes of a Data \nBlock value. This notation presents a Data Block value as a 0-origined integer-indexed sequence of bytes. For example, if db is a 5 byte Data Block value then db[2] can be used to access its 3rd byte.\nA data block that resides in memory that can be referenced from multiple agents concurrently is designated a Shared Data Block. A Shared Data Block has an identity (for the purposes of equality testing Shared Data Block values) that is address-free:\n it is tied not to the virtual addresses the block is mapped to in any \nprocess, but to the set of locations in memory that the block \nrepresents. Two data blocks are equal only if the sets of the locations \nthey contain are equal; otherwise, they are not equal and the \nintersection of the sets of locations they contain is empty. Finally, \nShared Data Blocks can be distinguished from Data Blocks.\nThe semantics of Shared Data Blocks is defined using Shared Data Block events by the memory model. Abstract operations below introduce Shared Data Block events and act as the interface between evaluation semantics and the event semantics of the memory model. The events form a candidate execution, on which the memory model acts as a filter. Please consult the memory model for full semantics.\nShared Data Block events are modeled by Records, defined in the memory model.\nThe following abstract operations are used in this specification to operate upon Data Block values:\n\n6.2.8.1 CreateByteDataBlock ( size )\nThe abstract operation CreateByteDataBlock takes argument size (a non-negative integer) and returns either a normal completion containing a Data Block or an abrupt completion. It performs the following steps when called:\n1. Let db be a new Data Block value consisting of size bytes. If it is impossible to create such a Data Block, throw a RangeError exception.2. Set all of the bytes of db to 0.3. Return db.\n\n\n6.2.8.2 CreateSharedByteDataBlock ( size )\nThe abstract operation CreateSharedByteDataBlock takes argument size (a non-negative integer) and returns either a normal completion containing a Shared Data Block or an abrupt completion. It performs the following steps when called:\n1. Let db be a new Shared Data Block value consisting of size bytes. If it is impossible to create such a Shared Data Block, throw a RangeError exception.2. Let execution be the [[CandidateExecution]] field of the surrounding agent's Agent Record.3. Let eventList be the [[EventList]] field of the element in execution.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().4. Let zero be \u00ab 0 \u00bb.5. For each index i of db, doa. Append WriteSharedMemory { [[Order]]: Init, [[NoTear]]: true, [[Block]]: db, [[ByteIndex]]: i, [[ElementSize]]: 1, [[Payload]]: zero } to eventList.6. Return db.\n\n\n6.2.8.3 CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )\nThe abstract operation CopyDataBlockBytes takes arguments toBlock (a Data Block or a Shared Data Block), toIndex (a non-negative integer), fromBlock (a Data Block or a Shared Data Block), fromIndex (a non-negative integer), and count (a non-negative integer) and returns unused. It performs the following steps when called:\n1. Assert: fromBlock and toBlock are distinct values.2. Let fromSize be the number of bytes in fromBlock.3. Assert: fromIndex + count \u2264 fromSize.4. Let toSize be the number of bytes in toBlock.5. Assert: toIndex + count \u2264 toSize.6. Repeat, while count > 0,a. If fromBlock is a Shared Data Block, theni. Let execution be the [[CandidateExecution]] field of the surrounding agent's Agent Record.ii. Let eventList be the [[EventList]] field of the element in execution.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().iii. Let bytes be a List whose sole element is a nondeterministically chosen byte value.iv. NOTE: In implementations, bytes\n is the result of a non-atomic read instruction on the underlying \nhardware. The nondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency.v. Let readEvent be ReadSharedMemory { [[Order]]: Unordered, [[NoTear]]: true, [[Block]]: fromBlock, [[ByteIndex]]: fromIndex, [[ElementSize]]: 1 }.vi. Append readEvent to eventList.vii. Append Chosen Value Record { [[Event]]: readEvent, [[ChosenValue]]: bytes } to execution.[[ChosenValues]].viii. If toBlock is a Shared Data Block, then1. Append WriteSharedMemory { [[Order]]: Unordered, [[NoTear]]: true, [[Block]]: toBlock, [[ByteIndex]]: toIndex, [[ElementSize]]: 1, [[Payload]]: bytes } to eventList.ix. Else,1. Set toBlock[toIndex] to bytes[0].b. Else,i. Assert: toBlock is not a Shared Data Block.ii. Set toBlock[toIndex] to fromBlock[fromIndex].c. Set toIndex to toIndex + 1.d. Set fromIndex to fromIndex + 1.e. Set count to count - 1.7. Return unused.\n\n\n\n6.2.9 The PrivateElement Specification Type\nThe PrivateElement type is a Record used in the specification of private class fields, methods, and accessors. Although Property Descriptors are not used for private elements, private fields behave similarly to non-configurable, non-enumerable, writable data properties, private methods behave similarly to non-configurable, non-enumerable, non-writable data properties, and private accessors behave similarly to non-configurable, non-enumerable accessor properties.\nValues of the PrivateElement type are Record values whose fields are defined by Table 9. Such values are referred to as PrivateElements.\nTable 9: PrivateElement Fields\n\n\n\n              Field Name\n            \n\n              Values of the [[Kind]] field for which it is present\n            \n\n              Value\n            \n\n              Meaning\n            \n\n\n\n              [[Key]]\n            \n\n              All\n            \n\n              a Private Name\n\n\n              The name of the field, method, or accessor.\n            \n\n\n\n              [[Kind]]\n            \n\n              All\n            \n\nfield, method, or accessor\n\n\n              The kind of the element.\n            \n\n\n\n              [[Value]]\n            \n\nfield and method\n\n\n              an ECMAScript language value\n\n\n              The value of the field.\n            \n\n\n\n              [[Get]]\n            \n\naccessor\n\n\n              a function object or undefined\n\n\n              The getter for a private accessor.\n            \n\n\n\n              [[Set]]\n            \n\naccessor\n\n\n              a function object or undefined\n\n\n              The setter for a private accessor.\n            \n\n\n\n\n\n6.2.10 The ClassFieldDefinition Record Specification Type\nThe ClassFieldDefinition type is a Record used in the specification of class fields.\nValues of the ClassFieldDefinition type are Record values whose fields are defined by Table 10. Such values are referred to as ClassFieldDefinition Records.\nTable 10: ClassFieldDefinition Record Fields\n\n\n\n              Field Name\n            \n\n              Value\n            \n\n              Meaning\n            \n\n\n\n              [[Name]]\n            \n\n              a Private Name, a String, or a Symbol\n            \n\n              The name of the field.\n            \n\n\n\n              [[Initializer]]\n            \n\n              a function object or empty\n\n\n              The initializer of the field, if any.\n            \n\n\n\n\n\n6.2.11 Private Names\nThe Private Name \nspecification type is used to describe a globally unique value (one \nwhich differs from any other Private Name, even if they are otherwise \nindistinguishable) which represents the key of a private class element \n(field, method, or accessor). Each Private Name has an associated \nimmutable [[Description]] which is a String value. A Private Name may be\n installed on any ECMAScript object with PrivateFieldAdd or PrivateMethodOrAccessorAdd, and then read or written using PrivateGet and PrivateSet.\n\n\n6.2.12 The ClassStaticBlockDefinition Record Specification Type\nA ClassStaticBlockDefinition Record is a Record value used to encapsulate the executable code for a class static initialization block.\nClassStaticBlockDefinition Records have the fields listed in Table 11.\nTable 11: ClassStaticBlockDefinition Record Fields\n\n\n\n              Field Name\n            \n\n              Value\n            \n\n              Meaning\n            \n\n\n\n              [[BodyFunction]]\n            \n\n              a function object\n\n\n              The function object to be called during static initialization of a class.\n            \n\n\n\n\n\n\n\n7 Abstract Operations\nThese operations are not a part of the ECMAScript language; they \nare defined here solely to aid the specification of the semantics of the\n ECMAScript language. Other, more specialized abstract operations are defined throughout this specification.\n\n7.1 Type Conversion\nThe ECMAScript language implicitly performs automatic type \nconversion as needed. To clarify the semantics of certain constructs it \nis useful to define a set of conversion abstract operations. The conversion abstract operations are polymorphic; they can accept a value of any ECMAScript language type. But no other specification types are used with these operations.\nThe BigInt type has no implicit conversions in the ECMAScript \nlanguage; programmers must call BigInt explicitly to convert values from\n other types.\n\n7.1.1 ToPrimitive ( input [ , preferredType ] )\nThe abstract operation ToPrimitive takes argument input (an ECMAScript language value) and optional argument preferredType (string or number) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It converts its input\n argument to a non-Object type. If an object is capable of converting to\n more than one primitive type, it may use the optional hint preferredType to favour that type. It performs the following steps when called:\n1. If Type(input) is Object, thena. Let exoticToPrim be ?\u00a0GetMethod(input, @@toPrimitive).b. If exoticToPrim is not undefined, theni. If preferredType is not present, let hint be \"default\".ii. Else if preferredType is string, let hint be \"string\".iii. Else,1. Assert: preferredType is number.2. Let hint be \"number\".iv. Let result be ?\u00a0Call(exoticToPrim, input, \u00ab hint \u00bb).v. If Type(result) is not Object, return result.vi. Throw a TypeError exception.c. If preferredType is not present, let preferredType be number.d. Return ?\u00a0OrdinaryToPrimitive(input, preferredType).2. Return input.\nNote\nWhen ToPrimitive is called without a hint, then it generally behaves as if the hint were number. However, objects may over-ride this behaviour by defining a @@toPrimitive method. Of the objects defined in this specification only Dates (see 21.4.4.45) and Symbol objects (see 20.4.3.5) over-ride the default ToPrimitive behaviour. Dates treat the absence of a hint as if the hint were string.\n\n\n7.1.1.1 OrdinaryToPrimitive ( O, hint )\nThe abstract operation OrdinaryToPrimitive takes arguments O (an Object) and hint (string or number) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. If hint is string, thena. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.2. Else,a. Let methodNames be \u00ab \"valueOf\", \"toString\" \u00bb.3. For each element name of methodNames, doa. Let method be ?\u00a0Get(O, name).b. If IsCallable(method) is true, theni. Let result be ?\u00a0Call(method, O).ii. If Type(result) is not Object, return result.4. Throw a TypeError exception.\n\n\n\n7.1.2 ToBoolean ( argument )\nThe abstract operation ToBoolean takes argument argument and returns a Boolean. It converts argument to a value of type Boolean according to Table 12:\nTable 12: ToBoolean Conversions\n\n\n\n              Argument Type\n            \n\n              Result\n            \n\n\n\n              Undefined\n            \n\n              Return false.\n            \n\n\n\n              Null\n            \n\n              Return false.\n            \n\n\n\n              Boolean\n            \n\n              Return argument.\n            \n\n\n\n              Number\n            \n\n              If argument is +0\ud835\udd3d, -0\ud835\udd3d, or NaN, return false; otherwise return true.\n            \n\n\n\n              String\n            \n\n              If argument is the empty String (its length is 0), return false; otherwise return true.\n            \n\n\n\n              Symbol\n            \n\n              Return true.\n            \n\n\n\n              BigInt\n            \n\n              If argument is 0\u2124, return false; otherwise return true.\n            \n\n\n\n              Object\n            \n\n              Return true.\n              Note\nAn alternate algorithm related to the [[IsHTMLDDA]] internal slot is mandated in section B.3.6.1.\n\n\n\n\n\n\n\n7.1.3 ToNumeric ( value )\nThe abstract operation ToNumeric takes argument value and returns either a normal completion containing either a Number or a BigInt, or an abrupt completion. It returns value converted to a Number or a BigInt. It performs the following steps when called:\n1. Let primValue be ?\u00a0ToPrimitive(value, number).2. If Type(primValue) is BigInt, return primValue.3. Return ?\u00a0ToNumber(primValue).\n\n\n7.1.4 ToNumber ( argument )\nThe abstract operation ToNumber takes argument argument and returns either a normal completion containing a Number or an abrupt completion. It converts argument to a value of type Number according to Table 13:\nTable 13: ToNumber Conversions\n\n\n\n              Argument Type\n            \n\n              Result\n            \n\n\n\n              Undefined\n            \n\n              Return NaN.\n            \n\n\n\n              Null\n            \n\n              Return +0\ud835\udd3d.\n            \n\n\n\n              Boolean\n            \n\n              If argument is true, return 1\ud835\udd3d. If argument is false, return +0\ud835\udd3d.\n            \n\n\n\n              Number\n            \n\n              Return argument (no conversion).\n            \n\n\n\n              String\n            \n\n              Return ! StringToNumber(argument).\n            \n\n\n\n              Symbol\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n              BigInt\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n              Object\n            \n\nApply the following steps:\n1. Let primValue be ?\u00a0ToPrimitive(argument, number).2. Return ?\u00a0ToNumber(primValue).\n\n\n\n\n\n7.1.4.1 ToNumber Applied to the String Type\nThe abstract operation StringToNumber specifies how to convert a String value to a Number value, using the following grammar.\nSyntax\n\nStringNumericLiteral ::: \nStrWhiteSpaceopt\n\n\nStrWhiteSpaceopt\nStrNumericLiteral\nStrWhiteSpaceopt\n\n\n\nStrWhiteSpace ::: \nStrWhiteSpaceChar\nStrWhiteSpaceopt\n\n\n\nStrWhiteSpaceChar ::: \nWhiteSpace\n\n\nLineTerminator\n\n\n\nStrNumericLiteral ::: \nStrDecimalLiteral\n\n\nNonDecimalIntegerLiteral[~Sep]\n\n\n\nStrDecimalLiteral ::: \nStrUnsignedDecimalLiteral\n\n\n+\nStrUnsignedDecimalLiteral\n\n\n-\nStrUnsignedDecimalLiteral\n\n\n\nStrUnsignedDecimalLiteral ::: \nInfinity\n\n\nDecimalDigits[~Sep]\n.\nDecimalDigits[~Sep]opt\nExponentPart[~Sep]opt\n\n\n.\nDecimalDigits[~Sep]\nExponentPart[~Sep]opt\n\n\nDecimalDigits[~Sep]\nExponentPart[~Sep]opt\n\n\n\nAll grammar symbols not explicitly defined above have the definitions used in the Lexical Grammar for numeric literals (12.8.3)\nNote\nSome differences should be noted between the syntax of a StringNumericLiteral and a NumericLiteral:\n\n\n              A StringNumericLiteral may include leading and/or trailing white space and/or line terminators.\n            \n\n              A StringNumericLiteral that is decimal may have any number of leading 0 digits.\n            \n\n              A StringNumericLiteral that is decimal may include a + or - to indicate its sign.\n            \n\n              A StringNumericLiteral that is empty or contains only white space is converted to +0\ud835\udd3d.\n            \n\nInfinity and -Infinity are recognized as a StringNumericLiteral but not as a NumericLiteral.\n            \n\n              A StringNumericLiteral cannot include a BigIntLiteralSuffix.\n            \n\n\n\n7.1.4.1.1 StringToNumber ( str )\nThe abstract operation StringToNumber takes argument str (a String) and returns a Number. It performs the following steps when called:\n1. Let text be StringToCodePoints(str).2. Let literal be ParseText(text, StringNumericLiteral).3. If literal is a List of errors, return NaN.4. Return StringNumericValue of literal.\n\n\n7.1.4.1.2 Runtime Semantics: StringNumericValue\nThe syntax-directed operation StringNumericValue takes no arguments and returns a Number.\nNote\nThe conversion of a StringNumericLiteral to a Number value is similar overall to the determination of the NumericValue of a NumericLiteral (see 12.8.3), but some of the details are different.\n\nIt is defined piecewise over the following productions:\n\nStringNumericLiteral ::: StrWhiteSpaceopt\n\n\n1. Return +0\ud835\udd3d.\n\nStringNumericLiteral ::: \nStrWhiteSpaceopt\nStrNumericLiteral\nStrWhiteSpaceopt\n\n\n\n1. Return StringNumericValue of StrNumericLiteral.\n\nStrNumericLiteral ::: NonDecimalIntegerLiteral\n\n\n1. Return \ud835\udd3d(MV of NonDecimalIntegerLiteral).\n\nStrDecimalLiteral ::: \n-\nStrUnsignedDecimalLiteral\n\n\n\n1. Let a be StringNumericValue of StrUnsignedDecimalLiteral.2. If a is +0\ud835\udd3d, return -0\ud835\udd3d.3. Return -a.\n\nStrUnsignedDecimalLiteral ::: Infinity\n\n\n1. Return +\u221e\ud835\udd3d.\n\nStrUnsignedDecimalLiteral ::: \nDecimalDigits\n.\nDecimalDigitsopt\nExponentPartopt\n\n\n\n1. Let a be MV of the first DecimalDigits.2. If the second DecimalDigits is present, thena. Let b be MV of the second DecimalDigits.b. Let n be the number of code points in the second DecimalDigits.3. Else,a. Let b be 0.b. Let n be 0.4. If ExponentPart is present, let e be MV of ExponentPart. Otherwise, let e be 0.5. Return RoundMVResult((a + (b \u00d7 10-n)) \u00d7 10e).\n\nStrUnsignedDecimalLiteral ::: \n.\nDecimalDigits\nExponentPartopt\n\n\n\n1. Let b be MV of DecimalDigits.2. If ExponentPart is present, let e be MV of ExponentPart. Otherwise, let e be 0.3. Let n be the number of code points in DecimalDigits.4. Return RoundMVResult(b \u00d7 10e - n).\n\nStrUnsignedDecimalLiteral ::: \nDecimalDigits\nExponentPartopt\n\n\n\n1. Let a be MV of DecimalDigits.2. If ExponentPart is present, let e be MV of ExponentPart. Otherwise, let e be 0.3. Return RoundMVResult(a \u00d7 10e).\n\n\n7.1.4.1.3 RoundMVResult ( n )\nThe abstract operation RoundMVResult takes argument n (a mathematical value) and returns a Number. It converts n to a Number in an implementation-defined\n manner. For the purposes of this abstract operation, a digit is \nsignificant if it is not zero or there is a non-zero digit to its left \nand there is a non-zero digit to its right. For the purposes of this \nabstract operation, \"the mathematical value denoted by\" a representation of a mathematical value is the inverse of \"the decimal representation of\" a mathematical value. It performs the following steps when called:\n1. If the decimal representation of n has 20 or fewer significant digits, return \ud835\udd3d(n).2. Let option1 be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of n after the 20th with a 0 digit.3. Let option2 be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of n after the 20th with a 0 digit and then incrementing it at the 20th position (with carrying as necessary).4. Let chosen be an implementation-defined choice of either option1 or option2.5. Return \ud835\udd3d(chosen).\n\n\n\n\n7.1.5 ToIntegerOrInfinity ( argument )\nThe abstract operation ToIntegerOrInfinity takes argument argument (an ECMAScript language value) and returns either a normal completion containing either an integer, +\u221e, or -\u221e, or an abrupt completion. It converts argument to an integer representing its Number value with fractional part truncated, or to +\u221e or -\u221e when that Number value is infinite. It performs the following steps when called:\n1. Let number be ?\u00a0ToNumber(argument).2. If number is NaN, +0\ud835\udd3d, or -0\ud835\udd3d, return 0.3. If number is +\u221e\ud835\udd3d, return +\u221e.4. If number is -\u221e\ud835\udd3d, return -\u221e.5. Let integer be floor(abs(\u211d(number))).6. If number < -0\ud835\udd3d, set integer to -integer.7. Return integer.\n\n\n7.1.6 ToInt32 ( argument )\nThe abstract operation ToInt32 takes argument argument and returns either a normal completion containing an integral Number or an abrupt completion. It converts argument to one of 232 integral Number values in the range \ud835\udd3d(-231) through \ud835\udd3d(231 - 1), inclusive. It performs the following steps when called:\n1. Let number be ?\u00a0ToNumber(argument).2. If number is NaN, +0\ud835\udd3d, -0\ud835\udd3d, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return +0\ud835\udd3d.3. Let int be the mathematical value whose sign is the sign of number and whose magnitude is floor(abs(\u211d(number))).4. Let int32bit be int modulo 232.5. If int32bit \u2265 231, return \ud835\udd3d(int32bit - 232); otherwise return \ud835\udd3d(int32bit).\nNote\nGiven the above definition of ToInt32:\n\n\n            The ToInt32 abstract operation is idempotent: if applied to a\n result that it produced, the second application leaves that value \nunchanged.\n          \n\n            ToInt32(ToUint32(x)) is the same value as ToInt32(x) for all values of x. (It is to preserve this latter property that +\u221e\ud835\udd3d and -\u221e\ud835\udd3d are mapped to +0\ud835\udd3d.)\n          \n\n            ToInt32 maps -0\ud835\udd3d to +0\ud835\udd3d.\n          \n\n\n\n\n7.1.7 ToUint32 ( argument )\nThe abstract operation ToUint32 takes argument argument and returns either a normal completion containing an integral Number or an abrupt completion. It converts argument to one of 232 integral Number values in the range +0\ud835\udd3d through \ud835\udd3d(232 - 1), inclusive. It performs the following steps when called:\n1. Let number be ?\u00a0ToNumber(argument).2. If number is NaN, +0\ud835\udd3d, -0\ud835\udd3d, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return +0\ud835\udd3d.3. Let int be the mathematical value whose sign is the sign of number and whose magnitude is floor(abs(\u211d(number))).4. Let int32bit be int modulo 232.5. Return \ud835\udd3d(int32bit).\nNote\nGiven the above definition of ToUint32:\n\n\n            Step 5 is the only difference between ToUint32 and ToInt32.\n          \n\n            The ToUint32 abstract operation is idempotent: if applied to\n a result that it produced, the second application leaves that value \nunchanged.\n          \n\n            ToUint32(ToInt32(x)) is the same value as ToUint32(x) for all values of x. (It is to preserve this latter property that +\u221e\ud835\udd3d and -\u221e\ud835\udd3d are mapped to +0\ud835\udd3d.)\n          \n\n            ToUint32 maps -0\ud835\udd3d to +0\ud835\udd3d.\n          \n\n\n\n\n7.1.8 ToInt16 ( argument )\nThe abstract operation ToInt16 takes argument argument and returns either a normal completion containing an integral Number or an abrupt completion. It converts argument to one of 216 integral Number values in the range \ud835\udd3d(-215) through \ud835\udd3d(215 - 1), inclusive. It performs the following steps when called:\n1. Let number be ?\u00a0ToNumber(argument).2. If number is NaN, +0\ud835\udd3d, -0\ud835\udd3d, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return +0\ud835\udd3d.3. Let int be the mathematical value whose sign is the sign of number and whose magnitude is floor(abs(\u211d(number))).4. Let int16bit be int modulo 216.5. If int16bit \u2265 215, return \ud835\udd3d(int16bit - 216); otherwise return \ud835\udd3d(int16bit).\n\n\n7.1.9 ToUint16 ( argument )\nThe abstract operation ToUint16 takes argument argument and returns either a normal completion containing an integral Number or an abrupt completion. It converts argument to one of 216 integral Number values in the range +0\ud835\udd3d through \ud835\udd3d(216 - 1), inclusive. It performs the following steps when called:\n1. Let number be ?\u00a0ToNumber(argument).2. If number is NaN, +0\ud835\udd3d, -0\ud835\udd3d, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return +0\ud835\udd3d.3. Let int be the mathematical value whose sign is the sign of number and whose magnitude is floor(abs(\u211d(number))).4. Let int16bit be int modulo 216.5. Return \ud835\udd3d(int16bit).\nNote\nGiven the above definition of ToUint16:\n\n\n            The substitution of 216 for 232 in step 4 is the only difference between ToUint32 and ToUint16.\n          \n\n            ToUint16 maps -0\ud835\udd3d to +0\ud835\udd3d.\n          \n\n\n\n\n7.1.10 ToInt8 ( argument )\nThe abstract operation ToInt8 takes argument argument and returns either a normal completion containing an integral Number or an abrupt completion. It converts argument to one of 28 integral Number values in the range -128\ud835\udd3d through 127\ud835\udd3d, inclusive. It performs the following steps when called:\n1. Let number be ?\u00a0ToNumber(argument).2. If number is NaN, +0\ud835\udd3d, -0\ud835\udd3d, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return +0\ud835\udd3d.3. Let int be the mathematical value whose sign is the sign of number and whose magnitude is floor(abs(\u211d(number))).4. Let int8bit be int modulo 28.5. If int8bit \u2265 27, return \ud835\udd3d(int8bit - 28); otherwise return \ud835\udd3d(int8bit).\n\n\n7.1.11 ToUint8 ( argument )\nThe abstract operation ToUint8 takes argument argument and returns either a normal completion containing an integral Number or an abrupt completion. It converts argument to one of 28 integral Number values in the range +0\ud835\udd3d through 255\ud835\udd3d, inclusive. It performs the following steps when called:\n1. Let number be ?\u00a0ToNumber(argument).2. If number is NaN, +0\ud835\udd3d, -0\ud835\udd3d, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return +0\ud835\udd3d.3. Let int be the mathematical value whose sign is the sign of number and whose magnitude is floor(abs(\u211d(number))).4. Let int8bit be int modulo 28.5. Return \ud835\udd3d(int8bit).\n\n\n7.1.12 ToUint8Clamp ( argument )\nThe abstract operation ToUint8Clamp takes argument argument and returns either a normal completion containing an integral Number or an abrupt completion. It converts argument to one of 28 integral Number values in the range +0\ud835\udd3d through 255\ud835\udd3d, inclusive. It performs the following steps when called:\n1. Let number be ?\u00a0ToNumber(argument).2. If number is NaN, return +0\ud835\udd3d.3. If \u211d(number) \u2264 0, return +0\ud835\udd3d.4. If \u211d(number) \u2265 255, return 255\ud835\udd3d.5. Let f be floor(\u211d(number)).6. If f + 0.5 < \u211d(number), return \ud835\udd3d(f + 1).7. If \u211d(number) < f + 0.5, return \ud835\udd3d(f).8. If f is odd, return \ud835\udd3d(f + 1).9. Return \ud835\udd3d(f).\nNote\nUnlike the other ECMAScript integer conversion abstract operation, ToUint8Clamp rounds rather than truncates non-integral values and does not convert +\u221e\ud835\udd3d to +0\ud835\udd3d. ToUint8Clamp does \u201cround half to even\u201d tie-breaking. This differs from Math.round which does \u201cround half up\u201d tie-breaking.\n\n\n\n7.1.13 ToBigInt ( argument )\nThe abstract operation ToBigInt takes argument argument and returns either a normal completion containing a BigInt or an abrupt completion. It converts argument\n to a BigInt value, or throws if an implicit conversion from Number \nwould be required. It performs the following steps when called:\n1. Let prim be ?\u00a0ToPrimitive(argument, number).2. Return the value that prim corresponds to in Table 14.\nTable 14: BigInt Conversions\n\n\n\n              Argument Type\n            \n\n              Result\n            \n\n\n\n              Undefined\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n              Null\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n              Boolean\n            \n\n              Return 1n if prim is true and 0n if prim is false.\n            \n\n\n\n              BigInt\n            \n\n              Return prim.\n            \n\n\n\n              Number\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n              String\n            \n\n1. Let n be StringToBigInt(prim).2. If n is undefined, throw a SyntaxError exception.3. Return n.\n\n\n\n\n              Symbol\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n\n\n7.1.14 StringToBigInt ( str )\nThe abstract operation StringToBigInt takes argument str (a String) and returns a BigInt or undefined. It performs the following steps when called:\n1. Let text be StringToCodePoints(str).2. Let literal be ParseText(text, StringIntegerLiteral).3. If literal is a List of errors, return undefined.4. Let mv be the MV of literal.5. Assert: mv is an integer.6. Return \u2124(mv).\n\n7.1.14.1 StringIntegerLiteral Grammar\nStringToBigInt uses the following grammar.\nSyntax\n\nStringIntegerLiteral ::: \nStrWhiteSpaceopt\n\n\nStrWhiteSpaceopt\nStrIntegerLiteral\nStrWhiteSpaceopt\n\n\n\nStrIntegerLiteral ::: \nSignedInteger[~Sep]\n\n\nNonDecimalIntegerLiteral[~Sep]\n\n\n\n\n\n7.1.14.2 Runtime Semantics: MV\n\n\n            The MV of \nStringIntegerLiteral ::: StrWhiteSpaceopt\n\n is 0.\n          \n\n            The MV of \nStringIntegerLiteral ::: \nStrWhiteSpaceopt\nStrIntegerLiteral\nStrWhiteSpaceopt\n\n\n is the MV of StrIntegerLiteral.\n          \n\n\n\n\n7.1.15 ToBigInt64 ( argument )\nThe abstract operation ToBigInt64 takes argument argument and returns either a normal completion containing a BigInt or an abrupt completion. It converts argument to one of 264 BigInt values in the range \u2124(-263) through \u2124(263-1), inclusive. It performs the following steps when called:\n1. Let n be ?\u00a0ToBigInt(argument).2. Let int64bit be \u211d(n) modulo 264.3. If int64bit \u2265 263, return \u2124(int64bit - 264); otherwise return \u2124(int64bit).\n\n\n7.1.16 ToBigUint64 ( argument )\nThe abstract operation ToBigUint64 takes argument argument and returns either a normal completion containing a BigInt or an abrupt completion. It converts argument to one of 264 BigInt values in the range 0\u2124 through the BigInt value for \u2124(264-1), inclusive. It performs the following steps when called:\n1. Let n be ?\u00a0ToBigInt(argument).2. Let int64bit be \u211d(n) modulo 264.3. Return \u2124(int64bit).\n\n\n7.1.17 ToString ( argument )\nThe abstract operation ToString takes argument argument and returns either a normal completion containing a String or an abrupt completion. It converts argument to a value of type String according to Table 15:\nTable 15: ToString Conversions\n\n\n\n              Argument Type\n            \n\n              Result\n            \n\n\n\n              Undefined\n            \n\n              Return \"undefined\".\n            \n\n\n\n              Null\n            \n\n              Return \"null\".\n            \n\n\n\n              Boolean\n            \n\nIf argument is true, return \"true\".\nIf argument is false, return \"false\".\n\n\n\n\n              Number\n            \n\n              Return Number::toString(argument).\n            \n\n\n\n              String\n            \n\n              Return argument.\n            \n\n\n\n              Symbol\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n              BigInt\n            \n\n              Return ! BigInt::toString(argument).\n            \n\n\n\n              Object\n            \n\nApply the following steps:\n1. Let primValue be ?\u00a0ToPrimitive(argument, string).2. Return ?\u00a0ToString(primValue).\n\n\n\n\n\n\n7.1.18 ToObject ( argument )\nThe abstract operation ToObject takes argument argument and returns either a normal completion containing an Object or an abrupt completion. It converts argument to a value of type Object according to Table 16:\nTable 16: ToObject Conversions\n\n\n\n              Argument Type\n            \n\n              Result\n            \n\n\n\n              Undefined\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n              Null\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n              Boolean\n            \n\n              Return a new Boolean object whose [[BooleanData]] internal slot is set to argument. See 20.3 for a description of Boolean objects.\n            \n\n\n\n              Number\n            \n\n              Return a new Number object whose [[NumberData]] internal slot is set to argument. See 21.1 for a description of Number objects.\n            \n\n\n\n              String\n            \n\n              Return a new String object whose [[StringData]] internal slot is set to argument. See 22.1 for a description of String objects.\n            \n\n\n\n              Symbol\n            \n\n              Return a new Symbol object whose [[SymbolData]] internal slot is set to argument. See 20.4 for a description of Symbol objects.\n            \n\n\n\n              BigInt\n            \n\n              Return a new BigInt object whose [[BigIntData]] internal slot is set to argument. See 21.2 for a description of BigInt objects.\n            \n\n\n\n              Object\n            \n\n              Return argument.\n            \n\n\n\n\n\n7.1.19 ToPropertyKey ( argument )\nThe abstract operation ToPropertyKey takes argument argument and returns either a normal completion containing a property key or an abrupt completion. It converts argument to a value that can be used as a property key. It performs the following steps when called:\n1. Let key be ?\u00a0ToPrimitive(argument, string).2. If Type(key) is Symbol, thena. Return key.3. Return !\u00a0ToString(key).\n\n\n7.1.20 ToLength ( argument )\nThe abstract operation ToLength takes argument argument (an ECMAScript language value) and returns either a normal completion containing an integral Number or an abrupt completion. It clamps argument to an integral Number suitable for use as the length of an array-like object. It performs the following steps when called:\n1. Let len be ?\u00a0ToIntegerOrInfinity(argument).2. If len \u2264 0, return +0\ud835\udd3d.3. Return \ud835\udd3d(min(len, 253 - 1)).\n\n\n7.1.21 CanonicalNumericIndexString ( argument )\nThe abstract operation CanonicalNumericIndexString takes argument argument (a String) and returns a Number or undefined. It returns argument converted to a Number value if it is a String representation of a Number that would be produced by ToString, or the string \"-0\". Otherwise, it returns undefined. It performs the following steps when called:\n1. If argument is \"-0\", return -0\ud835\udd3d.2. Let n be !\u00a0ToNumber(argument).3. If SameValue(! ToString(n), argument) is false, return undefined.4. Return n.\nA canonical numeric string is any String value for which the CanonicalNumericIndexString abstract operation does not return undefined.\n\n\n7.1.22 ToIndex ( value )\nThe abstract operation ToIndex takes argument value (an ECMAScript language value) and returns either a normal completion containing a non-negative integer or an abrupt completion. It converts value to a non-negative integer if the corresponding decimal representation, as a String, is an integer index. It performs the following steps when called:\n1. If value is undefined, thena. Return 0.2. Else,a. Let integer be ?\u00a0ToIntegerOrInfinity(value).b. Let clamped be !\u00a0ToLength(\ud835\udd3d(integer)).c. If SameValue(\ud835\udd3d(integer), clamped) is false, throw a RangeError exception.d. Assert: 0 \u2264 integer \u2264 253 - 1.e. Return integer.\n\n\n\n7.2 Testing and Comparison Operations\n\n7.2.1 RequireObjectCoercible ( argument )\nThe abstract operation RequireObjectCoercible takes argument argument and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It throws an error if argument is a value that cannot be converted to an Object using ToObject. It is defined by Table 17:\nTable 17: RequireObjectCoercible Results\n\n\n\n              Argument Type\n            \n\n              Result\n            \n\n\n\n              Undefined\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n              Null\n            \n\n              Throw a TypeError exception.\n            \n\n\n\n              Boolean\n            \n\n              Return argument.\n            \n\n\n\n              Number\n            \n\n              Return argument.\n            \n\n\n\n              String\n            \n\n              Return argument.\n            \n\n\n\n              Symbol\n            \n\n              Return argument.\n            \n\n\n\n              BigInt\n            \n\n              Return argument.\n            \n\n\n\n              Object\n            \n\n              Return argument.\n            \n\n\n\n\n\n7.2.2 IsArray ( argument )\nThe abstract operation IsArray takes argument argument and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If Type(argument) is not Object, return false.2. If argument is an Array exotic object, return true.3. If argument is a Proxy exotic object, thena. If argument.[[ProxyHandler]] is null, throw a TypeError exception.b. Let target be argument.[[ProxyTarget]].c. Return ?\u00a0IsArray(target).4. Return false.\n\n\n7.2.3 IsCallable ( argument )\nThe abstract operation IsCallable takes argument argument (an ECMAScript language value) and returns a Boolean. It determines if argument is a callable function with a [[Call]] internal method. It performs the following steps when called:\n1. If Type(argument) is not Object, return false.2. If argument has a [[Call]] internal method, return true.3. Return false.\n\n\n7.2.4 IsConstructor ( argument )\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value) and returns a Boolean. It determines if argument is a function object with a [[Construct]] internal method. It performs the following steps when called:\n1. If Type(argument) is not Object, return false.2. If argument has a [[Construct]] internal method, return true.3. Return false.\n\n\n7.2.5 IsExtensible ( O )\nThe abstract operation IsExtensible takes argument O (an Object) and returns either a normal completion containing a Boolean or an abrupt completion. It is used to determine whether additional properties can be added to O. It performs the following steps when called:\n1. Return ?\u00a0O.[[IsExtensible]]().\n\n\n7.2.6 IsIntegralNumber ( argument )\nThe abstract operation IsIntegralNumber takes argument argument and returns a Boolean. It determines if argument is a finite integral Number value. It performs the following steps when called:\n1. If Type(argument) is not Number, return false.2. If argument is NaN, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return false.3. If floor(abs(\u211d(argument))) \u2260 abs(\u211d(argument)), return false.4. Return true.\n\n\n7.2.7 IsPropertyKey ( argument )\nThe abstract operation IsPropertyKey takes argument argument (an ECMAScript language value) and returns a Boolean. It determines if argument is a value that may be used as a property key. It performs the following steps when called:\n1. If Type(argument) is String, return true.2. If Type(argument) is Symbol, return true.3. Return false.\n\n\n7.2.8 IsRegExp ( argument )\nThe abstract operation IsRegExp takes argument argument and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If Type(argument) is not Object, return false.2. Let matcher be ?\u00a0Get(argument, @@match).3. If matcher is not undefined, return ToBoolean(matcher).4. If argument has a [[RegExpMatcher]] internal slot, return true.5. Return false.\n\n\n7.2.9 IsStringPrefix ( p, q )\nThe abstract operation IsStringPrefix takes arguments p (a String) and q (a String) and returns a Boolean. It determines if p is a prefix of q. It performs the following steps when called:\n1. If StringIndexOf(q, p, 0) is 0, return true.2. Else, return false.\nNote\nAny String is a prefix of itself.\n\n\n\n7.2.10 Static Semantics: IsStringWellFormedUnicode ( string )\nThe abstract operation IsStringWellFormedUnicode takes argument string (a String) and returns a Boolean. It interprets string as a sequence of UTF-16 encoded code points, as described in 6.1.4, and determines whether it is a well formed UTF-16 sequence. It performs the following steps when called:\n1. Let strLen be the number of code units in string.2. Let k be 0.3. Repeat, while k \u2260 strLen,a. Let cp be CodePointAt(string, k).b. If cp.[[IsUnpairedSurrogate]] is true, return false.c. Set k to k + cp.[[CodeUnitCount]].4. Return true.\n\n\n7.2.11 SameValue ( x, y )\nThe abstract operation SameValue takes arguments x (an ECMAScript language value) and y (an ECMAScript language value)\n and returns a Boolean. It determines whether or not the two arguments \nare the same value. It performs the following steps when called:\n1. If Type(x) is different from Type(y), return false.2. If Type(x) is Number, thena. Return Number::sameValue(x, y).3. If Type(x) is BigInt, thena. Return BigInt::sameValue(x, y).4. Return SameValueNonNumeric(x, y).\nNote\nThis algorithm differs from the IsStrictlyEqual Algorithm by treating all NaN values as equivalent and by differentiating +0\ud835\udd3d from -0\ud835\udd3d.\n\n\n\n7.2.12 SameValueZero ( x, y )\nThe abstract operation SameValueZero takes arguments x (an ECMAScript language value) and y (an ECMAScript language value) and returns a Boolean. It determines whether or not the two arguments are the same value (ignoring the difference between +0\ud835\udd3d and -0\ud835\udd3d). It performs the following steps when called:\n1. If Type(x) is different from Type(y), return false.2. If Type(x) is Number, thena. Return Number::sameValueZero(x, y).3. If Type(x) is BigInt, thena. Return BigInt::sameValueZero(x, y).4. Return SameValueNonNumeric(x, y).\nNote\nSameValueZero differs from SameValue only in that it treats +0\ud835\udd3d and -0\ud835\udd3d as equivalent.\n\n\n\n7.2.13 SameValueNonNumeric ( x, y )\nThe abstract operation SameValueNonNumeric takes arguments x (an ECMAScript language value, but not a Number or a BigInt) and y (an ECMAScript language value, but not a Number or a BigInt) and returns a Boolean. It performs the following steps when called:\n1. Assert: Type(x) is the same as Type(y).2. If Type(x) is Undefined, return true.3. If Type(x) is Null, return true.4. If Type(x) is String, thena. If x and y are exactly the same sequence of code units (same length and same code units at corresponding indices), return true; otherwise, return false.5. If Type(x) is Boolean, thena. If x and y are both true or both false, return true; otherwise, return false.6. If Type(x) is Symbol, thena. If x and y are both the same Symbol value, return true; otherwise, return false.7. If x and y are the same Object value, return true. Otherwise, return false.\n\n\n7.2.14 IsLessThan ( x, y, LeftFirst )\nThe abstract operation IsLessThan takes arguments x (an ECMAScript language value), y (an ECMAScript language value), and LeftFirst (a Boolean) and returns either a normal completion containing either a Boolean or undefined, or an abrupt completion. It provides the semantics for the comparison x < y, returning true, false, or undefined (which indicates that at least one operand is NaN). The LeftFirst flag is used to control the order in which operations with potentially visible side-effects are performed upon x and y. It is necessary because ECMAScript specifies left to right evaluation of expressions. If LeftFirst is true, the x parameter corresponds to an expression that occurs to the left of the y parameter's corresponding expression. If LeftFirst is false, the reverse is the case and operations must be performed upon y before x. It performs the following steps when called:\n1. If the LeftFirst flag is true, thena. Let px be ?\u00a0ToPrimitive(x, number).b. Let py be ?\u00a0ToPrimitive(y, number).2. Else,a. NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.b. Let py be ?\u00a0ToPrimitive(y, number).c. Let px be ?\u00a0ToPrimitive(x, number).3. If Type(px) is String and Type(py) is String, thena. If IsStringPrefix(py, px) is true, return false.b. If IsStringPrefix(px, py) is true, return true.c. Let k be the smallest non-negative integer such that the code unit at index k within px is different from the code unit at index k within py. (There must be such a k, for neither String is a prefix of the other.)d. Let m be the integer that is the numeric value of the code unit at index k within px.e. Let n be the integer that is the numeric value of the code unit at index k within py.f. If m < n, return true. Otherwise, return false.4. Else,a. If Type(px) is BigInt and Type(py) is String, theni. Let ny be StringToBigInt(py).ii. If ny is undefined, return undefined.iii. Return BigInt::lessThan(px, ny).b. If Type(px) is String and Type(py) is BigInt, theni. Let nx be StringToBigInt(px).ii. If nx is undefined, return undefined.iii. Return BigInt::lessThan(nx, py).c. NOTE: Because px and py are primitive values, evaluation order is not important.d. Let nx be ?\u00a0ToNumeric(px).e. Let ny be ?\u00a0ToNumeric(py).f. If Type(nx) is the same as Type(ny), theni. If Type(nx) is Number, then1. Return Number::lessThan(nx, ny).ii. Else,1. Assert: Type(nx) is BigInt.2. Return BigInt::lessThan(nx, ny).g. Assert: Type(nx) is BigInt and Type(ny) is Number, or Type(nx) is Number and Type(ny) is BigInt.h. If nx or ny is NaN, return undefined.i. If nx is -\u221e\ud835\udd3d or ny is +\u221e\ud835\udd3d, return true.j. If nx is +\u221e\ud835\udd3d or ny is -\u221e\ud835\udd3d, return false.k. If \u211d(nx) < \u211d(ny), return true; otherwise return false.\nNote 1\nStep 3 differs from step 1.c in the algorithm that handles the addition operator + (13.15.3) by using the logical-and operation instead of the logical-or operation.\n\nNote 2\nThe comparison of Strings uses a simple lexicographic \nordering on sequences of code unit values. There is no attempt to use \nthe more complex, semantically oriented definitions of character or \nstring equality and collating order defined in the Unicode \nspecification. Therefore String values that are canonically equal \naccording to the Unicode Standard could test as unequal. In effect this \nalgorithm assumes that both Strings are already in normalized form. \nAlso, note that for strings containing supplementary characters, \nlexicographic ordering on sequences of UTF-16 code unit values differs \nfrom that on sequences of code point values.\n\n\n\n7.2.15 IsLooselyEqual ( x, y )\nThe abstract operation IsLooselyEqual takes arguments x (an ECMAScript language value) and y (an ECMAScript language value) and returns either a normal completion containing a Boolean or an abrupt completion. It provides the semantics for the comparison x == y. It performs the following steps when called:\n1. If Type(x) is the same as Type(y), thena. Return IsStrictlyEqual(x, y).2. If x is null and y is undefined, return true.3. If x is undefined and y is null, return true.4. NOTE: This step is replaced in section B.3.6.2.5. If Type(x) is Number and Type(y) is String, return !\u00a0IsLooselyEqual(x, !\u00a0ToNumber(y)).6. If Type(x) is String and Type(y) is Number, return !\u00a0IsLooselyEqual(! ToNumber(x), y).7. If Type(x) is BigInt and Type(y) is String, thena. Let n be StringToBigInt(y).b. If n is undefined, return false.c. Return !\u00a0IsLooselyEqual(x, n).8. If Type(x) is String and Type(y) is BigInt, return !\u00a0IsLooselyEqual(y, x).9. If Type(x) is Boolean, return !\u00a0IsLooselyEqual(! ToNumber(x), y).10. If Type(y) is Boolean, return !\u00a0IsLooselyEqual(x, !\u00a0ToNumber(y)).11. If Type(x) is either String, Number, BigInt, or Symbol and Type(y) is Object, return !\u00a0IsLooselyEqual(x, ?\u00a0ToPrimitive(y)).12. If Type(x) is Object and Type(y) is either String, Number, BigInt, or Symbol, return !\u00a0IsLooselyEqual(? ToPrimitive(x), y).13. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt, thena. If x or y are any of NaN, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return false.b. If \u211d(x) = \u211d(y), return true; otherwise return false.14. Return false.\n\n\n7.2.16 IsStrictlyEqual ( x, y )\nThe abstract operation IsStrictlyEqual takes arguments x (an ECMAScript language value) and y (an ECMAScript language value) and returns a Boolean. It provides the semantics for the comparison x === y. It performs the following steps when called:\n1. If Type(x) is different from Type(y), return false.2. If Type(x) is Number, thena. Return Number::equal(x, y).3. If Type(x) is BigInt, thena. Return BigInt::equal(x, y).4. Return SameValueNonNumeric(x, y).\nNote\nThis algorithm differs from the SameValue Algorithm in its treatment of signed zeroes and NaNs.\n\n\n\n\n7.3 Operations on Objects\n\n7.3.1 MakeBasicObject ( internalSlotsList )\nThe abstract operation MakeBasicObject takes argument internalSlotsList (a List\n of internal slot names) and returns an Object. It is the source of all \nECMAScript objects that are created algorithmically, including both ordinary objects and exotic objects.\n It factors out common steps used in creating all objects, and \ncentralizes object creation. It performs the following steps when \ncalled:\n1. Let obj be a newly created object with an internal slot for each name in internalSlotsList.2. Set obj's essential internal methods to the default ordinary object definitions specified in 10.1.3. Assert: If the caller will not be overriding both obj's [[GetPrototypeOf]] and [[SetPrototypeOf]] essential internal methods, then internalSlotsList contains [[Prototype]].4. Assert: If the caller will not be overriding all of obj's [[SetPrototypeOf]], [[IsExtensible]], and [[PreventExtensions]] essential internal methods, then internalSlotsList contains [[Extensible]].5. If internalSlotsList contains [[Extensible]], set obj.[[Extensible]] to true.6. Return obj.\nNote\nWithin this specification, exotic objects are created in abstract operations such as ArrayCreate and BoundFunctionCreate\n by first calling MakeBasicObject to obtain a basic, foundational \nobject, and then overriding some or all of that object's internal \nmethods. In order to encapsulate exotic object creation, the object's essential internal methods are never modified outside those operations.\n\n\n\n7.3.2 Get ( O, P )\nThe abstract operation Get takes arguments O (an Object) and P (a property key) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is used to retrieve the value of a specific property of an object. It performs the following steps when called:\n1. Return ?\u00a0O.[[Get]](P, O).\n\n\n7.3.3 GetV ( V, P )\nThe abstract operation GetV takes arguments V (an ECMAScript language value) and P (a property key) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is used to retrieve the value of a specific property of an ECMAScript language value.\n If the value is not an object, the property lookup is performed using a\n wrapper object appropriate for the type of the value. It performs the \nfollowing steps when called:\n1. Let O be ?\u00a0ToObject(V).2. Return ?\u00a0O.[[Get]](P, V).\n\n\n7.3.4 Set ( O, P, V, Throw )\nThe abstract operation Set takes arguments O (an Object), P (a property key), V (an ECMAScript language value), and Throw (a Boolean) and returns either a normal completion containing unused or an abrupt completion. It is used to set the value of a specific property of an object. V is the new value for the property. It performs the following steps when called:\n1. Let success be ?\u00a0O.[[Set]](P, V, O).2. If success is false and Throw is true, throw a TypeError exception.3. Return unused.\n\n\n7.3.5 CreateDataProperty ( O, P, V )\nThe abstract operation CreateDataProperty takes arguments O (an Object), P (a property key), and V (an ECMAScript language value) and returns either a normal completion containing a Boolean or an abrupt completion. It is used to create a new own property of an object. It performs the following steps when called:\n1. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true }.2. Return ?\u00a0O.[[DefineOwnProperty]](P, newDesc).\nNote\nThis abstract operation creates a property whose attributes \nare set to the same defaults used for properties created by the \nECMAScript language assignment operator. Normally, the property will not\n already exist. If it does exist and is not configurable or if O is not extensible, [[DefineOwnProperty]] will return false.\n\n\n\n7.3.6 CreateMethodProperty ( O, P, V )\nThe abstract operation CreateMethodProperty takes arguments O (an Object), P (a property key), and V (an ECMAScript language value) and returns unused. It is used to create a new own property of an ordinary object. It performs the following steps when called:\n1. Assert: O is an ordinary, extensible object with no non-configurable properties.2. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }.3. Perform !\u00a0O.[[DefineOwnProperty]](P, newDesc).4. Return unused.\nNote\nThis abstract operation creates a property whose attributes \nare set to the same defaults used for built-in methods and methods \ndefined using class declaration syntax. Normally, the property will not \nalready exist. If it does exist and is not configurable or if O is not extensible, [[DefineOwnProperty]] will return false.\n\n\n\n7.3.7 CreateDataPropertyOrThrow ( O, P, V )\nThe abstract operation CreateDataPropertyOrThrow takes arguments O (an Object), P (a property key), and V (an ECMAScript language value) and returns either a normal completion containing a Boolean or an abrupt completion. It is used to create a new own property of an object. It throws a TypeError exception if the requested property update cannot be performed. It performs the following steps when called:\n1. Let success be ?\u00a0CreateDataProperty(O, P, V).2. If success is false, throw a TypeError exception.3. Return success.\nNote\nThis abstract operation creates a property whose attributes \nare set to the same defaults used for properties created by the \nECMAScript language assignment operator. Normally, the property will not\n already exist. If it does exist and is not configurable or if O is not extensible, [[DefineOwnProperty]] will return false causing this operation to throw a TypeError exception.\n\n\n\n7.3.8 CreateNonEnumerableDataPropertyOrThrow ( O, P, V )\nThe abstract operation CreateNonEnumerableDataPropertyOrThrow takes arguments O (an Object), P (a property key), and V (an ECMAScript language value) and returns unused. It is used to create a new non-enumerable own property of an ordinary object. It performs the following steps when called:\n1. Assert: O is an ordinary, extensible object with no non-configurable properties.2. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }.3. Perform !\u00a0DefinePropertyOrThrow(O, P, newDesc).4. Return unused.\nNote\nThis abstract operation creates a property whose attributes \nare set to the same defaults used for properties created by the \nECMAScript language assignment operator except it is not enumerable. \nNormally, the property will not already exist. If it does exist and is \nnot configurable or if O is not extensible, [[DefineOwnProperty]] will return false causing this operation to throw a TypeError exception.\n\n\n\n7.3.9 DefinePropertyOrThrow ( O, P, desc )\nThe abstract operation DefinePropertyOrThrow takes arguments O (an Object), P (a property key), and desc (a Property Descriptor) and returns either a normal completion containing unused or an abrupt completion. It is used to call the [[DefineOwnProperty]] internal method of an object in a manner that will throw a TypeError exception if the requested property update cannot be performed. It performs the following steps when called:\n1. Let success be ?\u00a0O.[[DefineOwnProperty]](P, desc).2. If success is false, throw a TypeError exception.3. Return unused.\n\n\n7.3.10 DeletePropertyOrThrow ( O, P )\nThe abstract operation DeletePropertyOrThrow takes arguments O (an Object) and P (a property key) and returns either a normal completion containing unused or an abrupt completion.\n It is used to remove a specific own property of an object. It throws an\n exception if the property is not configurable. It performs the \nfollowing steps when called:\n1. Let success be ?\u00a0O.[[Delete]](P).2. If success is false, throw a TypeError exception.3. Return unused.\n\n\n7.3.11 GetMethod ( V, P )\nThe abstract operation GetMethod takes arguments V (an ECMAScript language value) and P (a property key) and returns either a normal completion containing either a function object or undefined, or an abrupt completion. It is used to get the value of a specific property of an ECMAScript language value when the value of the property is expected to be a function. It performs the following steps when called:\n1. Let func be ?\u00a0GetV(V, P).2. If func is either undefined or null, return undefined.3. If IsCallable(func) is false, throw a TypeError exception.4. Return func.\n\n\n7.3.12 HasProperty ( O, P )\nThe abstract operation HasProperty takes arguments O (an Object) and P (a property key) and returns either a normal completion containing a Boolean or an abrupt completion. It is used to determine whether an object has a property with the specified property key. The property may be either own or inherited. It performs the following steps when called:\n1. Return ?\u00a0O.[[HasProperty]](P).\n\n\n7.3.13 HasOwnProperty ( O, P )\nThe abstract operation HasOwnProperty takes arguments O (an Object) and P (a property key) and returns either a normal completion containing a Boolean or an abrupt completion. It is used to determine whether an object has an own property with the specified property key. It performs the following steps when called:\n1. Let desc be ?\u00a0O.[[GetOwnProperty]](P).2. If desc is undefined, return false.3. Return true.\n\n\n7.3.14 Call ( F, V [ , argumentsList ] )\nThe abstract operation Call takes arguments F (an ECMAScript language value) and V (an ECMAScript language value) and optional argument argumentsList (a List of ECMAScript language values) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is used to call the [[Call]] internal method of a function object. F is the function object, V is an ECMAScript language value that is the this value of the [[Call]], and argumentsList is the value passed to the corresponding argument of the internal method. If argumentsList is not present, a new empty List is used as its value. It performs the following steps when called:\n1. If argumentsList is not present, set argumentsList to a new empty List.2. If IsCallable(F) is false, throw a TypeError exception.3. Return ?\u00a0F.[[Call]](V, argumentsList).\n\n\n7.3.15 Construct ( F [ , argumentsList [ , newTarget ] ] )\nThe abstract operation Construct takes argument F (a constructor) and optional arguments argumentsList and newTarget (a constructor) and returns either a normal completion containing an Object or an abrupt completion. It is used to call the [[Construct]] internal method of a function object. argumentsList and newTarget are the values to be passed as the corresponding arguments of the internal method. If argumentsList is not present, a new empty List is used as its value. If newTarget is not present, F is used as its value. It performs the following steps when called:\n1. If newTarget is not present, set newTarget to F.2. If argumentsList is not present, set argumentsList to a new empty List.3. Return ?\u00a0F.[[Construct]](argumentsList, newTarget).\nNote\nIf newTarget is not present, this operation is equivalent to: new F(...argumentsList)\n\n\n\n7.3.16 SetIntegrityLevel ( O, level )\nThe abstract operation SetIntegrityLevel takes arguments O (an Object) and level (sealed or frozen) and returns either a normal completion containing a Boolean or an abrupt completion. It is used to fix the set of own properties of an object. It performs the following steps when called:\n1. Let status be ?\u00a0O.[[PreventExtensions]]().2. If status is false, return false.3. Let keys be ?\u00a0O.[[OwnPropertyKeys]]().4. If level is sealed, thena. For each element k of keys, doi. Perform ?\u00a0DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).5. Else,a. Assert: level is frozen.b. For each element k of keys, doi. Let currentDesc be ?\u00a0O.[[GetOwnProperty]](k).ii. If currentDesc is not undefined, then1. If IsAccessorDescriptor(currentDesc) is true, thena. Let desc be the PropertyDescriptor { [[Configurable]]: false }.2. Else,a. Let desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.3. Perform ?\u00a0DefinePropertyOrThrow(O, k, desc).6. Return true.\n\n\n7.3.17 TestIntegrityLevel ( O, level )\nThe abstract operation TestIntegrityLevel takes arguments O (an Object) and level (sealed or frozen) and returns either a normal completion containing a Boolean or an abrupt completion. It is used to determine if the set of own properties of an object are fixed. It performs the following steps when called:\n1. Let extensible be ?\u00a0IsExtensible(O).2. If extensible is true, return false.3. NOTE: If the object is extensible, none of its properties are examined.4. Let keys be ?\u00a0O.[[OwnPropertyKeys]]().5. For each element k of keys, doa. Let currentDesc be ?\u00a0O.[[GetOwnProperty]](k).b. If currentDesc is not undefined, theni. If currentDesc.[[Configurable]] is true, return false.ii. If level is frozen and IsDataDescriptor(currentDesc) is true, then1. If currentDesc.[[Writable]] is true, return false.6. Return true.\n\n\n7.3.18 CreateArrayFromList ( elements )\nThe abstract operation CreateArrayFromList takes argument elements (a List of ECMAScript language values) and returns an Array. It is used to create an Array whose elements are provided by elements. It performs the following steps when called:\n1. Let array be !\u00a0ArrayCreate(0).2. Let n be 0.3. For each element e of elements, doa. Perform !\u00a0CreateDataPropertyOrThrow(array, !\u00a0ToString(\ud835\udd3d(n)), e).b. Set n to n + 1.4. Return array.\n\n\n7.3.19 LengthOfArrayLike ( obj )\nThe abstract operation LengthOfArrayLike takes argument obj (an Object) and returns either a normal completion containing a non-negative integer or an abrupt completion. It returns the value of the \"length\" property of an array-like object. It performs the following steps when called:\n1. Return \u211d(? ToLength(? Get(obj, \"length\"))).\nAn array-like object is any object for which this operation returns a normal completion.\nNote 1\n        Typically, an array-like object would also have some properties with integer index names. However, that is not a requirement of this definition.\n      \nNote 2\n        Arrays and String objects are examples of array-like objects.\n      \n\n\n7.3.20 CreateListFromArrayLike ( obj [ , elementTypes ] )\nThe abstract operation CreateListFromArrayLike takes argument obj and optional argument elementTypes (a List of names of ECMAScript Language Types) and returns either a normal completion containing a List or an abrupt completion. It is used to create a List value whose elements are provided by the indexed properties of obj. elementTypes contains the names of ECMAScript Language Types that are allowed for element values of the List that is created. It performs the following steps when called:\n1. If elementTypes is not present, set elementTypes to \u00ab Undefined, Null, Boolean, String, Symbol, Number, BigInt, Object \u00bb.2. If Type(obj) is not Object, throw a TypeError exception.3. Let len be ?\u00a0LengthOfArrayLike(obj).4. Let list be a new empty List.5. Let index be 0.6. Repeat, while index < len,a. Let indexName be !\u00a0ToString(\ud835\udd3d(index)).b. Let next be ?\u00a0Get(obj, indexName).c. If Type(next) is not an element of elementTypes, throw a TypeError exception.d. Append next as the last element of list.e. Set index to index + 1.7. Return list.\n\n\n7.3.21 Invoke ( V, P [ , argumentsList ] )\nThe abstract operation Invoke takes arguments V (an ECMAScript language value) and P (a property key) and optional argument argumentsList (a List of ECMAScript language values) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is used to call a method property of an ECMAScript language value. V serves as both the lookup point for the property and the this value of the call. argumentsList is the list of arguments values passed to the method. If argumentsList is not present, a new empty List is used as its value. It performs the following steps when called:\n1. If argumentsList is not present, set argumentsList to a new empty List.2. Let func be ?\u00a0GetV(V, P).3. Return ?\u00a0Call(func, V, argumentsList).\n\n\n7.3.22 OrdinaryHasInstance ( C, O )\nThe abstract operation OrdinaryHasInstance takes arguments C (an ECMAScript language value) and O and returns either a normal completion containing a Boolean or an abrupt completion. It implements the default algorithm for determining if O inherits from the instance object inheritance path provided by C. It performs the following steps when called:\n1. If IsCallable(C) is false, return false.2. If C has a [[BoundTargetFunction]] internal slot, thena. Let BC be C.[[BoundTargetFunction]].b. Return ?\u00a0InstanceofOperator(O, BC).3. If Type(O) is not Object, return false.4. Let P be ?\u00a0Get(C, \"prototype\").5. If Type(P) is not Object, throw a TypeError exception.6. Repeat,a. Set O to ?\u00a0O.[[GetPrototypeOf]]().b. If O is null, return false.c. If SameValue(P, O) is true, return true.\n\n\n7.3.23 SpeciesConstructor ( O, defaultConstructor )\nThe abstract operation SpeciesConstructor takes arguments O (an Object) and defaultConstructor (a constructor) and returns either a normal completion containing a constructor or an abrupt completion. It is used to retrieve the constructor that should be used to create new objects that are derived from O. defaultConstructor is the constructor to use if a constructor @@species property cannot be found starting from O. It performs the following steps when called:\n1. Let C be ?\u00a0Get(O, \"constructor\").2. If C is undefined, return defaultConstructor.3. If Type(C) is not Object, throw a TypeError exception.4. Let S be ?\u00a0Get(C, @@species).5. If S is either undefined or null, return defaultConstructor.6. If IsConstructor(S) is true, return S.7. Throw a TypeError exception.\n\n\n7.3.24 EnumerableOwnPropertyNames ( O, kind )\nThe abstract operation EnumerableOwnPropertyNames takes arguments O (an Object) and kind (key, value, or key+value) and returns either a normal completion containing a List or an abrupt completion. It performs the following steps when called:\n1. Let ownKeys be ?\u00a0O.[[OwnPropertyKeys]]().2. Let properties be a new empty List.3. For each element key of ownKeys, doa. If Type(key) is String, theni. Let desc be ?\u00a0O.[[GetOwnProperty]](key).ii. If desc is not undefined and desc.[[Enumerable]] is true, then1. If kind is key, append key to properties.2. Else,a. Let value be ?\u00a0Get(O, key).b. If kind is value, append value to properties.c. Else,i. Assert: kind is key+value.ii. Let entry be CreateArrayFromList(\u00ab key, value \u00bb).iii. Append entry to properties.4. Return properties.\n\n\n7.3.25 GetFunctionRealm ( obj )\nThe abstract operation GetFunctionRealm takes argument obj (a function object) and returns either a normal completion containing a Realm Record or an abrupt completion. It performs the following steps when called:\n1. If obj has a [[Realm]] internal slot, thena. Return obj.[[Realm]].2. If obj is a bound function exotic object, thena. Let target be obj.[[BoundTargetFunction]].b. Return ?\u00a0GetFunctionRealm(target).3. If obj is a Proxy exotic object, thena. If obj.[[ProxyHandler]] is null, throw a TypeError exception.b. Let proxyTarget be obj.[[ProxyTarget]].c. Return ?\u00a0GetFunctionRealm(proxyTarget).4. Return the current Realm Record.\nNote\nStep 4 will only be reached if obj is a non-standard function exotic object that does not have a [[Realm]] internal slot.\n\n\n\n7.3.26 CopyDataProperties ( target, source, excludedItems )\nThe abstract operation CopyDataProperties takes arguments target (an Object), source (an ECMAScript language value), and excludedItems (a List of property keys) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. If source is undefined or null, return unused.2. Let from be !\u00a0ToObject(source).3. Let keys be ?\u00a0from.[[OwnPropertyKeys]]().4. For each element nextKey of keys, doa. Let excluded be false.b. For each element e of excludedItems, doi. If SameValue(e, nextKey) is true, then1. Set excluded to true.c. If excluded is false, theni. Let desc be ?\u00a0from.[[GetOwnProperty]](nextKey).ii. If desc is not undefined and desc.[[Enumerable]] is true, then1. Let propValue be ?\u00a0Get(from, nextKey).2. Perform !\u00a0CreateDataPropertyOrThrow(target, nextKey, propValue).5. Return unused.\nNote\nThe target passed in here is always a newly created object which is not directly accessible in case of an error being thrown.\n\n\n\n7.3.27 PrivateElementFind ( O, P )\nThe abstract operation PrivateElementFind takes arguments O (an Object) and P (a Private Name) and returns a PrivateElement or empty. It performs the following steps when called:\n1. If O.[[PrivateElements]] contains a PrivateElement whose [[Key]] is P, thena. Let entry be that PrivateElement.b. Return entry.2. Return empty.\n\n\n7.3.28 PrivateFieldAdd ( O, P, value )\nThe abstract operation PrivateFieldAdd takes arguments O (an Object), P (a Private Name), and value (an ECMAScript language value) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let entry be PrivateElementFind(O, P).2. If entry is not empty, throw a TypeError exception.3. Append PrivateElement { [[Key]]: P, [[Kind]]: field, [[Value]]: value } to O.[[PrivateElements]].4. Return unused.\n\n\n7.3.29 PrivateMethodOrAccessorAdd ( O, method )\nThe abstract operation PrivateMethodOrAccessorAdd takes arguments O (an Object) and method (a PrivateElement) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Assert: method.[[Kind]] is either method or accessor.2. Let entry be PrivateElementFind(O, method.[[Key]]).3. If entry is not empty, throw a TypeError exception.4. Append method to O.[[PrivateElements]].5. Return unused.\nNote\nThe values for private methods and accessors are shared \nacross instances. This operation does not create a new copy of the \nmethod or accessor.\n\n\n\n7.3.30 PrivateGet ( O, P )\nThe abstract operation PrivateGet takes arguments O (an Object) and P (a Private Name) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let entry be PrivateElementFind(O, P).2. If entry is empty, throw a TypeError exception.3. If entry.[[Kind]] is field or method, thena. Return entry.[[Value]].4. Assert: entry.[[Kind]] is accessor.5. If entry.[[Get]] is undefined, throw a TypeError exception.6. Let getter be entry.[[Get]].7. Return ?\u00a0Call(getter, O).\n\n\n7.3.31 PrivateSet ( O, P, value )\nThe abstract operation PrivateSet takes arguments O (an Object), P (a Private Name), and value (an ECMAScript language value) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let entry be PrivateElementFind(O, P).2. If entry is empty, throw a TypeError exception.3. If entry.[[Kind]] is field, thena. Set entry.[[Value]] to value.4. Else if entry.[[Kind]] is method, thena. Throw a TypeError exception.5. Else,a. Assert: entry.[[Kind]] is accessor.b. If entry.[[Set]] is undefined, throw a TypeError exception.c. Let setter be entry.[[Set]].d. Perform ?\u00a0Call(setter, O, \u00ab value \u00bb).6. Return unused.\n\n\n7.3.32 DefineField ( receiver, fieldRecord )\nThe abstract operation DefineField takes arguments receiver (an Object) and fieldRecord (a ClassFieldDefinition Record) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let fieldName be fieldRecord.[[Name]].2. Let initializer be fieldRecord.[[Initializer]].3. If initializer is not empty, thena. Let initValue be ?\u00a0Call(initializer, receiver).4. Else, let initValue be undefined.5. If fieldName is a Private Name, thena. Perform ?\u00a0PrivateFieldAdd(receiver, fieldName, initValue).6. Else,a. Assert: IsPropertyKey(fieldName) is true.b. Perform ?\u00a0CreateDataPropertyOrThrow(receiver, fieldName, initValue).7. Return unused.\n\n\n7.3.33 InitializeInstanceElements ( O, constructor )\nThe abstract operation InitializeInstanceElements takes arguments O (an Object) and constructor (an ECMAScript function object) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let methods be the value of constructor.[[PrivateMethods]].2. For each PrivateElement method of methods, doa. Perform ?\u00a0PrivateMethodOrAccessorAdd(O, method).3. Let fields be the value of constructor.[[Fields]].4. For each element fieldRecord of fields, doa. Perform ?\u00a0DefineField(O, fieldRecord).5. Return unused.\n\n\n\n7.4 Operations on Iterator Objects\nSee Common Iteration Interfaces (27.1).\n\n7.4.1 Iterator Records\nAn Iterator Record is a Record value used to encapsulate an Iterator or AsyncIterator along with the next method.\nIterator Records have the fields listed in Table 18.\nTable 18: Iterator Record Fields\n\n\n\n              Field Name\n            \n\n              Value\n            \n\n              Meaning\n            \n\n\n\n              [[Iterator]]\n            \n\n              an Object\n            \n\n              An object that conforms to the Iterator or AsyncIterator interface.\n            \n\n\n\n              [[NextMethod]]\n            \n\n              a function object\n\n\n              The next method of the [[Iterator]] object.\n            \n\n\n\n              [[Done]]\n            \n\n              a Boolean\n            \n\n              Whether the iterator has been closed.\n            \n\n\n\n\n\n7.4.2 GetIterator ( obj [ , hint [ , method ] ] )\nThe abstract operation GetIterator takes argument obj (an ECMAScript language value) and optional arguments hint (sync or async) and method (a function object) and returns either a normal completion containing an Iterator Record or an abrupt completion. It performs the following steps when called:\n1. If hint is not present, set hint to sync.2. If method is not present, thena. If hint is async, theni. Set method to ?\u00a0GetMethod(obj, @@asyncIterator).ii. If method is undefined, then1. Let syncMethod be ?\u00a0GetMethod(obj, @@iterator).2. Let syncIteratorRecord be ?\u00a0GetIterator(obj, sync, syncMethod).3. Return CreateAsyncFromSyncIterator(syncIteratorRecord).b. Otherwise, set method to ?\u00a0GetMethod(obj, @@iterator).3. Let iterator be ?\u00a0Call(method, obj).4. If Type(iterator) is not Object, throw a TypeError exception.5. Let nextMethod be ?\u00a0GetV(iterator, \"next\").6. Let iteratorRecord be the Iterator Record { [[Iterator]]: iterator, [[NextMethod]]: nextMethod, [[Done]]: false }.7. Return iteratorRecord.\n\n\n7.4.3 IteratorNext ( iteratorRecord [ , value ] )\nThe abstract operation IteratorNext takes argument iteratorRecord (an Iterator Record) and optional argument value (an ECMAScript language value) and returns either a normal completion containing an Object or an abrupt completion. It performs the following steps when called:\n1. If value is not present, thena. Let result be ?\u00a0Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]]).2. Else,a. Let result be ?\u00a0Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]], \u00ab value \u00bb).3. If Type(result) is not Object, throw a TypeError exception.4. Return result.\n\n\n7.4.4 IteratorComplete ( iterResult )\nThe abstract operation IteratorComplete takes argument iterResult (an Object) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Return ToBoolean(? Get(iterResult, \"done\")).\n\n\n7.4.5 IteratorValue ( iterResult )\nThe abstract operation IteratorValue takes argument iterResult (an Object) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Return ?\u00a0Get(iterResult, \"value\").\n\n\n7.4.6 IteratorStep ( iteratorRecord )\nThe abstract operation IteratorStep takes argument iteratorRecord (an Iterator Record) and returns either a normal completion containing either an Object or false, or an abrupt completion. It requests the next value from iteratorRecord.[[Iterator]] by calling iteratorRecord.[[NextMethod]] and returns either false\n indicating that the iterator has reached its end or the IteratorResult \nobject if a next value is available. It performs the following steps \nwhen called:\n1. Let result be ?\u00a0IteratorNext(iteratorRecord).2. Let done be ?\u00a0IteratorComplete(result).3. If done is true, return false.4. Return result.\n\n\n7.4.7 IteratorClose ( iteratorRecord, completion )\nThe abstract operation IteratorClose takes arguments iteratorRecord (an Iterator Record) and completion (a Completion Record) and returns a Completion Record.\n It is used to notify an iterator that it should perform any actions it \nwould normally perform when it has reached its completed state. It \nperforms the following steps when called:\n1. Assert: Type(iteratorRecord.[[Iterator]]) is Object.2. Let iterator be iteratorRecord.[[Iterator]].3. Let innerResult be Completion(GetMethod(iterator, \"return\")).4. If innerResult.[[Type]] is normal, thena. Let return be innerResult.[[Value]].b. If return is undefined, return ?\u00a0completion.c. Set innerResult to Completion(Call(return, iterator)).5. If completion.[[Type]] is throw, return ?\u00a0completion.6. If innerResult.[[Type]] is throw, return ?\u00a0innerResult.7. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.8. Return ?\u00a0completion.\n\n\n7.4.8 IfAbruptCloseIterator ( value, iteratorRecord )\nIfAbruptCloseIterator is a shorthand for a sequence of algorithm steps that use an Iterator Record. An algorithm step of the form:\n1. IfAbruptCloseIterator(value, iteratorRecord).\nmeans the same thing as:\n1. If value is an abrupt completion, return ?\u00a0IteratorClose(iteratorRecord, value).2. Else if value is a Completion Record, set value to value.[[Value]].\n\n\n7.4.9 AsyncIteratorClose ( iteratorRecord, completion )\nThe abstract operation AsyncIteratorClose takes arguments iteratorRecord (an Iterator Record) and completion (a Completion Record) and returns a Completion Record.\n It is used to notify an async iterator that it should perform any \nactions it would normally perform when it has reached its completed \nstate. It performs the following steps when called:\n1. Assert: Type(iteratorRecord.[[Iterator]]) is Object.2. Let iterator be iteratorRecord.[[Iterator]].3. Let innerResult be Completion(GetMethod(iterator, \"return\")).4. If innerResult.[[Type]] is normal, thena. Let return be innerResult.[[Value]].b. If return is undefined, return ?\u00a0completion.c. Set innerResult to Completion(Call(return, iterator)).d. If innerResult.[[Type]] is normal, set innerResult to Completion(Await(innerResult.[[Value]])).5. If completion.[[Type]] is throw, return ?\u00a0completion.6. If innerResult.[[Type]] is throw, return ?\u00a0innerResult.7. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.8. Return ?\u00a0completion.\n\n\n7.4.10 CreateIterResultObject ( value, done )\nThe abstract operation CreateIterResultObject takes arguments value (an ECMAScript language value) and done (a Boolean) and returns an Object that conforms to the IteratorResult interface. It creates an object that conforms to the IteratorResult interface. It performs the following steps when called:\n1. Let obj be OrdinaryObjectCreate(%Object.prototype%).2. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"value\", value).3. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"done\", done).4. Return obj.\n\n\n7.4.11 CreateListIteratorRecord ( list )\nThe abstract operation CreateListIteratorRecord takes argument list (a List) and returns an Iterator Record. It creates an Iterator (27.1.1.2) object record whose next method returns the successive elements of list. It performs the following steps when called:\n1. Let closure be a new Abstract Closure with no parameters that captures list and performs the following steps when called:a. For each element E of list, doi. Perform ?\u00a0GeneratorYield(CreateIterResultObject(E, false)).b. Return undefined.2. Let iterator be CreateIteratorFromClosure(closure, empty, %IteratorPrototype%).3. Return the Iterator Record { [[Iterator]]: iterator, [[NextMethod]]: %GeneratorFunction.prototype.prototype.next%, [[Done]]: false }.\nNote\nThe list iterator object is never directly accessible to ECMAScript code.\n\n\n\n7.4.12 IterableToList ( items [ , method ] )\nThe abstract operation IterableToList takes argument items (an ECMAScript language value) and optional argument method (a function object) and returns either a normal completion containing a List or an abrupt completion. It performs the following steps when called:\n1. If method is present, thena. Let iteratorRecord be ?\u00a0GetIterator(items, sync, method).2. Else,a. Let iteratorRecord be ?\u00a0GetIterator(items, sync).3. Let values be a new empty List.4. Let next be true.5. Repeat, while next is not false,a. Set next to ?\u00a0IteratorStep(iteratorRecord).b. If next is not false, theni. Let nextValue be ?\u00a0IteratorValue(next).ii. Append nextValue to the end of the List values.6. Return values.\n\n\n\n\n8 Syntax-Directed Operations\nIn addition to those defined in this section, specialized syntax-directed operations are defined throughout this specification.\n\n8.1 Scope Analysis\n\n8.1.1 Static Semantics: BoundNames\nThe syntax-directed operation BoundNames takes no arguments and returns a List of Strings.\nNote\n\"*default*\" is used within this \nspecification as a synthetic name for a module's default export when it \ndoes not have another name. An entry in the module's [[Environment]] is \ncreated with that name and holds the corresponding value, and resolving \nthe export named \"default\" by calling ResolveExport ( exportName [ , resolveSet ] ) for the module will return a ResolvedBinding Record whose [[BindingName]] is \"*default*\",\n which will then resolve in the module's [[Environment]] to the \nabove-mentioned value. This is done only for ease of specification, so \nthat anonymous default exports can be resolved like any other export. \nThe string \"*default*\" is never accessible to user code or to the module linking algorithm.\n\nIt is defined piecewise over the following productions:\n\nBindingIdentifier : Identifier\n\n\n1. Return a List whose sole element is the StringValue of Identifier.\n\nBindingIdentifier : yield\n\n\n1. Return \u00ab \"yield\" \u00bb.\n\nBindingIdentifier : await\n\n\n1. Return \u00ab \"await\" \u00bb.\n\nLexicalDeclaration : \nLetOrConst\nBindingList\n;\n\n\n\n1. Return the BoundNames of BindingList.\n\nBindingList : \nBindingList\n,\nLexicalBinding\n\n\n\n1. Let names1 be the BoundNames of BindingList.2. Let names2 be the BoundNames of LexicalBinding.3. Return the list-concatenation of names1 and names2.\n\nLexicalBinding : \nBindingIdentifier\nInitializeropt\n\n\n\n1. Return the BoundNames of BindingIdentifier.\n\nLexicalBinding : \nBindingPattern\nInitializer\n\n\n\n1. Return the BoundNames of BindingPattern.\n\nVariableDeclarationList : \nVariableDeclarationList\n,\nVariableDeclaration\n\n\n\n1. Let names1 be BoundNames of VariableDeclarationList.2. Let names2 be BoundNames of VariableDeclaration.3. Return the list-concatenation of names1 and names2.\n\nVariableDeclaration : \nBindingIdentifier\nInitializeropt\n\n\n\n1. Return the BoundNames of BindingIdentifier.\n\nVariableDeclaration : \nBindingPattern\nInitializer\n\n\n\n1. Return the BoundNames of BindingPattern.\n\nObjectBindingPattern : \n{\n}\n\n\n\n1. Return a new empty List.\n\nObjectBindingPattern : \n{\nBindingPropertyList\n,\nBindingRestProperty\n}\n\n\n\n1. Let names1 be BoundNames of BindingPropertyList.2. Let names2 be BoundNames of BindingRestProperty.3. Return the list-concatenation of names1 and names2.\n\nArrayBindingPattern : \n[\nElisionopt\n]\n\n\n\n1. Return a new empty List.\n\nArrayBindingPattern : \n[\nElisionopt\nBindingRestElement\n]\n\n\n\n1. Return the BoundNames of BindingRestElement.\n\nArrayBindingPattern : \n[\nBindingElementList\n,\nElisionopt\n]\n\n\n\n1. Return the BoundNames of BindingElementList.\n\nArrayBindingPattern : \n[\nBindingElementList\n,\nElisionopt\nBindingRestElement\n]\n\n\n\n1. Let names1 be BoundNames of BindingElementList.2. Let names2 be BoundNames of BindingRestElement.3. Return the list-concatenation of names1 and names2.\n\nBindingPropertyList : \nBindingPropertyList\n,\nBindingProperty\n\n\n\n1. Let names1 be BoundNames of BindingPropertyList.2. Let names2 be BoundNames of BindingProperty.3. Return the list-concatenation of names1 and names2.\n\nBindingElementList : \nBindingElementList\n,\nBindingElisionElement\n\n\n\n1. Let names1 be BoundNames of BindingElementList.2. Let names2 be BoundNames of BindingElisionElement.3. Return the list-concatenation of names1 and names2.\n\nBindingElisionElement : \nElisionopt\nBindingElement\n\n\n\n1. Return BoundNames of BindingElement.\n\nBindingProperty : \nPropertyName\n:\nBindingElement\n\n\n\n1. Return the BoundNames of BindingElement.\n\nSingleNameBinding : \nBindingIdentifier\nInitializeropt\n\n\n\n1. Return the BoundNames of BindingIdentifier.\n\nBindingElement : \nBindingPattern\nInitializeropt\n\n\n\n1. Return the BoundNames of BindingPattern.\n\nForDeclaration : \nLetOrConst\nForBinding\n\n\n\n1. Return the BoundNames of ForBinding.\n\nFunctionDeclaration : \nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Return the BoundNames of BindingIdentifier.\n\nFunctionDeclaration : \nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Return \u00ab \"*default*\" \u00bb.\n\nFormalParameters : [empty]\n\n\n1. Return a new empty List.\n\nFormalParameters : \nFormalParameterList\n,\nFunctionRestParameter\n\n\n\n1. Let names1 be BoundNames of FormalParameterList.2. Let names2 be BoundNames of FunctionRestParameter.3. Return the list-concatenation of names1 and names2.\n\nFormalParameterList : \nFormalParameterList\n,\nFormalParameter\n\n\n\n1. Let names1 be BoundNames of FormalParameterList.2. Let names2 be BoundNames of FormalParameter.3. Return the list-concatenation of names1 and names2.\n\nArrowParameters : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let formals be the ArrowFormalParameters that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return the BoundNames of formals.\n\nGeneratorDeclaration : \nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Return the BoundNames of BindingIdentifier.\n\nGeneratorDeclaration : \nfunction\n*\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Return \u00ab \"*default*\" \u00bb.\n\nAsyncGeneratorDeclaration : \nasync\nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Return the BoundNames of BindingIdentifier.\n\nAsyncGeneratorDeclaration : \nasync\nfunction\n*\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Return \u00ab \"*default*\" \u00bb.\n\nClassDeclaration : \nclass\nBindingIdentifier\nClassTail\n\n\n\n1. Return the BoundNames of BindingIdentifier.\n\nClassDeclaration : \nclass\nClassTail\n\n\n\n1. Return \u00ab \"*default*\" \u00bb.\n\nAsyncFunctionDeclaration : \nasync\nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return the BoundNames of BindingIdentifier.\n\nAsyncFunctionDeclaration : \nasync\nfunction\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return \u00ab \"*default*\" \u00bb.\n\nCoverCallExpressionAndAsyncArrowHead : \nMemberExpression\nArguments\n\n\n\n1. Let head be the AsyncArrowHead that is covered by CoverCallExpressionAndAsyncArrowHead.2. Return the BoundNames of head.\n\nImportDeclaration : \nimport\nImportClause\nFromClause\n;\n\n\n\n1. Return the BoundNames of ImportClause.\n\nImportDeclaration : \nimport\nModuleSpecifier\n;\n\n\n\n1. Return a new empty List.\n\nImportClause : \nImportedDefaultBinding\n,\nNameSpaceImport\n\n\n\n1. Let names1 be the BoundNames of ImportedDefaultBinding.2. Let names2 be the BoundNames of NameSpaceImport.3. Return the list-concatenation of names1 and names2.\n\nImportClause : \nImportedDefaultBinding\n,\nNamedImports\n\n\n\n1. Let names1 be the BoundNames of ImportedDefaultBinding.2. Let names2 be the BoundNames of NamedImports.3. Return the list-concatenation of names1 and names2.\n\nNamedImports : \n{\n}\n\n\n\n1. Return a new empty List.\n\nImportsList : \nImportsList\n,\nImportSpecifier\n\n\n\n1. Let names1 be the BoundNames of ImportsList.2. Let names2 be the BoundNames of ImportSpecifier.3. Return the list-concatenation of names1 and names2.\n\nImportSpecifier : \nModuleExportName\nas\nImportedBinding\n\n\n\n1. Return the BoundNames of ImportedBinding.\n\nExportDeclaration : \nexport\nExportFromClause\nFromClause\n;\n\n\nexport\nNamedExports\n;\n\n\n\n1. Return a new empty List.\n\nExportDeclaration : \nexport\nVariableStatement\n\n\n\n1. Return the BoundNames of VariableStatement.\n\nExportDeclaration : \nexport\nDeclaration\n\n\n\n1. Return the BoundNames of Declaration.\n\nExportDeclaration : \nexport\ndefault\nHoistableDeclaration\n\n\n\n1. Let declarationNames be the BoundNames of HoistableDeclaration.2. If declarationNames does not include the element \"*default*\", append \"*default*\" to declarationNames.3. Return declarationNames.\n\nExportDeclaration : \nexport\ndefault\nClassDeclaration\n\n\n\n1. Let declarationNames be the BoundNames of ClassDeclaration.2. If declarationNames does not include the element \"*default*\", append \"*default*\" to declarationNames.3. Return declarationNames.\n\nExportDeclaration : \nexport\ndefault\nAssignmentExpression\n;\n\n\n\n1. Return \u00ab \"*default*\" \u00bb.\n\n\n8.1.2 Static Semantics: DeclarationPart\nThe syntax-directed operation DeclarationPart takes no arguments and returns a Parse Node. It is defined piecewise over the following productions:\n\nHoistableDeclaration : FunctionDeclaration\n\n\n1. Return FunctionDeclaration.\n\nHoistableDeclaration : GeneratorDeclaration\n\n\n1. Return GeneratorDeclaration.\n\nHoistableDeclaration : AsyncFunctionDeclaration\n\n\n1. Return AsyncFunctionDeclaration.\n\nHoistableDeclaration : AsyncGeneratorDeclaration\n\n\n1. Return AsyncGeneratorDeclaration.\n\nDeclaration : ClassDeclaration\n\n\n1. Return ClassDeclaration.\n\nDeclaration : LexicalDeclaration\n\n\n1. Return LexicalDeclaration.\n\n\n8.1.3 Static Semantics: IsConstantDeclaration\nThe syntax-directed operation IsConstantDeclaration takes no \narguments and returns a Boolean. It is defined piecewise over the \nfollowing productions:\n\nLexicalDeclaration : \nLetOrConst\nBindingList\n;\n\n\n\n1. Return IsConstantDeclaration of LetOrConst.\n\nLetOrConst : let\n\n\n1. Return false.\n\nLetOrConst : const\n\n\n1. Return true.\n\nFunctionDeclaration : \nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\nGeneratorDeclaration : \nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\nfunction\n*\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nAsyncGeneratorDeclaration : \nasync\nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\nasync\nfunction\n*\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncFunctionDeclaration : \nasync\nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\nasync\nfunction\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return false.\n\nClassDeclaration : \nclass\nBindingIdentifier\nClassTail\n\n\nclass\nClassTail\n\n\n\n1. Return false.\n\nExportDeclaration : \nexport\nExportFromClause\nFromClause\n;\n\n\nexport\nNamedExports\n;\n\n\nexport\ndefault\nAssignmentExpression\n;\n\n\n\n1. Return false.\nNote\nIt is not necessary to treat export default AssignmentExpression\n as a constant declaration because there is no syntax that permits \nassignment to the internal bound name used to reference a module's \ndefault object.\n\n\n\n8.1.4 Static Semantics: LexicallyDeclaredNames\nThe syntax-directed operation LexicallyDeclaredNames takes no arguments and returns a List of Strings. It is defined piecewise over the following productions:\n\nBlock : \n{\n}\n\n\n\n1. Return a new empty List.\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let names1 be LexicallyDeclaredNames of StatementList.2. Let names2 be LexicallyDeclaredNames of StatementListItem.3. Return the list-concatenation of names1 and names2.\n\nStatementListItem : Statement\n\n\n1. If Statement is \nStatement : LabelledStatement\n\n , return LexicallyDeclaredNames of LabelledStatement.2. Return a new empty List.\n\nStatementListItem : Declaration\n\n\n1. Return the BoundNames of Declaration.\n\nCaseBlock : \n{\n}\n\n\n\n1. Return a new empty List.\n\nCaseBlock : \n{\nCaseClausesopt\nDefaultClause\nCaseClausesopt\n}\n\n\n\n1. If the first CaseClauses is present, let names1 be the LexicallyDeclaredNames of the first CaseClauses.2. Else, let names1 be a new empty List.3. Let names2 be LexicallyDeclaredNames of DefaultClause.4. If the second CaseClauses is present, let names3 be the LexicallyDeclaredNames of the second CaseClauses.5. Else, let names3 be a new empty List.6. Return the list-concatenation of names1, names2, and names3.\n\nCaseClauses : \nCaseClauses\nCaseClause\n\n\n\n1. Let names1 be LexicallyDeclaredNames of CaseClauses.2. Let names2 be LexicallyDeclaredNames of CaseClause.3. Return the list-concatenation of names1 and names2.\n\nCaseClause : \ncase\nExpression\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return the LexicallyDeclaredNames of StatementList.2. Return a new empty List.\n\nDefaultClause : \ndefault\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return the LexicallyDeclaredNames of StatementList.2. Return a new empty List.\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Return the LexicallyDeclaredNames of LabelledItem.\n\nLabelledItem : Statement\n\n\n1. Return a new empty List.\n\nLabelledItem : FunctionDeclaration\n\n\n1. Return BoundNames of FunctionDeclaration.\n\nFunctionStatementList : [empty]\n\n\n1. Return a new empty List.\n\nFunctionStatementList : StatementList\n\n\n1. Return TopLevelLexicallyDeclaredNames of StatementList.\n\nClassStaticBlockStatementList : [empty]\n\n\n1. Return a new empty List.\n\nClassStaticBlockStatementList : StatementList\n\n\n1. Return the TopLevelLexicallyDeclaredNames of StatementList.\n\nConciseBody : ExpressionBody\n\n\n1. Return a new empty List.\n\nAsyncConciseBody : ExpressionBody\n\n\n1. Return a new empty List.\n\nScript : [empty]\n\n\n1. Return a new empty List.\n\nScriptBody : StatementList\n\n\n1. Return TopLevelLexicallyDeclaredNames of StatementList.\nNote 1\nAt the top level of a Script, function declarations are treated like var declarations rather than like lexical declarations.\n\nNote 2\nThe LexicallyDeclaredNames of a Module includes the names of all of its imported bindings.\n\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let names1 be LexicallyDeclaredNames of ModuleItemList.2. Let names2 be LexicallyDeclaredNames of ModuleItem.3. Return the list-concatenation of names1 and names2.\n\nModuleItem : ImportDeclaration\n\n\n1. Return the BoundNames of ImportDeclaration.\n\nModuleItem : ExportDeclaration\n\n\n1. If ExportDeclaration is export VariableStatement, return a new empty List.2. Return the BoundNames of ExportDeclaration.\n\nModuleItem : StatementListItem\n\n\n1. Return LexicallyDeclaredNames of StatementListItem.\nNote 3\nAt the top level of a Module, function declarations are treated like lexical declarations rather than like var declarations.\n\n\n\n8.1.5 Static Semantics: LexicallyScopedDeclarations\nThe syntax-directed operation LexicallyScopedDeclarations takes no arguments and returns a List of Parse Nodes. It is defined piecewise over the following productions:\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let declarations1 be LexicallyScopedDeclarations of StatementList.2. Let declarations2 be LexicallyScopedDeclarations of StatementListItem.3. Return the list-concatenation of declarations1 and declarations2.\n\nStatementListItem : Statement\n\n\n1. If Statement is \nStatement : LabelledStatement\n\n , return LexicallyScopedDeclarations of LabelledStatement.2. Return a new empty List.\n\nStatementListItem : Declaration\n\n\n1. Return a List whose sole element is DeclarationPart of Declaration.\n\nCaseBlock : \n{\n}\n\n\n\n1. Return a new empty List.\n\nCaseBlock : \n{\nCaseClausesopt\nDefaultClause\nCaseClausesopt\n}\n\n\n\n1. If the first CaseClauses is present, let declarations1 be the LexicallyScopedDeclarations of the first CaseClauses.2. Else, let declarations1 be a new empty List.3. Let declarations2 be LexicallyScopedDeclarations of DefaultClause.4. If the second CaseClauses is present, let declarations3 be the LexicallyScopedDeclarations of the second CaseClauses.5. Else, let declarations3 be a new empty List.6. Return the list-concatenation of declarations1, declarations2, and declarations3.\n\nCaseClauses : \nCaseClauses\nCaseClause\n\n\n\n1. Let declarations1 be LexicallyScopedDeclarations of CaseClauses.2. Let declarations2 be LexicallyScopedDeclarations of CaseClause.3. Return the list-concatenation of declarations1 and declarations2.\n\nCaseClause : \ncase\nExpression\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return the LexicallyScopedDeclarations of StatementList.2. Return a new empty List.\n\nDefaultClause : \ndefault\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return the LexicallyScopedDeclarations of StatementList.2. Return a new empty List.\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Return the LexicallyScopedDeclarations of LabelledItem.\n\nLabelledItem : Statement\n\n\n1. Return a new empty List.\n\nLabelledItem : FunctionDeclaration\n\n\n1. Return \u00ab FunctionDeclaration \u00bb.\n\nFunctionStatementList : [empty]\n\n\n1. Return a new empty List.\n\nFunctionStatementList : StatementList\n\n\n1. Return the TopLevelLexicallyScopedDeclarations of StatementList.\n\nClassStaticBlockStatementList : [empty]\n\n\n1. Return a new empty List.\n\nClassStaticBlockStatementList : StatementList\n\n\n1. Return the TopLevelLexicallyScopedDeclarations of StatementList.\n\nConciseBody : ExpressionBody\n\n\n1. Return a new empty List.\n\nAsyncConciseBody : ExpressionBody\n\n\n1. Return a new empty List.\n\nScript : [empty]\n\n\n1. Return a new empty List.\n\nScriptBody : StatementList\n\n\n1. Return TopLevelLexicallyScopedDeclarations of StatementList.\n\nModule : [empty]\n\n\n1. Return a new empty List.\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let declarations1 be LexicallyScopedDeclarations of ModuleItemList.2. Let declarations2 be LexicallyScopedDeclarations of ModuleItem.3. Return the list-concatenation of declarations1 and declarations2.\n\nModuleItem : ImportDeclaration\n\n\n1. Return a new empty List.\n\nExportDeclaration : \nexport\nExportFromClause\nFromClause\n;\n\n\nexport\nNamedExports\n;\n\n\nexport\nVariableStatement\n\n\n\n1. Return a new empty List.\n\nExportDeclaration : \nexport\nDeclaration\n\n\n\n1. Return a List whose sole element is DeclarationPart of Declaration.\n\nExportDeclaration : \nexport\ndefault\nHoistableDeclaration\n\n\n\n1. Return a List whose sole element is DeclarationPart of HoistableDeclaration.\n\nExportDeclaration : \nexport\ndefault\nClassDeclaration\n\n\n\n1. Return a List whose sole element is ClassDeclaration.\n\nExportDeclaration : \nexport\ndefault\nAssignmentExpression\n;\n\n\n\n1. Return a List whose sole element is this ExportDeclaration.\n\n\n8.1.6 Static Semantics: VarDeclaredNames\nThe syntax-directed operation VarDeclaredNames takes no arguments and returns a List of Strings. It is defined piecewise over the following productions:\n\nStatement : \nEmptyStatement\n\n\nExpressionStatement\n\n\nContinueStatement\n\n\nBreakStatement\n\n\nReturnStatement\n\n\nThrowStatement\n\n\nDebuggerStatement\n\n\n\n1. Return a new empty List.\n\nBlock : \n{\n}\n\n\n\n1. Return a new empty List.\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let names1 be VarDeclaredNames of StatementList.2. Let names2 be VarDeclaredNames of StatementListItem.3. Return the list-concatenation of names1 and names2.\n\nStatementListItem : Declaration\n\n\n1. Return a new empty List.\n\nVariableStatement : \nvar\nVariableDeclarationList\n;\n\n\n\n1. Return BoundNames of VariableDeclarationList.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\nelse\nStatement\n\n\n\n1. Let names1 be VarDeclaredNames of the first Statement.2. Let names2 be VarDeclaredNames of the second Statement.3. Return the list-concatenation of names1 and names2.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\n\n\n\n1. Return the VarDeclaredNames of Statement.\n\nDoWhileStatement : \ndo\nStatement\nwhile\n(\nExpression\n)\n;\n\n\n\n1. Return the VarDeclaredNames of Statement.\n\nWhileStatement : \nwhile\n(\nExpression\n)\nStatement\n\n\n\n1. Return the VarDeclaredNames of Statement.\n\nForStatement : \nfor\n(\nExpressionopt\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Return the VarDeclaredNames of Statement.\n\nForStatement : \nfor\n(\nvar\nVariableDeclarationList\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Let names1 be BoundNames of VariableDeclarationList.2. Let names2 be VarDeclaredNames of Statement.3. Return the list-concatenation of names1 and names2.\n\nForStatement : \nfor\n(\nLexicalDeclaration\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Return the VarDeclaredNames of Statement.\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nin\nExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nin\nExpression\n)\nStatement\n\n\nfor\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Return the VarDeclaredNames of Statement.\n\nForInOfStatement : \nfor\n(\nvar\nForBinding\nin\nExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Let names1 be the BoundNames of ForBinding.2. Let names2 be the VarDeclaredNames of Statement.3. Return the list-concatenation of names1 and names2.\nNote\nThis section is extended by Annex B.3.5.\n\n\nWithStatement : \nwith\n(\nExpression\n)\nStatement\n\n\n\n1. Return the VarDeclaredNames of Statement.\n\nSwitchStatement : \nswitch\n(\nExpression\n)\nCaseBlock\n\n\n\n1. Return the VarDeclaredNames of CaseBlock.\n\nCaseBlock : \n{\n}\n\n\n\n1. Return a new empty List.\n\nCaseBlock : \n{\nCaseClausesopt\nDefaultClause\nCaseClausesopt\n}\n\n\n\n1. If the first CaseClauses is present, let names1 be the VarDeclaredNames of the first CaseClauses.2. Else, let names1 be a new empty List.3. Let names2 be VarDeclaredNames of DefaultClause.4. If the second CaseClauses is present, let names3 be the VarDeclaredNames of the second CaseClauses.5. Else, let names3 be a new empty List.6. Return the list-concatenation of names1, names2, and names3.\n\nCaseClauses : \nCaseClauses\nCaseClause\n\n\n\n1. Let names1 be VarDeclaredNames of CaseClauses.2. Let names2 be VarDeclaredNames of CaseClause.3. Return the list-concatenation of names1 and names2.\n\nCaseClause : \ncase\nExpression\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return the VarDeclaredNames of StatementList.2. Return a new empty List.\n\nDefaultClause : \ndefault\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return the VarDeclaredNames of StatementList.2. Return a new empty List.\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Return the VarDeclaredNames of LabelledItem.\n\nLabelledItem : FunctionDeclaration\n\n\n1. Return a new empty List.\n\nTryStatement : \ntry\nBlock\nCatch\n\n\n\n1. Let names1 be VarDeclaredNames of Block.2. Let names2 be VarDeclaredNames of Catch.3. Return the list-concatenation of names1 and names2.\n\nTryStatement : \ntry\nBlock\nFinally\n\n\n\n1. Let names1 be VarDeclaredNames of Block.2. Let names2 be VarDeclaredNames of Finally.3. Return the list-concatenation of names1 and names2.\n\nTryStatement : \ntry\nBlock\nCatch\nFinally\n\n\n\n1. Let names1 be VarDeclaredNames of Block.2. Let names2 be VarDeclaredNames of Catch.3. Let names3 be VarDeclaredNames of Finally.4. Return the list-concatenation of names1, names2, and names3.\n\nCatch : \ncatch\n(\nCatchParameter\n)\nBlock\n\n\n\n1. Return the VarDeclaredNames of Block.\n\nFunctionStatementList : [empty]\n\n\n1. Return a new empty List.\n\nFunctionStatementList : StatementList\n\n\n1. Return TopLevelVarDeclaredNames of StatementList.\n\nClassStaticBlockStatementList : [empty]\n\n\n1. Return a new empty List.\n\nClassStaticBlockStatementList : StatementList\n\n\n1. Return the TopLevelVarDeclaredNames of StatementList.\n\nConciseBody : ExpressionBody\n\n\n1. Return a new empty List.\n\nAsyncConciseBody : ExpressionBody\n\n\n1. Return a new empty List.\n\nScript : [empty]\n\n\n1. Return a new empty List.\n\nScriptBody : StatementList\n\n\n1. Return TopLevelVarDeclaredNames of StatementList.\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let names1 be VarDeclaredNames of ModuleItemList.2. Let names2 be VarDeclaredNames of ModuleItem.3. Return the list-concatenation of names1 and names2.\n\nModuleItem : ImportDeclaration\n\n\n1. Return a new empty List.\n\nModuleItem : ExportDeclaration\n\n\n1. If ExportDeclaration is export VariableStatement, return BoundNames of ExportDeclaration.2. Return a new empty List.\n\n\n8.1.7 Static Semantics: VarScopedDeclarations\nThe syntax-directed operation VarScopedDeclarations takes no arguments and returns a List of Parse Nodes. It is defined piecewise over the following productions:\n\nStatement : \nEmptyStatement\n\n\nExpressionStatement\n\n\nContinueStatement\n\n\nBreakStatement\n\n\nReturnStatement\n\n\nThrowStatement\n\n\nDebuggerStatement\n\n\n\n1. Return a new empty List.\n\nBlock : \n{\n}\n\n\n\n1. Return a new empty List.\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let declarations1 be VarScopedDeclarations of StatementList.2. Let declarations2 be VarScopedDeclarations of StatementListItem.3. Return the list-concatenation of declarations1 and declarations2.\n\nStatementListItem : Declaration\n\n\n1. Return a new empty List.\n\nVariableDeclarationList : VariableDeclaration\n\n\n1. Return \u00ab VariableDeclaration \u00bb.\n\nVariableDeclarationList : \nVariableDeclarationList\n,\nVariableDeclaration\n\n\n\n1. Let declarations1 be VarScopedDeclarations of VariableDeclarationList.2. Return the list-concatenation of declarations1 and \u00ab VariableDeclaration \u00bb.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\nelse\nStatement\n\n\n\n1. Let declarations1 be VarScopedDeclarations of the first Statement.2. Let declarations2 be VarScopedDeclarations of the second Statement.3. Return the list-concatenation of declarations1 and declarations2.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\n\n\n\n1. Return the VarScopedDeclarations of Statement.\n\nDoWhileStatement : \ndo\nStatement\nwhile\n(\nExpression\n)\n;\n\n\n\n1. Return the VarScopedDeclarations of Statement.\n\nWhileStatement : \nwhile\n(\nExpression\n)\nStatement\n\n\n\n1. Return the VarScopedDeclarations of Statement.\n\nForStatement : \nfor\n(\nExpressionopt\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Return the VarScopedDeclarations of Statement.\n\nForStatement : \nfor\n(\nvar\nVariableDeclarationList\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Let declarations1 be VarScopedDeclarations of VariableDeclarationList.2. Let declarations2 be VarScopedDeclarations of Statement.3. Return the list-concatenation of declarations1 and declarations2.\n\nForStatement : \nfor\n(\nLexicalDeclaration\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Return the VarScopedDeclarations of Statement.\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nin\nExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nin\nExpression\n)\nStatement\n\n\nfor\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Return the VarScopedDeclarations of Statement.\n\nForInOfStatement : \nfor\n(\nvar\nForBinding\nin\nExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Let declarations1 be \u00ab ForBinding \u00bb.2. Let declarations2 be VarScopedDeclarations of Statement.3. Return the list-concatenation of declarations1 and declarations2.\nNote\nThis section is extended by Annex B.3.5.\n\n\nWithStatement : \nwith\n(\nExpression\n)\nStatement\n\n\n\n1. Return the VarScopedDeclarations of Statement.\n\nSwitchStatement : \nswitch\n(\nExpression\n)\nCaseBlock\n\n\n\n1. Return the VarScopedDeclarations of CaseBlock.\n\nCaseBlock : \n{\n}\n\n\n\n1. Return a new empty List.\n\nCaseBlock : \n{\nCaseClausesopt\nDefaultClause\nCaseClausesopt\n}\n\n\n\n1. If the first CaseClauses is present, let declarations1 be the VarScopedDeclarations of the first CaseClauses.2. Else, let declarations1 be a new empty List.3. Let declarations2 be VarScopedDeclarations of DefaultClause.4. If the second CaseClauses is present, let declarations3 be the VarScopedDeclarations of the second CaseClauses.5. Else, let declarations3 be a new empty List.6. Return the list-concatenation of declarations1, declarations2, and declarations3.\n\nCaseClauses : \nCaseClauses\nCaseClause\n\n\n\n1. Let declarations1 be VarScopedDeclarations of CaseClauses.2. Let declarations2 be VarScopedDeclarations of CaseClause.3. Return the list-concatenation of declarations1 and declarations2.\n\nCaseClause : \ncase\nExpression\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return the VarScopedDeclarations of StatementList.2. Return a new empty List.\n\nDefaultClause : \ndefault\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return the VarScopedDeclarations of StatementList.2. Return a new empty List.\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Return the VarScopedDeclarations of LabelledItem.\n\nLabelledItem : FunctionDeclaration\n\n\n1. Return a new empty List.\n\nTryStatement : \ntry\nBlock\nCatch\n\n\n\n1. Let declarations1 be VarScopedDeclarations of Block.2. Let declarations2 be VarScopedDeclarations of Catch.3. Return the list-concatenation of declarations1 and declarations2.\n\nTryStatement : \ntry\nBlock\nFinally\n\n\n\n1. Let declarations1 be VarScopedDeclarations of Block.2. Let declarations2 be VarScopedDeclarations of Finally.3. Return the list-concatenation of declarations1 and declarations2.\n\nTryStatement : \ntry\nBlock\nCatch\nFinally\n\n\n\n1. Let declarations1 be VarScopedDeclarations of Block.2. Let declarations2 be VarScopedDeclarations of Catch.3. Let declarations3 be VarScopedDeclarations of Finally.4. Return the list-concatenation of declarations1, declarations2, and declarations3.\n\nCatch : \ncatch\n(\nCatchParameter\n)\nBlock\n\n\n\n1. Return the VarScopedDeclarations of Block.\n\nFunctionStatementList : [empty]\n\n\n1. Return a new empty List.\n\nFunctionStatementList : StatementList\n\n\n1. Return the TopLevelVarScopedDeclarations of StatementList.\n\nClassStaticBlockStatementList : [empty]\n\n\n1. Return a new empty List.\n\nClassStaticBlockStatementList : StatementList\n\n\n1. Return the TopLevelVarScopedDeclarations of StatementList.\n\nConciseBody : ExpressionBody\n\n\n1. Return a new empty List.\n\nAsyncConciseBody : ExpressionBody\n\n\n1. Return a new empty List.\n\nScript : [empty]\n\n\n1. Return a new empty List.\n\nScriptBody : StatementList\n\n\n1. Return TopLevelVarScopedDeclarations of StatementList.\n\nModule : [empty]\n\n\n1. Return a new empty List.\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let declarations1 be VarScopedDeclarations of ModuleItemList.2. Let declarations2 be VarScopedDeclarations of ModuleItem.3. Return the list-concatenation of declarations1 and declarations2.\n\nModuleItem : ImportDeclaration\n\n\n1. Return a new empty List.\n\nModuleItem : ExportDeclaration\n\n\n1. If ExportDeclaration is export VariableStatement, return VarScopedDeclarations of VariableStatement.2. Return a new empty List.\n\n\n8.1.8 Static Semantics: TopLevelLexicallyDeclaredNames\nThe syntax-directed operation TopLevelLexicallyDeclaredNames takes no arguments and returns a List of Strings. It is defined piecewise over the following productions:\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let names1 be TopLevelLexicallyDeclaredNames of StatementList.2. Let names2 be TopLevelLexicallyDeclaredNames of StatementListItem.3. Return the list-concatenation of names1 and names2.\n\nStatementListItem : Statement\n\n\n1. Return a new empty List.\n\nStatementListItem : Declaration\n\n\n1. If Declaration is \nDeclaration : HoistableDeclaration\n\n , thena. Return a new empty List.2. Return the BoundNames of Declaration.\nNote\nAt the top level of a function, or script, function \ndeclarations are treated like var declarations rather than like lexical \ndeclarations.\n\n\n\n8.1.9 Static Semantics: TopLevelLexicallyScopedDeclarations\nThe syntax-directed operation TopLevelLexicallyScopedDeclarations takes no arguments and returns a List of Parse Nodes. It is defined piecewise over the following productions:\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let declarations1 be TopLevelLexicallyScopedDeclarations of StatementList.2. Let declarations2 be TopLevelLexicallyScopedDeclarations of StatementListItem.3. Return the list-concatenation of declarations1 and declarations2.\n\nStatementListItem : Statement\n\n\n1. Return a new empty List.\n\nStatementListItem : Declaration\n\n\n1. If Declaration is \nDeclaration : HoistableDeclaration\n\n , thena. Return a new empty List.2. Return \u00ab Declaration \u00bb.\n\n\n8.1.10 Static Semantics: TopLevelVarDeclaredNames\nThe syntax-directed operation TopLevelVarDeclaredNames takes no arguments and returns a List of Strings. It is defined piecewise over the following productions:\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let names1 be TopLevelVarDeclaredNames of StatementList.2. Let names2 be TopLevelVarDeclaredNames of StatementListItem.3. Return the list-concatenation of names1 and names2.\n\nStatementListItem : Declaration\n\n\n1. If Declaration is \nDeclaration : HoistableDeclaration\n\n , thena. Return the BoundNames of HoistableDeclaration.2. Return a new empty List.\n\nStatementListItem : Statement\n\n\n1. If Statement is \nStatement : LabelledStatement\n\n , return TopLevelVarDeclaredNames of Statement.2. Return VarDeclaredNames of Statement.\nNote\nAt the top level of a function or script, inner function declarations are treated like var declarations.\n\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Return the TopLevelVarDeclaredNames of LabelledItem.\n\nLabelledItem : Statement\n\n\n1. If Statement is \nStatement : LabelledStatement\n\n , return TopLevelVarDeclaredNames of Statement.2. Return VarDeclaredNames of Statement.\n\nLabelledItem : FunctionDeclaration\n\n\n1. Return BoundNames of FunctionDeclaration.\n\n\n8.1.11 Static Semantics: TopLevelVarScopedDeclarations\nThe syntax-directed operation TopLevelVarScopedDeclarations takes no arguments and returns a List of Parse Nodes. It is defined piecewise over the following productions:\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let declarations1 be TopLevelVarScopedDeclarations of StatementList.2. Let declarations2 be TopLevelVarScopedDeclarations of StatementListItem.3. Return the list-concatenation of declarations1 and declarations2.\n\nStatementListItem : Statement\n\n\n1. If Statement is \nStatement : LabelledStatement\n\n , return TopLevelVarScopedDeclarations of Statement.2. Return VarScopedDeclarations of Statement.\n\nStatementListItem : Declaration\n\n\n1. If Declaration is \nDeclaration : HoistableDeclaration\n\n , thena. Let declaration be DeclarationPart of HoistableDeclaration.b. Return \u00ab declaration \u00bb.2. Return a new empty List.\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Return the TopLevelVarScopedDeclarations of LabelledItem.\n\nLabelledItem : Statement\n\n\n1. If Statement is \nStatement : LabelledStatement\n\n , return TopLevelVarScopedDeclarations of Statement.2. Return VarScopedDeclarations of Statement.\n\nLabelledItem : FunctionDeclaration\n\n\n1. Return \u00ab FunctionDeclaration \u00bb.\n\n\n\n8.2 Labels\n\n8.2.1 Static Semantics: ContainsDuplicateLabels\nThe syntax-directed operation ContainsDuplicateLabels takes argument labelSet and returns a Boolean. It is defined piecewise over the following productions:\n\nStatement : \nVariableStatement\n\n\nEmptyStatement\n\n\nExpressionStatement\n\n\nContinueStatement\n\n\nBreakStatement\n\n\nReturnStatement\n\n\nThrowStatement\n\n\nDebuggerStatement\n\n\n\nBlock : \n{\n}\n\n\n\nStatementListItem : \nDeclaration\n\n\n\n1. Return false.\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let hasDuplicates be ContainsDuplicateLabels of StatementList with argument labelSet.2. If hasDuplicates is true, return true.3. Return ContainsDuplicateLabels of StatementListItem with argument labelSet.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\nelse\nStatement\n\n\n\n1. Let hasDuplicate be ContainsDuplicateLabels of the first Statement with argument labelSet.2. If hasDuplicate is true, return true.3. Return ContainsDuplicateLabels of the second Statement with argument labelSet.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\n\n\n\n1. Return ContainsDuplicateLabels of Statement with argument labelSet.\n\nDoWhileStatement : \ndo\nStatement\nwhile\n(\nExpression\n)\n;\n\n\n\n1. Return ContainsDuplicateLabels of Statement with argument labelSet.\n\nWhileStatement : \nwhile\n(\nExpression\n)\nStatement\n\n\n\n1. Return ContainsDuplicateLabels of Statement with argument labelSet.\n\nForStatement : \nfor\n(\nExpressionopt\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nvar\nVariableDeclarationList\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nLexicalDeclaration\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Return ContainsDuplicateLabels of Statement with argument labelSet.\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nin\nExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nin\nExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nin\nExpression\n)\nStatement\n\n\nfor\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Return ContainsDuplicateLabels of Statement with argument labelSet.\nNote\nThis section is extended by Annex B.3.5.\n\n\nWithStatement : \nwith\n(\nExpression\n)\nStatement\n\n\n\n1. Return ContainsDuplicateLabels of Statement with argument labelSet.\n\nSwitchStatement : \nswitch\n(\nExpression\n)\nCaseBlock\n\n\n\n1. Return ContainsDuplicateLabels of CaseBlock with argument labelSet.\n\nCaseBlock : \n{\n}\n\n\n\n1. Return false.\n\nCaseBlock : \n{\nCaseClausesopt\nDefaultClause\nCaseClausesopt\n}\n\n\n\n1. If the first CaseClauses is present, thena. If ContainsDuplicateLabels of the first CaseClauses with argument labelSet is true, return true.2. If ContainsDuplicateLabels of DefaultClause with argument labelSet is true, return true.3. If the second CaseClauses is not present, return false.4. Return ContainsDuplicateLabels of the second CaseClauses with argument labelSet.\n\nCaseClauses : \nCaseClauses\nCaseClause\n\n\n\n1. Let hasDuplicates be ContainsDuplicateLabels of CaseClauses with argument labelSet.2. If hasDuplicates is true, return true.3. Return ContainsDuplicateLabels of CaseClause with argument labelSet.\n\nCaseClause : \ncase\nExpression\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return ContainsDuplicateLabels of StatementList with argument labelSet.2. Return false.\n\nDefaultClause : \ndefault\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return ContainsDuplicateLabels of StatementList with argument labelSet.2. Return false.\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Let label be the StringValue of LabelIdentifier.2. If label is an element of labelSet, return true.3. Let newLabelSet be the list-concatenation of labelSet and \u00ab label \u00bb.4. Return ContainsDuplicateLabels of LabelledItem with argument newLabelSet.\n\nLabelledItem : FunctionDeclaration\n\n\n1. Return false.\n\nTryStatement : \ntry\nBlock\nCatch\n\n\n\n1. Let hasDuplicates be ContainsDuplicateLabels of Block with argument labelSet.2. If hasDuplicates is true, return true.3. Return ContainsDuplicateLabels of Catch with argument labelSet.\n\nTryStatement : \ntry\nBlock\nFinally\n\n\n\n1. Let hasDuplicates be ContainsDuplicateLabels of Block with argument labelSet.2. If hasDuplicates is true, return true.3. Return ContainsDuplicateLabels of Finally with argument labelSet.\n\nTryStatement : \ntry\nBlock\nCatch\nFinally\n\n\n\n1. If ContainsDuplicateLabels of Block with argument labelSet is true, return true.2. If ContainsDuplicateLabels of Catch with argument labelSet is true, return true.3. Return ContainsDuplicateLabels of Finally with argument labelSet.\n\nCatch : \ncatch\n(\nCatchParameter\n)\nBlock\n\n\n\n1. Return ContainsDuplicateLabels of Block with argument labelSet.\n\nFunctionStatementList : [empty]\n\n\n1. Return false.\n\nClassStaticBlockStatementList : [empty]\n\n\n1. Return false.\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let hasDuplicates be ContainsDuplicateLabels of ModuleItemList with argument labelSet.2. If hasDuplicates is true, return true.3. Return ContainsDuplicateLabels of ModuleItem with argument labelSet.\n\nModuleItem : \nImportDeclaration\n\n\nExportDeclaration\n\n\n\n1. Return false.\n\n\n8.2.2 Static Semantics: ContainsUndefinedBreakTarget\nThe syntax-directed operation ContainsUndefinedBreakTarget takes argument labelSet and returns a Boolean. It is defined piecewise over the following productions:\n\nStatement : \nVariableStatement\n\n\nEmptyStatement\n\n\nExpressionStatement\n\n\nContinueStatement\n\n\nReturnStatement\n\n\nThrowStatement\n\n\nDebuggerStatement\n\n\n\nBlock : \n{\n}\n\n\n\nStatementListItem : \nDeclaration\n\n\n\n1. Return false.\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedBreakTarget of StatementList with argument labelSet.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedBreakTarget of StatementListItem with argument labelSet.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\nelse\nStatement\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedBreakTarget of the first Statement with argument labelSet.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedBreakTarget of the second Statement with argument labelSet.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\n\n\n\n1. Return ContainsUndefinedBreakTarget of Statement with argument labelSet.\n\nDoWhileStatement : \ndo\nStatement\nwhile\n(\nExpression\n)\n;\n\n\n\n1. Return ContainsUndefinedBreakTarget of Statement with argument labelSet.\n\nWhileStatement : \nwhile\n(\nExpression\n)\nStatement\n\n\n\n1. Return ContainsUndefinedBreakTarget of Statement with argument labelSet.\n\nForStatement : \nfor\n(\nExpressionopt\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nvar\nVariableDeclarationList\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nLexicalDeclaration\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Return ContainsUndefinedBreakTarget of Statement with argument labelSet.\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nin\nExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nin\nExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nin\nExpression\n)\nStatement\n\n\nfor\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Return ContainsUndefinedBreakTarget of Statement with argument labelSet.\nNote\nThis section is extended by Annex B.3.5.\n\n\nBreakStatement : \nbreak\n;\n\n\n\n1. Return false.\n\nBreakStatement : \nbreak\nLabelIdentifier\n;\n\n\n\n1. If the StringValue of LabelIdentifier is not an element of labelSet, return true.2. Return false.\n\nWithStatement : \nwith\n(\nExpression\n)\nStatement\n\n\n\n1. Return ContainsUndefinedBreakTarget of Statement with argument labelSet.\n\nSwitchStatement : \nswitch\n(\nExpression\n)\nCaseBlock\n\n\n\n1. Return ContainsUndefinedBreakTarget of CaseBlock with argument labelSet.\n\nCaseBlock : \n{\n}\n\n\n\n1. Return false.\n\nCaseBlock : \n{\nCaseClausesopt\nDefaultClause\nCaseClausesopt\n}\n\n\n\n1. If the first CaseClauses is present, thena. If ContainsUndefinedBreakTarget of the first CaseClauses with argument labelSet is true, return true.2. If ContainsUndefinedBreakTarget of DefaultClause with argument labelSet is true, return true.3. If the second CaseClauses is not present, return false.4. Return ContainsUndefinedBreakTarget of the second CaseClauses with argument labelSet.\n\nCaseClauses : \nCaseClauses\nCaseClause\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedBreakTarget of CaseClauses with argument labelSet.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedBreakTarget of CaseClause with argument labelSet.\n\nCaseClause : \ncase\nExpression\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return ContainsUndefinedBreakTarget of StatementList with argument labelSet.2. Return false.\n\nDefaultClause : \ndefault\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return ContainsUndefinedBreakTarget of StatementList with argument labelSet.2. Return false.\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Let label be the StringValue of LabelIdentifier.2. Let newLabelSet be the list-concatenation of labelSet and \u00ab label \u00bb.3. Return ContainsUndefinedBreakTarget of LabelledItem with argument newLabelSet.\n\nLabelledItem : FunctionDeclaration\n\n\n1. Return false.\n\nTryStatement : \ntry\nBlock\nCatch\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedBreakTarget of Block with argument labelSet.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedBreakTarget of Catch with argument labelSet.\n\nTryStatement : \ntry\nBlock\nFinally\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedBreakTarget of Block with argument labelSet.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedBreakTarget of Finally with argument labelSet.\n\nTryStatement : \ntry\nBlock\nCatch\nFinally\n\n\n\n1. If ContainsUndefinedBreakTarget of Block with argument labelSet is true, return true.2. If ContainsUndefinedBreakTarget of Catch with argument labelSet is true, return true.3. Return ContainsUndefinedBreakTarget of Finally with argument labelSet.\n\nCatch : \ncatch\n(\nCatchParameter\n)\nBlock\n\n\n\n1. Return ContainsUndefinedBreakTarget of Block with argument labelSet.\n\nFunctionStatementList : [empty]\n\n\n1. Return false.\n\nClassStaticBlockStatementList : [empty]\n\n\n1. Return false.\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedBreakTarget of ModuleItemList with argument labelSet.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedBreakTarget of ModuleItem with argument labelSet.\n\nModuleItem : \nImportDeclaration\n\n\nExportDeclaration\n\n\n\n1. Return false.\n\n\n8.2.3 Static Semantics: ContainsUndefinedContinueTarget\nThe syntax-directed operation ContainsUndefinedContinueTarget takes arguments iterationSet and labelSet and returns a Boolean. It is defined piecewise over the following productions:\n\nStatement : \nVariableStatement\n\n\nEmptyStatement\n\n\nExpressionStatement\n\n\nBreakStatement\n\n\nReturnStatement\n\n\nThrowStatement\n\n\nDebuggerStatement\n\n\n\nBlock : \n{\n}\n\n\n\nStatementListItem : \nDeclaration\n\n\n\n1. Return false.\n\nStatement : BlockStatement\n\n\n1. Return ContainsUndefinedContinueTarget of BlockStatement with arguments iterationSet and \u00ab \u00bb.\n\nBreakableStatement : IterationStatement\n\n\n1. Let newIterationSet be the list-concatenation of iterationSet and labelSet.2. Return ContainsUndefinedContinueTarget of IterationStatement with arguments newIterationSet and \u00ab \u00bb.\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedContinueTarget of StatementList with arguments iterationSet and \u00ab \u00bb.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedContinueTarget of StatementListItem with arguments iterationSet and \u00ab \u00bb.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\nelse\nStatement\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedContinueTarget of the first Statement with arguments iterationSet and \u00ab \u00bb.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedContinueTarget of the second Statement with arguments iterationSet and \u00ab \u00bb.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\n\n\n\n1. Return ContainsUndefinedContinueTarget of Statement with arguments iterationSet and \u00ab \u00bb.\n\nDoWhileStatement : \ndo\nStatement\nwhile\n(\nExpression\n)\n;\n\n\n\n1. Return ContainsUndefinedContinueTarget of Statement with arguments iterationSet and \u00ab \u00bb.\n\nWhileStatement : \nwhile\n(\nExpression\n)\nStatement\n\n\n\n1. Return ContainsUndefinedContinueTarget of Statement with arguments iterationSet and \u00ab \u00bb.\n\nForStatement : \nfor\n(\nExpressionopt\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nvar\nVariableDeclarationList\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nLexicalDeclaration\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Return ContainsUndefinedContinueTarget of Statement with arguments iterationSet and \u00ab \u00bb.\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nin\nExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nin\nExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nin\nExpression\n)\nStatement\n\n\nfor\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Return ContainsUndefinedContinueTarget of Statement with arguments iterationSet and \u00ab \u00bb.\nNote\nThis section is extended by Annex B.3.5.\n\n\nContinueStatement : \ncontinue\n;\n\n\n\n1. Return false.\n\nContinueStatement : \ncontinue\nLabelIdentifier\n;\n\n\n\n1. If the StringValue of LabelIdentifier is not an element of iterationSet, return true.2. Return false.\n\nWithStatement : \nwith\n(\nExpression\n)\nStatement\n\n\n\n1. Return ContainsUndefinedContinueTarget of Statement with arguments iterationSet and \u00ab \u00bb.\n\nSwitchStatement : \nswitch\n(\nExpression\n)\nCaseBlock\n\n\n\n1. Return ContainsUndefinedContinueTarget of CaseBlock with arguments iterationSet and \u00ab \u00bb.\n\nCaseBlock : \n{\n}\n\n\n\n1. Return false.\n\nCaseBlock : \n{\nCaseClausesopt\nDefaultClause\nCaseClausesopt\n}\n\n\n\n1. If the first CaseClauses is present, thena. If ContainsUndefinedContinueTarget of the first CaseClauses with arguments iterationSet and \u00ab \u00bb is true, return true.2. If ContainsUndefinedContinueTarget of DefaultClause with arguments iterationSet and \u00ab \u00bb is true, return true.3. If the second CaseClauses is not present, return false.4. Return ContainsUndefinedContinueTarget of the second CaseClauses with arguments iterationSet and \u00ab \u00bb.\n\nCaseClauses : \nCaseClauses\nCaseClause\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedContinueTarget of CaseClauses with arguments iterationSet and \u00ab \u00bb.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedContinueTarget of CaseClause with arguments iterationSet and \u00ab \u00bb.\n\nCaseClause : \ncase\nExpression\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return ContainsUndefinedContinueTarget of StatementList with arguments iterationSet and \u00ab \u00bb.2. Return false.\n\nDefaultClause : \ndefault\n:\nStatementListopt\n\n\n\n1. If the StatementList is present, return ContainsUndefinedContinueTarget of StatementList with arguments iterationSet and \u00ab \u00bb.2. Return false.\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Let label be the StringValue of LabelIdentifier.2. Let newLabelSet be the list-concatenation of labelSet and \u00ab label \u00bb.3. Return ContainsUndefinedContinueTarget of LabelledItem with arguments iterationSet and newLabelSet.\n\nLabelledItem : FunctionDeclaration\n\n\n1. Return false.\n\nTryStatement : \ntry\nBlock\nCatch\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedContinueTarget of Block with arguments iterationSet and \u00ab \u00bb.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedContinueTarget of Catch with arguments iterationSet and \u00ab \u00bb.\n\nTryStatement : \ntry\nBlock\nFinally\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedContinueTarget of Block with arguments iterationSet and \u00ab \u00bb.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedContinueTarget of Finally with arguments iterationSet and \u00ab \u00bb.\n\nTryStatement : \ntry\nBlock\nCatch\nFinally\n\n\n\n1. If ContainsUndefinedContinueTarget of Block with arguments iterationSet and \u00ab \u00bb is true, return true.2. If ContainsUndefinedContinueTarget of Catch with arguments iterationSet and \u00ab \u00bb is true, return true.3. Return ContainsUndefinedContinueTarget of Finally with arguments iterationSet and \u00ab \u00bb.\n\nCatch : \ncatch\n(\nCatchParameter\n)\nBlock\n\n\n\n1. Return ContainsUndefinedContinueTarget of Block with arguments iterationSet and \u00ab \u00bb.\n\nFunctionStatementList : [empty]\n\n\n1. Return false.\n\nClassStaticBlockStatementList : [empty]\n\n\n1. Return false.\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let hasUndefinedLabels be ContainsUndefinedContinueTarget of ModuleItemList with arguments iterationSet and \u00ab \u00bb.2. If hasUndefinedLabels is true, return true.3. Return ContainsUndefinedContinueTarget of ModuleItem with arguments iterationSet and \u00ab \u00bb.\n\nModuleItem : \nImportDeclaration\n\n\nExportDeclaration\n\n\n\n1. Return false.\n\n\n\n8.3 Function Name Inference\n\n8.3.1 Static Semantics: HasName\nThe syntax-directed operation HasName takes no arguments and \nreturns a Boolean. It is defined piecewise over the following \nproductions:\n\nPrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let expr be the ParenthesizedExpression that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. If IsFunctionDefinition of expr is false, return false.3. Return HasName of expr.\n\nFunctionExpression : \nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\nGeneratorExpression : \nfunction\n*\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nAsyncGeneratorExpression : \nasync\nfunction\n*\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncFunctionExpression : \nasync\nfunction\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\nArrowFunction : \nArrowParameters\n=>\nConciseBody\n\n\n\nAsyncArrowFunction : \nasync\nAsyncArrowBindingIdentifier\n=>\nAsyncConciseBody\n\n\nCoverCallExpressionAndAsyncArrowHead\n=>\nAsyncConciseBody\n\n\n\nClassExpression : \nclass\nClassTail\n\n\n\n1. Return false.\n\nFunctionExpression : \nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\nGeneratorExpression : \nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nAsyncGeneratorExpression : \nasync\nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncFunctionExpression : \nasync\nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\nClassExpression : \nclass\nBindingIdentifier\nClassTail\n\n\n\n1. Return true.\n\n\n8.3.2 Static Semantics: IsFunctionDefinition\nThe syntax-directed operation IsFunctionDefinition takes no \narguments and returns a Boolean. It is defined piecewise over the \nfollowing productions:\n\nPrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let expr be the ParenthesizedExpression that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return IsFunctionDefinition of expr.\n\nPrimaryExpression : \nthis\n\n\nIdentifierReference\n\n\nLiteral\n\n\nArrayLiteral\n\n\nObjectLiteral\n\n\nRegularExpressionLiteral\n\n\nTemplateLiteral\n\n\n\nMemberExpression : \nMemberExpression\n[\nExpression\n]\n\n\nMemberExpression\n.\nIdentifierName\n\n\nMemberExpression\nTemplateLiteral\n\n\nSuperProperty\n\n\nMetaProperty\n\n\nnew\nMemberExpression\nArguments\n\n\nMemberExpression\n.\nPrivateIdentifier\n\n\n\nNewExpression : \nnew\nNewExpression\n\n\n\nLeftHandSideExpression : \nCallExpression\n\n\nOptionalExpression\n\n\n\nUpdateExpression : \nLeftHandSideExpression\n++\n\n\nLeftHandSideExpression\n--\n\n\n++\nUnaryExpression\n\n\n--\nUnaryExpression\n\n\n\nUnaryExpression : \ndelete\nUnaryExpression\n\n\nvoid\nUnaryExpression\n\n\ntypeof\nUnaryExpression\n\n\n+\nUnaryExpression\n\n\n-\nUnaryExpression\n\n\n~\nUnaryExpression\n\n\n!\nUnaryExpression\n\n\nAwaitExpression\n\n\n\nExponentiationExpression : \nUpdateExpression\n**\nExponentiationExpression\n\n\n\nMultiplicativeExpression : \nMultiplicativeExpression\nMultiplicativeOperator\nExponentiationExpression\n\n\n\nAdditiveExpression : \nAdditiveExpression\n+\nMultiplicativeExpression\n\n\nAdditiveExpression\n-\nMultiplicativeExpression\n\n\n\nShiftExpression : \nShiftExpression\n<<\nAdditiveExpression\n\n\nShiftExpression\n>>\nAdditiveExpression\n\n\nShiftExpression\n>>>\nAdditiveExpression\n\n\n\nRelationalExpression : \nRelationalExpression\n<\nShiftExpression\n\n\nRelationalExpression\n>\nShiftExpression\n\n\nRelationalExpression\n<=\nShiftExpression\n\n\nRelationalExpression\n>=\nShiftExpression\n\n\nRelationalExpression\ninstanceof\nShiftExpression\n\n\nRelationalExpression\nin\nShiftExpression\n\n\nPrivateIdentifier\nin\nShiftExpression\n\n\n\nEqualityExpression : \nEqualityExpression\n==\nRelationalExpression\n\n\nEqualityExpression\n!=\nRelationalExpression\n\n\nEqualityExpression\n===\nRelationalExpression\n\n\nEqualityExpression\n!==\nRelationalExpression\n\n\n\nBitwiseANDExpression : \nBitwiseANDExpression\n&\nEqualityExpression\n\n\n\nBitwiseXORExpression : \nBitwiseXORExpression\n^\nBitwiseANDExpression\n\n\n\nBitwiseORExpression : \nBitwiseORExpression\n|\nBitwiseXORExpression\n\n\n\nLogicalANDExpression : \nLogicalANDExpression\n&&\nBitwiseORExpression\n\n\n\nLogicalORExpression : \nLogicalORExpression\n||\nLogicalANDExpression\n\n\n\nCoalesceExpression : \nCoalesceExpressionHead\n??\nBitwiseORExpression\n\n\n\nConditionalExpression : \nShortCircuitExpression\n?\nAssignmentExpression\n:\nAssignmentExpression\n\n\n\nAssignmentExpression : \nYieldExpression\n\n\nLeftHandSideExpression\n=\nAssignmentExpression\n\n\nLeftHandSideExpression\nAssignmentOperator\nAssignmentExpression\n\n\nLeftHandSideExpression\n&&=\nAssignmentExpression\n\n\nLeftHandSideExpression\n||=\nAssignmentExpression\n\n\nLeftHandSideExpression\n??=\nAssignmentExpression\n\n\n\nExpression : \nExpression\n,\nAssignmentExpression\n\n\n\n1. Return false.\n\nAssignmentExpression : \nArrowFunction\n\n\nAsyncArrowFunction\n\n\n\nFunctionExpression : \nfunction\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\nGeneratorExpression : \nfunction\n*\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nAsyncGeneratorExpression : \nasync\nfunction\n*\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncFunctionExpression : \nasync\nfunction\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\nClassExpression : \nclass\nBindingIdentifieropt\nClassTail\n\n\n\n1. Return true.\n\n\n8.3.3 Static Semantics: IsAnonymousFunctionDefinition ( expr )\nThe abstract operation IsAnonymousFunctionDefinition takes argument expr (an AssignmentExpression Parse Node or an Initializer Parse Node)\n and returns a Boolean. It determines if its argument is a function \ndefinition that does not bind a name. It performs the following steps \nwhen called:\n1. If IsFunctionDefinition of expr is false, return false.2. Let hasName be HasName of expr.3. If hasName is true, return false.4. Return true.\n\n\n8.3.4 Static Semantics: IsIdentifierRef\nThe syntax-directed operation IsIdentifierRef takes no \narguments and returns a Boolean. It is defined piecewise over the \nfollowing productions:\n\nPrimaryExpression : IdentifierReference\n\n\n1. Return true.\n\nPrimaryExpression : \nthis\n\n\nLiteral\n\n\nArrayLiteral\n\n\nObjectLiteral\n\n\nFunctionExpression\n\n\nClassExpression\n\n\nGeneratorExpression\n\n\nAsyncFunctionExpression\n\n\nAsyncGeneratorExpression\n\n\nRegularExpressionLiteral\n\n\nTemplateLiteral\n\n\nCoverParenthesizedExpressionAndArrowParameterList\n\n\n\nMemberExpression : \nMemberExpression\n[\nExpression\n]\n\n\nMemberExpression\n.\nIdentifierName\n\n\nMemberExpression\nTemplateLiteral\n\n\nSuperProperty\n\n\nMetaProperty\n\n\nnew\nMemberExpression\nArguments\n\n\nMemberExpression\n.\nPrivateIdentifier\n\n\n\nNewExpression : \nnew\nNewExpression\n\n\n\nLeftHandSideExpression : \nCallExpression\n\n\nOptionalExpression\n\n\n\n1. Return false.\n\n\n8.3.5 Runtime Semantics: NamedEvaluation\nThe syntax-directed operation NamedEvaluation takes argument name and returns either a normal completion containing a function object or an abrupt completion. It is defined piecewise over the following productions:\n\nPrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let expr be the ParenthesizedExpression that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return ?\u00a0NamedEvaluation of expr with argument name.\n\nParenthesizedExpression : \n(\nExpression\n)\n\n\n\n1. Assert: IsAnonymousFunctionDefinition(Expression) is true.2. Return ?\u00a0NamedEvaluation of Expression with argument name.\n\nFunctionExpression : \nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Return InstantiateOrdinaryFunctionExpression of FunctionExpression with argument name.\n\nGeneratorExpression : \nfunction\n*\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Return InstantiateGeneratorFunctionExpression of GeneratorExpression with argument name.\n\nAsyncGeneratorExpression : \nasync\nfunction\n*\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Return InstantiateAsyncGeneratorFunctionExpression of AsyncGeneratorExpression with argument name.\n\nAsyncFunctionExpression : \nasync\nfunction\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return InstantiateAsyncFunctionExpression of AsyncFunctionExpression with argument name.\n\nArrowFunction : \nArrowParameters\n=>\nConciseBody\n\n\n\n1. Return InstantiateArrowFunctionExpression of ArrowFunction with argument name.\n\nAsyncArrowFunction : \nasync\nAsyncArrowBindingIdentifier\n=>\nAsyncConciseBody\n\n\nCoverCallExpressionAndAsyncArrowHead\n=>\nAsyncConciseBody\n\n\n\n1. Return InstantiateAsyncArrowFunctionExpression of AsyncArrowFunction with argument name.\n\nClassExpression : \nclass\nClassTail\n\n\n\n1. Let value be ?\u00a0ClassDefinitionEvaluation of ClassTail with arguments undefined and name.2. Set value.[[SourceText]] to the source text matched by ClassExpression.3. Return value.\n\n\n\n8.4 Contains\n\n8.4.1 Static Semantics: Contains\nThe syntax-directed operation Contains takes argument symbol and returns a Boolean.\nEvery grammar production alternative in this specification \nwhich is not listed below implicitly has the following default \ndefinition of Contains:\n1. For each child node child of this Parse Node, doa. If child is an instance of symbol, return true.b. If child is an instance of a nonterminal, theni. Let contained be the result of child Contains symbol.ii. If contained is true, return true.2. Return false.\n\nFunctionDeclaration : \nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\nFunctionExpression : \nfunction\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\nGeneratorDeclaration : \nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\nfunction\n*\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nGeneratorExpression : \nfunction\n*\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nAsyncGeneratorDeclaration : \nasync\nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\nasync\nfunction\n*\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorExpression : \nasync\nfunction\n*\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncFunctionDeclaration : \nasync\nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\nasync\nfunction\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncFunctionExpression : \nasync\nfunction\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return false.\nNote 1\nStatic semantic rules that depend upon substructure generally do not look into function definitions.\n\n\nClassTail : \nClassHeritageopt\n{\nClassBody\n}\n\n\n\n1. If symbol is ClassBody, return true.2. If symbol is ClassHeritage, thena. If ClassHeritage is present, return true; otherwise return false.3. If ClassHeritage is present, thena. If ClassHeritage Contains symbol is true, return true.4. Return the result of ComputedPropertyContains of ClassBody with argument symbol.\nNote 2\nStatic semantic rules that depend upon substructure generally do not look into class bodies except for PropertyNames.\n\n\nClassStaticBlock : \nstatic\n{\nClassStaticBlockBody\n}\n\n\n\n1. Return false.\nNote 3\nStatic semantic rules that depend upon substructure generally do not look into static initialization blocks.\n\n\nArrowFunction : \nArrowParameters\n=>\nConciseBody\n\n\n\n1. If symbol is not one of NewTarget, SuperProperty, SuperCall, super or this, return false.2. If ArrowParameters Contains symbol is true, return true.3. Return ConciseBody Contains symbol.\n\nArrowParameters : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let formals be the ArrowFormalParameters that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return formals Contains symbol.\n\nAsyncArrowFunction : \nasync\nAsyncArrowBindingIdentifier\n=>\nAsyncConciseBody\n\n\n\n1. If symbol is not one of NewTarget, SuperProperty, SuperCall, super, or this, return false.2. Return AsyncConciseBody Contains symbol.\n\nAsyncArrowFunction : \nCoverCallExpressionAndAsyncArrowHead\n=>\nAsyncConciseBody\n\n\n\n1. If symbol is not one of NewTarget, SuperProperty, SuperCall, super, or this, return false.2. Let head be the AsyncArrowHead that is covered by CoverCallExpressionAndAsyncArrowHead.3. If head Contains symbol is true, return true.4. Return AsyncConciseBody Contains symbol.\nNote 4\nContains is used to detect new.target, this, and super usage within an ArrowFunction or AsyncArrowFunction.\n\n\nPropertyDefinition : MethodDefinition\n\n\n1. If symbol is MethodDefinition, return true.2. Return the result of ComputedPropertyContains of MethodDefinition with argument symbol.\n\nLiteralPropertyName : IdentifierName\n\n\n1. Return false.\n\nMemberExpression : \nMemberExpression\n.\nIdentifierName\n\n\n\n1. If MemberExpression Contains symbol is true, return true.2. Return false.\n\nSuperProperty : \nsuper\n.\nIdentifierName\n\n\n\n1. If symbol is the ReservedWord super, return true.2. Return false.\n\nCallExpression : \nCallExpression\n.\nIdentifierName\n\n\n\n1. If CallExpression Contains symbol is true, return true.2. Return false.\n\nOptionalChain : \n?.\nIdentifierName\n\n\n\n1. Return false.\n\nOptionalChain : \nOptionalChain\n.\nIdentifierName\n\n\n\n1. If OptionalChain Contains symbol is true, return true.2. Return false.\n\n\n8.4.2 Static Semantics: ComputedPropertyContains\nThe syntax-directed operation ComputedPropertyContains takes argument symbol and returns a Boolean. It is defined piecewise over the following productions:\n\nClassElementName : PrivateIdentifier\n\n\nPropertyName : LiteralPropertyName\n\n\n1. Return false.\n\nPropertyName : ComputedPropertyName\n\n\n1. Return the result of ComputedPropertyName Contains symbol.\n\nMethodDefinition : \nClassElementName\n(\nUniqueFormalParameters\n)\n{\nFunctionBody\n}\n\n\nget\nClassElementName\n(\n)\n{\nFunctionBody\n}\n\n\nset\nClassElementName\n(\nPropertySetParameterList\n)\n{\nFunctionBody\n}\n\n\n\n1. Return the result of ComputedPropertyContains of ClassElementName with argument symbol.\n\nGeneratorMethod : \n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Return the result of ComputedPropertyContains of ClassElementName with argument symbol.\n\nAsyncGeneratorMethod : \nasync\n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Return the result of ComputedPropertyContains of ClassElementName with argument symbol.\n\nClassElementList : \nClassElementList\nClassElement\n\n\n\n1. Let inList be ComputedPropertyContains of ClassElementList with argument symbol.2. If inList is true, return true.3. Return the result of ComputedPropertyContains of ClassElement with argument symbol.\n\nClassElement : ClassStaticBlock\n\n\n1. Return false.\n\nClassElement : ;\n\n\n1. Return false.\n\nAsyncMethod : \nasync\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return the result of ComputedPropertyContains of ClassElementName with argument symbol.\n\nFieldDefinition : \nClassElementName\nInitializeropt\n\n\n\n1. Return the result of ComputedPropertyContains of ClassElementName with argument symbol.\n\n\n\n8.5 Miscellaneous\nThese operations are used in multiple places throughout the specification.\n\n8.5.1 Runtime Semantics: InstantiateFunctionObject\nThe syntax-directed operation InstantiateFunctionObject takes arguments env and privateEnv and returns a function object. It is defined piecewise over the following productions:\n\nFunctionDeclaration : \nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Return InstantiateOrdinaryFunctionObject of FunctionDeclaration with arguments env and privateEnv.\n\nGeneratorDeclaration : \nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\nfunction\n*\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Return InstantiateGeneratorFunctionObject of GeneratorDeclaration with arguments env and privateEnv.\n\nAsyncGeneratorDeclaration : \nasync\nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\nasync\nfunction\n*\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Return InstantiateAsyncGeneratorFunctionObject of AsyncGeneratorDeclaration with arguments env and privateEnv.\n\nAsyncFunctionDeclaration : \nasync\nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\nasync\nfunction\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return InstantiateAsyncFunctionObject of AsyncFunctionDeclaration with arguments env and privateEnv.\n\n\n8.5.2 Runtime Semantics: BindingInitialization\nThe syntax-directed operation BindingInitialization takes arguments value and environment and returns either a normal completion containing unused or an abrupt completion.\nNote\nundefined is passed for environment to indicate that a PutValue operation should be used to assign the initialization value. This is the case for var statements and formal parameter lists of some non-strict functions (See 10.2.11). In those cases a lexical binding is hoisted and preinitialized prior to evaluation of its initializer.\n\nIt is defined piecewise over the following productions:\n\nBindingIdentifier : Identifier\n\n\n1. Let name be StringValue of Identifier.2. Return ?\u00a0InitializeBoundName(name, value, environment).\n\nBindingIdentifier : yield\n\n\n1. Return ?\u00a0InitializeBoundName(\"yield\", value, environment).\n\nBindingIdentifier : await\n\n\n1. Return ?\u00a0InitializeBoundName(\"await\", value, environment).\n\nBindingPattern : ObjectBindingPattern\n\n\n1. Perform ?\u00a0RequireObjectCoercible(value).2. Return ?\u00a0BindingInitialization of ObjectBindingPattern with arguments value and environment.\n\nBindingPattern : ArrayBindingPattern\n\n\n1. Let iteratorRecord be ?\u00a0GetIterator(value).2. Let result be Completion(IteratorBindingInitialization of ArrayBindingPattern with arguments iteratorRecord and environment).3. If iteratorRecord.[[Done]] is false, return ?\u00a0IteratorClose(iteratorRecord, result).4. Return ?\u00a0result.\n\nObjectBindingPattern : \n{\n}\n\n\n\n1. Return unused.\n\nObjectBindingPattern : \n{\nBindingPropertyList\n}\n\n\n{\nBindingPropertyList\n,\n}\n\n\n\n1. Perform ?\u00a0PropertyBindingInitialization of BindingPropertyList with arguments value and environment.2. Return unused.\n\nObjectBindingPattern : \n{\nBindingRestProperty\n}\n\n\n\n1. Let excludedNames be a new empty List.2. Return ?\u00a0RestBindingInitialization of BindingRestProperty with arguments value, environment, and excludedNames.\n\nObjectBindingPattern : \n{\nBindingPropertyList\n,\nBindingRestProperty\n}\n\n\n\n1. Let excludedNames be ?\u00a0PropertyBindingInitialization of BindingPropertyList with arguments value and environment.2. Return ?\u00a0RestBindingInitialization of BindingRestProperty with arguments value, environment, and excludedNames.\n\n8.5.2.1 InitializeBoundName ( name, value, environment )\nThe abstract operation InitializeBoundName takes arguments name (a String), value, and environment and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. If environment is not undefined, thena. Perform !\u00a0environment.InitializeBinding(name, value).b. Return unused.2. Else,a. Let lhs be ?\u00a0ResolveBinding(name).b. Return ?\u00a0PutValue(lhs, value).\n\n\n\n8.5.3 Runtime Semantics: IteratorBindingInitialization\nThe syntax-directed operation IteratorBindingInitialization takes arguments iteratorRecord and environment and returns either a normal completion containing unused or an abrupt completion.\nNote\nWhen undefined is passed for environment it indicates that a PutValue operation should be used to assign the initialization value. This is the case for formal parameter lists of non-strict functions.\n In that case the formal parameter bindings are preinitialized in order \nto deal with the possibility of multiple parameters with the same name.\n\nIt is defined piecewise over the following productions:\n\nArrayBindingPattern : \n[\n]\n\n\n\n1. Return unused.\n\nArrayBindingPattern : \n[\nElision\n]\n\n\n\n1. Return ?\u00a0IteratorDestructuringAssignmentEvaluation of Elision with argument iteratorRecord.\n\nArrayBindingPattern : \n[\nElisionopt\nBindingRestElement\n]\n\n\n\n1. If Elision is present, thena. Perform ?\u00a0IteratorDestructuringAssignmentEvaluation of Elision with argument iteratorRecord.2. Return ?\u00a0IteratorBindingInitialization of BindingRestElement with arguments iteratorRecord and environment.\n\nArrayBindingPattern : \n[\nBindingElementList\n,\nElision\n]\n\n\n\n1. Perform ?\u00a0IteratorBindingInitialization of BindingElementList with arguments iteratorRecord and environment.2. Return ?\u00a0IteratorDestructuringAssignmentEvaluation of Elision with argument iteratorRecord.\n\nArrayBindingPattern : \n[\nBindingElementList\n,\nElisionopt\nBindingRestElement\n]\n\n\n\n1. Perform ?\u00a0IteratorBindingInitialization of BindingElementList with arguments iteratorRecord and environment.2. If Elision is present, thena. Perform ?\u00a0IteratorDestructuringAssignmentEvaluation of Elision with argument iteratorRecord.3. Return ?\u00a0IteratorBindingInitialization of BindingRestElement with arguments iteratorRecord and environment.\n\nBindingElementList : \nBindingElementList\n,\nBindingElisionElement\n\n\n\n1. Perform ?\u00a0IteratorBindingInitialization of BindingElementList with arguments iteratorRecord and environment.2. Return ?\u00a0IteratorBindingInitialization of BindingElisionElement with arguments iteratorRecord and environment.\n\nBindingElisionElement : \nElision\nBindingElement\n\n\n\n1. Perform ?\u00a0IteratorDestructuringAssignmentEvaluation of Elision with argument iteratorRecord.2. Return ?\u00a0IteratorBindingInitialization of BindingElement with arguments iteratorRecord and environment.\n\nSingleNameBinding : \nBindingIdentifier\nInitializeropt\n\n\n\n1. Let bindingId be StringValue of BindingIdentifier.2. Let lhs be ?\u00a0ResolveBinding(bindingId, environment).3. Let v be undefined.4. If iteratorRecord.[[Done]] is false, thena. Let next be Completion(IteratorStep(iteratorRecord)).b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(next).d. If next is false, set iteratorRecord.[[Done]] to true.e. Else,i. Set v to Completion(IteratorValue(next)).ii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.iii. ReturnIfAbrupt(v).5. If Initializer is present and v is undefined, thena. If IsAnonymousFunctionDefinition(Initializer) is true, theni. Set v to ?\u00a0NamedEvaluation of Initializer with argument bindingId.b. Else,i. Let defaultValue be the result of evaluating Initializer.ii. Set v to ?\u00a0GetValue(defaultValue).6. If environment is undefined, return ?\u00a0PutValue(lhs, v).7. Return ?\u00a0InitializeReferencedBinding(lhs, v).\n\nBindingElement : \nBindingPattern\nInitializeropt\n\n\n\n1. Let v be undefined.2. If iteratorRecord.[[Done]] is false, thena. Let next be Completion(IteratorStep(iteratorRecord)).b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(next).d. If next is false, set iteratorRecord.[[Done]] to true.e. Else,i. Set v to Completion(IteratorValue(next)).ii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.iii. ReturnIfAbrupt(v).3. If Initializer is present and v is undefined, thena. Let defaultValue be the result of evaluating Initializer.b. Set v to ?\u00a0GetValue(defaultValue).4. Return ?\u00a0BindingInitialization of BindingPattern with arguments v and environment.\n\nBindingRestElement : \n...\nBindingIdentifier\n\n\n\n1. Let lhs be ?\u00a0ResolveBinding(StringValue of BindingIdentifier, environment).2. Let A be !\u00a0ArrayCreate(0).3. Let n be 0.4. Repeat,a. If iteratorRecord.[[Done]] is false, theni. Let next be Completion(IteratorStep(iteratorRecord)).ii. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.iii. ReturnIfAbrupt(next).iv. If next is false, set iteratorRecord.[[Done]] to true.b. If iteratorRecord.[[Done]] is true, theni. If environment is undefined, return ?\u00a0PutValue(lhs, A).ii. Return ?\u00a0InitializeReferencedBinding(lhs, A).c. Let nextValue be Completion(IteratorValue(next)).d. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.e. ReturnIfAbrupt(nextValue).f. Perform !\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(n)), nextValue).g. Set n to n + 1.\n\nBindingRestElement : \n...\nBindingPattern\n\n\n\n1. Let A be !\u00a0ArrayCreate(0).2. Let n be 0.3. Repeat,a. If iteratorRecord.[[Done]] is false, theni. Let next be Completion(IteratorStep(iteratorRecord)).ii. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.iii. ReturnIfAbrupt(next).iv. If next is false, set iteratorRecord.[[Done]] to true.b. If iteratorRecord.[[Done]] is true, theni. Return ?\u00a0BindingInitialization of BindingPattern with arguments A and environment.c. Let nextValue be Completion(IteratorValue(next)).d. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.e. ReturnIfAbrupt(nextValue).f. Perform !\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(n)), nextValue).g. Set n to n + 1.\n\nFormalParameters : [empty]\n\n\n1. Return unused.\n\nFormalParameters : \nFormalParameterList\n,\nFunctionRestParameter\n\n\n\n1. Perform ?\u00a0IteratorBindingInitialization of FormalParameterList with arguments iteratorRecord and environment.2. Return ?\u00a0IteratorBindingInitialization of FunctionRestParameter with arguments iteratorRecord and environment.\n\nFormalParameterList : \nFormalParameterList\n,\nFormalParameter\n\n\n\n1. Perform ?\u00a0IteratorBindingInitialization of FormalParameterList with arguments iteratorRecord and environment.2. Return ?\u00a0IteratorBindingInitialization of FormalParameter with arguments iteratorRecord and environment.\n\nArrowParameters : BindingIdentifier\n\n\n1. Let v be undefined.2. Assert: iteratorRecord.[[Done]] is false.3. Let next be Completion(IteratorStep(iteratorRecord)).4. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.5. ReturnIfAbrupt(next).6. If next is false, set iteratorRecord.[[Done]] to true.7. Else,a. Set v to Completion(IteratorValue(next)).b. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(v).8. Return ?\u00a0BindingInitialization of BindingIdentifier with arguments v and environment.\n\nArrowParameters : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let formals be the ArrowFormalParameters that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return ?\u00a0IteratorBindingInitialization of formals with arguments iteratorRecord and environment.\n\nAsyncArrowBindingIdentifier : BindingIdentifier\n\n\n1. Let v be undefined.2. Assert: iteratorRecord.[[Done]] is false.3. Let next be Completion(IteratorStep(iteratorRecord)).4. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.5. ReturnIfAbrupt(next).6. If next is false, set iteratorRecord.[[Done]] to true.7. Else,a. Set v to Completion(IteratorValue(next)).b. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(v).8. Return ?\u00a0BindingInitialization of BindingIdentifier with arguments v and environment.\n\n\n8.5.4 Static Semantics: AssignmentTargetType\nThe syntax-directed operation AssignmentTargetType takes no arguments and returns simple or invalid. It is defined piecewise over the following productions:\n\nIdentifierReference : Identifier\n\n\n1. If this IdentifierReference is contained in strict mode code and StringValue of Identifier is \"eval\" or \"arguments\", return invalid.2. Return simple.\n\nIdentifierReference : \nyield\n\n\nawait\n\n\n\nCallExpression : \nCallExpression\n[\nExpression\n]\n\n\nCallExpression\n.\nIdentifierName\n\n\nCallExpression\n.\nPrivateIdentifier\n\n\n\nMemberExpression : \nMemberExpression\n[\nExpression\n]\n\n\nMemberExpression\n.\nIdentifierName\n\n\nSuperProperty\n\n\nMemberExpression\n.\nPrivateIdentifier\n\n\n\n1. Return simple.\n\nPrimaryExpression : \nCoverParenthesizedExpressionAndArrowParameterList\n\n\n\n1. Let expr be the ParenthesizedExpression that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return AssignmentTargetType of expr.\n\nPrimaryExpression : \nthis\n\n\nLiteral\n\n\nArrayLiteral\n\n\nObjectLiteral\n\n\nFunctionExpression\n\n\nClassExpression\n\n\nGeneratorExpression\n\n\nAsyncFunctionExpression\n\n\nAsyncGeneratorExpression\n\n\nRegularExpressionLiteral\n\n\nTemplateLiteral\n\n\n\nCallExpression : \nCoverCallExpressionAndAsyncArrowHead\n\n\nSuperCall\n\n\nImportCall\n\n\nCallExpression\nArguments\n\n\nCallExpression\nTemplateLiteral\n\n\n\nNewExpression : \nnew\nNewExpression\n\n\n\nMemberExpression : \nMemberExpression\nTemplateLiteral\n\n\nnew\nMemberExpression\nArguments\n\n\n\nNewTarget : \nnew\n.\ntarget\n\n\n\nImportMeta : \nimport\n.\nmeta\n\n\n\nLeftHandSideExpression : \nOptionalExpression\n\n\n\nUpdateExpression : \nLeftHandSideExpression\n++\n\n\nLeftHandSideExpression\n--\n\n\n++\nUnaryExpression\n\n\n--\nUnaryExpression\n\n\n\nUnaryExpression : \ndelete\nUnaryExpression\n\n\nvoid\nUnaryExpression\n\n\ntypeof\nUnaryExpression\n\n\n+\nUnaryExpression\n\n\n-\nUnaryExpression\n\n\n~\nUnaryExpression\n\n\n!\nUnaryExpression\n\n\nAwaitExpression\n\n\n\nExponentiationExpression : \nUpdateExpression\n**\nExponentiationExpression\n\n\n\nMultiplicativeExpression : \nMultiplicativeExpression\nMultiplicativeOperator\nExponentiationExpression\n\n\n\nAdditiveExpression : \nAdditiveExpression\n+\nMultiplicativeExpression\n\n\nAdditiveExpression\n-\nMultiplicativeExpression\n\n\n\nShiftExpression : \nShiftExpression\n<<\nAdditiveExpression\n\n\nShiftExpression\n>>\nAdditiveExpression\n\n\nShiftExpression\n>>>\nAdditiveExpression\n\n\n\nRelationalExpression : \nRelationalExpression\n<\nShiftExpression\n\n\nRelationalExpression\n>\nShiftExpression\n\n\nRelationalExpression\n<=\nShiftExpression\n\n\nRelationalExpression\n>=\nShiftExpression\n\n\nRelationalExpression\ninstanceof\nShiftExpression\n\n\nRelationalExpression\nin\nShiftExpression\n\n\nPrivateIdentifier\nin\nShiftExpression\n\n\n\nEqualityExpression : \nEqualityExpression\n==\nRelationalExpression\n\n\nEqualityExpression\n!=\nRelationalExpression\n\n\nEqualityExpression\n===\nRelationalExpression\n\n\nEqualityExpression\n!==\nRelationalExpression\n\n\n\nBitwiseANDExpression : \nBitwiseANDExpression\n&\nEqualityExpression\n\n\n\nBitwiseXORExpression : \nBitwiseXORExpression\n^\nBitwiseANDExpression\n\n\n\nBitwiseORExpression : \nBitwiseORExpression\n|\nBitwiseXORExpression\n\n\n\nLogicalANDExpression : \nLogicalANDExpression\n&&\nBitwiseORExpression\n\n\n\nLogicalORExpression : \nLogicalORExpression\n||\nLogicalANDExpression\n\n\n\nCoalesceExpression : \nCoalesceExpressionHead\n??\nBitwiseORExpression\n\n\n\nConditionalExpression : \nShortCircuitExpression\n?\nAssignmentExpression\n:\nAssignmentExpression\n\n\n\nAssignmentExpression : \nYieldExpression\n\n\nArrowFunction\n\n\nAsyncArrowFunction\n\n\nLeftHandSideExpression\n=\nAssignmentExpression\n\n\nLeftHandSideExpression\nAssignmentOperator\nAssignmentExpression\n\n\nLeftHandSideExpression\n&&=\nAssignmentExpression\n\n\nLeftHandSideExpression\n||=\nAssignmentExpression\n\n\nLeftHandSideExpression\n??=\nAssignmentExpression\n\n\n\nExpression : \nExpression\n,\nAssignmentExpression\n\n\n\n1. Return invalid.\n\n\n8.5.5 Static Semantics: PropName\nThe syntax-directed operation PropName takes no arguments and returns a String or empty. It is defined piecewise over the following productions:\n\nPropertyDefinition : IdentifierReference\n\n\n1. Return StringValue of IdentifierReference.\n\nPropertyDefinition : \n...\nAssignmentExpression\n\n\n\n1. Return empty.\n\nPropertyDefinition : \nPropertyName\n:\nAssignmentExpression\n\n\n\n1. Return PropName of PropertyName.\n\nLiteralPropertyName : IdentifierName\n\n\n1. Return StringValue of IdentifierName.\n\nLiteralPropertyName : StringLiteral\n\n\n1. Return the SV of StringLiteral.\n\nLiteralPropertyName : NumericLiteral\n\n\n1. Let nbr be the NumericValue of NumericLiteral.2. Return !\u00a0ToString(nbr).\n\nComputedPropertyName : \n[\nAssignmentExpression\n]\n\n\n\n1. Return empty.\n\nMethodDefinition : \nClassElementName\n(\nUniqueFormalParameters\n)\n{\nFunctionBody\n}\n\n\nget\nClassElementName\n(\n)\n{\nFunctionBody\n}\n\n\nset\nClassElementName\n(\nPropertySetParameterList\n)\n{\nFunctionBody\n}\n\n\n\n1. Return PropName of ClassElementName.\n\nGeneratorMethod : \n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Return PropName of ClassElementName.\n\nAsyncGeneratorMethod : \nasync\n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Return PropName of ClassElementName.\n\nClassElement : ClassStaticBlock\n\n\n1. Return empty.\n\nClassElement : ;\n\n\n1. Return empty.\n\nAsyncMethod : \nasync\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return PropName of ClassElementName.\n\nFieldDefinition : \nClassElementName\nInitializeropt\n\n\n\n1. Return PropName of ClassElementName.\n\nClassElementName : PrivateIdentifier\n\n\n1. Return empty.\n\n\n\n\n9 Executable Code and Execution Contexts\n\n9.1 Environment Records\nEnvironment Record is a specification type used to define the association of Identifiers\n to specific variables and functions, based upon the lexical nesting \nstructure of ECMAScript code. Usually an Environment Record is \nassociated with some specific syntactic structure of ECMAScript code \nsuch as a FunctionDeclaration, a BlockStatement, or a Catch clause of a TryStatement.\n Each time such code is evaluated, a new Environment Record is created \nto record the identifier bindings that are created by that code.\nEvery Environment Record has an [[OuterEnv]] field, which is either null\n or a reference to an outer Environment Record. This is used to model \nthe logical nesting of Environment Record values. The outer reference of\n an (inner) Environment Record is a reference to the Environment Record \nthat logically surrounds the inner Environment Record. An outer \nEnvironment Record may, of course, have its own outer Environment \nRecord. An Environment Record may serve as the outer environment for \nmultiple inner Environment Records. For example, if a FunctionDeclaration contains two nested FunctionDeclarations\n then the Environment Records of each of the nested functions will have \nas their outer Environment Record the Environment Record of the current \nevaluation of the surrounding function.\nEnvironment Records are purely specification mechanisms and need \nnot correspond to any specific artefact of an ECMAScript implementation.\n It is impossible for an ECMAScript program to directly access or \nmanipulate such values.\n\n9.1.1 The Environment Record Type Hierarchy\nEnvironment Records can be thought of as existing in a simple object-oriented hierarchy where Environment Record is an abstract class with three concrete subclasses: declarative Environment Record, object Environment Record, and global Environment Record. Function Environment Records and module Environment Records are subclasses of declarative Environment Record.\n\n\nEnvironment Record (abstract)\n\n\nA declarative Environment Record is used to define the effect of ECMAScript language syntactic elements such as FunctionDeclarations, VariableDeclarations, and Catch clauses that directly associate identifier bindings with ECMAScript language values.\n\n\nA function Environment Record corresponds to the invocation of an ECMAScript function object, and contains bindings for the top-level declarations within that function. It may establish a new this binding. It also captures the state necessary to support super method invocations.\n\n\nA module Environment Record contains the bindings for the top-level declarations of a Module. It also contains the bindings that are explicitly imported by the Module. Its [[OuterEnv]] is a global Environment Record.\n\n\n\n\nAn object Environment Record is used to define the effect of ECMAScript elements such as WithStatement that associate identifier bindings with the properties of some object.\n\n\nA global Environment Record is used for Script global declarations. It does not have an outer environment; its [[OuterEnv]] is null. It may be prepopulated with identifier bindings and it includes an associated global object\n whose properties provide some of the global environment's identifier \nbindings. As ECMAScript code is executed, additional properties may be \nadded to the global object and the initial properties may be modified.\n\n\n\n\nThe Environment Record abstract class includes the abstract specification methods defined in Table 19. These abstract methods have distinct concrete algorithms for each of the concrete subclasses.\nTable 19: Abstract Methods of Environment Records\n\n\n\n              Method\n            \n\n              Purpose\n            \n\n\n\n              HasBinding(N)\n            \n\n              Determine if an Environment Record has a binding for the String value N. Return true if it does and false if it does not.\n            \n\n\n\n              CreateMutableBinding(N, D)\n            \n\n              Create a new but uninitialized mutable binding in an Environment Record. The String value N is the text of the bound name. If the Boolean argument D is true the binding may be subsequently deleted.\n            \n\n\n\n              CreateImmutableBinding(N, S)\n            \n\n              Create a new but uninitialized immutable binding in an Environment Record. The String value N is the text of the bound name. If S is true\n then attempts to set it after it has been initialized will always throw\n an exception, regardless of the strict mode setting of operations that \nreference that binding.\n            \n\n\n\n              InitializeBinding(N, V)\n            \n\n              Set the value of an already existing but uninitialized binding in an Environment Record. The String value N is the text of the bound name. V is the value for the binding and is a value of any ECMAScript language type.\n            \n\n\n\n              SetMutableBinding(N, V, S)\n            \n\n              Set the value of an already existing mutable binding in an Environment Record. The String value N is the text of the bound name. V is the value for the binding and may be a value of any ECMAScript language type. S is a Boolean flag. If S is true and the binding cannot be set throw a TypeError exception.\n            \n\n\n\n              GetBindingValue(N, S)\n            \n\n              Returns the value of an already existing binding from an Environment Record. The String value N is the text of the bound name. S is used to identify references originating in strict mode code or that otherwise require strict mode reference semantics. If S is true and the binding does not exist throw a ReferenceError exception. If the binding exists but is uninitialized a ReferenceError is thrown, regardless of the value of S.\n            \n\n\n\n              DeleteBinding(N)\n            \n\n              Delete a binding from an Environment Record. The String value N is the text of the bound name. If a binding for N exists, remove the binding and return true. If the binding exists but cannot be removed return false. If the binding does not exist return true.\n            \n\n\n\n              HasThisBinding()\n            \n\n              Determine if an Environment Record establishes a this binding. Return true if it does and false if it does not.\n            \n\n\n\n              HasSuperBinding()\n            \n\n              Determine if an Environment Record establishes a super method binding. Return true if it does and false if it does not.\n            \n\n\n\n              WithBaseObject()\n            \n\n              If this Environment Record is associated with a with statement, return the with object. Otherwise, return undefined.\n            \n\n\n\n\n9.1.1.1 Declarative Environment Records\nEach declarative Environment Record\n is associated with an ECMAScript program scope containing variable, \nconstant, let, class, module, import, and/or function declarations. A \ndeclarative Environment Record binds the set of identifiers defined by \nthe declarations contained within its scope.\nThe behaviour of the concrete specification methods for declarative Environment Records is defined by the following algorithms.\n\n9.1.1.1.1 HasBinding ( N )\nThe HasBinding concrete method of a declarative Environment Record envRec takes argument N (a String) and returns a normal completion containing\n a Boolean. It determines if the argument identifier is one of the \nidentifiers bound by the record. It performs the following steps when \ncalled:\n1. If envRec has a binding for the name that is the value of N, return true.2. Return false.\n\n\n9.1.1.1.2 CreateMutableBinding ( N, D )\nThe CreateMutableBinding concrete method of a declarative Environment Record envRec takes arguments N (a String) and D (a Boolean) and returns a normal completion containing unused. It creates a new mutable binding for the name N that is uninitialized. A binding must not already exist in this Environment Record for N. If D is true, the new binding is marked as being subject to deletion. It performs the following steps when called:\n1. Assert: envRec does not already have a binding for N.2. Create a mutable binding in envRec for N and record that it is uninitialized. If D is true, record that the newly created binding may be deleted by a subsequent DeleteBinding call.3. Return unused.\n\n\n9.1.1.1.3 CreateImmutableBinding ( N, S )\nThe CreateImmutableBinding concrete method of a declarative Environment Record envRec takes arguments N (a String) and S (a Boolean) and returns a normal completion containing unused. It creates a new immutable binding for the name N that is uninitialized. A binding must not already exist in this Environment Record for N. If S is true, the new binding is marked as a strict binding. It performs the following steps when called:\n1. Assert: envRec does not already have a binding for N.2. Create an immutable binding in envRec for N and record that it is uninitialized. If S is true, record that the newly created binding is a strict binding.3. Return unused.\n\n\n9.1.1.1.4 InitializeBinding ( N, V )\nThe InitializeBinding concrete method of a declarative Environment Record envRec takes arguments N (a String) and V (an ECMAScript language value) and returns a normal completion containing unused. It is used to set the bound value of the current binding of the identifier whose name is the value of the argument N to the value of argument V. An uninitialized binding for N must already exist. It performs the following steps when called:\n1. Assert: envRec must have an uninitialized binding for N.2. Set the bound value for N in envRec to V.3. Record that the binding for N in envRec has been initialized.4. Return unused.\n\n\n9.1.1.1.5 SetMutableBinding ( N, V, S )\nThe SetMutableBinding concrete method of a declarative Environment Record envRec takes arguments N (a String), V (an ECMAScript language value), and S (a Boolean) and returns either a normal completion containing unused or an abrupt completion. It attempts to change the bound value of the current binding of the identifier whose name is the value of the argument N to the value of argument V. A binding for N normally already exists, but in rare cases it may not. If the binding is an immutable binding, a TypeError is thrown if S is true. It performs the following steps when called:\n1. If envRec does not have a binding for N, thena. If S is true, throw a ReferenceError exception.b. Perform envRec.CreateMutableBinding(N, true).c. Perform !\u00a0envRec.InitializeBinding(N, V).d. Return unused.2. If the binding for N in envRec is a strict binding, set S to true.3. If the binding for N in envRec has not yet been initialized, throw a ReferenceError exception.4. Else if the binding for N in envRec is a mutable binding, change its bound value to V.5. Else,a. Assert: This is an attempt to change the value of an immutable binding.b. If S is true, throw a TypeError exception.6. Return unused.\nNote\nAn example of ECMAScript code that results in a missing binding at step 1 is:\nfunction f() { eval(\"var x; x = (delete x, 0);\"); }\n\n\n\n9.1.1.1.6 GetBindingValue ( N, S )\nThe GetBindingValue concrete method of a declarative Environment Record envRec takes arguments N (a String) and S (a Boolean) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It returns the value of its bound identifier whose name is the value of the argument N. If the binding exists but is uninitialized a ReferenceError is thrown, regardless of the value of S. It performs the following steps when called:\n1. Assert: envRec has a binding for N.2. If the binding for N in envRec is an uninitialized binding, throw a ReferenceError exception.3. Return the value currently bound to N in envRec.\n\n\n9.1.1.1.7 DeleteBinding ( N )\nThe DeleteBinding concrete method of a declarative Environment Record envRec takes argument N (a String) and returns a normal completion containing\n a Boolean. It can only delete bindings that have been explicitly \ndesignated as being subject to deletion. It performs the following steps\n when called:\n1. Assert: envRec has a binding for the name that is the value of N.2. If the binding for N in envRec cannot be deleted, return false.3. Remove the binding for N from envRec.4. Return true.\n\n\n9.1.1.1.8 HasThisBinding ( )\nThe HasThisBinding concrete method of a declarative Environment Record envRec takes no arguments and returns false. It performs the following steps when called:\n1. Return false.\nNote\nA regular declarative Environment Record (i.e., one that is neither a function Environment Record nor a module Environment Record) does not provide a this binding.\n\n\n\n9.1.1.1.9 HasSuperBinding ( )\nThe HasSuperBinding concrete method of a declarative Environment Record envRec takes no arguments and returns false. It performs the following steps when called:\n1. Return false.\nNote\nA regular declarative Environment Record (i.e., one that is neither a function Environment Record nor a module Environment Record) does not provide a super binding.\n\n\n\n9.1.1.1.10 WithBaseObject ( )\nThe WithBaseObject concrete method of a declarative Environment Record envRec takes no arguments and returns undefined. It performs the following steps when called:\n1. Return undefined.\n\n\n\n9.1.1.2 Object Environment Records\nEach object Environment Record is associated with an object called its binding object.\n An object Environment Record binds the set of string identifier names \nthat directly correspond to the property names of its binding object. Property keys that are not strings in the form of an IdentifierName\n are not included in the set of bound identifiers. Both own and \ninherited properties are included in the set regardless of the setting \nof their [[Enumerable]] attribute. Because properties can be dynamically\n added and deleted from objects, the set of identifiers bound by an \nobject Environment Record may potentially change as a side-effect of any\n operation that adds or deletes properties. Any bindings that are \ncreated as a result of such a side-effect are considered to be a mutable\n binding even if the Writable attribute of the corresponding property is\n false. Immutable bindings do not exist for object Environment Records.\nObject Environment Records created for with statements (14.11) can provide their binding object as an implicit this value for use in function calls. The capability is controlled by a Boolean [[IsWithEnvironment]] field.\nObject Environment Records have the additional state fields listed in Table 20.\nTable 20: Additional Fields of Object Environment Records\n\n\n\n                Field Name\n              \n\n                Value\n              \n\n                Meaning\n              \n\n\n\n                [[BindingObject]]\n              \n\n                an Object\n              \n\n                The binding object of this Environment Record.\n              \n\n\n\n                [[IsWithEnvironment]]\n              \n\n                a Boolean\n              \n\n                Indicates whether this Environment Record is created for a with statement.\n              \n\n\n\nThe behaviour of the concrete specification methods for object Environment Records is defined by the following algorithms.\n\n9.1.1.2.1 HasBinding ( N )\nThe HasBinding concrete method of an object Environment Record envRec takes argument N (a String) and returns either a normal completion containing a Boolean or an abrupt completion. It determines if its associated binding object has a property whose name is the value of the argument N. It performs the following steps when called:\n1. Let bindingObject be envRec.[[BindingObject]].2. Let foundBinding be ?\u00a0HasProperty(bindingObject, N).3. If foundBinding is false, return false.4. If envRec.[[IsWithEnvironment]] is false, return true.5. Let unscopables be ?\u00a0Get(bindingObject, @@unscopables).6. If Type(unscopables) is Object, thena. Let blocked be ToBoolean(? Get(unscopables, N)).b. If blocked is true, return false.7. Return true.\n\n\n9.1.1.2.2 CreateMutableBinding ( N, D )\nThe CreateMutableBinding concrete method of an object Environment Record envRec takes arguments N (a String) and D (a Boolean) and returns either a normal completion containing unused or an abrupt completion. It creates in an Environment Record's associated binding object a property whose name is the String value and initializes it to the value undefined. If D is true, the new property's [[Configurable]] attribute is set to true; otherwise it is set to false. It performs the following steps when called:\n1. Let bindingObject be envRec.[[BindingObject]].2. Perform ?\u00a0DefinePropertyOrThrow(bindingObject, N, PropertyDescriptor { [[Value]]: undefined, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: D }).3. Return unused.\nNote\nNormally envRec will not have a binding for N but if it does, the semantics of DefinePropertyOrThrow may result in an existing binding being replaced or shadowed or cause an abrupt completion to be returned.\n\n\n\n9.1.1.2.3 CreateImmutableBinding ( N, S )\nThe CreateImmutableBinding concrete method of an object Environment Record is never used within this specification.\n\n\n9.1.1.2.4 InitializeBinding ( N, V )\nThe InitializeBinding concrete method of an object Environment Record envRec takes arguments N (a String) and V (an ECMAScript language value) and returns either a normal completion containing unused or an abrupt completion. It is used to set the bound value of the current binding of the identifier whose name is the value of the argument N to the value of argument V. It performs the following steps when called:\n1. Perform ?\u00a0envRec.SetMutableBinding(N, V, false).2. Return unused.\nNote\nIn this specification, all uses of CreateMutableBinding for object Environment Records\n are immediately followed by a call to InitializeBinding for the same \nname. Hence, this specification does not explicitly track the \ninitialization state of bindings in object Environment Records.\n\n\n\n9.1.1.2.5 SetMutableBinding ( N, V, S )\nThe SetMutableBinding concrete method of an object Environment Record envRec takes arguments N (a String), V (an ECMAScript language value), and S (a Boolean) and returns either a normal completion containing unused or an abrupt completion. It attempts to set the value of the Environment Record's associated binding object's property whose name is the value of the argument N to the value of argument V. A property named N normally already exists but if it does not or is not currently writable, error handling is determined by S. It performs the following steps when called:\n1. Let bindingObject be envRec.[[BindingObject]].2. Let stillExists be ?\u00a0HasProperty(bindingObject, N).3. If stillExists is false and S is true, throw a ReferenceError exception.4. Perform ?\u00a0Set(bindingObject, N, V, S).5. Return unused.\n\n\n9.1.1.2.6 GetBindingValue ( N, S )\nThe GetBindingValue concrete method of an object Environment Record envRec takes arguments N (a String) and S (a Boolean) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It returns the value of its associated binding object's property whose name is the String value of the argument identifier N. The property should already exist but if it does not the result depends upon S. It performs the following steps when called:\n1. Let bindingObject be envRec.[[BindingObject]].2. Let value be ?\u00a0HasProperty(bindingObject, N).3. If value is false, thena. If S is false, return undefined; otherwise throw a ReferenceError exception.4. Return ?\u00a0Get(bindingObject, N).\n\n\n9.1.1.2.7 DeleteBinding ( N )\nThe DeleteBinding concrete method of an object Environment Record envRec takes argument N (a String) and returns either a normal completion containing a Boolean or an abrupt completion.\n It can only delete bindings that correspond to properties of the \nenvironment object whose [[Configurable]] attribute have the value true. It performs the following steps when called:\n1. Let bindingObject be envRec.[[BindingObject]].2. Return ?\u00a0bindingObject.[[Delete]](N).\n\n\n9.1.1.2.8 HasThisBinding ( )\nThe HasThisBinding concrete method of an object Environment Record envRec takes no arguments and returns false. It performs the following steps when called:\n1. Return false.\nNote\nObject Environment Records do not provide a this binding.\n\n\n\n9.1.1.2.9 HasSuperBinding ( )\nThe HasSuperBinding concrete method of an object Environment Record envRec takes no arguments and returns false. It performs the following steps when called:\n1. Return false.\nNote\nObject Environment Records do not provide a super binding.\n\n\n\n9.1.1.2.10 WithBaseObject ( )\nThe WithBaseObject concrete method of an object Environment Record envRec takes no arguments and returns an Object or undefined. It performs the following steps when called:\n1. If envRec.[[IsWithEnvironment]] is true, return envRec.[[BindingObject]].2. Otherwise, return undefined.\n\n\n\n9.1.1.3 Function Environment Records\nA function Environment Record is a declarative Environment Record that is used to represent the top-level scope of a function and, if the function is not an ArrowFunction, provides a this binding. If a function is not an ArrowFunction function and references super, its function Environment Record also contains the state that is used to perform super method invocations from within the function.\nFunction Environment Records have the additional state fields listed in Table 21.\nTable 21: Additional Fields of Function Environment Records\n\n\n\n                Field Name\n              \n\n                Value\n              \n\n                Meaning\n              \n\n\n\n                [[ThisValue]]\n              \n\n                an ECMAScript language value\n\n\n                This is the this value used for this invocation of the function.\n              \n\n\n\n                [[ThisBindingStatus]]\n              \n\nlexical, initialized, or uninitialized\n\n\n                If the value is lexical, this is an ArrowFunction and does not have a local this value.\n              \n\n\n\n                [[FunctionObject]]\n              \n\n                an Object\n              \n\n                The function object whose invocation caused this Environment Record to be created.\n              \n\n\n\n                [[NewTarget]]\n              \n\n                an Object or undefined\n\n\n                If this Environment Record was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] newTarget parameter. Otherwise, its value is undefined.\n              \n\n\n\nFunction Environment Records support all of the declarative Environment Record methods listed in Table 19\n and share the same specifications for all of those methods except for \nHasThisBinding and HasSuperBinding. In addition, function Environment \nRecords support the methods listed in Table 22:\nTable 22: Additional Methods of Function Environment Records\n\n\n\n                Method\n              \n\n                Purpose\n              \n\n\n\n                BindThisValue(V)\n              \n\n                Set the [[ThisValue]] and record that it has been initialized.\n              \n\n\n\n                GetThisBinding()\n              \n\n                Return the value of this Environment Record's this binding. Throws a ReferenceError if the this binding has not been initialized.\n              \n\n\n\n                GetSuperBase()\n              \n\n                Return the object that is the base for super property accesses bound in this Environment Record. The value undefined indicates that super property accesses will produce runtime errors.\n              \n\n\n\nThe behaviour of the additional concrete specification \nmethods for function Environment Records is defined by the following \nalgorithms:\n\n9.1.1.3.1 BindThisValue ( V )\nThe BindThisValue concrete method of a function Environment Record envRec takes argument V (an ECMAScript language value) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Assert: envRec.[[ThisBindingStatus]] is not lexical.2. If envRec.[[ThisBindingStatus]] is initialized, throw a ReferenceError exception.3. Set envRec.[[ThisValue]] to V.4. Set envRec.[[ThisBindingStatus]] to initialized.5. Return V.\n\n\n9.1.1.3.2 HasThisBinding ( )\nThe HasThisBinding concrete method of a function Environment Record envRec takes no arguments and returns a Boolean. It performs the following steps when called:\n1. If envRec.[[ThisBindingStatus]] is lexical, return false; otherwise, return true.\n\n\n9.1.1.3.3 HasSuperBinding ( )\nThe HasSuperBinding concrete method of a function Environment Record envRec takes no arguments and returns a Boolean. It performs the following steps when called:\n1. If envRec.[[ThisBindingStatus]] is lexical, return false.2. If envRec.[[FunctionObject]].[[HomeObject]] is undefined, return false; otherwise, return true.\n\n\n9.1.1.3.4 GetThisBinding ( )\nThe GetThisBinding concrete method of a function Environment Record envRec takes no arguments and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Assert: envRec.[[ThisBindingStatus]] is not lexical.2. If envRec.[[ThisBindingStatus]] is uninitialized, throw a ReferenceError exception.3. Return envRec.[[ThisValue]].\n\n\n9.1.1.3.5 GetSuperBase ( )\nThe GetSuperBase concrete method of a function Environment Record envRec takes no arguments and returns either a normal completion containing either an Object, null, or undefined, or an abrupt completion. It performs the following steps when called:\n1. Let home be envRec.[[FunctionObject]].[[HomeObject]].2. If home is undefined, return undefined.3. Assert: Type(home) is Object.4. Return ?\u00a0home.[[GetPrototypeOf]]().\n\n\n\n9.1.1.4 Global Environment Records\nA global Environment Record is used to represent the outer most scope that is shared by all of the ECMAScript Script elements that are processed in a common realm. A global Environment Record provides the bindings for built-in globals (clause 19), properties of the global object, and for all top-level declarations (8.1.9, 8.1.11) that occur within a Script.\nA global Environment Record is logically a single record but it is specified as a composite encapsulating an object Environment Record and a declarative Environment Record. The object Environment Record has as its base object the global object of the associated Realm Record. This global object is the value returned by the global Environment Record's GetThisBinding concrete method. The object Environment Record component of a global Environment Record contains the bindings for all built-in globals (clause 19) and all bindings introduced by a FunctionDeclaration, GeneratorDeclaration, AsyncFunctionDeclaration, AsyncGeneratorDeclaration, or VariableStatement contained in global code. The bindings for all other ECMAScript declarations in global code are contained in the declarative Environment Record component of the global Environment Record.\nProperties may be created directly on a global object. Hence, the object Environment Record component of a global Environment Record may contain both bindings created explicitly by FunctionDeclaration, GeneratorDeclaration, AsyncFunctionDeclaration, AsyncGeneratorDeclaration, or VariableDeclaration declarations and bindings created implicitly as properties of the global object.\n In order to identify which bindings were explicitly created using \ndeclarations, a global Environment Record maintains a list of the names \nbound using its CreateGlobalVarBinding and CreateGlobalFunctionBinding \nconcrete methods.\nGlobal Environment Records have the additional fields listed in Table 23 and the additional methods listed in Table 24.\nTable 23: Additional Fields of Global Environment Records\n\n\n\n                Field Name\n              \n\n                Value\n              \n\n                Meaning\n              \n\n\n\n                [[ObjectRecord]]\n              \n\n                an object Environment Record\n\n\n                Binding object is the global object. It contains global built-in bindings as well as FunctionDeclaration, GeneratorDeclaration, AsyncFunctionDeclaration, AsyncGeneratorDeclaration, and VariableDeclaration bindings in global code for the associated realm.\n              \n\n\n\n                [[GlobalThisValue]]\n              \n\n                an Object\n              \n\n                The value returned by this in global scope. Hosts may provide any ECMAScript Object value.\n              \n\n\n\n                [[DeclarativeRecord]]\n              \n\n                a declarative Environment Record\n\n\nContains bindings for all declarations in global code for the associated realm code except for FunctionDeclaration, GeneratorDeclaration, AsyncFunctionDeclaration, AsyncGeneratorDeclaration, and VariableDeclaration bindings.\n              \n\n\n\n                [[VarNames]]\n              \n\n                a List of Strings\n              \n\n                The string names bound by FunctionDeclaration, GeneratorDeclaration, AsyncFunctionDeclaration, AsyncGeneratorDeclaration, and VariableDeclaration declarations in global code for the associated realm.\n              \n\n\n\nTable 24: Additional Methods of Global Environment Records\n\n\n\n                Method\n              \n\n                Purpose\n              \n\n\n\n                GetThisBinding()\n              \n\n                Return the value of this Environment Record's this binding.\n              \n\n\n\n                HasVarDeclaration (N)\n              \n\n                Determines if the argument identifier has a binding in this Environment Record that was created using a VariableDeclaration, FunctionDeclaration, GeneratorDeclaration, AsyncFunctionDeclaration, or AsyncGeneratorDeclaration.\n              \n\n\n\n                HasLexicalDeclaration (N)\n              \n\n                Determines if the argument identifier has a binding in this Environment Record that was created using a lexical declaration such as a LexicalDeclaration or a ClassDeclaration.\n              \n\n\n\n                HasRestrictedGlobalProperty (N)\n              \n\n                Determines if the argument is the name of a global object property that may not be shadowed by a global lexical binding.\n              \n\n\n\n                CanDeclareGlobalVar (N)\n              \n\n                Determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument N.\n              \n\n\n\n                CanDeclareGlobalFunction (N)\n              \n\n                Determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument N.\n              \n\n\n\n                CreateGlobalVarBinding(N, D)\n              \n\n                Used to create and initialize to undefined a global var binding in the [[ObjectRecord]] component of a global Environment Record. The binding will be a mutable binding. The corresponding global object property will have attribute values appropriate for a var. The String value N is the bound name. If D is true\n the binding may be deleted. Logically equivalent to \nCreateMutableBinding followed by a SetMutableBinding but it allows var \ndeclarations to receive special treatment.\n              \n\n\n\n                CreateGlobalFunctionBinding(N, V, D)\n              \n\n                Create and initialize a global function binding in the [[ObjectRecord]] component of a global Environment Record. The binding will be a mutable binding. The corresponding global object property will have attribute values appropriate for a function. The String value N is the bound name. V is the initialization value. If the Boolean argument D is true\n the binding may be deleted. Logically equivalent to \nCreateMutableBinding followed by a SetMutableBinding but it allows \nfunction declarations to receive special treatment.\n              \n\n\n\nThe behaviour of the concrete specification methods for global Environment Records is defined by the following algorithms.\n\n9.1.1.4.1 HasBinding ( N )\nThe HasBinding concrete method of a global Environment Record envRec takes argument N (a String) and returns either a normal completion containing a Boolean or an abrupt completion.\n It determines if the argument identifier is one of the identifiers \nbound by the record. It performs the following steps when called:\n1. Let DclRec be envRec.[[DeclarativeRecord]].2. If !\u00a0DclRec.HasBinding(N) is true, return true.3. Let ObjRec be envRec.[[ObjectRecord]].4. Return ?\u00a0ObjRec.HasBinding(N).\n\n\n9.1.1.4.2 CreateMutableBinding ( N, D )\nThe CreateMutableBinding concrete method of a global Environment Record envRec takes arguments N (a String) and D (a Boolean) and returns either a normal completion containing unused or an abrupt completion. It creates a new mutable binding for the name N that is uninitialized. The binding is created in the associated DeclarativeRecord. A binding for N must not already exist in the DeclarativeRecord. If D is true, the new binding is marked as being subject to deletion. It performs the following steps when called:\n1. Let DclRec be envRec.[[DeclarativeRecord]].2. If !\u00a0DclRec.HasBinding(N) is true, throw a TypeError exception.3. Return DclRec.CreateMutableBinding(N, D).\n\n\n9.1.1.4.3 CreateImmutableBinding ( N, S )\nThe CreateImmutableBinding concrete method of a global Environment Record envRec takes arguments N (a String) and S (a Boolean) and returns either a normal completion containing unused or an abrupt completion. It creates a new immutable binding for the name N that is uninitialized. A binding must not already exist in this Environment Record for N. If S is true, the new binding is marked as a strict binding. It performs the following steps when called:\n1. Let DclRec be envRec.[[DeclarativeRecord]].2. If !\u00a0DclRec.HasBinding(N) is true, throw a TypeError exception.3. Return DclRec.CreateImmutableBinding(N, S).\n\n\n9.1.1.4.4 InitializeBinding ( N, V )\nThe InitializeBinding concrete method of a global Environment Record envRec takes arguments N (a String) and V (an ECMAScript language value) and returns either a normal completion containing unused or an abrupt completion. It is used to set the bound value of the current binding of the identifier whose name is the value of the argument N to the value of argument V. An uninitialized binding for N must already exist. It performs the following steps when called:\n1. Let DclRec be envRec.[[DeclarativeRecord]].2. If !\u00a0DclRec.HasBinding(N) is true, thena. Return !\u00a0DclRec.InitializeBinding(N, V).3. Assert: If the binding exists, it must be in the object Environment Record.4. Let ObjRec be envRec.[[ObjectRecord]].5. Return ?\u00a0ObjRec.InitializeBinding(N, V).\n\n\n9.1.1.4.5 SetMutableBinding ( N, V, S )\nThe SetMutableBinding concrete method of a global Environment Record envRec takes arguments N (a String), V (an ECMAScript language value), and S (a Boolean) and returns either a normal completion containing unused or an abrupt completion. It attempts to change the bound value of the current binding of the identifier whose name is the value of the argument N to the value of argument V. If the binding is an immutable binding, a TypeError is thrown if S is true. A property named N normally already exists but if it does not or is not currently writable, error handling is determined by S. It performs the following steps when called:\n1. Let DclRec be envRec.[[DeclarativeRecord]].2. If !\u00a0DclRec.HasBinding(N) is true, thena. Return !\u00a0DclRec.SetMutableBinding(N, V, S).3. Let ObjRec be envRec.[[ObjectRecord]].4. Return ?\u00a0ObjRec.SetMutableBinding(N, V, S).\n\n\n9.1.1.4.6 GetBindingValue ( N, S )\nThe GetBindingValue concrete method of a global Environment Record envRec takes arguments N (a String) and S (a Boolean) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It returns the value of its bound identifier whose name is the value of the argument N. If the binding is an uninitialized binding throw a ReferenceError exception. A property named N normally already exists but if it does not or is not currently writable, error handling is determined by S. It performs the following steps when called:\n1. Let DclRec be envRec.[[DeclarativeRecord]].2. If !\u00a0DclRec.HasBinding(N) is true, thena. Return DclRec.GetBindingValue(N, S).3. Let ObjRec be envRec.[[ObjectRecord]].4. Return ?\u00a0ObjRec.GetBindingValue(N, S).\n\n\n9.1.1.4.7 DeleteBinding ( N )\nThe DeleteBinding concrete method of a global Environment Record envRec takes argument N (a String) and returns either a normal completion containing a Boolean or an abrupt completion.\n It can only delete bindings that have been explicitly designated as \nbeing subject to deletion. It performs the following steps when called:\n1. Let DclRec be envRec.[[DeclarativeRecord]].2. If !\u00a0DclRec.HasBinding(N) is true, thena. Return !\u00a0DclRec.DeleteBinding(N).3. Let ObjRec be envRec.[[ObjectRecord]].4. Let globalObject be ObjRec.[[BindingObject]].5. Let existingProp be ?\u00a0HasOwnProperty(globalObject, N).6. If existingProp is true, thena. Let status be ?\u00a0ObjRec.DeleteBinding(N).b. If status is true, theni. Let varNames be envRec.[[VarNames]].ii. If N is an element of varNames, remove that element from the varNames.c. Return status.7. Return true.\n\n\n9.1.1.4.8 HasThisBinding ( )\nThe HasThisBinding concrete method of a global Environment Record envRec takes no arguments and returns true. It performs the following steps when called:\n1. Return true.\nNote\nGlobal Environment Records always provide a this binding.\n\n\n\n9.1.1.4.9 HasSuperBinding ( )\nThe HasSuperBinding concrete method of a global Environment Record envRec takes no arguments and returns false. It performs the following steps when called:\n1. Return false.\nNote\nGlobal Environment Records do not provide a super binding.\n\n\n\n9.1.1.4.10 WithBaseObject ( )\nThe WithBaseObject concrete method of a global Environment Record envRec takes no arguments and returns undefined. It performs the following steps when called:\n1. Return undefined.\n\n\n9.1.1.4.11 GetThisBinding ( )\nThe GetThisBinding concrete method of a global Environment Record envRec takes no arguments and returns a normal completion containing an Object. It performs the following steps when called:\n1. Return envRec.[[GlobalThisValue]].\n\n\n9.1.1.4.12 HasVarDeclaration ( N )\nThe HasVarDeclaration concrete method of a global Environment Record envRec takes argument N\n (a String) and returns a Boolean. It determines if the argument \nidentifier has a binding in this record that was created using a VariableStatement or a FunctionDeclaration. It performs the following steps when called:\n1. Let varDeclaredNames be envRec.[[VarNames]].2. If varDeclaredNames contains N, return true.3. Return false.\n\n\n9.1.1.4.13 HasLexicalDeclaration ( N )\nThe HasLexicalDeclaration concrete method of a global Environment Record envRec takes argument N\n (a String) and returns a Boolean. It determines if the argument \nidentifier has a binding in this record that was created using a lexical\n declaration such as a LexicalDeclaration or a ClassDeclaration. It performs the following steps when called:\n1. Let DclRec be envRec.[[DeclarativeRecord]].2. Return !\u00a0DclRec.HasBinding(N).\n\n\n9.1.1.4.14 HasRestrictedGlobalProperty ( N )\nThe HasRestrictedGlobalProperty concrete method of a global Environment Record envRec takes argument N (a String) and returns either a normal completion containing a Boolean or an abrupt completion. It determines if the argument identifier is the name of a property of the global object that must not be shadowed by a global lexical binding. It performs the following steps when called:\n1. Let ObjRec be envRec.[[ObjectRecord]].2. Let globalObject be ObjRec.[[BindingObject]].3. Let existingProp be ?\u00a0globalObject.[[GetOwnProperty]](N).4. If existingProp is undefined, return false.5. If existingProp.[[Configurable]] is true, return false.6. Return true.\nNote\nProperties may exist upon a global object\n that were directly created rather than being declared using a var or \nfunction declaration. A global lexical binding may not be created that \nhas the same name as a non-configurable property of the global object. The global property \"undefined\" is an example of such a property.\n\n\n\n9.1.1.4.15 CanDeclareGlobalVar ( N )\nThe CanDeclareGlobalVar concrete method of a global Environment Record envRec takes argument N (a String) and returns either a normal completion containing a Boolean or an abrupt completion. It determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument N. Redundant var declarations and var declarations for pre-existing global object properties are allowed. It performs the following steps when called:\n1. Let ObjRec be envRec.[[ObjectRecord]].2. Let globalObject be ObjRec.[[BindingObject]].3. Let hasProperty be ?\u00a0HasOwnProperty(globalObject, N).4. If hasProperty is true, return true.5. Return ?\u00a0IsExtensible(globalObject).\n\n\n9.1.1.4.16 CanDeclareGlobalFunction ( N )\nThe CanDeclareGlobalFunction concrete method of a global Environment Record envRec takes argument N (a String) and returns either a normal completion containing a Boolean or an abrupt completion. It determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument N. It performs the following steps when called:\n1. Let ObjRec be envRec.[[ObjectRecord]].2. Let globalObject be ObjRec.[[BindingObject]].3. Let existingProp be ?\u00a0globalObject.[[GetOwnProperty]](N).4. If existingProp is undefined, return ?\u00a0IsExtensible(globalObject).5. If existingProp.[[Configurable]] is true, return true.6. If IsDataDescriptor(existingProp) is true and existingProp has attribute values { [[Writable]]: true, [[Enumerable]]: true }, return true.7. Return false.\n\n\n9.1.1.4.17 CreateGlobalVarBinding ( N, D )\nThe CreateGlobalVarBinding concrete method of a global Environment Record envRec takes arguments N (a String) and D (a Boolean) and returns either a normal completion containing unused or an abrupt completion. It creates and initializes a mutable binding in the associated object Environment Record and records the bound name in the associated [[VarNames]] List. If a binding already exists, it is reused and assumed to be initialized. It performs the following steps when called:\n1. Let ObjRec be envRec.[[ObjectRecord]].2. Let globalObject be ObjRec.[[BindingObject]].3. Let hasProperty be ?\u00a0HasOwnProperty(globalObject, N).4. Let extensible be ?\u00a0IsExtensible(globalObject).5. If hasProperty is false and extensible is true, thena. Perform ?\u00a0ObjRec.CreateMutableBinding(N, D).b. Perform ?\u00a0ObjRec.InitializeBinding(N, undefined).6. Let varDeclaredNames be envRec.[[VarNames]].7. If varDeclaredNames does not contain N, thena. Append N to varDeclaredNames.8. Return unused.\n\n\n9.1.1.4.18 CreateGlobalFunctionBinding ( N, V, D )\nThe CreateGlobalFunctionBinding concrete method of a global Environment Record envRec takes arguments N (a String), V (an ECMAScript language value), and D (a Boolean) and returns either a normal completion containing unused or an abrupt completion. It creates and initializes a mutable binding in the associated object Environment Record and records the bound name in the associated [[VarNames]] List. If a binding already exists, it is replaced. It performs the following steps when called:\n1. Let ObjRec be envRec.[[ObjectRecord]].2. Let globalObject be ObjRec.[[BindingObject]].3. Let existingProp be ?\u00a0globalObject.[[GetOwnProperty]](N).4. If existingProp is undefined or existingProp.[[Configurable]] is true, thena. Let desc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: D }.5. Else,a. Let desc be the PropertyDescriptor { [[Value]]: V }.6. Perform ?\u00a0DefinePropertyOrThrow(globalObject, N, desc).7. Perform ?\u00a0Set(globalObject, N, V, false).8. Let varDeclaredNames be envRec.[[VarNames]].9. If varDeclaredNames does not contain N, thena. Append N to varDeclaredNames.10. Return unused.\nNote\nGlobal function declarations are always represented as own properties of the global object. If possible, an existing own property is reconfigured to have a standard set of attribute values. Step 7 is equivalent to what calling the InitializeBinding concrete method would do and if globalObject is a Proxy will produce the same sequence of Proxy trap calls.\n\n\n\n\n9.1.1.5 Module Environment Records\nA module Environment Record is a declarative Environment Record that is used to represent the outer scope of an ECMAScript Module.\n In additional to normal mutable and immutable bindings, module \nEnvironment Records also provide immutable import bindings which are \nbindings that provide indirect access to a target binding that exists in\n another Environment Record.\nModule Environment Records support all of the declarative Environment Record methods listed in Table 19\n and share the same specifications for all of those methods except for \nGetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In \naddition, module Environment Records support the methods listed in Table 25:\nTable 25: Additional Methods of Module Environment Records\n\n\n\n                Method\n              \n\n                Purpose\n              \n\n\n\n                CreateImportBinding(N, M, N2)\n              \n\n                Create an immutable indirect binding in a module Environment Record. The String value N is the text of the bound name. M is a Module Record, and N2 is a binding that exists in M's module Environment Record.\n              \n\n\n\n                GetThisBinding()\n              \n\n                Return the value of this Environment Record's this binding.\n              \n\n\n\nThe behaviour of the additional concrete specification \nmethods for module Environment Records are defined by the following \nalgorithms:\n\n9.1.1.5.1 GetBindingValue ( N, S )\nThe GetBindingValue concrete method of a module Environment Record envRec takes arguments N (a String) and S (a Boolean) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It returns the value of its bound identifier whose name is the value of the argument N.\n However, if the binding is an indirect binding the value of the target \nbinding is returned. If the binding exists but is uninitialized a ReferenceError is thrown. It performs the following steps when called:\n1. Assert: S is true.2. Assert: envRec has a binding for N.3. If the binding for N is an indirect binding, thena. Let M and N2 be the indirection values provided when this binding for N was created.b. Let targetEnv be M.[[Environment]].c. If targetEnv is empty, throw a ReferenceError exception.d. Return ?\u00a0targetEnv.GetBindingValue(N2, true).4. If the binding for N in envRec is an uninitialized binding, throw a ReferenceError exception.5. Return the value currently bound to N in envRec.\nNote\nS will always be true because a Module is always strict mode code.\n\n\n\n9.1.1.5.2 DeleteBinding ( N )\nThe DeleteBinding concrete method of a module Environment Record is never used within this specification.\nNote\nModule Environment Records are only used within strict code and an early error rule prevents the delete operator, in strict code, from being applied to a Reference Record that would resolve to a module Environment Record binding. See 13.5.1.1.\n\n\n\n9.1.1.5.3 HasThisBinding ( )\nThe HasThisBinding concrete method of a module Environment Record envRec takes no arguments and returns true. It performs the following steps when called:\n1. Return true.\nNote\nModule Environment Records always provide a this binding.\n\n\n\n9.1.1.5.4 GetThisBinding ( )\nThe GetThisBinding concrete method of a module Environment Record envRec takes no arguments and returns a normal completion containing undefined. It performs the following steps when called:\n1. Return undefined.\n\n\n9.1.1.5.5 CreateImportBinding ( N, M, N2 )\nThe CreateImportBinding concrete method of a module Environment Record envRec takes arguments N (a String), M (a Module Record), and N2 (a String) and returns unused. It creates a new initialized immutable indirect binding for the name N. A binding must not already exist in this Environment Record for N. N2 is the name of a binding that exists in M's module Environment Record.\n Accesses to the value of the new binding will indirectly access the \nbound value of the target binding. It performs the following steps when \ncalled:\n1. Assert: envRec does not already have a binding for N.2. Assert: When M.[[Environment]] is instantiated it will have a direct binding for N2.3. Create an immutable indirect binding in envRec for N that references M and N2 as its target binding and record that the binding is initialized.4. Return unused.\n\n\n\n\n9.1.2 Environment Record Operations\nThe following abstract operations are used in this specification to operate upon Environment Records:\n\n9.1.2.1 GetIdentifierReference ( env, name, strict )\nThe abstract operation GetIdentifierReference takes arguments env (an Environment Record or null), name (a String), and strict (a Boolean) and returns either a normal completion containing a Reference Record or an abrupt completion. It performs the following steps when called:\n1. If env is the value null, thena. Return the Reference Record { [[Base]]: unresolvable, [[ReferencedName]]: name, [[Strict]]: strict, [[ThisValue]]: empty }.2. Let exists be ?\u00a0env.HasBinding(name).3. If exists is true, thena. Return the Reference Record { [[Base]]: env, [[ReferencedName]]: name, [[Strict]]: strict, [[ThisValue]]: empty }.4. Else,a. Let outer be env.[[OuterEnv]].b. Return ?\u00a0GetIdentifierReference(outer, name, strict).\n\n\n9.1.2.2 NewDeclarativeEnvironment ( E )\nThe abstract operation NewDeclarativeEnvironment takes argument E (an Environment Record) and returns a declarative Environment Record. It performs the following steps when called:\n1. Let env be a new declarative Environment Record containing no bindings.2. Set env.[[OuterEnv]] to E.3. Return env.\n\n\n9.1.2.3 NewObjectEnvironment ( O, W, E )\nThe abstract operation NewObjectEnvironment takes arguments O (an Object), W (a Boolean), and E (an Environment Record or null) and returns an object Environment Record. It performs the following steps when called:\n1. Let env be a new object Environment Record.2. Set env.[[BindingObject]] to O.3. Set env.[[IsWithEnvironment]] to W.4. Set env.[[OuterEnv]] to E.5. Return env.\n\n\n9.1.2.4 NewFunctionEnvironment ( F, newTarget )\nThe abstract operation NewFunctionEnvironment takes arguments F (an ECMAScript function) and newTarget (an Object or undefined) and returns a function Environment Record. It performs the following steps when called:\n1. Let env be a new function Environment Record containing no bindings.2. Set env.[[FunctionObject]] to F.3. If F.[[ThisMode]] is lexical, set env.[[ThisBindingStatus]] to lexical.4. Else, set env.[[ThisBindingStatus]] to uninitialized.5. Set env.[[NewTarget]] to newTarget.6. Set env.[[OuterEnv]] to F.[[Environment]].7. Return env.\n\n\n9.1.2.5 NewGlobalEnvironment ( G, thisValue )\nThe abstract operation NewGlobalEnvironment takes arguments G and thisValue and returns a global Environment Record. It performs the following steps when called:\n1. Let objRec be NewObjectEnvironment(G, false, null).2. Let dclRec be a new declarative Environment Record containing no bindings.3. Let env be a new global Environment Record.4. Set env.[[ObjectRecord]] to objRec.5. Set env.[[GlobalThisValue]] to thisValue.6. Set env.[[DeclarativeRecord]] to dclRec.7. Set env.[[VarNames]] to a new empty List.8. Set env.[[OuterEnv]] to null.9. Return env.\n\n\n9.1.2.6 NewModuleEnvironment ( E )\nThe abstract operation NewModuleEnvironment takes argument E (an Environment Record) and returns a module Environment Record. It performs the following steps when called:\n1. Let env be a new module Environment Record containing no bindings.2. Set env.[[OuterEnv]] to E.3. Return env.\n\n\n\n\n9.2 PrivateEnvironment Records\nA PrivateEnvironment Record is a specification mechanism used to track Private Names based upon the lexical nesting structure of ClassDeclarations and ClassExpressions in ECMAScript code. They are similar to, but distinct from, Environment Records. Each PrivateEnvironment Record is associated with a ClassDeclaration or ClassExpression. Each time such a class is evaluated, a new PrivateEnvironment Record is created to record the Private Names declared by that class.\nEach PrivateEnvironment Record has the fields defined in Table 26.\nTable 26: PrivateEnvironment Record Fields\n\n\n\n\n              Field Name\n            \n\n              Value Type\n            \n\n              Meaning\n            \n\n\n\n\n            [[OuterPrivateEnvironment]]\n          \n\n            a PrivateEnvironment Record or null\n\n\n            The PrivateEnvironment Record of the nearest containing class. null if the class with which this PrivateEnvironment Record is associated is not contained in any other class.\n          \n\n\n\n            [[Names]]\n          \n\n            a List of Private Names\n\n\n            The Private Names declared by this class.\n          \n\n\n\n\n9.2.1 PrivateEnvironment Record Operations\nThe following abstract operations are used in this specification to operate upon PrivateEnvironment Records:\n\n9.2.1.1 NewPrivateEnvironment ( outerPrivEnv )\nThe abstract operation NewPrivateEnvironment takes argument outerPrivEnv (a PrivateEnvironment Record or null) and returns a PrivateEnvironment Record. It performs the following steps when called:\n1. Let names be a new empty List.2. Return the PrivateEnvironment Record { [[OuterPrivateEnvironment]]: outerPrivEnv, [[Names]]: names }.\n\n\n9.2.1.2 ResolvePrivateIdentifier ( privEnv, identifier )\nThe abstract operation ResolvePrivateIdentifier takes arguments privEnv (a PrivateEnvironment Record) and identifier (a String) and returns a Private Name. It performs the following steps when called:\n1. Let names be privEnv.[[Names]].2. If names contains a Private Name whose [[Description]] is identifier, thena. Let name be that Private Name.b. Return name.3. Else,a. Let outerPrivEnv be privEnv.[[OuterPrivateEnvironment]].b. Assert: outerPrivEnv is not null.c. Return ResolvePrivateIdentifier(outerPrivEnv, identifier).\n\n\n\n\n9.3 Realms\nBefore it is evaluated, all ECMAScript code must be associated with a realm. Conceptually, a realm\n consists of a set of intrinsic objects, an ECMAScript global \nenvironment, all of the ECMAScript code that is loaded within the scope \nof that global environment, and other associated state and resources.\nA realm is represented in this specification as a Realm Record with the fields specified in Table 27:\nTable 27: Realm Record Fields\n\n\n\n            Field Name\n          \n\n            Value\n          \n\n            Meaning\n          \n\n\n\n            [[Intrinsics]]\n          \n\n            a Record whose field names are intrinsic keys and whose values are objects\n          \n\n            The intrinsic values used by code associated with this realm\n\n\n\n\n            [[GlobalObject]]\n          \n\n            an Object or undefined\n\n\n            The global object for this realm\n\n\n\n\n            [[GlobalEnv]]\n          \n\n            a global Environment Record\n\n\n            The global environment for this realm\n\n\n\n\n            [[TemplateMap]]\n          \n\n            a List of Record { [[Site]]: Parse Node, [[Array]]: Object }\n          \n\nTemplate objects are canonicalized separately for each realm using its Realm Record's [[TemplateMap]]. Each [[Site]] value is a Parse Node that is a TemplateLiteral. The associated [[Array]] value is the corresponding template object that is passed to a tag function.\nNoteOnce a Parse Node\n becomes unreachable, the corresponding [[Array]] is also unreachable, \nand it would be unobservable if an implementation removed the pair from \nthe [[TemplateMap]] list.\n\n\n\n\n            [[HostDefined]]\n          \n\n            anything (default value is undefined)\n          \n\n            Field reserved for use by hosts that need to associate additional information with a Realm Record.\n          \n\n\n\n\n9.3.1 CreateRealm ( )\nThe abstract operation CreateRealm takes no arguments and returns a Realm Record. It performs the following steps when called:\n1. Let realmRec be a new Realm Record.2. Perform CreateIntrinsics(realmRec).3. Set realmRec.[[GlobalObject]] to undefined.4. Set realmRec.[[GlobalEnv]] to undefined.5. Set realmRec.[[TemplateMap]] to a new empty List.6. Return realmRec.\n\n\n9.3.2 CreateIntrinsics ( realmRec )\nThe abstract operation CreateIntrinsics takes argument realmRec and returns unused. It performs the following steps when called:\n1. Set realmRec.[[Intrinsics]] to a new Record.2. Set fields of realmRec.[[Intrinsics]] with the values listed in Table 6.\n The field names are the names listed in column one of the table. The \nvalue of each field is a new object value fully and recursively \npopulated with property values as defined by the specification of each \nobject in clauses 19 through 28. All object property values are newly created object values. All values that are built-in function objects are created by performing CreateBuiltinFunction(steps, length, name, slots, realmRec, prototype) where steps is the definition of that function provided by this specification, name is the initial value of the function's name property, length is the initial value of the function's length property, slots is a list of the names, if any, of the function's specified internal slots, and prototype\n is the specified value of the function's [[Prototype]] internal slot. \nThe creation of the intrinsics and their properties must be ordered to \navoid any dependencies upon objects that have not yet been created.3. Perform AddRestrictedFunctionProperties(realmRec.[[Intrinsics]].[[%Function.prototype%]], realmRec).4. Return unused.\n\n\n9.3.3 SetRealmGlobalObject ( realmRec, globalObj, thisValue )\nThe abstract operation SetRealmGlobalObject takes arguments realmRec, globalObj (an Object or undefined), and thisValue and returns unused. It performs the following steps when called:\n1. If globalObj is undefined, thena. Let intrinsics be realmRec.[[Intrinsics]].b. Set globalObj to OrdinaryObjectCreate(intrinsics.[[%Object.prototype%]]).2. Assert: Type(globalObj) is Object.3. If thisValue is undefined, set thisValue to globalObj.4. Set realmRec.[[GlobalObject]] to globalObj.5. Let newGlobalEnv be NewGlobalEnvironment(globalObj, thisValue).6. Set realmRec.[[GlobalEnv]] to newGlobalEnv.7. Return unused.\n\n\n9.3.4 SetDefaultGlobalBindings ( realmRec )\nThe abstract operation SetDefaultGlobalBindings takes argument realmRec and returns either a normal completion containing an Object or an abrupt completion. It performs the following steps when called:\n1. Let global be realmRec.[[GlobalObject]].2. For each property of the Global Object specified in clause 19, doa. Let name be the String value of the property name.b. Let desc be the fully populated data Property Descriptor for the property, containing the specified attributes for the property. For properties listed in 19.2, 19.3, or 19.4 the value of the [[Value]] attribute is the corresponding intrinsic object from realmRec.c. Perform ?\u00a0DefinePropertyOrThrow(global, name, desc).3. Return global.\n\n\n\n9.4 Execution Contexts\nAn execution context is a\n specification device that is used to track the runtime evaluation of \ncode by an ECMAScript implementation. At any point in time, there is at \nmost one execution context per agent that is actually executing code. This is known as the agent's running execution context. All references to the running execution context in this specification denote the running execution context of the surrounding agent.\nThe execution context stack is used to track execution contexts. The running execution context\n is always the top element of this stack. A new execution context is \ncreated whenever control is transferred from the executable code \nassociated with the currently running execution context\n to executable code that is not associated with that execution context. \nThe newly created execution context is pushed onto the stack and becomes\n the running execution context.\nAn execution context contains whatever implementation specific \nstate is necessary to track the execution progress of its associated \ncode. Each execution context has at least the state components listed in\n Table 28.\nTable 28: State Components for All Execution Contexts\n\n\n\n            Component\n          \n\n            Purpose\n          \n\n\n\n            code evaluation state\n          \n\n            Any state needed to perform, suspend, and resume evaluation of the code associated with this execution context.\n          \n\n\n\n            Function\n          \n\n            If this execution context is evaluating the code of a function object, then the value of this component is that function object. If the context is evaluating the code of a Script or Module, the value is null.\n          \n\n\n\nRealm\n\n\n            The Realm Record from which associated code accesses ECMAScript resources.\n          \n\n\n\n            ScriptOrModule\n          \n\n            The Module Record or Script Record from which associated code originates. If there is no originating script or module, as is the case for the original execution context created in InitializeHostDefinedRealm, the value is null.\n          \n\n\n\nEvaluation of code by the running execution context may be suspended at various points defined within this specification. Once the running execution context has been suspended a different execution context may become the running execution context and commence evaluating its code. At some later time a suspended execution context may again become the running execution context and continue evaluating its code at the point where it had previously been suspended. Transition of the running execution context\n status among execution contexts usually occurs in stack-like \nlast-in/first-out manner. However, some ECMAScript features require \nnon-LIFO transitions of the running execution context.\nThe value of the Realm component of the running execution context is also called the current Realm Record. The value of the Function component of the running execution context is also called the active function object.\nExecution contexts for ECMAScript code have the additional state components listed in Table 29.\nTable 29: Additional State Components for ECMAScript Code Execution Contexts\n\n\n\n            Component\n          \n\n            Purpose\n          \n\n\n\n            LexicalEnvironment\n          \n\n            Identifies the Environment Record used to resolve identifier references made by code within this execution context.\n          \n\n\n\n            VariableEnvironment\n          \n\n            Identifies the Environment Record that holds bindings created by VariableStatements within this execution context.\n          \n\n\n\n            PrivateEnvironment\n          \n\n            Identifies the PrivateEnvironment Record that holds Private Names created by ClassElements in the nearest containing class. null if there is no containing class.\n          \n\n\n\nThe LexicalEnvironment and VariableEnvironment components of an execution context are always Environment Records.\nExecution contexts representing the evaluation of Generators have the additional state components listed in Table 30.\nTable 30: Additional State Components for Generator Execution Contexts\n\n\n\n            Component\n          \n\n            Purpose\n          \n\n\n\n            Generator\n          \n\n            The Generator that this execution context is evaluating.\n          \n\n\n\nIn most situations only the running execution context (the top of the execution context stack)\n is directly manipulated by algorithms within this specification. Hence \nwhen the terms \u201cLexicalEnvironment\u201d, and \u201cVariableEnvironment\u201d are used \nwithout qualification they are in reference to those components of the running execution context.\nAn execution context is purely a specification mechanism and need\n not correspond to any particular artefact of an ECMAScript \nimplementation. It is impossible for ECMAScript code to directly access \nor observe an execution context.\n\n9.4.1 GetActiveScriptOrModule ( )\nThe abstract operation GetActiveScriptOrModule takes no arguments and returns a Script Record, a Module Record, or null. It is used to determine the running script or module, based on the running execution context. It performs the following steps when called:\n1. If the execution context stack is empty, return null.2. Let ec be the topmost execution context on the execution context stack whose ScriptOrModule component is not null.3. If no such execution context exists, return null. Otherwise, return ec's ScriptOrModule.\n\n\n9.4.2 ResolveBinding ( name [ , env ] )\nThe abstract operation ResolveBinding takes argument name (a String) and optional argument env (an Environment Record or undefined) and returns either a normal completion containing a Reference Record or an abrupt completion. It is used to determine the binding of name. env can be used to explicitly provide the Environment Record that is to be searched for the binding. It performs the following steps when called:\n1. If env is not present or if env is undefined, thena. Set env to the running execution context's LexicalEnvironment.2. Assert: env is an Environment Record.3. If the source text matched by the syntactic production that is being evaluated is contained in strict mode code, let strict be true; else let strict be false.4. Return ?\u00a0GetIdentifierReference(env, name, strict).\nNote\nThe result of ResolveBinding is always a Reference Record whose [[ReferencedName]] field is name.\n\n\n\n9.4.3 GetThisEnvironment ( )\nThe abstract operation GetThisEnvironment takes no arguments and returns an Environment Record. It finds the Environment Record that currently supplies the binding of the keyword this. It performs the following steps when called:\n1. Let env be the running execution context's LexicalEnvironment.2. Repeat,a. Let exists be env.HasThisBinding().b. If exists is true, return env.c. Let outer be env.[[OuterEnv]].d. Assert: outer is not null.e. Set env to outer.\nNote\nThe loop in step 2 will always terminate because the list of environments always ends with the global environment which has a this binding.\n\n\n\n9.4.4 ResolveThisBinding ( )\nThe abstract operation ResolveThisBinding takes no arguments and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It determines the binding of the keyword this using the LexicalEnvironment of the running execution context. It performs the following steps when called:\n1. Let envRec be GetThisEnvironment().2. Return ?\u00a0envRec.GetThisBinding().\n\n\n9.4.5 GetNewTarget ( )\nThe abstract operation GetNewTarget takes no arguments and returns an Object or undefined. It determines the NewTarget value using the LexicalEnvironment of the running execution context. It performs the following steps when called:\n1. Let envRec be GetThisEnvironment().2. Assert: envRec has a [[NewTarget]] field.3. Return envRec.[[NewTarget]].\n\n\n9.4.6 GetGlobalObject ( )\nThe abstract operation GetGlobalObject takes no arguments and returns an Object. It returns the global object used by the currently running execution context. It performs the following steps when called:\n1. Let currentRealm be the current Realm Record.2. Return currentRealm.[[GlobalObject]].\n\n\n\n9.5 Jobs and Host Operations to Enqueue Jobs\nA Job is an Abstract Closure with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.\nJobs are scheduled for execution by ECMAScript host environments. This specification describes the host hook HostEnqueuePromiseJob to schedule one kind of job; hosts may define additional abstract operations which schedule jobs. Such operations accept a Job Abstract Closure\n as the parameter and schedule it to be performed at some future time. \nTheir implementations must conform to the following requirements:\n\nAt some future point in time, when there is no running execution context and the execution context stack is empty, the implementation must:\n        \nPerform any host-defined preparation steps.\nInvoke the Job Abstract Closure.\nPerform any host-defined cleanup steps, after which the execution context stack must be empty.\n\n\nOnly one Job may be actively undergoing evaluation at any point in time.\nOnce evaluation of a Job starts, it must run to completion before evaluation of any other Job starts.\nThe Abstract Closure must return a normal completion, implementing its own handling of errors.\n\nNote 1\nHost environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.\n    \nAt any particular time, scriptOrModule (a Script Record, a Module Record, or null) is the active script or module if all of the following conditions are true:\n\nGetActiveScriptOrModule() is scriptOrModule.\nIf scriptOrModule is a Script Record or Module Record, let ec be the topmost execution context on the execution context stack whose ScriptOrModule component is scriptOrModule. The Realm component of ec is scriptOrModule.[[Realm]].\n\nAt any particular time, an execution is prepared to evaluate ECMAScript code if all of the following conditions are true:\n\nThe execution context stack is not empty.\nThe Realm component of the topmost execution context on the execution context stack is a Realm Record.\n\nNote 2\nHost environments may prepare an execution to evaluate code by pushing execution contexts onto the execution context stack. The specific steps are implementation-defined.\nThe specific choice of Realm is up to the host environment. This initial execution context and Realm is only in use before any callback function is invoked. When a callback function related to a Job, like a Promise handler, is invoked, the invocation pushes its own execution context and Realm.\n\nParticular kinds of Jobs have additional conformance requirements.\n\n9.5.1 JobCallback Records\nA JobCallback Record is a Record value used to store a function object and a host-defined value. Function objects that are invoked via a Job enqueued by the host may have additional host-defined context. To propagate the state, Job Abstract Closures should not capture and call function objects directly. Instead, use HostMakeJobCallback and HostCallJobCallback.\nNote\nThe WHATWG HTML specification (https://html.spec.whatwg.org/), for example, uses the host-defined value to propagate the incumbent settings object for Promise callbacks.\n\nJobCallback Records have the fields listed in Table 31.\nTable 31: JobCallback Record Fields\n\n\n\n              Field Name\n            \n\n              Value\n            \n\n              Meaning\n            \n\n\n\n              [[Callback]]\n            \n\n              a function object\n\n\n              The function to invoke when the Job is invoked.\n            \n\n\n\n              [[HostDefined]]\n            \n\n              anything (default value is empty)\n            \n\n              Field reserved for use by hosts.\n            \n\n\n\n\n\n9.5.2 HostMakeJobCallback ( callback )\nThe host-defined abstract operation HostMakeJobCallback takes argument callback (a function object) and returns a JobCallback Record.\nAn implementation of HostMakeJobCallback must conform to the following requirements:\n\nIt must return a JobCallback Record whose [[Callback]] field is callback.\n\nThe default implementation of HostMakeJobCallback performs the following steps when called:\n1. Return the JobCallback Record { [[Callback]]: callback, [[HostDefined]]: empty }.\nECMAScript hosts that are not web browsers must use the default implementation of HostMakeJobCallback.\nNote\nThis is called at the time that the callback is passed to the\n function that is responsible for its being eventually scheduled and \nrun. For example, promise.then(thenAction) calls MakeJobCallback on thenAction at the time of invoking Promise.prototype.then, not at the time of scheduling the reaction Job.\n\n\n\n9.5.3 HostCallJobCallback ( jobCallback, V, argumentsList )\nThe host-defined abstract operation HostCallJobCallback takes arguments jobCallback (a JobCallback Record), V (an ECMAScript language value), and argumentsList (a List of ECMAScript language values) and returns either a normal completion containing an ECMAScript language value or an abrupt completion.\nAn implementation of HostCallJobCallback must conform to the following requirements:\n\nIt must perform and return the result of Call(jobCallback.[[Callback]], V, argumentsList).\n\nNote\nThis requirement means that hosts cannot change the [[Call]] behaviour of function objects defined in this specification.\n\nThe default implementation of HostCallJobCallback performs the following steps when called:\n1. Assert: IsCallable(jobCallback.[[Callback]]) is true.2. Return ?\u00a0Call(jobCallback.[[Callback]], V, argumentsList).\nECMAScript hosts that are not web browsers must use the default implementation of HostCallJobCallback.\n\n\n9.5.4 HostEnqueuePromiseJob ( job, realm )\nThe host-defined abstract operation HostEnqueuePromiseJob takes arguments job (a Job Abstract Closure) and realm (a Realm Record or null) and returns unused. It schedules job to be performed at some future time. The Abstract Closures\n used with this algorithm are intended to be related to the handling of \nPromises, or otherwise, to be scheduled with equal priority to Promise \nhandling operations.\nAn implementation of HostEnqueuePromiseJob must conform to the requirements in 9.5 as well as the following:\n\nIf realm is not null, each time job is invoked the implementation must perform implementation-defined steps such that execution is prepared to evaluate ECMAScript code at the time of job's invocation.\nLet scriptOrModule be GetActiveScriptOrModule() at the time HostEnqueuePromiseJob is invoked. If realm is not null, each time job is invoked the implementation must perform implementation-defined steps such that scriptOrModule is the active script or module at the time of job's invocation.\nJobs must run in the same order as the HostEnqueuePromiseJob invocations that scheduled them.\n\nNote\nThe realm for Jobs returned by NewPromiseResolveThenableJob is usually the result of calling GetFunctionRealm on the then function object. The realm for Jobs returned by NewPromiseReactionJob is usually the result of calling GetFunctionRealm on the handler if the handler is not undefined. If the handler is undefined, realm is null. For both kinds of Jobs, when GetFunctionRealm completes abnormally (i.e. called on a revoked Proxy), realm is the current Realm at the time of the GetFunctionRealm call. When the realm is null,\n no user ECMAScript code will be evaluated and no new ECMAScript objects\n (e.g. Error objects) will be created. The WHATWG HTML specification (https://html.spec.whatwg.org/), for example, uses realm to check for the ability to run script and for the entry concept.\n\n\n\n\n9.6 InitializeHostDefinedRealm ( )\nThe abstract operation InitializeHostDefinedRealm takes no arguments and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let realm be CreateRealm().2. Let newContext be a new execution context.3. Set the Function of newContext to null.4. Set the Realm of newContext to realm.5. Set the ScriptOrModule of newContext to null.6. Push newContext onto the execution context stack; newContext is now the running execution context.7. If the host requires use of an exotic object to serve as realm's global object, let global be such an object created in a host-defined manner. Otherwise, let global be undefined, indicating that an ordinary object should be created as the global object.8. If the host requires that the this binding in realm's global scope return an object other than the global object, let thisValue be such an object created in a host-defined manner. Otherwise, let thisValue be undefined, indicating that realm's global this binding should be the global object.9. Perform SetRealmGlobalObject(realm, global, thisValue).10. Let globalObj be ?\u00a0SetDefaultGlobalBindings(realm).11. Create any host-defined global object properties on globalObj.12. Return unused.\n\n\n9.7 Agents\nAn agent comprises a set of ECMAScript execution contexts, an execution context stack, a running execution context, an Agent Record, and an executing thread. Except for the executing thread, the constituents of an agent belong exclusively to that agent.\nAn agent's executing thread executes a job on the agent's execution contexts independently of other agents, except that an executing thread may be used as the executing thread by multiple agents, provided none of the agents sharing the thread have an Agent Record whose [[CanBlock]] property is true.\nNote 1\nSome web browsers share a single executing thread across multiple unrelated tabs of a browser window, for example.\n\nWhile an agent's executing thread executes jobs, the agent is the surrounding agent for the code in those jobs. The code uses the surrounding agent to access the specification-level execution objects held within the agent: the running execution context, the execution context stack, and the Agent Record's fields.\nAn agent signifier is a globally-unique opaque value used to identify an Agent.\nTable 32: Agent Record Fields\n\n\nField Name\nValue\nMeaning\n\n\n[[LittleEndian]]\na Boolean\nThe default value computed for the isLittleEndian parameter when it is needed by the algorithms GetValueFromBuffer and SetValueInBuffer. The choice is implementation-defined and should be the alternative that is most efficient for the implementation. Once the value has been observed it cannot change.\n\n\n[[CanBlock]]\na Boolean\nDetermines whether the agent can block or not.\n\n\n[[Signifier]]\nan agent signifier\nUniquely identifies the agent within its agent cluster.\n\n\n[[IsLockFree1]]\na Boolean\ntrue if atomic operations on one-byte values are lock-free, false otherwise.\n\n\n[[IsLockFree2]]\na Boolean\ntrue if atomic operations on two-byte values are lock-free, false otherwise.\n\n\n[[IsLockFree8]]\na Boolean\ntrue if atomic operations on eight-byte values are lock-free, false otherwise.\n\n\n[[CandidateExecution]]\na candidate execution Record\nSee the memory model.\n\n\n[[KeptAlive]]\na List of Objects\nInitially a new empty List, representing the list of objects to be kept alive until the end of the current Job\n\n\n\nOnce the values of [[Signifier]], [[IsLockFree1]], and [[IsLockFree2]] have been observed by any agent in the agent cluster they cannot change.\nNote 2\nThe values of [[IsLockFree1]] and [[IsLockFree2]] are not \nnecessarily determined by the hardware, but may also reflect \nimplementation choices that can vary over time and between ECMAScript \nimplementations.\nThere is no [[IsLockFree4]] property: 4-byte atomic operations are always lock-free.\nIn practice, if an atomic operation is implemented with any \ntype of lock the operation is not lock-free. Lock-free does not imply \nwait-free: there is no upper bound on how many machine steps may be \nrequired to complete a lock-free atomic operation.\nThat an atomic access of size n is lock-free does not imply anything about the (perceived) atomicity of non-atomic accesses of size n, specifically, non-atomic accesses may still be performed as a sequence of several separate memory accesses. See ReadSharedMemory and WriteSharedMemory for details.\n\nNote 3\nAn agent is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.\n\n\n9.7.1 AgentSignifier ( )\nThe abstract operation AgentSignifier takes no arguments and returns an agent signifier. It performs the following steps when called:\n1. Let AR be the Agent Record of the surrounding agent.2. Return AR.[[Signifier]].\n\n\n9.7.2 AgentCanSuspend ( )\nThe abstract operation AgentCanSuspend takes no arguments and returns a Boolean. It performs the following steps when called:\n1. Let AR be the Agent Record of the surrounding agent.2. Return AR.[[CanBlock]].\nNote\nIn some environments it may not be reasonable for a given agent\n to suspend. For example, in a web browser environment, it may be \nreasonable to disallow suspending a document's main event handling \nthread, while still allowing workers' event handling threads to suspend.\n\n\n\n\n9.8 Agent Clusters\nAn agent cluster is a maximal set of agents that can communicate by operating on shared memory.\nNote 1\nPrograms within different agents may share memory by unspecified means. At a minimum, the backing memory for SharedArrayBuffers can be shared among the agents in the cluster.\nThere may be agents that can communicate by message passing that cannot share memory; they are never in the same agent cluster.\n\nEvery agent belongs to exactly one agent cluster.\nNote 2\nThe agents in a cluster need not all be alive at some particular point in time. If agent A creates another agent B, after which A terminates and B creates agent C, the three agents are in the same cluster if A could share some memory with B and B could share some memory with C.\n\nAll agents within a cluster must have the same value for the [[LittleEndian]] property in their respective Agent Records.\nNote 3\nIf different agents within an agent cluster have different values of [[LittleEndian]] it becomes hard to use shared memory for multi-byte data.\n\nAll agents within a cluster must have the same values for the [[IsLockFree1]] property in their respective Agent Records; similarly for the [[IsLockFree2]] property.\nAll agents within a cluster must have different values for the [[Signifier]] property in their respective Agent Records.\nAn embedding may deactivate (stop forward progress) or activate (resume forward progress) an agent without the agent's knowledge or cooperation. If the embedding does so, it must not leave some agents in the cluster active while other agents in the cluster are deactivated indefinitely.\nNote 4\nThe purpose of the preceding restriction is to avoid a situation where an agent deadlocks or starves because another agent\n has been deactivated. For example, if an HTML shared worker that has a \nlifetime independent of documents in any windows were allowed to share \nmemory with the dedicated worker of such an independent document, and \nthe document and its dedicated worker were to be deactivated while the \ndedicated worker holds a lock (say, the document is pushed into its \nwindow's history), and the shared worker then tries to acquire the lock,\n then the shared worker will be blocked until the dedicated worker is \nactivated again, if ever. Meanwhile other workers trying to access the \nshared worker from other windows will starve.\nThe implication of the restriction is that it will not be possible to share memory between agents that don't belong to the same suspend/wake collective within the embedding.\n\nAn embedding may terminate an agent without any of the agent's cluster's other agents' prior knowledge or cooperation. If an agent is terminated not by programmatic action of its own or of another agent\n in the cluster but by forces external to the cluster, then the \nembedding must choose one of two strategies: Either terminate all the agents in the cluster, or provide reliable APIs that allow the agents\n in the cluster to coordinate so that at least one remaining member of \nthe cluster will be able to detect the termination, with the termination\n data containing enough information to identify the agent that was terminated.\nNote 5\nExamples of that type of termination are: operating systems or users terminating agents that are running in separate processes; the embedding itself terminating an agent that is running in-process with the other agents when per-agent resource accounting indicates that the agent is runaway.\n\nPrior to any evaluation of any ECMAScript code by any agent in a cluster, the [[CandidateExecution]] field of the Agent Record for all agents in the cluster is set to the initial candidate execution. The initial candidate execution is an empty candidate execution whose [[EventsRecords]] field is a List containing, for each agent, an Agent Events Record whose [[AgentSignifier]] field is that agent's agent signifier, and whose [[EventList]] and [[AgentSynchronizesWith]] fields are empty Lists.\nNote 6\nAll agents in an agent cluster share the same candidate execution in its Agent Record's [[CandidateExecution]] field. The candidate execution is a specification mechanism used by the memory model.\n\nNote 7\nAn agent cluster is a specification mechanism and need not \ncorrespond to any particular artefact of an ECMAScript implementation.\n\n\n\n9.9 Forward Progress\nFor an agent to make forward progress is for it to perform an evaluation step according to this specification.\nAn agent becomes blocked when its running execution context waits synchronously and indefinitely for an external event. Only agents whose Agent Record's [[CanBlock]] property is true can become blocked in this sense. An unblocked agent is one that is not blocked.\nImplementations must ensure that:\n\nevery unblocked agent with a dedicated executing thread eventually makes forward progress\nin a set of agents that share an executing thread, one agent eventually makes forward progress\nan agent does not cause another agent to become blocked except via explicit APIs that provide blocking.\n\nNote\nThis, along with the liveness guarantee in the memory model, ensures that all SeqCst writes eventually become observable to all agents.\n\n\n\n9.10 Processing Model of WeakRef and FinalizationRegistry Objects\n\n9.10.1 Objectives\nThis specification does not make any guarantees that any object will be garbage collected. Objects which are not live\n may be released after long periods of time, or never at all. For this \nreason, this specification uses the term \"may\" when describing behaviour\n triggered by garbage collection.\nThe semantics of WeakRefs and FinalizationRegistrys is based on two operations which happen at particular points in time:\n\n\n          When WeakRef.prototype.deref is called, the referent (if undefined\n is not returned) is kept alive so that subsequent, synchronous accesses\n also return the object. This list is reset when synchronous work is \ndone using the ClearKeptObjects abstract operation.\n        \n\n          When an object which is registered with a FinalizationRegistry becomes unreachable, a call of the FinalizationRegistry's cleanup callback may eventually be made, after synchronous ECMAScript execution completes. The FinalizationRegistry cleanup is performed with the CleanupFinalizationRegistry abstract operation.\n        \n\nNeither of these actions (ClearKeptObjects or CleanupFinalizationRegistry) may interrupt synchronous ECMAScript execution. Because hosts may assemble longer, synchronous ECMAScript execution runs, this specification defers the scheduling of ClearKeptObjects and CleanupFinalizationRegistry to the host environment.\nSome ECMAScript implementations include garbage collector \nimplementations which run in the background, including when ECMAScript \nis idle. Letting the host environment schedule CleanupFinalizationRegistry\n allows it to resume ECMAScript execution in order to run finalizer \nwork, which may free up held values, reducing overall memory usage.\n\n\n9.10.2 Liveness\nFor some set of objects S, a hypothetical WeakRef-oblivious execution with respect to S is an execution whereby the abstract operation WeakRefDeref of a WeakRef whose referent is an element of S always returns undefined.\nNote 1\nWeakRef-obliviousness, together with liveness, capture two notions. One, that a WeakRef\n itself does not keep an object alive. Two, that cycles in liveness does\n not imply that an object is live. To be concrete, if determining obj's liveness depends on determining the liveness of another WeakRef referent, obj2, obj2's liveness cannot assume obj's liveness, which would be circular reasoning.\n      \nNote 2\nWeakRef-obliviousness\n is defined on sets of objects instead of individual objects to account \nfor cycles. If it were defined on individual objects, then an object in a\n cycle will be considered live even though its Object value is only \nobserved via WeakRefs of other objects in the cycle.\n      \nNote 3\n        Colloquially, we say that an individual object is live if every set of objects containing it is live.\n      \nAt any point during evaluation, a set of objects S is considered live if either of the following conditions is met:\n\n\n          Any element in S is included in any agent's [[KeptAlive]] List.\n        \n\n          There exists a valid future hypothetical WeakRef-oblivious execution with respect to S that observes the Object value of any object in S.\n        \n\nNote 4\n        The second condition above intends to capture the intuition that\n an object is live if its identity is observable via non-WeakRef\n means. An object's identity may be observed by observing a strict \nequality comparison between objects or observing the object being used \nas key in a Map.\n      \nNote 5\nPresence of an object in a field, an internal slot, or a \nproperty does not imply that the object is live. For example if the \nobject in question is never passed back to the program, then it cannot \nbe observed.\nThis is the case for keys in a WeakMap, members of a WeakSet,\n as well as the [[WeakRefTarget]] and [[UnregisterToken]] fields of a FinalizationRegistry Cell record.\nThe above definition implies that, if a key in a WeakMap is \nnot live, then its corresponding value is not necessarily live either.\n\nNote 6\n        Liveness is the lower bound for guaranteeing which WeakRefs\n engines must not empty. Liveness as defined here is undecidable. In \npractice, engines use conservative approximations such as reachability. \nThere is expected to be significant implementation leeway.\n      \n\n\n9.10.3 Execution\nAt any time, if a set of objects S is not live, an ECMAScript implementation may perform the following steps atomically:\n1. For each element obj of S, doa. For each WeakRef ref such that ref.[[WeakRefTarget]] is obj, doi. Set ref.[[WeakRefTarget]] to empty.b. For each FinalizationRegistry fg such that fg.[[Cells]] contains a Record cell such that cell.[[WeakRefTarget]] is obj, doi. Set cell.[[WeakRefTarget]] to empty.ii. Optionally, perform HostEnqueueFinalizationRegistryCleanupJob(fg).c. For each WeakMap map such that map.[[WeakMapData]] contains a Record r such that r.[[Key]] is obj, doi. Set r.[[Key]] to empty.ii. Set r.[[Value]] to empty.d. For each WeakSet set such that set.[[WeakSetData]] contains obj, doi. Replace the element of set.[[WeakSetData]] whose value is obj with an element whose value is empty.\nNote 1\nTogether with the definition of liveness, this clause prescribes legal optimizations that an implementation may apply regarding WeakRefs.\nIt is possible to access an object without observing its \nidentity. Optimizations such as dead variable elimination and scalar \nreplacement on properties of non-escaping objects whose identity is not \nobserved are allowed. These optimizations are thus allowed to observably\n empty WeakRefs that point to such objects.\nOn the other hand, if an object's identity is observable, and that object is in the [[WeakRefTarget]] internal slot of a WeakRef, optimizations such as rematerialization that observably empty the WeakRef are prohibited.\nBecause calling HostEnqueueFinalizationRegistryCleanupJob is optional, registered objects in a FinalizationRegistry do not necessarily hold that FinalizationRegistry live. Implementations may omit FinalizationRegistry callbacks for any reason, e.g., if the FinalizationRegistry itself becomes dead, or if the application is shutting down.\n\nNote 2\nImplementations are not obligated to empty WeakRefs for maximal sets of non-live objects.\nIf an implementation chooses a non-live set S in which to empty WeakRefs, it must empty WeakRefs for all objects in S simultaneously. In other words, an implementation must not empty a WeakRef pointing to an object obj without emptying out other WeakRefs that, if not emptied, could result in an execution that observes the Object value of obj.\n\n\n\n9.10.4 Host Hooks\n\n9.10.4.1 HostEnqueueFinalizationRegistryCleanupJob ( finalizationRegistry )\nThe host-defined abstract operation HostEnqueueFinalizationRegistryCleanupJob takes argument finalizationRegistry (a FinalizationRegistry) and returns unused.\nLet cleanupJob be a new Job Abstract Closure with no parameters that captures finalizationRegistry and performs the following steps when called:\n1. Let cleanupResult be Completion(CleanupFinalizationRegistry(finalizationRegistry)).2. If cleanupResult is an abrupt completion, perform any host-defined steps for reporting the error.3. Return unused.\nAn implementation of HostEnqueueFinalizationRegistryCleanupJob schedules cleanupJob to be performed at some future time, if possible. It must also conform to the requirements in 9.5.\n\n\n\n\n9.11 ClearKeptObjects ( )\nThe abstract operation ClearKeptObjects takes no arguments and returns unused.\n ECMAScript implementations are expected to call ClearKeptObjects when a\n synchronous sequence of ECMAScript executions completes. It performs \nthe following steps when called:\n1. Let agentRecord be the surrounding agent's Agent Record.2. Set agentRecord.[[KeptAlive]] to a new empty List.3. Return unused.\n\n\n9.12 AddToKeptObjects ( object )\nThe abstract operation AddToKeptObjects takes argument object (an Object) and returns unused. It performs the following steps when called:\n1. Let agentRecord be the surrounding agent's Agent Record.2. Append object to agentRecord.[[KeptAlive]].3. Return unused.\nNote\n      When the abstract operation AddToKeptObjects is called with a \ntarget object reference, it adds the target to a list that will point \nstrongly at the target until ClearKeptObjects is called.\n    \n\n\n9.13 CleanupFinalizationRegistry ( finalizationRegistry )\nThe abstract operation CleanupFinalizationRegistry takes argument finalizationRegistry (a FinalizationRegistry) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Assert: finalizationRegistry has [[Cells]] and [[CleanupCallback]] internal slots.2. Let callback be finalizationRegistry.[[CleanupCallback]].3. While finalizationRegistry.[[Cells]] contains a Record cell such that cell.[[WeakRefTarget]] is empty, an implementation may perform the following steps:a. Choose any such cell.b. Remove cell from finalizationRegistry.[[Cells]].c. Perform ?\u00a0HostCallJobCallback(callback, undefined, \u00ab cell.[[HeldValue]] \u00bb).4. Return unused.\n\n\n\n10 Ordinary and Exotic Objects Behaviours\n\n10.1 Ordinary Object Internal Methods and Internal Slots\nAll ordinary objects have an internal slot called [[Prototype]]. The value of this internal slot is either null or an object and is used for implementing inheritance. Data properties\n of the [[Prototype]] object are inherited (and visible as properties of\n the child object) for the purposes of get access, but not for set \naccess. Accessor properties are inherited for both get access and set access.\nEvery ordinary object\n has a Boolean-valued [[Extensible]] internal slot which is used to \nfulfill the extensibility-related internal method invariants specified \nin 6.1.7.3. Namely, once the value of an object's [[Extensible]] internal slot has been set to false,\n it is no longer possible to add properties to the object, to modify the\n value of the object's [[Prototype]] internal slot, or to subsequently \nchange the value of [[Extensible]] to true.\nIn the following algorithm descriptions, assume O is an ordinary object, P is a property key value, V is any ECMAScript language value, and Desc is a Property Descriptor record.\nEach ordinary object\n internal method delegates to a similarly-named abstract operation. If \nsuch an abstract operation depends on another internal method, then the \ninternal method is invoked on O rather than calling the similarly-named abstract operation directly. These semantics ensure that exotic objects have their overridden internal methods invoked when ordinary object internal methods are applied to them.\n\n10.1.1 [[GetPrototypeOf]] ( )\nThe [[GetPrototypeOf]] internal method of an ordinary object O takes no arguments and returns a normal completion containing either an Object or null. It performs the following steps when called:\n1. Return OrdinaryGetPrototypeOf(O).\n\n10.1.1.1 OrdinaryGetPrototypeOf ( O )\nThe abstract operation OrdinaryGetPrototypeOf takes argument O (an Object) and returns an Object or null. It performs the following steps when called:\n1. Return O.[[Prototype]].\n\n\n\n10.1.2 [[SetPrototypeOf]] ( V )\nThe [[SetPrototypeOf]] internal method of an ordinary object O takes argument V (an Object or null) and returns a normal completion containing a Boolean. It performs the following steps when called:\n1. Return OrdinarySetPrototypeOf(O, V).\n\n10.1.2.1 OrdinarySetPrototypeOf ( O, V )\nThe abstract operation OrdinarySetPrototypeOf takes arguments O (an Object) and V (an Object or null) and returns a Boolean. It performs the following steps when called:\n1. Let current be O.[[Prototype]].2. If SameValue(V, current) is true, return true.3. Let extensible be O.[[Extensible]].4. If extensible is false, return false.5. Let p be V.6. Let done be false.7. Repeat, while done is false,a. If p is null, set done to true.b. Else if SameValue(p, O) is true, return false.c. Else,i. If p.[[GetPrototypeOf]] is not the ordinary object internal method defined in 10.1.1, set done to true.ii. Else, set p to p.[[Prototype]].8. Set O.[[Prototype]] to V.9. Return true.\nNote\nThe loop in step 7 guarantees that there will be no circularities in any prototype chain that only includes objects that use the ordinary object definitions for [[GetPrototypeOf]] and [[SetPrototypeOf]].\n\n\n\n\n10.1.3 [[IsExtensible]] ( )\nThe [[IsExtensible]] internal method of an ordinary object O takes no arguments and returns a normal completion containing a Boolean. It performs the following steps when called:\n1. Return OrdinaryIsExtensible(O).\n\n10.1.3.1 OrdinaryIsExtensible ( O )\nThe abstract operation OrdinaryIsExtensible takes argument O (an Object) and returns a Boolean. It performs the following steps when called:\n1. Return O.[[Extensible]].\n\n\n\n10.1.4 [[PreventExtensions]] ( )\nThe [[PreventExtensions]] internal method of an ordinary object O takes no arguments and returns a normal completion containing true. It performs the following steps when called:\n1. Return OrdinaryPreventExtensions(O).\n\n10.1.4.1 OrdinaryPreventExtensions ( O )\nThe abstract operation OrdinaryPreventExtensions takes argument O (an Object) and returns true. It performs the following steps when called:\n1. Set O.[[Extensible]] to false.2. Return true.\n\n\n\n10.1.5 [[GetOwnProperty]] ( P )\nThe [[GetOwnProperty]] internal method of an ordinary object O takes argument P (a property key) and returns a normal completion containing either a Property Descriptor or undefined. It performs the following steps when called:\n1. Return OrdinaryGetOwnProperty(O, P).\n\n10.1.5.1 OrdinaryGetOwnProperty ( O, P )\nThe abstract operation OrdinaryGetOwnProperty takes arguments O (an Object) and P (a property key) and returns a Property Descriptor or undefined. It performs the following steps when called:\n1. If O does not have an own property with key P, return undefined.2. Let D be a newly created Property Descriptor with no fields.3. Let X be O's own property whose key is P.4. If X is a data property, thena. Set D.[[Value]] to the value of X's [[Value]] attribute.b. Set D.[[Writable]] to the value of X's [[Writable]] attribute.5. Else,a. Assert: X is an accessor property.b. Set D.[[Get]] to the value of X's [[Get]] attribute.c. Set D.[[Set]] to the value of X's [[Set]] attribute.6. Set D.[[Enumerable]] to the value of X's [[Enumerable]] attribute.7. Set D.[[Configurable]] to the value of X's [[Configurable]] attribute.8. Return D.\n\n\n\n10.1.6 [[DefineOwnProperty]] ( P, Desc )\nThe [[DefineOwnProperty]] internal method of an ordinary object O takes arguments P (a property key) and Desc (a Property Descriptor) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Return ?\u00a0OrdinaryDefineOwnProperty(O, P, Desc).\n\n10.1.6.1 OrdinaryDefineOwnProperty ( O, P, Desc )\nThe abstract operation OrdinaryDefineOwnProperty takes arguments O (an Object), P (a property key), and Desc (a Property Descriptor) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let current be ?\u00a0O.[[GetOwnProperty]](P).2. Let extensible be ?\u00a0IsExtensible(O).3. Return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current).\n\n\n10.1.6.2 IsCompatiblePropertyDescriptor ( Extensible, Desc, Current )\nThe abstract operation IsCompatiblePropertyDescriptor takes arguments Extensible (a Boolean), Desc (a Property Descriptor), and Current (a Property Descriptor) and returns a Boolean. It performs the following steps when called:\n1. Return ValidateAndApplyPropertyDescriptor(undefined, \"\", Extensible, Desc, Current).\n\n\n10.1.6.3 ValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )\nThe abstract operation ValidateAndApplyPropertyDescriptor takes arguments O (an Object or undefined), P (a property key), extensible (a Boolean), Desc (a Property Descriptor), and current (a Property Descriptor or undefined) and returns a Boolean. It returns true if and only if Desc can be applied as the property of an object with specified extensibility and current property current while upholding invariants. When such application is possible and O is not undefined, it is performed for the property named P (which is created if necessary). It performs the following steps when called:\n1. Assert: IsPropertyKey(P) is true.2. If current is undefined, thena. If extensible is false, return false.b. If O is undefined, return true.c. If IsAccessorDescriptor(Desc) is true, theni. Create an own accessor property named P of object O whose [[Get]], [[Set]], [[Enumerable]], and [[Configurable]] attributes are set to the value of the corresponding field in Desc if Desc has that field, or to the attribute's default value otherwise.d. Else,i. Create an own data property named P of object O\n whose [[Value]], [[Writable]], [[Enumerable]], and [[Configurable]] \nattributes are set to the value of the corresponding field in Desc if Desc has that field, or to the attribute's default value otherwise.e. Return true.3. Assert: current is a fully populated Property Descriptor.4. If Desc does not have any fields, return true.5. If current.[[Configurable]] is false, thena. If Desc has a [[Configurable]] field and Desc.[[Configurable]] is true, return false.b. If Desc has an [[Enumerable]] field and SameValue(Desc.[[Enumerable]], current.[[Enumerable]]) is false, return false.c. If IsGenericDescriptor(Desc) is false and SameValue(IsAccessorDescriptor(Desc), IsAccessorDescriptor(current)) is false, return false.d. If IsAccessorDescriptor(Desc) is true, theni. If Desc has a [[Get]] field and SameValue(Desc.[[Get]], current.[[Get]]) is false, return false.ii. If Desc has a [[Set]] field and SameValue(Desc.[[Set]], current.[[Set]]) is false, return false.e. Else if current.[[Writable]] is false, theni. If Desc has a [[Writable]] field and Desc.[[Writable]] is true, return false.ii. If Desc has a [[Value]] field and SameValue(Desc.[[Value]], current.[[Value]]) is false, return false.6. If O is not undefined, thena. If IsDataDescriptor(current) is true and IsAccessorDescriptor(Desc) is true, theni. If Desc has a [[Configurable]] field, let configurable be Desc.[[Configurable]]; else let configurable be current.[[Configurable]].ii. If Desc has a [[Enumerable]] field, let enumerable be Desc.[[Enumerable]]; else let enumerable be current.[[Enumerable]].iii. Replace the property named P of object O with an accessor property whose [[Configurable]] and [[Enumerable]] attributes are set to configurable and enumerable, respectively, and whose [[Get]] and [[Set]] attributes are set to the value of the corresponding field in Desc if Desc has that field, or to the attribute's default value otherwise.b. Else if IsAccessorDescriptor(current) is true and IsDataDescriptor(Desc) is true, theni. If Desc has a [[Configurable]] field, let configurable be Desc.[[Configurable]]; else let configurable be current.[[Configurable]].ii. If Desc has a [[Enumerable]] field, let enumerable be Desc.[[Enumerable]]; else let enumerable be current.[[Enumerable]].iii. Replace the property named P of object O with a data property whose [[Configurable]] and [[Enumerable]] attributes are set to configurable and enumerable, respectively, and whose [[Value]] and [[Writable]] attributes are set to the value of the corresponding field in Desc if Desc has that field, or to the attribute's default value otherwise.c. Else,i. For each field of Desc, set the corresponding attribute of the property named P of object O to the value of the field.7. Return true.\n\n\n\n10.1.7 [[HasProperty]] ( P )\nThe [[HasProperty]] internal method of an ordinary object O takes argument P (a property key) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Return ?\u00a0OrdinaryHasProperty(O, P).\n\n10.1.7.1 OrdinaryHasProperty ( O, P )\nThe abstract operation OrdinaryHasProperty takes arguments O (an Object) and P (a property key) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let hasOwn be ?\u00a0O.[[GetOwnProperty]](P).2. If hasOwn is not undefined, return true.3. Let parent be ?\u00a0O.[[GetPrototypeOf]]().4. If parent is not null, thena. Return ?\u00a0parent.[[HasProperty]](P).5. Return false.\n\n\n\n10.1.8 [[Get]] ( P, Receiver )\nThe [[Get]] internal method of an ordinary object O takes arguments P (a property key) and Receiver (an ECMAScript language value) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Return ?\u00a0OrdinaryGet(O, P, Receiver).\n\n10.1.8.1 OrdinaryGet ( O, P, Receiver )\nThe abstract operation OrdinaryGet takes arguments O (an Object), P (a property key), and Receiver (an ECMAScript language value) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let desc be ?\u00a0O.[[GetOwnProperty]](P).2. If desc is undefined, thena. Let parent be ?\u00a0O.[[GetPrototypeOf]]().b. If parent is null, return undefined.c. Return ?\u00a0parent.[[Get]](P, Receiver).3. If IsDataDescriptor(desc) is true, return desc.[[Value]].4. Assert: IsAccessorDescriptor(desc) is true.5. Let getter be desc.[[Get]].6. If getter is undefined, return undefined.7. Return ?\u00a0Call(getter, Receiver).\n\n\n\n10.1.9 [[Set]] ( P, V, Receiver )\nThe [[Set]] internal method of an ordinary object O takes arguments P (a property key), V (an ECMAScript language value), and Receiver (an ECMAScript language value) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Return ?\u00a0OrdinarySet(O, P, V, Receiver).\n\n10.1.9.1 OrdinarySet ( O, P, V, Receiver )\nThe abstract operation OrdinarySet takes arguments O (an Object), P (a property key), V (an ECMAScript language value), and Receiver (an ECMAScript language value) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let ownDesc be ?\u00a0O.[[GetOwnProperty]](P).2. Return ?\u00a0OrdinarySetWithOwnDescriptor(O, P, V, Receiver, ownDesc).\n\n\n10.1.9.2 OrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\nThe abstract operation OrdinarySetWithOwnDescriptor takes arguments O (an Object), P (a property key), V (an ECMAScript language value), Receiver (an ECMAScript language value), and ownDesc (a Property Descriptor or undefined) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If ownDesc is undefined, thena. Let parent be ?\u00a0O.[[GetPrototypeOf]]().b. If parent is not null, theni. Return ?\u00a0parent.[[Set]](P, V, Receiver).c. Else,i. Set ownDesc to the PropertyDescriptor { [[Value]]: undefined, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true }.2. If IsDataDescriptor(ownDesc) is true, thena. If ownDesc.[[Writable]] is false, return false.b. If Type(Receiver) is not Object, return false.c. Let existingDescriptor be ?\u00a0Receiver.[[GetOwnProperty]](P).d. If existingDescriptor is not undefined, theni. If IsAccessorDescriptor(existingDescriptor) is true, return false.ii. If existingDescriptor.[[Writable]] is false, return false.iii. Let valueDesc be the PropertyDescriptor { [[Value]]: V }.iv. Return ?\u00a0Receiver.[[DefineOwnProperty]](P, valueDesc).e. Else,i. Assert: Receiver does not currently have a property P.ii. Return ?\u00a0CreateDataProperty(Receiver, P, V).3. Assert: IsAccessorDescriptor(ownDesc) is true.4. Let setter be ownDesc.[[Set]].5. If setter is undefined, return false.6. Perform ?\u00a0Call(setter, Receiver, \u00ab V \u00bb).7. Return true.\n\n\n\n10.1.10 [[Delete]] ( P )\nThe [[Delete]] internal method of an ordinary object O takes argument P (a property key) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Return ?\u00a0OrdinaryDelete(O, P).\n\n10.1.10.1 OrdinaryDelete ( O, P )\nThe abstract operation OrdinaryDelete takes arguments O (an Object) and P (a property key) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let desc be ?\u00a0O.[[GetOwnProperty]](P).2. If desc is undefined, return true.3. If desc.[[Configurable]] is true, thena. Remove the own property with name P from O.b. Return true.4. Return false.\n\n\n\n10.1.11 [[OwnPropertyKeys]] ( )\nThe [[OwnPropertyKeys]] internal method of an ordinary object O takes no arguments and returns a normal completion containing a List of property keys. It performs the following steps when called:\n1. Return OrdinaryOwnPropertyKeys(O).\n\n10.1.11.1 OrdinaryOwnPropertyKeys ( O )\nThe abstract operation OrdinaryOwnPropertyKeys takes argument O (an Object) and returns a List of property keys. It performs the following steps when called:\n1. Let keys be a new empty List.2. For each own property key P of O such that P is an array index, in ascending numeric index order, doa. Add P as the last element of keys.3. For each own property key P of O such that Type(P) is String and P is not an array index, in ascending chronological order of property creation, doa. Add P as the last element of keys.4. For each own property key P of O such that Type(P) is Symbol, in ascending chronological order of property creation, doa. Add P as the last element of keys.5. Return keys.\n\n\n\n10.1.12 OrdinaryObjectCreate ( proto [ , additionalInternalSlotsList ] )\nThe abstract operation OrdinaryObjectCreate takes argument proto (an Object or null) and optional argument additionalInternalSlotsList (a List of names of internal slots) and returns an Object. It is used to specify the runtime creation of new ordinary objects. additionalInternalSlotsList\n contains the names of additional internal slots that must be defined as\n part of the object, beyond [[Prototype]] and [[Extensible]]. If additionalInternalSlotsList is not provided, a new empty List is used. It performs the following steps when called:\n1. Let internalSlotsList be \u00ab [[Prototype]], [[Extensible]] \u00bb.2. If additionalInternalSlotsList is present, append each of its elements to internalSlotsList.3. Let O be MakeBasicObject(internalSlotsList).4. Set O.[[Prototype]] to proto.5. Return O.\nNote\nAlthough OrdinaryObjectCreate does little more than call MakeBasicObject, its use communicates the intention to create an ordinary object,\n and not an exotic one. Thus, within this specification, it is not \ncalled by any algorithm that subsequently modifies the internal methods \nof the object in ways that would make the result non-ordinary. \nOperations that create exotic objects invoke MakeBasicObject directly.\n\n\n\n10.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\nThe abstract operation OrdinaryCreateFromConstructor takes arguments constructor and intrinsicDefaultProto (a String) and optional argument internalSlotsList (a List of names of internal slots) and returns either a normal completion containing an Object or an abrupt completion. It creates an ordinary object whose [[Prototype]] value is retrieved from a constructor's \"prototype\" property, if it exists. Otherwise the intrinsic named by intrinsicDefaultProto is used for [[Prototype]]. internalSlotsList contains the names of additional internal slots that must be defined as part of the object. If internalSlotsList is not provided, a new empty List is used. It performs the following steps when called:\n1. Assert: intrinsicDefaultProto\n is this specification's name of an intrinsic object. The corresponding \nobject must be an intrinsic that is intended to be used as the \n[[Prototype]] value of an object.2. Let proto be ?\u00a0GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).3. Return OrdinaryObjectCreate(proto, internalSlotsList).\n\n\n10.1.14 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\nThe abstract operation GetPrototypeFromConstructor takes arguments constructor (a function object) and intrinsicDefaultProto (a String) and returns either a normal completion containing an Object or an abrupt completion. It determines the [[Prototype]] value that should be used to create an object corresponding to a specific constructor. The value is retrieved from the constructor's \"prototype\" property, if it exists. Otherwise the intrinsic named by intrinsicDefaultProto is used for [[Prototype]]. It performs the following steps when called:\n1. Assert: intrinsicDefaultProto\n is this specification's name of an intrinsic object. The corresponding \nobject must be an intrinsic that is intended to be used as the \n[[Prototype]] value of an object.2. Let proto be ?\u00a0Get(constructor, \"prototype\").3. If Type(proto) is not Object, thena. Let realm be ?\u00a0GetFunctionRealm(constructor).b. Set proto to realm's intrinsic object named intrinsicDefaultProto.4. Return proto.\nNote\nIf constructor does not supply a [[Prototype]] value, the default value that is used is obtained from the realm of the constructor function rather than from the running execution context.\n\n\n\n10.1.15 RequireInternalSlot ( O, internalSlot )\nThe abstract operation RequireInternalSlot takes arguments O and internalSlot and returns either a normal completion containing unused or an abrupt completion. It throws an exception unless O is an Object and has the given internal slot. It performs the following steps when called:\n1. If Type(O) is not Object, throw a TypeError exception.2. If O does not have an internalSlot internal slot, throw a TypeError exception.3. Return unused.\n\n\n\n10.2 ECMAScript Function Objects\nECMAScript function objects\n encapsulate parameterized ECMAScript code closed over a lexical \nenvironment and support the dynamic evaluation of that code. An \nECMAScript function object is an ordinary object and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript function object may be either strict mode code (11.2.2) or non-strict code. An ECMAScript function object whose code is strict mode code is called a strict function. One whose code is not strict mode code is called a non-strict function.\nIn addition to [[Extensible]] and [[Prototype]], ECMAScript function objects also have the internal slots listed in Table 33.\nTable 33: Internal Slots of ECMAScript Function Objects\n\n\n\n            Internal Slot\n          \n\n            Type\n          \n\n            Description\n          \n\n\n\n            [[Environment]]\n          \n\n            an Environment Record\n\n\n            The Environment Record that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n\n\n\n            [[PrivateEnvironment]]\n          \n\n            a PrivateEnvironment Record or null\n\n\n            The PrivateEnvironment Record for Private Names that the function was closed over. null\n if this function is not syntactically contained within a class. Used as\n the outer PrivateEnvironment for inner classes when evaluating the code\n of the function.\n          \n\n\n\n            [[FormalParameters]]\n          \n\n            a Parse Node\n\n\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n\n\n\n            [[ECMAScriptCode]]\n          \n\n            a Parse Node\n\n\n            The root parse node of the source text that defines the function's body.\n          \n\n\n\n            [[ConstructorKind]]\n          \n\nbase or derived\n\n\n            Whether or not the function is a derived class constructor.\n          \n\n\n\n            [[Realm]]\n          \n\n            a Realm Record\n\n\n            The realm in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n\n\n\n            [[ScriptOrModule]]\n          \n\n            a Script Record or a Module Record\n\n\n            The script or module in which the function was created.\n          \n\n\n\n            [[ThisMode]]\n          \n\nlexical, strict, or global\n\n\n            Defines how this references are interpreted within the formal parameters and code body of the function. lexical means that this refers to the this value of a lexically enclosing function. strict means that the this value is used exactly as provided by an invocation of the function. global means that a this value of undefined or null is interpreted as a reference to the global object, and any other this value is first passed to ToObject.\n          \n\n\n\n            [[Strict]]\n          \n\n            a Boolean\n          \n\ntrue if this is a strict function, false if this is a non-strict function.\n          \n\n\n\n            [[HomeObject]]\n          \n\n            an Object\n          \n\n            If the function uses super, this is the object whose [[GetPrototypeOf]] provides the object where super property lookups begin.\n          \n\n\n\n            [[SourceText]]\n          \n\n            a sequence of Unicode code points\n          \n\n            The source text that defines the function.\n          \n\n\n\n            [[Fields]]\n          \n\n            a List of ClassFieldDefinition Records\n\n\n            If the function is a class, this is a list of Records representing the non-static fields and corresponding initializers of the class.\n          \n\n\n\n            [[PrivateMethods]]\n          \n\n            a List of PrivateElements\n\n\n            If the function is a class, this is a list representing the non-static private methods and accessors of the class.\n          \n\n\n\n            [[ClassFieldInitializerName]]\n          \n\n            a String, a Symbol, a Private Name, or empty\n\n\n            If the function is created as the initializer of a class field, the name to use for NamedEvaluation of the field; empty otherwise.\n          \n\n\n\n            [[IsClassConstructor]]\n          \n\n            a Boolean\n          \n\n            Indicates whether the function is a class constructor. (If true, invoking the function's [[Call]] will immediately throw a TypeError exception.)\n          \n\n\n\nAll ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.\n\n10.2.1 [[Call]] ( thisArgument, argumentsList )\nThe [[Call]] internal method of an ECMAScript function object F takes arguments thisArgument (an ECMAScript language value) and argumentsList (a List of ECMAScript language values) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let callerContext be the running execution context.2. Let calleeContext be PrepareForOrdinaryCall(F, undefined).3. Assert: calleeContext is now the running execution context.4. If F.[[IsClassConstructor]] is true, thena. Let error be a newly created TypeError object.b. NOTE: error is created in calleeContext with F's associated Realm Record.c. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.d. Return ThrowCompletion(error).5. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).6. Let result be Completion(OrdinaryCallEvaluateBody(F, argumentsList)).7. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.8. If result.[[Type]] is return, return result.[[Value]].9. ReturnIfAbrupt(result).10. Return undefined.\nNote\nWhen calleeContext is removed from the execution context stack in step 7 it must not be destroyed if it is suspended and retained for later resumption by an accessible Generator.\n\n\n10.2.1.1 PrepareForOrdinaryCall ( F, newTarget )\nThe abstract operation PrepareForOrdinaryCall takes arguments F (a function object) and newTarget (an Object or undefined) and returns an execution context. It performs the following steps when called:\n1. Let callerContext be the running execution context.2. Let calleeContext be a new ECMAScript code execution context.3. Set the Function of calleeContext to F.4. Let calleeRealm be F.[[Realm]].5. Set the Realm of calleeContext to calleeRealm.6. Set the ScriptOrModule of calleeContext to F.[[ScriptOrModule]].7. Let localEnv be NewFunctionEnvironment(F, newTarget).8. Set the LexicalEnvironment of calleeContext to localEnv.9. Set the VariableEnvironment of calleeContext to localEnv.10. Set the PrivateEnvironment of calleeContext to F.[[PrivateEnvironment]].11. If callerContext is not already suspended, suspend callerContext.12. Push calleeContext onto the execution context stack; calleeContext is now the running execution context.13. NOTE: Any exception objects produced after this point are associated with calleeRealm.14. Return calleeContext.\n\n\n10.2.1.2 OrdinaryCallBindThis ( F, calleeContext, thisArgument )\nThe abstract operation OrdinaryCallBindThis takes arguments F (a function object), calleeContext (an execution context), and thisArgument (an ECMAScript language value) and returns unused. It performs the following steps when called:\n1. Let thisMode be F.[[ThisMode]].2. If thisMode is lexical, return unused.3. Let calleeRealm be F.[[Realm]].4. Let localEnv be the LexicalEnvironment of calleeContext.5. If thisMode is strict, let thisValue be thisArgument.6. Else,a. If thisArgument is undefined or null, theni. Let globalEnv be calleeRealm.[[GlobalEnv]].ii. Assert: globalEnv is a global Environment Record.iii. Let thisValue be globalEnv.[[GlobalThisValue]].b. Else,i. Let thisValue be !\u00a0ToObject(thisArgument).ii. NOTE: ToObject produces wrapper objects using calleeRealm.7. Assert: localEnv is a function Environment Record.8. Assert: The next step never returns an abrupt completion because localEnv.[[ThisBindingStatus]] is not initialized.9. Perform !\u00a0localEnv.BindThisValue(thisValue).10. Return unused.\n\n\n10.2.1.3 Runtime Semantics: EvaluateBody\nThe syntax-directed operation EvaluateBody takes arguments functionObject and argumentsList (a List) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nFunctionBody : FunctionStatementList\n\n\n1. Return ?\u00a0EvaluateFunctionBody of FunctionBody with arguments functionObject and argumentsList.\n\nConciseBody : ExpressionBody\n\n\n1. Return ?\u00a0EvaluateConciseBody of ConciseBody with arguments functionObject and argumentsList.\n\nGeneratorBody : FunctionBody\n\n\n1. Return ?\u00a0EvaluateGeneratorBody of GeneratorBody with arguments functionObject and argumentsList.\n\nAsyncGeneratorBody : FunctionBody\n\n\n1. Return ?\u00a0EvaluateAsyncGeneratorBody of AsyncGeneratorBody with arguments functionObject and argumentsList.\n\nAsyncFunctionBody : FunctionBody\n\n\n1. Return ?\u00a0EvaluateAsyncFunctionBody of AsyncFunctionBody with arguments functionObject and argumentsList.\n\nAsyncConciseBody : ExpressionBody\n\n\n1. Return ?\u00a0EvaluateAsyncConciseBody of AsyncConciseBody with arguments functionObject and argumentsList.\n\nInitializer : \n=\nAssignmentExpression\n\n\n\n1. Assert: argumentsList is empty.2. Assert: functionObject.[[ClassFieldInitializerName]] is not empty.3. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, thena. Let value be ?\u00a0NamedEvaluation of Initializer with argument functionObject.[[ClassFieldInitializerName]].4. Else,a. Let rhs be the result of evaluating AssignmentExpression.b. Let value be ?\u00a0GetValue(rhs).5. Return Completion Record { [[Type]]: return, [[Value]]: value, [[Target]]: empty }.\nNote\nEven though field initializers constitute a function boundary, calling FunctionDeclarationInstantiation does not have any observable effect and so is omitted.\n\n\nClassStaticBlockBody : ClassStaticBlockStatementList\n\n\n1. Assert: argumentsList is empty.2. Return ?\u00a0EvaluateClassStaticBlockBody of ClassStaticBlockBody with argument functionObject.\n\n\n10.2.1.4 OrdinaryCallEvaluateBody ( F, argumentsList )\nThe abstract operation OrdinaryCallEvaluateBody takes arguments F (a function object) and argumentsList (a List) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Return ?\u00a0EvaluateBody of F.[[ECMAScriptCode]] with arguments F and argumentsList.\n\n\n\n10.2.2 [[Construct]] ( argumentsList, newTarget )\nThe [[Construct]] internal method of an ECMAScript function object F takes arguments argumentsList (a List of ECMAScript language values) and newTarget (a constructor) and returns either a normal completion containing an Object or an abrupt completion. It performs the following steps when called:\n1. Let callerContext be the running execution context.2. Let kind be F.[[ConstructorKind]].3. If kind is base, thena. Let thisArgument be ?\u00a0OrdinaryCreateFromConstructor(newTarget, \"%Object.prototype%\").4. Let calleeContext be PrepareForOrdinaryCall(F, newTarget).5. Assert: calleeContext is now the running execution context.6. If kind is base, thena. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).b. Let initializeResult be Completion(InitializeInstanceElements(thisArgument, F)).c. If initializeResult is an abrupt completion, theni. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.ii. Return ?\u00a0initializeResult.7. Let constructorEnv be the LexicalEnvironment of calleeContext.8. Let result be Completion(OrdinaryCallEvaluateBody(F, argumentsList)).9. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.10. If result.[[Type]] is return, thena. If Type(result.[[Value]]) is Object, return result.[[Value]].b. If kind is base, return thisArgument.c. If result.[[Value]] is not undefined, throw a TypeError exception.11. Else, ReturnIfAbrupt(result).12. Let thisBinding be ?\u00a0constructorEnv.GetThisBinding().13. Assert: Type(thisBinding) is Object.14. Return thisBinding.\n\n\n10.2.3 OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, env, privateEnv )\nThe abstract operation OrdinaryFunctionCreate takes arguments functionPrototype (an Object), sourceText (a sequence of Unicode code points), ParameterList (a Parse Node), Body (a Parse Node), thisMode (lexical-this or non-lexical-this), env (an Environment Record), and privateEnv (a PrivateEnvironment Record or null) and returns a function object.\n It is used to specify the runtime creation of a new function with a \ndefault [[Call]] internal method and no [[Construct]] internal method \n(although one may be subsequently added by an operation such as MakeConstructor). sourceText is the source text of the syntactic definition of the function to be created. It performs the following steps when called:\n1. Let internalSlotsList be the internal slots listed in Table 33.2. Let F be OrdinaryObjectCreate(functionPrototype, internalSlotsList).3. Set F.[[Call]] to the definition specified in 10.2.1.4. Set F.[[SourceText]] to sourceText.5. Set F.[[FormalParameters]] to ParameterList.6. Set F.[[ECMAScriptCode]] to Body.7. If the source text matched by Body is strict mode code, let Strict be true; else let Strict be false.8. Set F.[[Strict]] to Strict.9. If thisMode is lexical-this, set F.[[ThisMode]] to lexical.10. Else if Strict is true, set F.[[ThisMode]] to strict.11. Else, set F.[[ThisMode]] to global.12. Set F.[[IsClassConstructor]] to false.13. Set F.[[Environment]] to env.14. Set F.[[PrivateEnvironment]] to privateEnv.15. Set F.[[ScriptOrModule]] to GetActiveScriptOrModule().16. Set F.[[Realm]] to the current Realm Record.17. Set F.[[HomeObject]] to undefined.18. Set F.[[Fields]] to a new empty List.19. Set F.[[PrivateMethods]] to a new empty List.20. Set F.[[ClassFieldInitializerName]] to empty.21. Let len be the ExpectedArgumentCount of ParameterList.22. Perform SetFunctionLength(F, len).23. Return F.\n\n\n10.2.4 AddRestrictedFunctionProperties ( F, realm )\nThe abstract operation AddRestrictedFunctionProperties takes arguments F (a function object) and realm (a Realm Record) and returns unused. It performs the following steps when called:\n1. Assert: realm.[[Intrinsics]].[[%ThrowTypeError%]] exists and has been initialized.2. Let thrower be realm.[[Intrinsics]].[[%ThrowTypeError%]].3. Perform !\u00a0DefinePropertyOrThrow(F, \"caller\", PropertyDescriptor { [[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: true }).4. Perform !\u00a0DefinePropertyOrThrow(F, \"arguments\", PropertyDescriptor { [[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: true }).5. Return unused.\n\n10.2.4.1 %ThrowTypeError% ( )\nThe %ThrowTypeError% intrinsic is an anonymous built-in function object that is defined once for each realm. When %ThrowTypeError% is called it performs the following steps:\n1. Throw a TypeError exception.\nThe value of the [[Extensible]] internal slot of a %ThrowTypeError% function is false.\nThe \"length\" property of a %ThrowTypeError% function has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\nThe \"name\" property of a %ThrowTypeError% function has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n10.2.5 MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )\nThe abstract operation MakeConstructor takes argument F (an ECMAScript function object or a built-in function object) and optional arguments writablePrototype (a Boolean) and prototype (an Object) and returns unused. It converts F into a constructor. It performs the following steps when called:\n1. If F is an ECMAScript function object, thena. Assert: IsConstructor(F) is false.b. Assert: F is an extensible object that does not have a \"prototype\" own property.c. Set F.[[Construct]] to the definition specified in 10.2.2.2. Else,a. Set F.[[Construct]] to the definition specified in 10.3.2.3. Set F.[[ConstructorKind]] to base.4. If writablePrototype is not present, set writablePrototype to true.5. If prototype is not present, thena. Set prototype to OrdinaryObjectCreate(%Object.prototype%).b. Perform !\u00a0DefinePropertyOrThrow(prototype, \"constructor\", PropertyDescriptor { [[Value]]: F, [[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: true }).6. Perform !\u00a0DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false }).7. Return unused.\n\n\n10.2.6 MakeClassConstructor ( F )\nThe abstract operation MakeClassConstructor takes argument F (an ECMAScript function object) and returns unused. It performs the following steps when called:\n1. Assert: F.[[IsClassConstructor]] is false.2. Set F.[[IsClassConstructor]] to true.3. Return unused.\n\n\n10.2.7 MakeMethod ( F, homeObject )\nThe abstract operation MakeMethod takes arguments F (an ECMAScript function object) and homeObject (an Object) and returns unused. It configures F as a method. It performs the following steps when called:\n1. Set F.[[HomeObject]] to homeObject.2. Return unused.\n\n\n10.2.8 DefineMethodProperty ( homeObject, key, closure, enumerable )\nThe abstract operation DefineMethodProperty takes arguments homeObject (an Object), key (a property key or Private Name), closure (a function object), and enumerable (a Boolean) and returns a PrivateElement or unused. It performs the following steps when called:\n1. Assert: homeObject is an ordinary, extensible object with no non-configurable properties.2. If key is a Private Name, thena. Return PrivateElement { [[Key]]: key, [[Kind]]: method, [[Value]]: closure }.3. Else,a. Let desc be the PropertyDescriptor { [[Value]]: closure, [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true }.b. Perform !\u00a0DefinePropertyOrThrow(homeObject, key, desc).c. Return unused.\n\n\n10.2.9 SetFunctionName ( F, name [ , prefix ] )\nThe abstract operation SetFunctionName takes arguments F (a function object) and name (a property key or Private Name) and optional argument prefix (a String) and returns unused. It adds a \"name\" property to F. It performs the following steps when called:\n1. Assert: F is an extensible object that does not have a \"name\" own property.2. If Type(name) is Symbol, thena. Let description be name's [[Description]] value.b. If description is undefined, set name to the empty String.c. Else, set name to the string-concatenation of \"[\", description, and \"]\".3. Else if name is a Private Name, thena. Set name to name.[[Description]].4. If F has an [[InitialName]] internal slot, thena. Set F.[[InitialName]] to name.5. If prefix is present, thena. Set name to the string-concatenation of prefix, the code unit 0x0020 (SPACE), and name.b. If F has an [[InitialName]] internal slot, theni. Optionally, set F.[[InitialName]] to name.6. Perform !\u00a0DefinePropertyOrThrow(F, \"name\", PropertyDescriptor { [[Value]]: name, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }).7. Return unused.\n\n\n10.2.10 SetFunctionLength ( F, length )\nThe abstract operation SetFunctionLength takes arguments F (a function object) and length (a non-negative integer or +\u221e) and returns unused. It adds a \"length\" property to F. It performs the following steps when called:\n1. Assert: F is an extensible object that does not have a \"length\" own property.2. Perform !\u00a0DefinePropertyOrThrow(F, \"length\", PropertyDescriptor { [[Value]]: \ud835\udd3d(length), [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }).3. Return unused.\n\n\n10.2.11 FunctionDeclarationInstantiation ( func, argumentsList )\nThe abstract operation FunctionDeclarationInstantiation takes arguments func (a function object) and argumentsList and returns either a normal completion containing unused or an abrupt completion. func is the function object for which the execution context is being established.\nNote 1\nWhen an execution context is established for evaluating an ECMAScript function a new function Environment Record is created and bindings for each formal parameter are instantiated in that Environment Record.\n Each declaration in the function body is also instantiated. If the \nfunction's formal parameters do not include any default value \ninitializers then the body declarations are instantiated in the same Environment Record as the parameters. If default value parameter initializers exist, a second Environment Record\n is created for the body declarations. Formal parameters and functions \nare initialized as part of FunctionDeclarationInstantiation. All other \nbindings are initialized during evaluation of the function body.\n\nIt performs the following steps when called:\n\n1. Let calleeContext be the running execution context.2. Let code be func.[[ECMAScriptCode]].3. Let strict be func.[[Strict]].4. Let formals be func.[[FormalParameters]].5. Let parameterNames be the BoundNames of formals.6. If parameterNames has any duplicate entries, let hasDuplicates be true. Otherwise, let hasDuplicates be false.7. Let simpleParameterList be IsSimpleParameterList of formals.8. Let hasParameterExpressions be ContainsExpression of formals.9. Let varNames be the VarDeclaredNames of code.10. Let varDeclarations be the VarScopedDeclarations of code.11. Let lexicalNames be the LexicallyDeclaredNames of code.12. Let functionNames be a new empty List.13. Let functionsToInitialize be a new empty List.14. For each element d of varDeclarations, in reverse List order, doa. If d is neither a VariableDeclaration nor a ForBinding nor a BindingIdentifier, theni. Assert: d is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration.ii. Let fn be the sole element of the BoundNames of d.iii. If fn is not an element of functionNames, then1. Insert fn as the first element of functionNames.2. NOTE: If there are multiple function declarations for the same name, the last declaration is used.3. Insert d as the first element of functionsToInitialize.15. Let argumentsObjectNeeded be true.16. If func.[[ThisMode]] is lexical, thena. NOTE: Arrow functions never have an arguments object.b. Set argumentsObjectNeeded to false.17. Else if \"arguments\" is an element of parameterNames, thena. Set argumentsObjectNeeded to false.18. Else if hasParameterExpressions is false, thena. If \"arguments\" is an element of functionNames or if \"arguments\" is an element of lexicalNames, theni. Set argumentsObjectNeeded to false.19. If strict is true or if hasParameterExpressions is false, thena. NOTE: Only a single Environment Record is needed for the parameters, since calls to eval in strict mode code cannot create new bindings which are visible outside of the eval.b. Let env be the LexicalEnvironment of calleeContext.20. Else,a. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.b. Let calleeEnv be the LexicalEnvironment of calleeContext.c. Let env be NewDeclarativeEnvironment(calleeEnv).d. Assert: The VariableEnvironment of calleeContext is calleeEnv.e. Set the LexicalEnvironment of calleeContext to env.21. For each String paramName of parameterNames, doa. Let alreadyDeclared be !\u00a0env.HasBinding(paramName).b. NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.c. If alreadyDeclared is false, theni. Perform !\u00a0env.CreateMutableBinding(paramName, false).ii. If hasDuplicates is true, then1. Perform !\u00a0env.InitializeBinding(paramName, undefined).22. If argumentsObjectNeeded is true, thena. If strict is true or if simpleParameterList is false, theni. Let ao be CreateUnmappedArgumentsObject(argumentsList).b. Else,i. NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.ii. Let ao be CreateMappedArgumentsObject(func, formals, argumentsList, env).c. If strict is true, theni. Perform !\u00a0env.CreateImmutableBinding(\"arguments\", false).d. Else,i. Perform !\u00a0env.CreateMutableBinding(\"arguments\", false).e. Perform !\u00a0env.InitializeBinding(\"arguments\", ao).f. Let parameterBindings be the list-concatenation of parameterNames and \u00ab \"arguments\" \u00bb.23. Else,a. Let parameterBindings be parameterNames.24. Let iteratorRecord be CreateListIteratorRecord(argumentsList).25. If hasDuplicates is true, thena. Perform ?\u00a0IteratorBindingInitialization of formals with arguments iteratorRecord and undefined.26. Else,a. Perform ?\u00a0IteratorBindingInitialization of formals with arguments iteratorRecord and env.27. If hasParameterExpressions is false, thena. NOTE: Only a single Environment Record is needed for the parameters and top-level vars.b. Let instantiatedVarNames be a copy of the List parameterBindings.c. For each element n of varNames, doi. If n is not an element of instantiatedVarNames, then1. Append n to instantiatedVarNames.2. Perform !\u00a0env.CreateMutableBinding(n, false).3. Perform !\u00a0env.InitializeBinding(n, undefined).d. Let varEnv be env.28. Else,a. NOTE: A separate Environment Record\n is needed to ensure that closures created by expressions in the formal \nparameter list do not have visibility of declarations in the function \nbody.b. Let varEnv be NewDeclarativeEnvironment(env).c. Set the VariableEnvironment of calleeContext to varEnv.d. Let instantiatedVarNames be a new empty List.e. For each element n of varNames, doi. If n is not an element of instantiatedVarNames, then1. Append n to instantiatedVarNames.2. Perform !\u00a0varEnv.CreateMutableBinding(n, false).3. If n is not an element of parameterBindings or if n is an element of functionNames, let initialValue be undefined.4. Else,a. Let initialValue be !\u00a0env.GetBindingValue(n, false).5. Perform !\u00a0varEnv.InitializeBinding(n, initialValue).6. NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.29. NOTE: Annex B.3.2.1 adds additional steps at this point.30. If strict is false, thena. Let lexEnv be NewDeclarativeEnvironment(varEnv).b. NOTE: Non-strict functions use a separate Environment Record for top-level lexical declarations so that a direct eval\n can determine whether any var scoped declarations introduced by the \neval code conflict with pre-existing top-level lexically scoped \ndeclarations. This is not needed for strict functions because a strict direct eval always places all declarations into a new Environment Record.31. Else, let lexEnv be varEnv.32. Set the LexicalEnvironment of calleeContext to lexEnv.33. Let lexDeclarations be the LexicallyScopedDeclarations of code.34. For each element d of lexDeclarations, doa. NOTE:\n A lexically declared name cannot be the same as a function/generator \ndeclaration, formal parameter, or a var name. Lexically declared names \nare only instantiated here but not initialized.b. For each element dn of the BoundNames of d, doi. If IsConstantDeclaration of d is true, then1. Perform !\u00a0lexEnv.CreateImmutableBinding(dn, true).ii. Else,1. Perform !\u00a0lexEnv.CreateMutableBinding(dn, false).35. Let privateEnv be the PrivateEnvironment of calleeContext.36. For each Parse Node f of functionsToInitialize, doa. Let fn be the sole element of the BoundNames of f.b. Let fo be InstantiateFunctionObject of f with arguments lexEnv and privateEnv.c. Perform !\u00a0varEnv.SetMutableBinding(fn, fo, false).37. Return unused.\nNote 2\nB.3.2\n provides an extension to the above algorithm that is necessary for \nbackwards compatibility with web browser implementations of ECMAScript \nthat predate ECMAScript 2015.\n\n\n\n\n10.3 Built-in Function Objects\nThe built-in function objects defined in this specification may be implemented as either ECMAScript function objects (10.2) whose behaviour is provided using ECMAScript code or as implementation provided function exotic objects\n whose behaviour is provided in some other manner. In either case, the \neffect of calling such functions must conform to their specifications. \nAn implementation may also provide additional built-in function objects that are not defined in this specification.\nIf a built-in function object is implemented as an ECMAScript function object, it must have all the internal slots described in 10.2 ([[Prototype]], [[Extensible]], and the slots listed in Table 33),\n and [[InitialName]]. The value of the [[InitialName]] internal slot is a\n String value that is the initial name of the function. It is used by 20.2.3.5.\nIf a built-in function object is implemented as an exotic object, it must have the ordinary object behaviour specified in 10.1. All such function exotic objects have [[Prototype]], [[Extensible]], [[Realm]], and [[InitialName]] internal slots, with the same meanings as above.\nUnless otherwise specified every built-in function object has the %Function.prototype% object as the initial value of its [[Prototype]] internal slot.\nThe behaviour specified for each built-in function via algorithm \nsteps or other means is the specification of the function body behaviour\n for both [[Call]] and [[Construct]] invocations of the function. \nHowever, [[Construct]] invocation is not supported by all built-in \nfunctions. For each built-in function, when invoked with [[Call]], the \n[[Call]] thisArgument provides the this value, the [[Call]] argumentsList provides the named parameters, and the NewTarget value is undefined. When invoked with [[Construct]], the this value is uninitialized, the [[Construct]] argumentsList provides the named parameters, and the [[Construct]] newTarget parameter provides the NewTarget value. If the built-in function is implemented as an ECMAScript function object\n then this specified behaviour must be implemented by the ECMAScript \ncode that is the body of the function. Built-in functions that are \nECMAScript function objects must be strict functions. If a built-in constructor has any [[Call]] behaviour other than throwing a TypeError\n exception, an ECMAScript implementation of the function must be done in\n a manner that does not cause the function's [[IsClassConstructor]] \ninternal slot to have the value true.\nBuilt-in function objects that are not identified as constructors\n do not implement the [[Construct]] internal method unless otherwise \nspecified in the description of a particular function. When a built-in constructor is called as part of a new expression the argumentsList parameter of the invoked [[Construct]] internal method provides the values for the built-in constructor's named parameters.\nBuilt-in functions that are not constructors do not have a \"prototype\" property unless otherwise specified in the description of a particular function.\nIf a built-in function object\n is not implemented as an ECMAScript function it must provide [[Call]] \nand [[Construct]] internal methods that conform to the following \ndefinitions:\n\n10.3.1 [[Call]] ( thisArgument, argumentsList )\nThe [[Call]] internal method of a built-in function object F takes arguments thisArgument (an ECMAScript language value) and argumentsList (a List of ECMAScript language values) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let callerContext be the running execution context.2. If callerContext is not already suspended, suspend callerContext.3. Let calleeContext be a new execution context.4. Set the Function of calleeContext to F.5. Let calleeRealm be F.[[Realm]].6. Set the Realm of calleeContext to calleeRealm.7. Set the ScriptOrModule of calleeContext to null.8. Perform any necessary implementation-defined initialization of calleeContext.9. Push calleeContext onto the execution context stack; calleeContext is now the running execution context.10. Let result be the Completion Record that is the result of evaluating F in a manner that conforms to the specification of F. thisArgument is the this value, argumentsList provides the named parameters, and the NewTarget value is undefined.11. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.12. Return ?\u00a0result.\nNote\nWhen calleeContext is removed from the execution context stack it must not be destroyed if it has been suspended and retained by an accessible Generator for later resumption.\n\n\n\n10.3.2 [[Construct]] ( argumentsList, newTarget )\nThe [[Construct]] internal method of a built-in function object F takes arguments argumentsList (a List of ECMAScript language values) and newTarget (a constructor) and returns either a normal completion containing an Object or an abrupt completion. The steps performed are the same as [[Call]] (see 10.3.1) except that step 10 is replaced by:\n1. Let result be the Completion Record that is the result of evaluating F in a manner that conforms to the specification of F. The this value is uninitialized, argumentsList provides the named parameters, and newTarget provides the NewTarget value.\n\n\n10.3.3 CreateBuiltinFunction ( behaviour, length, name, additionalInternalSlotsList [ , realm [ , prototype [ , prefix ] ] ] )\nThe abstract operation CreateBuiltinFunction takes arguments behaviour (an Abstract Closure, a set of algorithm steps, or some other definition of a function's behaviour provided in this specification), length (a non-negative integer or +\u221e), name (a property key), and additionalInternalSlotsList (a List of names of internal slots) and optional arguments realm (a Realm Record), prototype (an Object or null), and prefix (a String) and returns a function object. additionalInternalSlotsList contains the names of additional internal slots that must be defined as part of the object. This operation creates a built-in function object. It performs the following steps when called:\n1. If realm is not present, set realm to the current Realm Record.2. If prototype is not present, set prototype to realm.[[Intrinsics]].[[%Function.prototype%]].3. Let internalSlotsList be a List containing the names of all the internal slots that 10.3 requires for the built-in function object that is about to be created.4. Append to internalSlotsList the elements of additionalInternalSlotsList.5. Let func be a new built-in function object that, when called, performs the action described by behaviour using the provided arguments as the values of the corresponding parameters specified by behaviour. The new function object has internal slots whose names are the elements of internalSlotsList, and an [[InitialName]] internal slot.6. Set func.[[Prototype]] to prototype.7. Set func.[[Extensible]] to true.8. Set func.[[Realm]] to realm.9. Set func.[[InitialName]] to null.10. Perform SetFunctionLength(func, length).11. If prefix is not present, thena. Perform SetFunctionName(func, name).12. Else,a. Perform SetFunctionName(func, name, prefix).13. Return func.\nEach built-in function defined in this specification is created by calling the CreateBuiltinFunction abstract operation.\n\n\n\n10.4 Built-in Exotic Object Internal Methods and Slots\nThis specification defines several kinds of built-in exotic objects. These objects generally behave similar to ordinary objects except for a few specific situations. The following exotic objects use the ordinary object internal methods except where it is explicitly specified otherwise below:\n\n10.4.1 Bound Function Exotic Objects\nA bound function exotic object is an exotic object that wraps another function object. A bound function exotic object is callable (it has a [[Call]] internal method and may have a [[Construct]] internal method). Calling a bound function exotic object generally results in a call of its wrapped function.\nAn object is a bound function exotic object\n if its [[Call]] and (if applicable) [[Construct]] internal methods use \nthe following implementations, and its other essential internal methods \nuse the definitions found in 10.1. These methods are installed in BoundFunctionCreate.\nBound function exotic objects do not have the internal slots of ECMAScript function objects listed in Table 33. Instead they have the internal slots listed in Table 34, in addition to [[Prototype]] and [[Extensible]].\nTable 34: Internal Slots of Bound Function Exotic Objects\n\n\n\n              Internal Slot\n            \n\n              Type\n            \n\n              Description\n            \n\n\n\n              [[BoundTargetFunction]]\n            \n\n              a callable Object\n            \n\n              The wrapped function object.\n            \n\n\n\n              [[BoundThis]]\n            \n\n              an ECMAScript language value\n\n\n              The value that is always passed as the this value when calling the wrapped function.\n            \n\n\n\n              [[BoundArguments]]\n            \n\n              a List of ECMAScript language values\n\n\n              A list of values whose elements are used as the first arguments to any call to the wrapped function.\n            \n\n\n\n\n10.4.1.1 [[Call]] ( thisArgument, argumentsList )\nThe [[Call]] internal method of a bound function exotic object F takes arguments thisArgument (an ECMAScript language value) and argumentsList (a List of ECMAScript language values) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let target be F.[[BoundTargetFunction]].2. Let boundThis be F.[[BoundThis]].3. Let boundArgs be F.[[BoundArguments]].4. Let args be the list-concatenation of boundArgs and argumentsList.5. Return ?\u00a0Call(target, boundThis, args).\n\n\n10.4.1.2 [[Construct]] ( argumentsList, newTarget )\nThe [[Construct]] internal method of a bound function exotic object F takes arguments argumentsList (a List of ECMAScript language values) and newTarget (a constructor) and returns either a normal completion containing an Object or an abrupt completion. It performs the following steps when called:\n1. Let target be F.[[BoundTargetFunction]].2. Assert: IsConstructor(target) is true.3. Let boundArgs be F.[[BoundArguments]].4. Let args be the list-concatenation of boundArgs and argumentsList.5. If SameValue(F, newTarget) is true, set newTarget to target.6. Return ?\u00a0Construct(target, args, newTarget).\n\n\n10.4.1.3 BoundFunctionCreate ( targetFunction, boundThis, boundArgs )\nThe abstract operation BoundFunctionCreate takes arguments targetFunction (a function object), boundThis (an ECMAScript language value), and boundArgs (a List of ECMAScript language values) and returns either a normal completion containing a function object or an abrupt completion. It is used to specify the creation of new bound function exotic objects. It performs the following steps when called:\n1. Let proto be ?\u00a0targetFunction.[[GetPrototypeOf]]().2. Let internalSlotsList be the list-concatenation of \u00ab [[Prototype]], [[Extensible]] \u00bb and the internal slots listed in Table 34.3. Let obj be MakeBasicObject(internalSlotsList).4. Set obj.[[Prototype]] to proto.5. Set obj.[[Call]] as described in 10.4.1.1.6. If IsConstructor(targetFunction) is true, thena. Set obj.[[Construct]] as described in 10.4.1.2.7. Set obj.[[BoundTargetFunction]] to targetFunction.8. Set obj.[[BoundThis]] to boundThis.9. Set obj.[[BoundArguments]] to boundArgs.10. Return obj.\n\n\n\n10.4.2 Array Exotic Objects\nAn Array is an exotic object that gives special treatment to array index property keys (see 6.1.7). A property whose property name is an array index is also called an element. Every Array has a non-configurable \"length\" property whose value is always a non-negative integral Number whose mathematical value is less than 232. The value of the \"length\" property is numerically greater than the name of every own property whose name is an array index;\n whenever an own property of an Array is created or changed, other \nproperties are adjusted as necessary to maintain this invariant. \nSpecifically, whenever an own property is added whose name is an array index, the value of the \"length\" property is changed, if necessary, to be one more than the numeric value of that array index; and whenever the value of the \"length\" property is changed, every own property whose name is an array index\n whose value is not smaller than the new length is deleted. This \nconstraint applies only to own properties of an Array and is unaffected \nby \"length\" or array index properties that may be inherited from its prototypes.\nNote\nA String property name P is an array index if and only if ToString(ToUint32(P)) equals P and ToUint32(P) is not the same value as \ud835\udd3d(232 - 1).\n\nAn object is an Array exotic object\n (or simply, an Array) if its [[DefineOwnProperty]] internal method uses\n the following implementation, and its other essential internal methods \nuse the definitions found in 10.1. These methods are installed in ArrayCreate.\n\n10.4.2.1 [[DefineOwnProperty]] ( P, Desc )\nThe [[DefineOwnProperty]] internal method of an Array exotic object A takes arguments P (a property key) and Desc (a Property Descriptor) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If P is \"length\", thena. Return ?\u00a0ArraySetLength(A, Desc).2. Else if P is an array index, thena. Let oldLenDesc be OrdinaryGetOwnProperty(A, \"length\").b. Assert: IsDataDescriptor(oldLenDesc) is true.c. Assert: oldLenDesc.[[Configurable]] is false.d. Let oldLen be oldLenDesc.[[Value]].e. Assert: oldLen is a non-negative integral Number.f. Let index be !\u00a0ToUint32(P).g. If index \u2265 oldLen and oldLenDesc.[[Writable]] is false, return false.h. Let succeeded be !\u00a0OrdinaryDefineOwnProperty(A, P, Desc).i. If succeeded is false, return false.j. If index \u2265 oldLen, theni. Set oldLenDesc.[[Value]] to index + 1\ud835\udd3d.ii. Set succeeded to !\u00a0OrdinaryDefineOwnProperty(A, \"length\", oldLenDesc).iii. Assert: succeeded is true.k. Return true.3. Return ?\u00a0OrdinaryDefineOwnProperty(A, P, Desc).\n\n\n10.4.2.2 ArrayCreate ( length [ , proto ] )\nThe abstract operation ArrayCreate takes argument length (a non-negative integer) and optional argument proto and returns either a normal completion containing an Array exotic object or an abrupt completion. It is used to specify the creation of new Arrays. It performs the following steps when called:\n1. If length > 232 - 1, throw a RangeError exception.2. If proto is not present, set proto to %Array.prototype%.3. Let A be MakeBasicObject(\u00ab [[Prototype]], [[Extensible]] \u00bb).4. Set A.[[Prototype]] to proto.5. Set A.[[DefineOwnProperty]] as specified in 10.4.2.1.6. Perform !\u00a0OrdinaryDefineOwnProperty(A, \"length\", PropertyDescriptor { [[Value]]: \ud835\udd3d(length), [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).7. Return A.\n\n\n10.4.2.3 ArraySpeciesCreate ( originalArray, length )\nThe abstract operation ArraySpeciesCreate takes arguments originalArray and length (a non-negative integer) and returns either a normal completion containing an Object or an abrupt completion. It is used to specify the creation of a new Array or similar object using a constructor function that is derived from originalArray. It does not enforce that the constructor function returns an Array. It performs the following steps when called:\n1. Let isArray be ?\u00a0IsArray(originalArray).2. If isArray is false, return ?\u00a0ArrayCreate(length).3. Let C be ?\u00a0Get(originalArray, \"constructor\").4. If IsConstructor(C) is true, thena. Let thisRealm be the current Realm Record.b. Let realmC be ?\u00a0GetFunctionRealm(C).c. If thisRealm and realmC are not the same Realm Record, theni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.5. If Type(C) is Object, thena. Set C to ?\u00a0Get(C, @@species).b. If C is null, set C to undefined.6. If C is undefined, return ?\u00a0ArrayCreate(length).7. If IsConstructor(C) is false, throw a TypeError exception.8. Return ?\u00a0Construct(C, \u00ab \ud835\udd3d(length) \u00bb).\nNote\nIf originalArray was created using the standard built-in Array constructor for a realm that is not the realm of the running execution context, then a new Array is created using the realm of the running execution context. This maintains compatibility with Web browsers that have historically had that behaviour for the Array.prototype methods that now are defined using ArraySpeciesCreate.\n\n\n\n10.4.2.4 ArraySetLength ( A, Desc )\nThe abstract operation ArraySetLength takes arguments A (an Array) and Desc (a Property Descriptor) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If Desc does not have a [[Value]] field, thena. Return !\u00a0OrdinaryDefineOwnProperty(A, \"length\", Desc).2. Let newLenDesc be a copy of Desc.3. Let newLen be ?\u00a0ToUint32(Desc.[[Value]]).4. Let numberLen be ?\u00a0ToNumber(Desc.[[Value]]).5. If SameValueZero(newLen, numberLen) is false, throw a RangeError exception.6. Set newLenDesc.[[Value]] to newLen.7. Let oldLenDesc be OrdinaryGetOwnProperty(A, \"length\").8. Assert: IsDataDescriptor(oldLenDesc) is true.9. Assert: oldLenDesc.[[Configurable]] is false.10. Let oldLen be oldLenDesc.[[Value]].11. If newLen \u2265 oldLen, thena. Return !\u00a0OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).12. If oldLenDesc.[[Writable]] is false, return false.13. If newLenDesc does not have a [[Writable]] field or newLenDesc.[[Writable]] is true, let newWritable be true.14. Else,a. NOTE: Setting the [[Writable]] attribute to false is deferred in case any elements cannot be deleted.b. Let newWritable be false.c. Set newLenDesc.[[Writable]] to true.15. Let succeeded be !\u00a0OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).16. If succeeded is false, return false.17. For each own property key P of A that is an array index, whose numeric value is greater than or equal to newLen, in descending numeric index order, doa. Let deleteSucceeded be !\u00a0A.[[Delete]](P).b. If deleteSucceeded is false, theni. Set newLenDesc.[[Value]] to !\u00a0ToUint32(P) + 1\ud835\udd3d.ii. If newWritable is false, set newLenDesc.[[Writable]] to false.iii. Perform !\u00a0OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).iv. Return false.18. If newWritable is false, thena. Set succeeded to !\u00a0OrdinaryDefineOwnProperty(A, \"length\", PropertyDescriptor { [[Writable]]: false }).b. Assert: succeeded is true.19. Return true.\nNote\nIn steps 3 and 4, if Desc.[[Value]] is an object then its valueOf method is called twice. This is legacy behaviour that was specified with this effect starting with the 2nd Edition of this specification.\n\n\n\n\n10.4.3 String Exotic Objects\nA String object is an exotic object that encapsulates a String value and exposes virtual integer-indexed data properties corresponding to the individual code unit elements of the String value. String exotic objects always have a data property named \"length\" whose value is the number of code unit elements in the encapsulated String value. Both the code unit data properties and the \"length\" property are non-writable and non-configurable.\nAn object is a String exotic object\n (or simply, a String object) if its [[GetOwnProperty]], \n[[DefineOwnProperty]], and [[OwnPropertyKeys]] internal methods use the \nfollowing implementations, and its other essential internal methods use \nthe definitions found in 10.1. These methods are installed in StringCreate.\nString exotic objects have the same internal slots as ordinary objects. They also have a [[StringData]] internal slot.\n\n10.4.3.1 [[GetOwnProperty]] ( P )\nThe [[GetOwnProperty]] internal method of a String exotic object S takes argument P (a property key) and returns a normal completion containing either a Property Descriptor or undefined. It performs the following steps when called:\n1. Let desc be OrdinaryGetOwnProperty(S, P).2. If desc is not undefined, return desc.3. Return StringGetOwnProperty(S, P).\n\n\n10.4.3.2 [[DefineOwnProperty]] ( P, Desc )\nThe [[DefineOwnProperty]] internal method of a String exotic object S takes arguments P (a property key) and Desc (a Property Descriptor) and returns a normal completion containing a Boolean. It performs the following steps when called:\n1. Let stringDesc be StringGetOwnProperty(S, P).2. If stringDesc is not undefined, thena. Let extensible be S.[[Extensible]].b. Return IsCompatiblePropertyDescriptor(extensible, Desc, stringDesc).3. Return !\u00a0OrdinaryDefineOwnProperty(S, P, Desc).\n\n\n10.4.3.3 [[OwnPropertyKeys]] ( )\nThe [[OwnPropertyKeys]] internal method of a String exotic object O takes no arguments and returns a normal completion containing a List of property keys. It performs the following steps when called:\n1. Let keys be a new empty List.2. Let str be O.[[StringData]].3. Assert: Type(str) is String.4. Let len be the length of str.5. For each integer i starting with 0 such that i < len, in ascending order, doa. Add !\u00a0ToString(\ud835\udd3d(i)) as the last element of keys.6. For each own property key P of O such that P is an array index and !\u00a0ToIntegerOrInfinity(P) \u2265 len, in ascending numeric index order, doa. Add P as the last element of keys.7. For each own property key P of O such that Type(P) is String and P is not an array index, in ascending chronological order of property creation, doa. Add P as the last element of keys.8. For each own property key P of O such that Type(P) is Symbol, in ascending chronological order of property creation, doa. Add P as the last element of keys.9. Return keys.\n\n\n10.4.3.4 StringCreate ( value, prototype )\nThe abstract operation StringCreate takes arguments value (a String) and prototype and returns a String exotic object. It is used to specify the creation of new String exotic objects. It performs the following steps when called:\n1. Let S be MakeBasicObject(\u00ab [[Prototype]], [[Extensible]], [[StringData]] \u00bb).2. Set S.[[Prototype]] to prototype.3. Set S.[[StringData]] to value.4. Set S.[[GetOwnProperty]] as specified in 10.4.3.1.5. Set S.[[DefineOwnProperty]] as specified in 10.4.3.2.6. Set S.[[OwnPropertyKeys]] as specified in 10.4.3.3.7. Let length be the number of code unit elements in value.8. Perform !\u00a0DefinePropertyOrThrow(S, \"length\", PropertyDescriptor { [[Value]]: \ud835\udd3d(length), [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }).9. Return S.\n\n\n10.4.3.5 StringGetOwnProperty ( S, P )\nThe abstract operation StringGetOwnProperty takes arguments S (an Object that has a [[StringData]] internal slot) and P (a property key) and returns a Property Descriptor or undefined. It performs the following steps when called:\n1. If Type(P) is not String, return undefined.2. Let index be CanonicalNumericIndexString(P).3. If index is undefined, return undefined.4. If IsIntegralNumber(index) is false, return undefined.5. If index is -0\ud835\udd3d, return undefined.6. Let str be S.[[StringData]].7. Assert: Type(str) is String.8. Let len be the length of str.9. If \u211d(index) < 0 or len \u2264 \u211d(index), return undefined.10. Let resultStr be the substring of str from \u211d(index) to \u211d(index) + 1.11. Return the PropertyDescriptor { [[Value]]: resultStr, [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: false }.\n\n\n\n10.4.4 Arguments Exotic Objects\nMost ECMAScript functions make an arguments object available to\n their code. Depending upon the characteristics of the function \ndefinition, its arguments object is either an ordinary object or an arguments exotic object. An arguments exotic object is an exotic object whose array index properties map to the formal parameters bindings of an invocation of its associated ECMAScript function.\nAn object is an arguments exotic object if its internal methods use the following implementations, with the ones not specified here using those found in 10.1. These methods are installed in CreateMappedArgumentsObject.\nNote 1\nWhile CreateUnmappedArgumentsObject is grouped into this clause, it creates an ordinary object, not an arguments exotic object.\n\nArguments exotic objects have the same internal slots as ordinary objects.\n They also have a [[ParameterMap]] internal slot. Ordinary arguments \nobjects also have a [[ParameterMap]] internal slot whose value is always\n undefined. For ordinary argument objects the [[ParameterMap]] internal \nslot is only used by Object.prototype.toString (20.1.3.6) to identify them as such.\nNote 2\nThe integer-indexed data properties of an arguments exotic object whose numeric name values are less than the number of formal parameters of the corresponding function object initially share their values with the corresponding argument bindings in the function's execution context.\n This means that changing the property changes the corresponding value \nof the argument binding and vice-versa. This correspondence is broken if\n such a property is deleted and then redefined or if the property is \nchanged into an accessor property. If the arguments object is an ordinary object,\n the values of its properties are simply a copy of the arguments passed \nto the function and there is no dynamic linkage between the property \nvalues and the formal parameter values.\n\nNote 3\nThe ParameterMap object and its property values are used as a\n device for specifying the arguments object correspondence to argument \nbindings. The ParameterMap object and the objects that are the values of\n its properties are not directly observable from ECMAScript code. An \nECMAScript implementation does not need to actually create or use such \nobjects to implement the specified semantics.\n\nNote 4\nOrdinary arguments objects define a non-configurable accessor property named \"callee\" which throws a TypeError exception on access. The \"callee\" property has a more specific meaning for arguments exotic objects, which are created only for some class of non-strict functions.\n The definition of this property in the ordinary variant exists to \nensure that it is not defined in any other manner by conforming \nECMAScript implementations.\n\nNote 5\nECMAScript implementations of arguments exotic objects have historically contained an accessor property named \"caller\". Prior to ECMAScript 2017, this specification included the definition of a throwing \"caller\"\n property on ordinary arguments objects. Since implementations do not \ncontain this extension any longer, ECMAScript 2017 dropped the \nrequirement for a throwing \"caller\" accessor.\n\n\n10.4.4.1 [[GetOwnProperty]] ( P )\nThe [[GetOwnProperty]] internal method of an arguments exotic object args takes argument P (a property key) and returns a normal completion containing either a Property Descriptor or undefined. It performs the following steps when called:\n1. Let desc be OrdinaryGetOwnProperty(args, P).2. If desc is undefined, return desc.3. Let map be args.[[ParameterMap]].4. Let isMapped be !\u00a0HasOwnProperty(map, P).5. If isMapped is true, thena. Set desc.[[Value]] to !\u00a0Get(map, P).6. Return desc.\n\n\n10.4.4.2 [[DefineOwnProperty]] ( P, Desc )\nThe [[DefineOwnProperty]] internal method of an arguments exotic object args takes arguments P (a property key) and Desc (a Property Descriptor) and returns a normal completion containing a Boolean. It performs the following steps when called:\n1. Let map be args.[[ParameterMap]].2. Let isMapped be !\u00a0HasOwnProperty(map, P).3. Let newArgDesc be Desc.4. If isMapped is true and IsDataDescriptor(Desc) is true, thena. If Desc does not have a [[Value]] field, and Desc has a [[Writable]] field, and Desc.[[Writable]] is false, theni. Set newArgDesc to a copy of Desc.ii. Set newArgDesc.[[Value]] to !\u00a0Get(map, P).5. Let allowed be !\u00a0OrdinaryDefineOwnProperty(args, P, newArgDesc).6. If allowed is false, return false.7. If isMapped is true, thena. If IsAccessorDescriptor(Desc) is true, theni. Perform !\u00a0map.[[Delete]](P).b. Else,i. If Desc has a [[Value]] field, then1. Assert: The following Set will succeed, since formal parameters mapped by arguments objects are always writable.2. Perform !\u00a0Set(map, P, Desc.[[Value]], false).ii. If Desc has a [[Writable]] field and Desc.[[Writable]] is false, then1. Perform !\u00a0map.[[Delete]](P).8. Return true.\n\n\n10.4.4.3 [[Get]] ( P, Receiver )\nThe [[Get]] internal method of an arguments exotic object args takes arguments P (a property key) and Receiver (an ECMAScript language value) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let map be args.[[ParameterMap]].2. Let isMapped be !\u00a0HasOwnProperty(map, P).3. If isMapped is false, thena. Return ?\u00a0OrdinaryGet(args, P, Receiver).4. Else,a. Assert: map contains a formal parameter mapping for P.b. Return !\u00a0Get(map, P).\n\n\n10.4.4.4 [[Set]] ( P, V, Receiver )\nThe [[Set]] internal method of an arguments exotic object args takes arguments P (a property key), V (an ECMAScript language value), and Receiver (an ECMAScript language value) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If SameValue(args, Receiver) is false, thena. Let isMapped be false.2. Else,a. Let map be args.[[ParameterMap]].b. Let isMapped be !\u00a0HasOwnProperty(map, P).3. If isMapped is true, thena. Assert: The following Set will succeed, since formal parameters mapped by arguments objects are always writable.b. Perform !\u00a0Set(map, P, V, false).4. Return ?\u00a0OrdinarySet(args, P, V, Receiver).\n\n\n10.4.4.5 [[Delete]] ( P )\nThe [[Delete]] internal method of an arguments exotic object args takes argument P (a property key) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let map be args.[[ParameterMap]].2. Let isMapped be !\u00a0HasOwnProperty(map, P).3. Let result be ?\u00a0OrdinaryDelete(args, P).4. If result is true and isMapped is true, thena. Perform !\u00a0map.[[Delete]](P).5. Return result.\n\n\n10.4.4.6 CreateUnmappedArgumentsObject ( argumentsList )\nThe abstract operation CreateUnmappedArgumentsObject takes argument argumentsList and returns an arguments exotic object. It performs the following steps when called:\n1. Let len be the number of elements in argumentsList.2. Let obj be OrdinaryObjectCreate(%Object.prototype%, \u00ab [[ParameterMap]] \u00bb).3. Set obj.[[ParameterMap]] to undefined.4. Perform !\u00a0DefinePropertyOrThrow(obj, \"length\", PropertyDescriptor { [[Value]]: \ud835\udd3d(len), [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }).5. Let index be 0.6. Repeat, while index < len,a. Let val be argumentsList[index].b. Perform !\u00a0CreateDataPropertyOrThrow(obj, !\u00a0ToString(\ud835\udd3d(index)), val).c. Set index to index + 1.7. Perform !\u00a0DefinePropertyOrThrow(obj, @@iterator, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }).8. Perform !\u00a0DefinePropertyOrThrow(obj, \"callee\", PropertyDescriptor { [[Get]]: %ThrowTypeError%, [[Set]]: %ThrowTypeError%, [[Enumerable]]: false, [[Configurable]]: false }).9. Return obj.\n\n\n10.4.4.7 CreateMappedArgumentsObject ( func, formals, argumentsList, env )\nThe abstract operation CreateMappedArgumentsObject takes arguments func (an Object), formals (a Parse Node), argumentsList (a List), and env (an Environment Record) and returns an arguments exotic object. It performs the following steps when called:\n1. Assert: formals does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers.2. Let len be the number of elements in argumentsList.3. Let obj be MakeBasicObject(\u00ab [[Prototype]], [[Extensible]], [[ParameterMap]] \u00bb).4. Set obj.[[GetOwnProperty]] as specified in 10.4.4.1.5. Set obj.[[DefineOwnProperty]] as specified in 10.4.4.2.6. Set obj.[[Get]] as specified in 10.4.4.3.7. Set obj.[[Set]] as specified in 10.4.4.4.8. Set obj.[[Delete]] as specified in 10.4.4.5.9. Set obj.[[Prototype]] to %Object.prototype%.10. Let map be OrdinaryObjectCreate(null).11. Set obj.[[ParameterMap]] to map.12. Let parameterNames be the BoundNames of formals.13. Let numberOfParameters be the number of elements in parameterNames.14. Let index be 0.15. Repeat, while index < len,a. Let val be argumentsList[index].b. Perform !\u00a0CreateDataPropertyOrThrow(obj, !\u00a0ToString(\ud835\udd3d(index)), val).c. Set index to index + 1.16. Perform !\u00a0DefinePropertyOrThrow(obj, \"length\", PropertyDescriptor { [[Value]]: \ud835\udd3d(len), [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }).17. Let mappedNames be a new empty List.18. Set index to numberOfParameters - 1.19. Repeat, while index \u2265 0,a. Let name be parameterNames[index].b. If name is not an element of mappedNames, theni. Add name as an element of the list mappedNames.ii. If index < len, then1. Let g be MakeArgGetter(name, env).2. Let p be MakeArgSetter(name, env).3. Perform !\u00a0map.[[DefineOwnProperty]](! ToString(\ud835\udd3d(index)), PropertyDescriptor { [[Set]]: p, [[Get]]: g, [[Enumerable]]: false, [[Configurable]]: true }).c. Set index to index - 1.20. Perform !\u00a0DefinePropertyOrThrow(obj, @@iterator, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }).21. Perform !\u00a0DefinePropertyOrThrow(obj, \"callee\", PropertyDescriptor { [[Value]]: func, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }).22. Return obj.\n\n10.4.4.7.1 MakeArgGetter ( name, env )\nThe abstract operation MakeArgGetter takes arguments name (a String) and env (an Environment Record) and returns a function object. It creates a built-in function object that when executed returns the value bound for name in env. It performs the following steps when called:\n1. Let getterClosure be a new Abstract Closure with no parameters that captures name and env and performs the following steps when called:a. Return env.GetBindingValue(name, false).2. Let getter be CreateBuiltinFunction(getterClosure, 0, \"\", \u00ab \u00bb).3. NOTE: getter is never directly accessible to ECMAScript code.4. Return getter.\n\n\n10.4.4.7.2 MakeArgSetter ( name, env )\nThe abstract operation MakeArgSetter takes arguments name (a String) and env (an Environment Record) and returns a function object. It creates a built-in function object that when executed sets the value bound for name in env. It performs the following steps when called:\n1. Let setterClosure be a new Abstract Closure with parameters (value) that captures name and env and performs the following steps when called:a. Return !\u00a0env.SetMutableBinding(name, value, false).2. Let setter be CreateBuiltinFunction(setterClosure, 1, \"\", \u00ab \u00bb).3. NOTE: setter is never directly accessible to ECMAScript code.4. Return setter.\n\n\n\n\n10.4.5 Integer-Indexed Exotic Objects\nAn Integer-Indexed exotic object is an exotic object that performs special handling of integer index property keys.\nInteger-Indexed exotic objects have the same internal slots as ordinary objects\n and additionally [[ViewedArrayBuffer]], [[ArrayLength]], \n[[ByteOffset]], [[ContentType]], and [[TypedArrayName]] internal slots.\nAn object is an Integer-Indexed exotic object\n if its [[GetOwnProperty]], [[HasProperty]], [[DefineOwnProperty]], \n[[Get]], [[Set]], [[Delete]], and [[OwnPropertyKeys]] internal methods \nuse the definitions in this section, and its other essential internal \nmethods use the definitions found in 10.1. These methods are installed by IntegerIndexedObjectCreate.\n\n10.4.5.1 [[GetOwnProperty]] ( P )\nThe [[GetOwnProperty]] internal method of an Integer-Indexed exotic object O takes argument P (a property key) and returns a normal completion containing either a Property Descriptor or undefined. It performs the following steps when called:\n1. If Type(P) is String, thena. Let numericIndex be CanonicalNumericIndexString(P).b. If numericIndex is not undefined, theni. Let value be IntegerIndexedElementGet(O, numericIndex).ii. If value is undefined, return undefined.iii. Return the PropertyDescriptor { [[Value]]: value, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true }.2. Return OrdinaryGetOwnProperty(O, P).\n\n\n10.4.5.2 [[HasProperty]] ( P )\nThe [[HasProperty]] internal method of an Integer-Indexed exotic object O takes argument P (a property key) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If Type(P) is String, thena. Let numericIndex be CanonicalNumericIndexString(P).b. If numericIndex is not undefined, return IsValidIntegerIndex(O, numericIndex).2. Return ?\u00a0OrdinaryHasProperty(O, P).\n\n\n10.4.5.3 [[DefineOwnProperty]] ( P, Desc )\nThe [[DefineOwnProperty]] internal method of an Integer-Indexed exotic object O takes arguments P (a property key) and Desc (a Property Descriptor) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If Type(P) is String, thena. Let numericIndex be CanonicalNumericIndexString(P).b. If numericIndex is not undefined, theni. If IsValidIntegerIndex(O, numericIndex) is false, return false.ii. If Desc has a [[Configurable]] field and if Desc.[[Configurable]] is false, return false.iii. If Desc has an [[Enumerable]] field and if Desc.[[Enumerable]] is false, return false.iv. If IsAccessorDescriptor(Desc) is true, return false.v. If Desc has a [[Writable]] field and if Desc.[[Writable]] is false, return false.vi. If Desc has a [[Value]] field, perform ?\u00a0IntegerIndexedElementSet(O, numericIndex, Desc.[[Value]]).vii. Return true.2. Return !\u00a0OrdinaryDefineOwnProperty(O, P, Desc).\n\n\n10.4.5.4 [[Get]] ( P, Receiver )\nThe [[Get]] internal method of an Integer-Indexed exotic object O takes arguments P (a property key) and Receiver (an ECMAScript language value) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. If Type(P) is String, thena. Let numericIndex be CanonicalNumericIndexString(P).b. If numericIndex is not undefined, theni. Return IntegerIndexedElementGet(O, numericIndex).2. Return ?\u00a0OrdinaryGet(O, P, Receiver).\n\n\n10.4.5.5 [[Set]] ( P, V, Receiver )\nThe [[Set]] internal method of an Integer-Indexed exotic object O takes arguments P (a property key), V (an ECMAScript language value), and Receiver (an ECMAScript language value) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If Type(P) is String, thena. Let numericIndex be CanonicalNumericIndexString(P).b. If numericIndex is not undefined, theni. Perform ?\u00a0IntegerIndexedElementSet(O, numericIndex, V).ii. Return true.2. Return ?\u00a0OrdinarySet(O, P, V, Receiver).\n\n\n10.4.5.6 [[Delete]] ( P )\nThe [[Delete]] internal method of an Integer-Indexed exotic object O takes argument P (a property key) and returns a normal completion containing a Boolean. It performs the following steps when called:\n1. If Type(P) is String, thena. Let numericIndex be CanonicalNumericIndexString(P).b. If numericIndex is not undefined, theni. If IsValidIntegerIndex(O, numericIndex) is false, return true; else return false.2. Return !\u00a0OrdinaryDelete(O, P).\n\n\n10.4.5.7 [[OwnPropertyKeys]] ( )\nThe [[OwnPropertyKeys]] internal method of an Integer-Indexed exotic object O takes no arguments and returns a normal completion containing a List of property keys. It performs the following steps when called:\n1. Let keys be a new empty List.2. If IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is false, thena. For each integer i starting with 0 such that i < O.[[ArrayLength]], in ascending order, doi. Add !\u00a0ToString(\ud835\udd3d(i)) as the last element of keys.3. For each own property key P of O such that Type(P) is String and P is not an integer index, in ascending chronological order of property creation, doa. Add P as the last element of keys.4. For each own property key P of O such that Type(P) is Symbol, in ascending chronological order of property creation, doa. Add P as the last element of keys.5. Return keys.\n\n\n10.4.5.8 IntegerIndexedObjectCreate ( prototype )\nThe abstract operation IntegerIndexedObjectCreate takes argument prototype and returns an Integer-Indexed exotic object. It is used to specify the creation of new Integer-Indexed exotic objects. It performs the following steps when called:\n1. Let internalSlotsList\n be \u00ab [[Prototype]], [[Extensible]], [[ViewedArrayBuffer]], \n[[TypedArrayName]], [[ContentType]], [[ByteLength]], [[ByteOffset]], \n[[ArrayLength]] \u00bb.2. Let A be MakeBasicObject(internalSlotsList).3. Set A.[[GetOwnProperty]] as specified in 10.4.5.1.4. Set A.[[HasProperty]] as specified in 10.4.5.2.5. Set A.[[DefineOwnProperty]] as specified in 10.4.5.3.6. Set A.[[Get]] as specified in 10.4.5.4.7. Set A.[[Set]] as specified in 10.4.5.5.8. Set A.[[Delete]] as specified in 10.4.5.6.9. Set A.[[OwnPropertyKeys]] as specified in 10.4.5.7.10. Set A.[[Prototype]] to prototype.11. Return A.\n\n\n10.4.5.9 IsValidIntegerIndex ( O, index )\nThe abstract operation IsValidIntegerIndex takes arguments O (an Integer-Indexed exotic object) and index (a Number) and returns a Boolean. It performs the following steps when called:\n1. If IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return false.2. If IsIntegralNumber(index) is false, return false.3. If index is -0\ud835\udd3d, return false.4. If \u211d(index) < 0 or \u211d(index) \u2265 O.[[ArrayLength]], return false.5. Return true.\n\n\n10.4.5.10 IntegerIndexedElementGet ( O, index )\nThe abstract operation IntegerIndexedElementGet takes arguments O (an Integer-Indexed exotic object) and index (a Number) and returns a Number, a BigInt, or undefined. It performs the following steps when called:\n1. If IsValidIntegerIndex(O, index) is false, return undefined.2. Let offset be O.[[ByteOffset]].3. Let elementSize be TypedArrayElementSize(O).4. Let indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.5. Let elementType be TypedArrayElementType(O).6. Return GetValueFromBuffer(O.[[ViewedArrayBuffer]], indexedPosition, elementType, true, Unordered).\n\n\n10.4.5.11 IntegerIndexedElementSet ( O, index, value )\nThe abstract operation IntegerIndexedElementSet takes arguments O (an Integer-Indexed exotic object), index (a Number), and value (an ECMAScript language value) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. If O.[[ContentType]] is BigInt, let numValue be ?\u00a0ToBigInt(value).2. Otherwise, let numValue be ?\u00a0ToNumber(value).3. If IsValidIntegerIndex(O, index) is true, thena. Let offset be O.[[ByteOffset]].b. Let elementSize be TypedArrayElementSize(O).c. Let indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.d. Let elementType be TypedArrayElementType(O).e. Perform SetValueInBuffer(O.[[ViewedArrayBuffer]], indexedPosition, elementType, numValue, true, Unordered).4. Return unused.\nNote\nThis operation always appears to succeed, but it has no \neffect when attempting to write past the end of a TypedArray or to a \nTypedArray which is backed by a detached ArrayBuffer.\n\n\n\n\n10.4.6 Module Namespace Exotic Objects\nA module namespace exotic object is an exotic object that exposes the bindings exported from an ECMAScript Module (See 16.2.3). There is a one-to-one correspondence between the String-keyed own properties of a module namespace exotic object and the binding names exported by the Module. The exported bindings include any bindings that are indirectly exported using export * export items. Each String-valued own property key is the StringValue of the corresponding exported binding name. These are the only String-keyed properties of a module namespace exotic object. Each such property has the attributes { [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: false }. Module namespace exotic objects are not extensible.\nAn object is a module namespace exotic object\n if its [[GetPrototypeOf]], [[SetPrototypeOf]], [[IsExtensible]], \n[[PreventExtensions]], [[GetOwnProperty]], [[DefineOwnProperty]], \n[[HasProperty]], [[Get]], [[Set]], [[Delete]], and [[OwnPropertyKeys]] \ninternal methods use the definitions in this section, and its other \nessential internal methods use the definitions found in 10.1. These methods are installed by ModuleNamespaceCreate.\nModule namespace exotic objects have the internal slots defined in Table 35.\nTable 35: Internal Slots of Module Namespace Exotic Objects\n\n\n\n              Internal Slot\n            \n\n              Type\n            \n\n              Description\n            \n\n\n\n              [[Module]]\n            \n\n              a Module Record\n\n\n              The Module Record whose exports this namespace exposes.\n            \n\n\n\n              [[Exports]]\n            \n\n              a List of Strings\n            \n\n              A List\n whose elements are the String values of the exported names exposed as \nown properties of this object. The list is ordered as if an Array of \nthose String values had been sorted using %Array.prototype.sort% using undefined as comparefn.\n            \n\n\n\n\n10.4.6.1 [[GetPrototypeOf]] ( )\nThe [[GetPrototypeOf]] internal method of a module namespace exotic object takes no arguments and returns a normal completion containing null. It performs the following steps when called:\n1. Return null.\n\n\n10.4.6.2 [[SetPrototypeOf]] ( V )\nThe [[SetPrototypeOf]] internal method of a module namespace exotic object O takes argument V (an Object or null) and returns a normal completion containing a Boolean. It performs the following steps when called:\n1. Return !\u00a0SetImmutablePrototype(O, V).\n\n\n10.4.6.3 [[IsExtensible]] ( )\nThe [[IsExtensible]] internal method of a module namespace exotic object takes no arguments and returns a normal completion containing false. It performs the following steps when called:\n1. Return false.\n\n\n10.4.6.4 [[PreventExtensions]] ( )\nThe [[PreventExtensions]] internal method of a module namespace exotic object takes no arguments and returns a normal completion containing true. It performs the following steps when called:\n1. Return true.\n\n\n10.4.6.5 [[GetOwnProperty]] ( P )\nThe [[GetOwnProperty]] internal method of a module namespace exotic object O takes argument P (a property key) and returns either a normal completion containing either a Property Descriptor or undefined, or an abrupt completion. It performs the following steps when called:\n1. If Type(P) is Symbol, return OrdinaryGetOwnProperty(O, P).2. Let exports be O.[[Exports]].3. If P is not an element of exports, return undefined.4. Let value be ?\u00a0O.[[Get]](P, O).5. Return PropertyDescriptor { [[Value]]: value, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: false }.\n\n\n10.4.6.6 [[DefineOwnProperty]] ( P, Desc )\nThe [[DefineOwnProperty]] internal method of a module namespace exotic object O takes arguments P (a property key) and Desc (a Property Descriptor) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If Type(P) is Symbol, return !\u00a0OrdinaryDefineOwnProperty(O, P, Desc).2. Let current be ?\u00a0O.[[GetOwnProperty]](P).3. If current is undefined, return false.4. If Desc has a [[Configurable]] field and Desc.[[Configurable]] is true, return false.5. If Desc has an [[Enumerable]] field and Desc.[[Enumerable]] is false, return false.6. If IsAccessorDescriptor(Desc) is true, return false.7. If Desc has a [[Writable]] field and Desc.[[Writable]] is false, return false.8. If Desc has a [[Value]] field, return SameValue(Desc.[[Value]], current.[[Value]]).9. Return true.\n\n\n10.4.6.7 [[HasProperty]] ( P )\nThe [[HasProperty]] internal method of a module namespace exotic object O takes argument P (a property key) and returns a normal completion containing a Boolean. It performs the following steps when called:\n1. If Type(P) is Symbol, return !\u00a0OrdinaryHasProperty(O, P).2. Let exports be O.[[Exports]].3. If P is an element of exports, return true.4. Return false.\n\n\n10.4.6.8 [[Get]] ( P, Receiver )\nThe [[Get]] internal method of a module namespace exotic object O takes arguments P (a property key) and Receiver (an ECMAScript language value) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. If Type(P) is Symbol, thena. Return !\u00a0OrdinaryGet(O, P, Receiver).2. Let exports be O.[[Exports]].3. If P is not an element of exports, return undefined.4. Let m be O.[[Module]].5. Let binding be !\u00a0m.ResolveExport(P).6. Assert: binding is a ResolvedBinding Record.7. Let targetModule be binding.[[Module]].8. Assert: targetModule is not undefined.9. If binding.[[BindingName]] is namespace, thena. Return ?\u00a0GetModuleNamespace(targetModule).10. Let targetEnv be targetModule.[[Environment]].11. If targetEnv is empty, throw a ReferenceError exception.12. Return ?\u00a0targetEnv.GetBindingValue(binding.[[BindingName]], true).\nNote\nResolveExport is side-effect free. Each time this operation is called with a specific exportName, resolveSet\n pair as arguments it must return the same result. An implementation \nmight choose to pre-compute or cache the ResolveExport results for the \n[[Exports]] of each module namespace exotic object.\n\n\n\n10.4.6.9 [[Set]] ( P, V, Receiver )\nThe [[Set]] internal method of a module namespace exotic object takes arguments P (a property key), V (an ECMAScript language value), and Receiver (an ECMAScript language value) and returns a normal completion containing false. It performs the following steps when called:\n1. Return false.\n\n\n10.4.6.10 [[Delete]] ( P )\nThe [[Delete]] internal method of a module namespace exotic object O takes argument P (a property key) and returns a normal completion containing a Boolean. It performs the following steps when called:\n1. If Type(P) is Symbol, thena. Return !\u00a0OrdinaryDelete(O, P).2. Let exports be O.[[Exports]].3. If P is an element of exports, return false.4. Return true.\n\n\n10.4.6.11 [[OwnPropertyKeys]] ( )\nThe [[OwnPropertyKeys]] internal method of a module namespace exotic object O takes no arguments and returns a normal completion containing a List of property keys. It performs the following steps when called:\n1. Let exports be O.[[Exports]].2. Let symbolKeys be OrdinaryOwnPropertyKeys(O).3. Return the list-concatenation of exports and symbolKeys.\n\n\n10.4.6.12 ModuleNamespaceCreate ( module, exports )\nThe abstract operation ModuleNamespaceCreate takes arguments module (a Module Record) and exports (a List of Strings) and returns a module namespace exotic object. It is used to specify the creation of new module namespace exotic objects. It performs the following steps when called:\n1. Assert: module.[[Namespace]] is empty.2. Let internalSlotsList be the internal slots listed in Table 35.3. Let M be MakeBasicObject(internalSlotsList).4. Set M's essential internal methods to the definitions specified in 10.4.6.5. Set M.[[Module]] to module.6. Let sortedExports be a List whose elements are the elements of exports ordered as if an Array of the same values had been sorted using %Array.prototype.sort% using undefined as comparefn.7. Set M.[[Exports]] to sortedExports.8. Create own properties of M corresponding to the definitions in 28.3.9. Set module.[[Namespace]] to M.10. Return M.\n\n\n\n10.4.7 Immutable Prototype Exotic Objects\nAn immutable prototype exotic object is an exotic object that has a [[Prototype]] internal slot that will not change once it is initialized.\nAn object is an immutable prototype exotic object\n if its [[SetPrototypeOf]] internal method uses the following \nimplementation. (Its other essential internal methods may use any \nimplementation, depending on the specific immutable prototype exotic object in question.)\nNote\nUnlike other exotic objects, there is not a dedicated creation abstract operation provided for immutable prototype exotic objects. This is because they are only used by %Object.prototype% and by host environments, and in host environments, the relevant objects are potentially exotic in other ways and thus need their own dedicated creation operation.\n\n\n10.4.7.1 [[SetPrototypeOf]] ( V )\nThe [[SetPrototypeOf]] internal method of an immutable prototype exotic object O takes argument V (an Object or null) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Return ?\u00a0SetImmutablePrototype(O, V).\n\n\n10.4.7.2 SetImmutablePrototype ( O, V )\nThe abstract operation SetImmutablePrototype takes arguments O and V (an Object or null) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let current be ?\u00a0O.[[GetPrototypeOf]]().2. If SameValue(V, current) is true, return true.3. Return false.\n\n\n\n\n10.5 Proxy Object Internal Methods and Internal Slots\nA Proxy object is an exotic object\n whose essential internal methods are partially implemented using \nECMAScript code. Every Proxy object has an internal slot called \n[[ProxyHandler]]. The value of [[ProxyHandler]] is an object, called the\n proxy's handler object, or null. Methods (see Table 36)\n of a handler object may be used to augment the implementation for one \nor more of the Proxy object's internal methods. Every Proxy object also \nhas an internal slot called [[ProxyTarget]] whose value is either an \nobject or the null value. This object is called the proxy's target object.\nAn object is a Proxy exotic object\n if its essential internal methods (including [[Call]] and \n[[Construct]], if applicable) use the definitions in this section. These\n internal methods are installed in ProxyCreate.\nTable 36: Proxy Handler Methods\n\n\n\n            Internal Method\n          \n\n            Handler Method\n          \n\n\n\n            [[GetPrototypeOf]]\n          \n\ngetPrototypeOf\n\n\n\n\n            [[SetPrototypeOf]]\n          \n\nsetPrototypeOf\n\n\n\n\n            [[IsExtensible]]\n          \n\nisExtensible\n\n\n\n\n            [[PreventExtensions]]\n          \n\npreventExtensions\n\n\n\n\n            [[GetOwnProperty]]\n          \n\ngetOwnPropertyDescriptor\n\n\n\n\n            [[DefineOwnProperty]]\n          \n\ndefineProperty\n\n\n\n\n            [[HasProperty]]\n          \n\nhas\n\n\n\n\n            [[Get]]\n          \n\nget\n\n\n\n\n            [[Set]]\n          \n\nset\n\n\n\n\n            [[Delete]]\n          \n\ndeleteProperty\n\n\n\n\n            [[OwnPropertyKeys]]\n          \n\nownKeys\n\n\n\n\n            [[Call]]\n          \n\napply\n\n\n\n\n            [[Construct]]\n          \n\nconstruct\n\n\n\n\nWhen a handler method is called to provide the implementation of a\n Proxy object internal method, the handler method is passed the proxy's \ntarget object as a parameter. A proxy's handler object does not \nnecessarily have a method corresponding to every essential internal \nmethod. Invoking an internal method on the proxy results in the \ninvocation of the corresponding internal method on the proxy's target \nobject if the handler object does not have a method corresponding to the\n internal trap.\nThe [[ProxyHandler]] and [[ProxyTarget]] internal slots of a \nProxy object are always initialized when the object is created and \ntypically may not be modified. Some Proxy objects are created in a \nmanner that permits them to be subsequently revoked. When a proxy is revoked, its [[ProxyHandler]] and [[ProxyTarget]] internal slots are set to null causing subsequent invocations of internal methods on that Proxy object to throw a TypeError exception.\nBecause Proxy objects permit the implementation of internal \nmethods to be provided by arbitrary ECMAScript code, it is possible to \ndefine a Proxy object whose handler methods violates the invariants \ndefined in 6.1.7.3. Some of the internal method invariants defined in 6.1.7.3\n are essential integrity invariants. These invariants are explicitly \nenforced by the Proxy object internal methods specified in this section.\n An ECMAScript implementation must be robust in the presence of all \npossible invariant violations.\nIn the following algorithm descriptions, assume O is an ECMAScript Proxy object, P is a property key value, V is any ECMAScript language value and Desc is a Property Descriptor record.\n\n10.5.1 [[GetPrototypeOf]] ( )\nThe [[GetPrototypeOf]] internal method of a Proxy exotic object O takes no arguments and returns either a normal completion containing either an Object or null, or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"getPrototypeOf\").6. If trap is undefined, thena. Return ?\u00a0target.[[GetPrototypeOf]]().7. Let handlerProto be ?\u00a0Call(trap, handler, \u00ab target \u00bb).8. If Type(handlerProto) is neither Object nor Null, throw a TypeError exception.9. Let extensibleTarget be ?\u00a0IsExtensible(target).10. If extensibleTarget is true, return handlerProto.11. Let targetProto be ?\u00a0target.[[GetPrototypeOf]]().12. If SameValue(handlerProto, targetProto) is false, throw a TypeError exception.13. Return handlerProto.\nNote\n[[GetPrototypeOf]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[GetPrototypeOf]] must be either an Object or null.\n          \n\n            If the target object is not extensible, [[GetPrototypeOf]] \napplied to the Proxy object must return the same value as \n[[GetPrototypeOf]] applied to the Proxy object's target object.\n          \n\n\n\n\n10.5.2 [[SetPrototypeOf]] ( V )\nThe [[SetPrototypeOf]] internal method of a Proxy exotic object O takes argument V (an Object or null) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"setPrototypeOf\").6. If trap is undefined, thena. Return ?\u00a0target.[[SetPrototypeOf]](V).7. Let booleanTrapResult be ToBoolean(? Call(trap, handler, \u00ab target, V \u00bb)).8. If booleanTrapResult is false, return false.9. Let extensibleTarget be ?\u00a0IsExtensible(target).10. If extensibleTarget is true, return true.11. Let targetProto be ?\u00a0target.[[GetPrototypeOf]]().12. If SameValue(V, targetProto) is false, throw a TypeError exception.13. Return true.\nNote\n[[SetPrototypeOf]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[SetPrototypeOf]] is a Boolean value.\n          \n\n            If the target object is not extensible, the argument value \nmust be the same as the result of [[GetPrototypeOf]] applied to target \nobject.\n          \n\n\n\n\n10.5.3 [[IsExtensible]] ( )\nThe [[IsExtensible]] internal method of a Proxy exotic object O takes no arguments and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"isExtensible\").6. If trap is undefined, thena. Return ?\u00a0IsExtensible(target).7. Let booleanTrapResult be ToBoolean(? Call(trap, handler, \u00ab target \u00bb)).8. Let targetResult be ?\u00a0IsExtensible(target).9. If SameValue(booleanTrapResult, targetResult) is false, throw a TypeError exception.10. Return booleanTrapResult.\nNote\n[[IsExtensible]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[IsExtensible]] is a Boolean value.\n          \n\n            [[IsExtensible]] applied to the Proxy object must return the\n same value as [[IsExtensible]] applied to the Proxy object's target \nobject with the same argument.\n          \n\n\n\n\n10.5.4 [[PreventExtensions]] ( )\nThe [[PreventExtensions]] internal method of a Proxy exotic object O takes no arguments and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"preventExtensions\").6. If trap is undefined, thena. Return ?\u00a0target.[[PreventExtensions]]().7. Let booleanTrapResult be ToBoolean(? Call(trap, handler, \u00ab target \u00bb)).8. If booleanTrapResult is true, thena. Let extensibleTarget be ?\u00a0IsExtensible(target).b. If extensibleTarget is true, throw a TypeError exception.9. Return booleanTrapResult.\nNote\n[[PreventExtensions]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[PreventExtensions]] is a Boolean value.\n          \n\n            [[PreventExtensions]] applied to the Proxy object only returns true if [[IsExtensible]] applied to the Proxy object's target object is false.\n          \n\n\n\n\n10.5.5 [[GetOwnProperty]] ( P )\nThe [[GetOwnProperty]] internal method of a Proxy exotic object O takes argument P (a property key) and returns either a normal completion containing either a Property Descriptor or undefined, or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"getOwnPropertyDescriptor\").6. If trap is undefined, thena. Return ?\u00a0target.[[GetOwnProperty]](P).7. Let trapResultObj be ?\u00a0Call(trap, handler, \u00ab target, P \u00bb).8. If Type(trapResultObj) is neither Object nor Undefined, throw a TypeError exception.9. Let targetDesc be ?\u00a0target.[[GetOwnProperty]](P).10. If trapResultObj is undefined, thena. If targetDesc is undefined, return undefined.b. If targetDesc.[[Configurable]] is false, throw a TypeError exception.c. Let extensibleTarget be ?\u00a0IsExtensible(target).d. If extensibleTarget is false, throw a TypeError exception.e. Return undefined.11. Let extensibleTarget be ?\u00a0IsExtensible(target).12. Let resultDesc be ?\u00a0ToPropertyDescriptor(trapResultObj).13. Perform CompletePropertyDescriptor(resultDesc).14. Let valid be IsCompatiblePropertyDescriptor(extensibleTarget, resultDesc, targetDesc).15. If valid is false, throw a TypeError exception.16. If resultDesc.[[Configurable]] is false, thena. If targetDesc is undefined or targetDesc.[[Configurable]] is true, theni. Throw a TypeError exception.b. If resultDesc has a [[Writable]] field and resultDesc.[[Writable]] is false, theni. Assert: targetDesc has a [[Writable]] field.ii. If targetDesc.[[Writable]] is true, throw a TypeError exception.17. Return resultDesc.\nNote\n[[GetOwnProperty]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[GetOwnProperty]] must be either an Object or undefined.\n          \n\n            A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.\n          \n\n            A property cannot be reported as non-existent, if it exists as an own property of a non-extensible target object.\n          \n\n            A property cannot be reported as existent, if it does not \nexist as an own property of the target object and the target object is \nnot extensible.\n          \n\n            A property cannot be reported as non-configurable, unless it\n exists as a non-configurable own property of the target object.\n          \n\n            A property cannot be reported as both non-configurable and \nnon-writable, unless it exists as a non-configurable, non-writable own \nproperty of the target object.\n          \n\n\n\n\n10.5.6 [[DefineOwnProperty]] ( P, Desc )\nThe [[DefineOwnProperty]] internal method of a Proxy exotic object O takes arguments P (a property key) and Desc (a Property Descriptor) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"defineProperty\").6. If trap is undefined, thena. Return ?\u00a0target.[[DefineOwnProperty]](P, Desc).7. Let descObj be FromPropertyDescriptor(Desc).8. Let booleanTrapResult be ToBoolean(? Call(trap, handler, \u00ab target, P, descObj \u00bb)).9. If booleanTrapResult is false, return false.10. Let targetDesc be ?\u00a0target.[[GetOwnProperty]](P).11. Let extensibleTarget be ?\u00a0IsExtensible(target).12. If Desc has a [[Configurable]] field and if Desc.[[Configurable]] is false, thena. Let settingConfigFalse be true.13. Else, let settingConfigFalse be false.14. If targetDesc is undefined, thena. If extensibleTarget is false, throw a TypeError exception.b. If settingConfigFalse is true, throw a TypeError exception.15. Else,a. If IsCompatiblePropertyDescriptor(extensibleTarget, Desc, targetDesc) is false, throw a TypeError exception.b. If settingConfigFalse is true and targetDesc.[[Configurable]] is true, throw a TypeError exception.c. If IsDataDescriptor(targetDesc) is true, targetDesc.[[Configurable]] is false, and targetDesc.[[Writable]] is true, theni. If Desc has a [[Writable]] field and Desc.[[Writable]] is false, throw a TypeError exception.16. Return true.\nNote\n[[DefineOwnProperty]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[DefineOwnProperty]] is a Boolean value.\n          \n\n            A property cannot be added, if the target object is not extensible.\n          \n\n            A property cannot be non-configurable, unless there exists a\n corresponding non-configurable own property of the target object.\n          \n\n            A non-configurable property cannot be non-writable, unless \nthere exists a corresponding non-configurable, non-writable own property\n of the target object.\n          \n\n            If a property has a corresponding target object property then applying the Property Descriptor of the property to the target object using [[DefineOwnProperty]] will not throw an exception.\n          \n\n\n\n\n10.5.7 [[HasProperty]] ( P )\nThe [[HasProperty]] internal method of a Proxy exotic object O takes argument P (a property key) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"has\").6. If trap is undefined, thena. Return ?\u00a0target.[[HasProperty]](P).7. Let booleanTrapResult be ToBoolean(? Call(trap, handler, \u00ab target, P \u00bb)).8. If booleanTrapResult is false, thena. Let targetDesc be ?\u00a0target.[[GetOwnProperty]](P).b. If targetDesc is not undefined, theni. If targetDesc.[[Configurable]] is false, throw a TypeError exception.ii. Let extensibleTarget be ?\u00a0IsExtensible(target).iii. If extensibleTarget is false, throw a TypeError exception.9. Return booleanTrapResult.\nNote\n[[HasProperty]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[HasProperty]] is a Boolean value.\n          \n\n            A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.\n          \n\n            A property cannot be reported as non-existent, if it exists \nas an own property of the target object and the target object is not \nextensible.\n          \n\n\n\n\n10.5.8 [[Get]] ( P, Receiver )\nThe [[Get]] internal method of a Proxy exotic object O takes arguments P (a property key) and Receiver (an ECMAScript language value) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"get\").6. If trap is undefined, thena. Return ?\u00a0target.[[Get]](P, Receiver).7. Let trapResult be ?\u00a0Call(trap, handler, \u00ab target, P, Receiver \u00bb).8. Let targetDesc be ?\u00a0target.[[GetOwnProperty]](P).9. If targetDesc is not undefined and targetDesc.[[Configurable]] is false, thena. If IsDataDescriptor(targetDesc) is true and targetDesc.[[Writable]] is false, theni. If SameValue(trapResult, targetDesc.[[Value]]) is false, throw a TypeError exception.b. If IsAccessorDescriptor(targetDesc) is true and targetDesc.[[Get]] is undefined, theni. If trapResult is not undefined, throw a TypeError exception.10. Return trapResult.\nNote\n[[Get]] for Proxy objects enforces the following invariants:\n\n\n            The value reported for a property must be the same as the \nvalue of the corresponding target object property if the target object \nproperty is a non-writable, non-configurable own data property.\n          \n\n            The value reported for a property must be undefined if the corresponding target object property is a non-configurable own accessor property that has undefined as its [[Get]] attribute.\n          \n\n\n\n\n10.5.9 [[Set]] ( P, V, Receiver )\nThe [[Set]] internal method of a Proxy exotic object O takes arguments P (a property key), V (an ECMAScript language value), and Receiver (an ECMAScript language value) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"set\").6. If trap is undefined, thena. Return ?\u00a0target.[[Set]](P, V, Receiver).7. Let booleanTrapResult be ToBoolean(? Call(trap, handler, \u00ab target, P, V, Receiver \u00bb)).8. If booleanTrapResult is false, return false.9. Let targetDesc be ?\u00a0target.[[GetOwnProperty]](P).10. If targetDesc is not undefined and targetDesc.[[Configurable]] is false, thena. If IsDataDescriptor(targetDesc) is true and targetDesc.[[Writable]] is false, theni. If SameValue(V, targetDesc.[[Value]]) is false, throw a TypeError exception.b. If IsAccessorDescriptor(targetDesc) is true, theni. If targetDesc.[[Set]] is undefined, throw a TypeError exception.11. Return true.\nNote\n[[Set]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[Set]] is a Boolean value.\n          \n\n            Cannot change the value of a property to be different from \nthe value of the corresponding target object property if the \ncorresponding target object property is a non-writable, non-configurable\n own data property.\n          \n\n            Cannot set the value of a property if the corresponding target object property is a non-configurable own accessor property that has undefined as its [[Set]] attribute.\n          \n\n\n\n\n10.5.10 [[Delete]] ( P )\nThe [[Delete]] internal method of a Proxy exotic object O takes argument P (a property key) and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"deleteProperty\").6. If trap is undefined, thena. Return ?\u00a0target.[[Delete]](P).7. Let booleanTrapResult be ToBoolean(? Call(trap, handler, \u00ab target, P \u00bb)).8. If booleanTrapResult is false, return false.9. Let targetDesc be ?\u00a0target.[[GetOwnProperty]](P).10. If targetDesc is undefined, return true.11. If targetDesc.[[Configurable]] is false, throw a TypeError exception.12. Let extensibleTarget be ?\u00a0IsExtensible(target).13. If extensibleTarget is false, throw a TypeError exception.14. Return true.\nNote\n[[Delete]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[Delete]] is a Boolean value.\n          \n\n            A property cannot be reported as deleted, if it exists as a non-configurable own property of the target object.\n          \n\n            A property cannot be reported as deleted, if it exists as an\n own property of the target object and the target object is \nnon-extensible.\n          \n\n\n\n\n10.5.11 [[OwnPropertyKeys]] ( )\nThe [[OwnPropertyKeys]] internal method of a Proxy exotic object O takes no arguments and returns either a normal completion containing a List of property keys or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"ownKeys\").6. If trap is undefined, thena. Return ?\u00a0target.[[OwnPropertyKeys]]().7. Let trapResultArray be ?\u00a0Call(trap, handler, \u00ab target \u00bb).8. Let trapResult be ?\u00a0CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).9. If trapResult contains any duplicate entries, throw a TypeError exception.10. Let extensibleTarget be ?\u00a0IsExtensible(target).11. Let targetKeys be ?\u00a0target.[[OwnPropertyKeys]]().12. Assert: targetKeys is a List of property keys.13. Assert: targetKeys contains no duplicate entries.14. Let targetConfigurableKeys be a new empty List.15. Let targetNonconfigurableKeys be a new empty List.16. For each element key of targetKeys, doa. Let desc be ?\u00a0target.[[GetOwnProperty]](key).b. If desc is not undefined and desc.[[Configurable]] is false, theni. Append key as an element of targetNonconfigurableKeys.c. Else,i. Append key as an element of targetConfigurableKeys.17. If extensibleTarget is true and targetNonconfigurableKeys is empty, thena. Return trapResult.18. Let uncheckedResultKeys be a List whose elements are the elements of trapResult.19. For each element key of targetNonconfigurableKeys, doa. If key is not an element of uncheckedResultKeys, throw a TypeError exception.b. Remove key from uncheckedResultKeys.20. If extensibleTarget is true, return trapResult.21. For each element key of targetConfigurableKeys, doa. If key is not an element of uncheckedResultKeys, throw a TypeError exception.b. Remove key from uncheckedResultKeys.22. If uncheckedResultKeys is not empty, throw a TypeError exception.23. Return trapResult.\nNote\n[[OwnPropertyKeys]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[OwnPropertyKeys]] is a List.\n          \n\n            The returned List contains no duplicate entries.\n          \n\n            The Type of each result List element is either String or Symbol.\n          \n\n            The result List must contain the keys of all non-configurable own properties of the target object.\n          \n\n            If the target object is not extensible, then the result List must contain all the keys of the own properties of the target object and no other values.\n          \n\n\n\n\n10.5.12 [[Call]] ( thisArgument, argumentsList )\nThe [[Call]] internal method of a Proxy exotic object O takes arguments thisArgument (an ECMAScript language value) and argumentsList (a List of ECMAScript language values) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Let trap be ?\u00a0GetMethod(handler, \"apply\").6. If trap is undefined, thena. Return ?\u00a0Call(target, thisArgument, argumentsList).7. Let argArray be CreateArrayFromList(argumentsList).8. Return ?\u00a0Call(trap, handler, \u00ab target, thisArgument, argArray \u00bb).\nNote\nA Proxy exotic object\n only has a [[Call]] internal method if the initial value of its \n[[ProxyTarget]] internal slot is an object that has a [[Call]] internal \nmethod.\n\n\n\n10.5.13 [[Construct]] ( argumentsList, newTarget )\nThe [[Construct]] internal method of a Proxy exotic object O takes arguments argumentsList (a List of ECMAScript language values) and newTarget (a constructor) and returns either a normal completion containing an Object or an abrupt completion. It performs the following steps when called:\n1. Let handler be O.[[ProxyHandler]].2. If handler is null, throw a TypeError exception.3. Assert: Type(handler) is Object.4. Let target be O.[[ProxyTarget]].5. Assert: IsConstructor(target) is true.6. Let trap be ?\u00a0GetMethod(handler, \"construct\").7. If trap is undefined, thena. Return ?\u00a0Construct(target, argumentsList, newTarget).8. Let argArray be CreateArrayFromList(argumentsList).9. Let newObj be ?\u00a0Call(trap, handler, \u00ab target, argArray, newTarget \u00bb).10. If Type(newObj) is not Object, throw a TypeError exception.11. Return newObj.\nNote 1\nA Proxy exotic object\n only has a [[Construct]] internal method if the initial value of its \n[[ProxyTarget]] internal slot is an object that has a [[Construct]] \ninternal method.\n\nNote 2\n[[Construct]] for Proxy objects enforces the following invariants:\n\n\n            The result of [[Construct]] must be an Object.\n          \n\n\n\n\n10.5.14 ProxyCreate ( target, handler )\nThe abstract operation ProxyCreate takes arguments target and handler and returns either a normal completion containing a Proxy exotic object or an abrupt completion. It is used to specify the creation of new Proxy objects. It performs the following steps when called:\n1. If Type(target) is not Object, throw a TypeError exception.2. If Type(handler) is not Object, throw a TypeError exception.3. Let P be MakeBasicObject(\u00ab [[ProxyHandler]], [[ProxyTarget]] \u00bb).4. Set P's essential internal methods, except for [[Call]] and [[Construct]], to the definitions specified in 10.5.5. If IsCallable(target) is true, thena. Set P.[[Call]] as specified in 10.5.12.b. If IsConstructor(target) is true, theni. Set P.[[Construct]] as specified in 10.5.13.6. Set P.[[ProxyTarget]] to target.7. Set P.[[ProxyHandler]] to handler.8. Return P.\n\n\n\n\n11 ECMAScript Language: Source Text\n\n11.1 Source Text\nSyntax\n\nSourceCharacter :: \nany Unicode code point\n\n\n\nECMAScript code is expressed using Unicode. ECMAScript source \ntext is a sequence of code points. All Unicode code point values from \nU+0000 to U+10FFFF, including surrogate code points, may occur in source\n text where permitted by the ECMAScript grammars. The actual encodings \nused to store and interchange ECMAScript source text is not relevant to \nthis specification. Regardless of the external source text encoding, a \nconforming ECMAScript implementation processes the source text as if it \nwas an equivalent sequence of SourceCharacter values, each SourceCharacter\n being a Unicode code point. Conforming ECMAScript implementations are \nnot required to perform any normalization of source text, or behave as \nthough they were performing normalization of source text.\nThe components of a combining character sequence are treated as \nindividual Unicode code points even though a user might think of the \nwhole sequence as a single character.\nNote\nIn string literals, regular expression literals, template \nliterals and identifiers, any Unicode code point may also be expressed \nusing Unicode escape sequences that explicitly express a code point's \nnumeric value. Within a comment, such an escape sequence is effectively \nignored as part of the comment.\nECMAScript differs from the Java programming language in the \nbehaviour of Unicode escape sequences. In a Java program, if the Unicode\n escape sequence \\u000A, for example, occurs within a \nsingle-line comment, it is interpreted as a line terminator (Unicode \ncode point U+000A is LINE FEED (LF)) and therefore the next code point \nis not part of the comment. Similarly, if the Unicode escape sequence \\u000A\n occurs within a string literal in a Java program, it is likewise \ninterpreted as a line terminator, which is not allowed within a string \nliteral\u2014one must write \\n instead of \\u000A to\n cause a LINE FEED (LF) to be part of the String value of a string \nliteral. In an ECMAScript program, a Unicode escape sequence occurring \nwithin a comment is never interpreted and therefore cannot contribute to\n termination of the comment. Similarly, a Unicode escape sequence \noccurring within a string literal in an ECMAScript program always \ncontributes to the literal and is never interpreted as a line terminator\n or as a code point that might terminate the string literal.\n\n\n11.1.1 Static Semantics: UTF16EncodeCodePoint ( cp )\nThe abstract operation UTF16EncodeCodePoint takes argument cp (a Unicode code point) and returns a String. It performs the following steps when called:\n1. Assert: 0 \u2264 cp \u2264 0x10FFFF.2. If cp \u2264 0xFFFF, return the String value consisting of the code unit whose value is cp.3. Let cu1 be the code unit whose value is floor((cp - 0x10000) / 0x400) + 0xD800.4. Let cu2 be the code unit whose value is ((cp - 0x10000) modulo 0x400) + 0xDC00.5. Return the string-concatenation of cu1 and cu2.\n\n\n11.1.2 Static Semantics: CodePointsToString ( text )\nThe abstract operation CodePointsToString takes argument text (a sequence of Unicode code points) and returns a String. It converts text into a String value, as described in 6.1.4. It performs the following steps when called:\n1. Let result be the empty String.2. For each code point cp of text, doa. Set result to the string-concatenation of result and UTF16EncodeCodePoint(cp).3. Return result.\n\n\n11.1.3 Static Semantics: UTF16SurrogatePairToCodePoint ( lead, trail )\nThe abstract operation UTF16SurrogatePairToCodePoint takes arguments lead (a code unit) and trail (a code unit) and returns a code point. Two code units that form a UTF-16 surrogate pair are converted to a code point. It performs the following steps when called:\n1. Assert: lead is a leading surrogate and trail is a trailing surrogate.2. Let cp be (lead - 0xD800) \u00d7 0x400 + (trail - 0xDC00) + 0x10000.3. Return the code point cp.\n\n\n11.1.4 Static Semantics: CodePointAt ( string, position )\nThe abstract operation CodePointAt takes arguments string (a String) and position (a non-negative integer) and returns a Record with fields [[CodePoint]] (a code point), [[CodeUnitCount]] (a positive integer), and [[IsUnpairedSurrogate]] (a Boolean). It interprets string as a sequence of UTF-16 encoded code points, as described in 6.1.4, and reads from it a single code point starting with the code unit at index position. It performs the following steps when called:\n1. Let size be the length of string.2. Assert: position \u2265 0 and position < size.3. Let first be the code unit at index position within string.4. Let cp be the code point whose numeric value is that of first.5. If first is not a leading surrogate or trailing surrogate, thena. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: false }.6. If first is a trailing surrogate or position + 1 = size, thena. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: true }.7. Let second be the code unit at index position + 1 within string.8. If second is not a trailing surrogate, thena. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: true }.9. Set cp to UTF16SurrogatePairToCodePoint(first, second).10. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 2, [[IsUnpairedSurrogate]]: false }.\n\n\n11.1.5 Static Semantics: StringToCodePoints ( string )\nThe abstract operation StringToCodePoints takes argument string (a String) and returns a List of code points. It returns the sequence of Unicode code points that results from interpreting string as UTF-16 encoded Unicode text as described in 6.1.4. It performs the following steps when called:\n1. Let codePoints be a new empty List.2. Let size be the length of string.3. Let position be 0.4. Repeat, while position < size,a. Let cp be CodePointAt(string, position).b. Append cp.[[CodePoint]] to codePoints.c. Set position to position + cp.[[CodeUnitCount]].5. Return codePoints.\n\n\n11.1.6 Static Semantics: ParseText ( sourceText, goalSymbol )\nThe abstract operation ParseText takes arguments sourceText (a sequence of Unicode code points) and goalSymbol (a nonterminal in one of the ECMAScript grammars) and returns a Parse Node or a non-empty List of SyntaxError objects. It performs the following steps when called:\n1. Attempt to parse sourceText using goalSymbol as the goal symbol, and analyse the parse result for any early error conditions. Parsing and early error detection may be interleaved in an implementation-defined manner.2. If the parse succeeded and no early errors were found, return the Parse Node (an instance of goalSymbol) at the root of the parse tree resulting from the parse.3. Otherwise, return a List of one or more SyntaxError objects representing the parsing errors and/or early errors. If more than one parsing error or early error is present, the number and ordering of error objects in the list is implementation-defined, but at least one must be present.\nNote 1\nConsider a text that has an early error at a particular point, and also a syntax error at a later point. An implementation that does a parse pass followed by an early errors pass might report the syntax error and not proceed to the early errors pass. An implementation that interleaves the two activities might report the early error\n and not proceed to find the syntax error. A third implementation might \nreport both errors. All of these behaviours are conformant.\n\nNote 2\nSee also clause 17.\n\n\n\n\n11.2 Types of Source Code\nThere are four types of ECMAScript code:\n\n\nGlobal code is source text that is treated as an ECMAScript Script. The global code of a particular Script does not include any source text that is parsed as part of a FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression, MethodDefinition, ArrowFunction, AsyncArrowFunction, ClassDeclaration, or ClassExpression.\n      \n\nEval code is the source text supplied to the built-in eval function. More precisely, if the parameter to the built-in eval function is a String, it is treated as an ECMAScript Script. The eval code for a particular invocation of eval is the global code portion of that Script.\n      \n\nFunction code is source text that is parsed to supply the value of the [[ECMAScriptCode]] and [[FormalParameters]] internal slots (see 10.2) of an ECMAScript function object.\n The function code of a particular ECMAScript function does not include \nany source text that is parsed as the function code of a nested FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression, MethodDefinition, ArrowFunction, AsyncArrowFunction, ClassDeclaration, or ClassExpression.\nIn addition, if the source text referred to above is parsed as:\n\nthe FormalParameters and FunctionBody of a FunctionDeclaration or FunctionExpression,\nthe FormalParameters and GeneratorBody of a GeneratorDeclaration or GeneratorExpression,\nthe FormalParameters and AsyncFunctionBody of an AsyncFunctionDeclaration or AsyncFunctionExpression, or\nthe FormalParameters and AsyncGeneratorBody of an AsyncGeneratorDeclaration or AsyncGeneratorExpression,\n\nthen the source text matched by the BindingIdentifier (if any) of that declaration or expression is also included in the function code of the corresponding function.\n\n\nModule code is source text that is code that is provided as a ModuleBody.\n It is the code that is directly evaluated when a module is initialized.\n The module code of a particular module does not include any source text\n that is parsed as part of a nested FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression, MethodDefinition, ArrowFunction, AsyncArrowFunction, ClassDeclaration, or ClassExpression.\n      \n\nNote 1\nFunction code is generally provided as the bodies of Function Definitions (15.2), Arrow Function Definitions (15.3), Method Definitions (15.4), Generator Function Definitions (15.5), Async Function Definitions (15.8), Async Generator Function Definitions (15.6), and Async Arrow Functions (15.9). Function code is also derived from the arguments to the Function constructor (20.2.1.1), the GeneratorFunction constructor (27.3.1.1), and the AsyncFunction constructor (27.7.1.1).\n\nNote 2\nThe practical effect of including the BindingIdentifier in function code is that the Early Errors for strict mode code are applied to a BindingIdentifier that is the name of a function whose body contains a \"use strict\" directive, even if the surrounding code is not strict mode code.\n\n\n11.2.1 Directive Prologues and the Use Strict Directive\nA Directive Prologue is the longest sequence of ExpressionStatements occurring as the initial StatementListItems or ModuleItems of a FunctionBody, a ScriptBody, or a ModuleBody and where each ExpressionStatement in the sequence consists entirely of a StringLiteral token followed by a semicolon. The semicolon may appear explicitly or may be inserted by automatic semicolon insertion (12.9). A Directive Prologue may be an empty sequence.\nA Use Strict Directive is an ExpressionStatement in a Directive Prologue whose StringLiteral is either of the exact code point sequences \"use strict\" or 'use strict'. A Use Strict Directive may not contain an EscapeSequence or LineContinuation.\nA Directive Prologue may contain more than one Use Strict Directive. However, an implementation may issue a warning if this occurs.\nNote\nThe ExpressionStatements of a Directive Prologue\n are evaluated normally during evaluation of the containing production. \nImplementations may define implementation specific meanings for ExpressionStatements which are not a Use Strict Directive and which occur in a Directive Prologue. If an appropriate notification mechanism exists, an implementation should issue a warning if it encounters in a Directive Prologue an ExpressionStatement that is not a Use Strict Directive and which does not have a meaning defined by the implementation.\n\n\n\n11.2.2 Strict Mode Code\nAn ECMAScript syntactic unit may be processed using either unrestricted or strict mode syntax and semantics (4.3.2). Code is interpreted as strict mode code in the following situations:\n\n\n          Global code is strict mode code if it begins with a Directive Prologue that contains a Use Strict Directive.\n        \n\n          Module code is always strict mode code.\n        \n\n          All parts of a ClassDeclaration or a ClassExpression are strict mode code.\n        \n\n          Eval code is strict mode code if it begins with a Directive Prologue that contains a Use Strict Directive or if the call to eval is a direct eval that is contained in strict mode code.\n        \n\n          Function code is strict mode code if the associated FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression, MethodDefinition, ArrowFunction, or AsyncArrowFunction\n is contained in strict mode code or if the code that produces the value\n of the function's [[ECMAScriptCode]] internal slot begins with a Directive Prologue that contains a Use Strict Directive.\n        \n\n          Function code that is supplied as the arguments to the \nbuilt-in Function, Generator, AsyncFunction, and AsyncGenerator constructors is strict mode code if the last argument is a String that when processed is a FunctionBody that begins with a Directive Prologue that contains a Use Strict Directive.\n        \n\nECMAScript code that is not strict mode code is called non-strict code.\n\n\n11.2.3 Non-ECMAScript Functions\nAn ECMAScript implementation may support the evaluation of function exotic objects whose evaluative behaviour is expressed in some host-defined form of executable code other than via ECMAScript code. Whether a function object\n is an ECMAScript code function or a non-ECMAScript function is not \nsemantically observable from the perspective of an ECMAScript code \nfunction that calls or is called by such a non-ECMAScript function.\n\n\n\n\n12 ECMAScript Language: Lexical Grammar\nThe source text of an ECMAScript Script or Module\n is first converted into a sequence of input elements, which are tokens,\n line terminators, comments, or white space. The source text is scanned \nfrom left to right, repeatedly taking the longest possible sequence of \ncode points as the next input element.\nThere are several situations where the identification of lexical \ninput elements is sensitive to the syntactic grammar context that is \nconsuming the input elements. This requires multiple goal symbols for the lexical grammar. The InputElementRegExpOrTemplateTail goal is used in syntactic grammar contexts where a RegularExpressionLiteral, a TemplateMiddle, or a TemplateTail is permitted. The InputElementRegExp goal symbol is used in all syntactic grammar contexts where a RegularExpressionLiteral is permitted but neither a TemplateMiddle, nor a TemplateTail is permitted. The InputElementTemplateTail goal is used in all syntactic grammar contexts where a TemplateMiddle or a TemplateTail is permitted but a RegularExpressionLiteral is not permitted. In all other contexts, InputElementDiv is used as the lexical goal symbol.\nNote\nThe use of multiple lexical goals ensures that there are no \nlexical ambiguities that would affect automatic semicolon insertion. For\n example, there are no syntactic grammar contexts where both a leading \ndivision or division-assignment, and a leading RegularExpressionLiteral are permitted. This is not affected by semicolon insertion (see 12.9); in examples such as the following:\na = b\n/hi/g.exec(c).map(d);\nwhere the first non-whitespace, non-comment code point after a LineTerminator is U+002F (SOLIDUS) and the syntactic context allows division or division-assignment, no semicolon is inserted at the LineTerminator. That is, the above example is interpreted in the same way as:\na = b / hi / g.exec(c).map(d);\n\nSyntax\n\nInputElementDiv :: \nWhiteSpace\n\n\nLineTerminator\n\n\nComment\n\n\nCommonToken\n\n\nDivPunctuator\n\n\nRightBracePunctuator\n\n\n\nInputElementRegExp :: \nWhiteSpace\n\n\nLineTerminator\n\n\nComment\n\n\nCommonToken\n\n\nRightBracePunctuator\n\n\nRegularExpressionLiteral\n\n\n\nInputElementRegExpOrTemplateTail :: \nWhiteSpace\n\n\nLineTerminator\n\n\nComment\n\n\nCommonToken\n\n\nRegularExpressionLiteral\n\n\nTemplateSubstitutionTail\n\n\n\nInputElementTemplateTail :: \nWhiteSpace\n\n\nLineTerminator\n\n\nComment\n\n\nCommonToken\n\n\nDivPunctuator\n\n\nTemplateSubstitutionTail\n\n\n\n\n12.1 Unicode Format-Control Characters\nThe Unicode format-control characters (i.e., the characters in \ncategory \u201cCf\u201d in the Unicode Character Database such as LEFT-TO-RIGHT \nMARK or RIGHT-TO-LEFT MARK) are control codes used to control the \nformatting of a range of text in the absence of higher-level protocols \nfor this (such as mark-up languages).\nIt is useful to allow format-control characters in source text to\n facilitate editing and display. All format control characters may be \nused within comments, and within string literals, template literals, and\n regular expression literals.\nU+200C (ZERO WIDTH NON-JOINER) and U+200D (ZERO WIDTH JOINER) are\n format-control characters that are used to make necessary distinctions \nwhen forming words or phrases in certain languages. In ECMAScript source\n text these code points may also be used in an IdentifierName after the first character.\nU+FEFF (ZERO WIDTH NO-BREAK SPACE) is a format-control character \nused primarily at the start of a text to mark it as Unicode and to allow\n detection of the text's encoding and byte order. <ZWNBSP> \ncharacters intended for this purpose can sometimes also appear after the\n start of a text, for example as a result of concatenating files. In \nECMAScript source text <ZWNBSP> code points are treated as white \nspace characters (see 12.2).\nThe special treatment of certain format-control characters \noutside of comments, string literals, and regular expression literals is\n summarized in Table 37.\nTable 37: Format-Control Code Point Usage\n\n\n\n            Code Point\n          \n\n            Name\n          \n\n            Abbreviation\n          \n\n            Usage\n          \n\n\n\nU+200C\n\n\n            ZERO WIDTH NON-JOINER\n          \n\n            <ZWNJ>\n          \n\nIdentifierPart\n\n\n\n\nU+200D\n\n\n            ZERO WIDTH JOINER\n          \n\n            <ZWJ>\n          \n\nIdentifierPart\n\n\n\n\nU+FEFF\n\n\n            ZERO WIDTH NO-BREAK SPACE\n          \n\n            <ZWNBSP>\n          \n\nWhiteSpace\n\n\n\n\n\n\n12.2 White Space\nWhite space code points are used to improve source text \nreadability and to separate tokens (indivisible lexical units) from each\n other, but are otherwise insignificant. White space code points may \noccur between any two tokens and at the start or end of input. White \nspace code points may occur within a StringLiteral, a RegularExpressionLiteral, a Template, or a TemplateSubstitutionTail where they are considered significant code points forming part of a literal value. They may also occur within a Comment, but cannot appear within any other kind of token.\nThe ECMAScript white space code points are listed in Table 38.\nTable 38: White Space Code Points\n\n\n\n            Code Point\n          \n\n            Name\n          \n\n            Abbreviation\n          \n\n\n\nU+0009\n\n\n            CHARACTER TABULATION\n          \n\n            <TAB>\n          \n\n\n\nU+000B\n\n\n            LINE TABULATION\n          \n\n            <VT>\n          \n\n\n\nU+000C\n\n\n            FORM FEED (FF)\n          \n\n            <FF>\n          \n\n\n\nU+FEFF\n\n\n            ZERO WIDTH NO-BREAK SPACE\n          \n\n            <ZWNBSP>\n          \n\n\n\n            Category \u201cZs\u201d\n          \n\n            Any Unicode \u201cSpace_Separator\u201d code point\n          \n\n            <USP>\n          \n\n\n\nNote 1\nU+0020 (SPACE) and U+00A0 (NO-BREAK SPACE) code points are part of <USP>.\n\nNote 2\nOther than for the code points listed in Table 38, ECMAScript WhiteSpace\n intentionally excludes all code points that have the Unicode \n\u201cWhite_Space\u201d property but which are not classified in category \n\u201cSpace_Separator\u201d (\u201cZs\u201d).\n\nSyntax\n\nWhiteSpace :: \n<TAB>\n\n\n<VT>\n\n\n<FF>\n\n\n<ZWNBSP>\n\n\n<USP>\n\n\n\n\n\n12.3 Line Terminators\nLike white space code points, line terminator code points are \nused to improve source text readability and to separate tokens \n(indivisible lexical units) from each other. However, unlike white space\n code points, line terminators have some influence over the behaviour of\n the syntactic grammar. In general, line terminators may occur between \nany two tokens, but there are a few places where they are forbidden by \nthe syntactic grammar. Line terminators also affect the process of \nautomatic semicolon insertion (12.9). A line terminator cannot occur within any token except a StringLiteral, Template, or TemplateSubstitutionTail. <LF> and <CR> line terminators cannot occur within a StringLiteral token except as part of a LineContinuation.\nA line terminator can occur within a MultiLineComment but cannot occur within a SingleLineComment.\nLine terminators are included in the set of white space code points that are matched by the \\s class in regular expressions.\nThe ECMAScript line terminator code points are listed in Table 39.\nTable 39: Line Terminator Code Points\n\n\n\n            Code Point\n          \n\n            Unicode Name\n          \n\n            Abbreviation\n          \n\n\n\nU+000A\n\n\n            LINE FEED (LF)\n          \n\n            <LF>\n          \n\n\n\nU+000D\n\n\n            CARRIAGE RETURN (CR)\n          \n\n            <CR>\n          \n\n\n\nU+2028\n\n\n            LINE SEPARATOR\n          \n\n            <LS>\n          \n\n\n\nU+2029\n\n\n            PARAGRAPH SEPARATOR\n          \n\n            <PS>\n          \n\n\n\nOnly the Unicode code points in Table 39\n are treated as line terminators. Other new line or line breaking \nUnicode code points are not treated as line terminators but are treated \nas white space if they meet the requirements listed in Table 38. The sequence <CR><LF> is commonly used as a line terminator. It should be considered a single SourceCharacter for the purpose of reporting line numbers.\nSyntax\n\nLineTerminator :: \n<LF>\n\n\n<CR>\n\n\n<LS>\n\n\n<PS>\n\n\n\nLineTerminatorSequence :: \n<LF>\n\n\n<CR>\n[lookahead \u2260 <LF>]\n\n\n<LS>\n\n\n<PS>\n\n\n<CR>\n<LF>\n\n\n\n\n\n12.4 Comments\nComments can be either single or multi-line. Multi-line comments cannot nest.\nBecause a single-line comment can contain any Unicode code point except a LineTerminator\n code point, and because of the general rule that a token is always as \nlong as possible, a single-line comment always consists of all code \npoints from the // marker to the end of the line. However, the LineTerminator\n at the end of the line is not considered to be part of the single-line \ncomment; it is recognized separately by the lexical grammar and becomes \npart of the stream of input elements for the syntactic grammar. This \npoint is very important, because it implies that the presence or absence\n of single-line comments does not affect the process of automatic \nsemicolon insertion (see 12.9).\nComments behave like white space and are discarded except that, if a MultiLineComment contains a line terminator code point, then the entire comment is considered to be a LineTerminator for purposes of parsing by the syntactic grammar.\nSyntax\n\nComment :: \nMultiLineComment\n\n\nSingleLineComment\n\n\n\nMultiLineComment :: \n/*\nMultiLineCommentCharsopt\n*/\n\n\n\nMultiLineCommentChars :: \nMultiLineNotAsteriskChar\nMultiLineCommentCharsopt\n\n\n*\nPostAsteriskCommentCharsopt\n\n\n\nPostAsteriskCommentChars :: \nMultiLineNotForwardSlashOrAsteriskChar\nMultiLineCommentCharsopt\n\n\n*\nPostAsteriskCommentCharsopt\n\n\n\nMultiLineNotAsteriskChar :: \nSourceCharacter but not *\n\n\n\nMultiLineNotForwardSlashOrAsteriskChar :: \nSourceCharacter but not one of / or *\n\n\n\nSingleLineComment :: \n//\nSingleLineCommentCharsopt\n\n\n\nSingleLineCommentChars :: \nSingleLineCommentChar\nSingleLineCommentCharsopt\n\n\n\nSingleLineCommentChar :: \nSourceCharacter but not LineTerminator\n\n\n\nA number of productions in this section are given alternative definitions in section B.1.1\n\n\n12.5 Tokens\nSyntax\n\nCommonToken :: \nIdentifierName\n\n\nPrivateIdentifier\n\n\nPunctuator\n\n\nNumericLiteral\n\n\nStringLiteral\n\n\nTemplate\n\n\n\nNote\nThe DivPunctuator, RegularExpressionLiteral, RightBracePunctuator, and TemplateSubstitutionTail productions derive additional tokens that are not included in the CommonToken production.\n\n\n\n12.6 Names and Keywords\nIdentifierName and ReservedWord\n are tokens that are interpreted according to the Default Identifier \nSyntax given in Unicode Standard Annex #31, Identifier and Pattern \nSyntax, with some small modifications. ReservedWord is an enumerated subset of IdentifierName. The syntactic grammar defines Identifier as an IdentifierName that is not a ReservedWord.\n The Unicode identifier grammar is based on character properties \nspecified by the Unicode Standard. The Unicode code points in the \nspecified categories in the latest version of the Unicode Standard must \nbe treated as in those categories by all conforming ECMAScript \nimplementations. ECMAScript implementations may recognize identifier \ncode points defined in later editions of the Unicode Standard.\nNote 1\nThis standard specifies specific code point additions: U+0024 (DOLLAR SIGN) and U+005F (LOW LINE) are permitted anywhere in an IdentifierName,\n and the code points U+200C (ZERO WIDTH NON-JOINER) and U+200D (ZERO \nWIDTH JOINER) are permitted anywhere after the first code point of an IdentifierName.\n\nSyntax\n\nPrivateIdentifier :: \n#\nIdentifierName\n\n\n\nIdentifierName :: \nIdentifierStart\n\n\nIdentifierName\nIdentifierPart\n\n\n\nIdentifierStart :: \nIdentifierStartChar\n\n\n\\\nUnicodeEscapeSequence\n\n\n\nIdentifierPart :: \nIdentifierPartChar\n\n\n\\\nUnicodeEscapeSequence\n\n\n\nIdentifierStartChar :: \nUnicodeIDStart\n\n\n$\n\n\n_\n\n\n\nIdentifierPartChar :: \nUnicodeIDContinue\n\n\n$\n\n\n<ZWNJ>\n\n\n<ZWJ>\n\n\n\nUnicodeIDStart :: \nany Unicode code point with the Unicode property \u201cID_Start\u201d\n\n\n\nUnicodeIDContinue :: \nany Unicode code point with the Unicode property \u201cID_Continue\u201d\n\n\n\nThe definitions of the nonterminal UnicodeEscapeSequence is given in 12.8.4.\nNote 2\nThe nonterminal IdentifierPart derives _ via UnicodeIDContinue.\n\nNote 3\nThe sets of code points with Unicode properties \u201cID_Start\u201d and \n\u201cID_Continue\u201d include, respectively, the code points with Unicode \nproperties \u201cOther_ID_Start\u201d and \u201cOther_ID_Continue\u201d.\n\n\n12.6.1 Identifier Names\nUnicode escape sequences are permitted in an IdentifierName, where they contribute a single Unicode code point to the IdentifierName. The code point is expressed by the CodePoint of the UnicodeEscapeSequence (see 12.8.4). The \\ preceding the UnicodeEscapeSequence and the u and { } code units, if they appear, do not contribute code points to the IdentifierName. A UnicodeEscapeSequence cannot be used to put a code point into an IdentifierName that would otherwise be illegal. In other words, if a \\ UnicodeEscapeSequence sequence were replaced by the SourceCharacter it contributes, the result must still be a valid IdentifierName that has the exact same sequence of SourceCharacter elements as the original IdentifierName. All interpretations of IdentifierName\n within this specification are based upon their actual code points \nregardless of whether or not an escape sequence was used to contribute \nany particular code point.\nTwo IdentifierNames that are canonically equivalent according to the Unicode Standard are not equal unless, after replacement of each UnicodeEscapeSequence, they are represented by the exact same sequence of code points.\n\n12.6.1.1 Static Semantics: Early Errors\n\nIdentifierStart :: \n\\\nUnicodeEscapeSequence\n\n\n\n\n\n            It is a Syntax Error if IdentifierCodePoint of UnicodeEscapeSequence is not some Unicode code point matched by the IdentifierStartChar lexical grammar production.\n          \n\n\nIdentifierPart :: \n\\\nUnicodeEscapeSequence\n\n\n\n\n\n            It is a Syntax Error if IdentifierCodePoint of UnicodeEscapeSequence is not some Unicode code point matched by the IdentifierPartChar lexical grammar production.\n          \n\n\n\n12.6.1.2 Static Semantics: IdentifierCodePoints\nThe syntax-directed operation IdentifierCodePoints takes no arguments and returns a List of code points. It is defined piecewise over the following productions:\n\nIdentifierName :: IdentifierStart\n\n\n1. Let cp be IdentifierCodePoint of IdentifierStart.2. Return \u00ab cp \u00bb.\n\nIdentifierName :: \nIdentifierName\nIdentifierPart\n\n\n\n1. Let cps be IdentifierCodePoints of the derived IdentifierName.2. Let cp be IdentifierCodePoint of IdentifierPart.3. Return the list-concatenation of cps and \u00ab cp \u00bb.\n\n\n12.6.1.3 Static Semantics: IdentifierCodePoint\nThe syntax-directed operation IdentifierCodePoint takes no \narguments and returns a code point. It is defined piecewise over the \nfollowing productions:\n\nIdentifierStart :: IdentifierStartChar\n\n\n1. Return the code point matched by IdentifierStartChar.\n\nIdentifierPart :: IdentifierPartChar\n\n\n1. Return the code point matched by IdentifierPartChar.\n\nUnicodeEscapeSequence :: \nu\nHex4Digits\n\n\n\n1. Return the code point whose numeric value is the MV of Hex4Digits.\n\nUnicodeEscapeSequence :: \nu{\nCodePoint\n}\n\n\n\n1. Return the code point whose numeric value is the MV of CodePoint.\n\n\n\n12.6.2 Keywords and Reserved Words\nA keyword is a token that matches IdentifierName, but also has a syntactic use; that is, it appears literally, in a fixed width font, in some syntactic production. The keywords of ECMAScript include if, while, async, await, and many others.\nA reserved word is an IdentifierName\n that cannot be used as an identifier. Many keywords are reserved words,\n but some are not, and some are reserved only in certain contexts. if and while are reserved words. await is reserved only inside async functions and modules. async is not reserved; it can be used as a variable name or statement label without restriction.\nThis specification uses a combination of grammatical productions and early error rules to specify which names are valid identifiers and which are reserved words. All tokens in the ReservedWord list below, except for await and yield, are unconditionally reserved. Exceptions for await and yield are specified in 13.1, using parameterized syntactic productions. Lastly, several early error rules restrict the set of valid identifiers. See 13.1.1, 14.3.1.1, 14.7.5.1, and 15.7.1. In summary, there are five categories of identifier names:\n\n\nThose that are always allowed as identifiers, and are not keywords, such as Math, window, toString, and _;\n\n\nThose that are never allowed as identifiers, namely the ReservedWords listed below except await and yield;\n\n\nThose that are contextually allowed as identifiers, namely await and yield;\n\n\nThose that are contextually disallowed as identifiers, in strict mode code: let, static, implements, interface, package, private, protected, and public;\n\n\nThose that are always allowed as identifiers, but also appear as keywords within certain syntactic productions, at places where Identifier is not allowed: as, async, from, get, meta, of, set, and target.\n\n\nThe term conditional keyword, or contextual keyword,\n is sometimes used to refer to the keywords that fall in the last three \ncategories, and thus can be used as identifiers in some contexts and as \nkeywords in others.\nSyntax\n\nReservedWord :: one of await break case catch class const continue debugger default delete do else enum export extends false finally for function if import in instanceof new null return super switch this throw true try typeof var void while with yield\n\n\nNote 1\nPer 5.1.5, keywords in the grammar match literal sequences of specific SourceCharacter elements. A code point in a keyword cannot be expressed by a \\ UnicodeEscapeSequence.\nAn IdentifierName can contain \\ UnicodeEscapeSequences, but it is not possible to declare a variable named \"else\" by spelling it els\\u{65}. The early error rules in 13.1.1 rule out identifiers with the same StringValue as a reserved word.\n\nNote 2\nenum is not currently used as a keyword in this specification. It is a future reserved word, set aside for use as a keyword in future language extensions.\nSimilarly, implements, interface, package, private, protected, and public are future reserved words in strict mode code.\n\nNote 3\nThe names arguments and eval are not keywords, but they are subject to some restrictions in strict mode code. See 13.1.1, 8.5.4, 15.2.1, 15.5.1, 15.6.1, and 15.8.1.\n\n\n\n\n12.7 Punctuators\nSyntax\n\nPunctuator :: \nOptionalChainingPunctuator\n\n\nOtherPunctuator\n\n\n\nOptionalChainingPunctuator :: \n?.\n[lookahead \u2209 DecimalDigit]\n\n\n\nOtherPunctuator :: one of { ( ) [ ] . ... ; , < > <= >= == != === !== + - * % ** ++ -- << >> >>> & | ^ ! ~ && || ?? ? : = += -= *= %= **= <<= >>= >>>= &= |= ^= &&= ||= ??= =>\n\n\nDivPunctuator :: \n/\n\n\n/=\n\n\n\nRightBracePunctuator :: \n}\n\n\n\n\n\n12.8 Literals\n\n12.8.1 Null Literals\nSyntax\n\nNullLiteral :: \nnull\n\n\n\n\n\n12.8.2 Boolean Literals\nSyntax\n\nBooleanLiteral :: \ntrue\n\n\nfalse\n\n\n\n\n\n12.8.3 Numeric Literals\nSyntax\n\nNumericLiteralSeparator :: \n_\n\n\n\nNumericLiteral :: \nDecimalLiteral\n\n\nDecimalBigIntegerLiteral\n\n\nNonDecimalIntegerLiteral[+Sep]\n\n\nNonDecimalIntegerLiteral[+Sep]\nBigIntLiteralSuffix\n\n\nLegacyOctalIntegerLiteral\n\n\n\nDecimalBigIntegerLiteral :: \n0\nBigIntLiteralSuffix\n\n\nNonZeroDigit\nDecimalDigits[+Sep]opt\nBigIntLiteralSuffix\n\n\nNonZeroDigit\nNumericLiteralSeparator\nDecimalDigits[+Sep]\nBigIntLiteralSuffix\n\n\n\nNonDecimalIntegerLiteral[Sep] :: \nBinaryIntegerLiteral[?Sep]\n\n\nOctalIntegerLiteral[?Sep]\n\n\nHexIntegerLiteral[?Sep]\n\n\n\nBigIntLiteralSuffix :: \nn\n\n\n\nDecimalLiteral :: \nDecimalIntegerLiteral\n.\nDecimalDigits[+Sep]opt\nExponentPart[+Sep]opt\n\n\n.\nDecimalDigits[+Sep]\nExponentPart[+Sep]opt\n\n\nDecimalIntegerLiteral\nExponentPart[+Sep]opt\n\n\n\nDecimalIntegerLiteral :: \n0\n\n\nNonZeroDigit\n\n\nNonZeroDigit\nNumericLiteralSeparatoropt\nDecimalDigits[+Sep]\n\n\nNonOctalDecimalIntegerLiteral\n\n\n\nDecimalDigits[Sep] :: \nDecimalDigit\n\n\nDecimalDigits[?Sep]\nDecimalDigit\n\n[+Sep]\nDecimalDigits[+Sep]\nNumericLiteralSeparator\nDecimalDigit\n\n\n\nDecimalDigit :: one of 0 1 2 3 4 5 6 7 8 9\n\n\nNonZeroDigit :: one of 1 2 3 4 5 6 7 8 9\n\n\nExponentPart[Sep] :: \nExponentIndicator\nSignedInteger[?Sep]\n\n\n\nExponentIndicator :: one of e E\n\n\nSignedInteger[Sep] :: \nDecimalDigits[?Sep]\n\n\n+\nDecimalDigits[?Sep]\n\n\n-\nDecimalDigits[?Sep]\n\n\n\nBinaryIntegerLiteral[Sep] :: \n0b\nBinaryDigits[?Sep]\n\n\n0B\nBinaryDigits[?Sep]\n\n\n\nBinaryDigits[Sep] :: \nBinaryDigit\n\n\nBinaryDigits[?Sep]\nBinaryDigit\n\n[+Sep]\nBinaryDigits[+Sep]\nNumericLiteralSeparator\nBinaryDigit\n\n\n\nBinaryDigit :: one of 0 1\n\n\nOctalIntegerLiteral[Sep] :: \n0o\nOctalDigits[?Sep]\n\n\n0O\nOctalDigits[?Sep]\n\n\n\nOctalDigits[Sep] :: \nOctalDigit\n\n\nOctalDigits[?Sep]\nOctalDigit\n\n[+Sep]\nOctalDigits[+Sep]\nNumericLiteralSeparator\nOctalDigit\n\n\n\nLegacyOctalIntegerLiteral :: \n0\nOctalDigit\n\n\nLegacyOctalIntegerLiteral\nOctalDigit\n\n\n\nNonOctalDecimalIntegerLiteral :: \n0\nNonOctalDigit\n\n\nLegacyOctalLikeDecimalIntegerLiteral\nNonOctalDigit\n\n\nNonOctalDecimalIntegerLiteral\nDecimalDigit\n\n\n\nLegacyOctalLikeDecimalIntegerLiteral :: \n0\nOctalDigit\n\n\nLegacyOctalLikeDecimalIntegerLiteral\nOctalDigit\n\n\n\nOctalDigit :: one of 0 1 2 3 4 5 6 7\n\n\nNonOctalDigit :: one of 8 9\n\n\nHexIntegerLiteral[Sep] :: \n0x\nHexDigits[?Sep]\n\n\n0X\nHexDigits[?Sep]\n\n\n\nHexDigits[Sep] :: \nHexDigit\n\n\nHexDigits[?Sep]\nHexDigit\n\n[+Sep]\nHexDigits[+Sep]\nNumericLiteralSeparator\nHexDigit\n\n\n\nHexDigit :: one of 0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n\nThe SourceCharacter immediately following a NumericLiteral must not be an IdentifierStart or DecimalDigit.\nNote\nFor example: 3in is an error and not the two input elements 3 and in.\n\n\n12.8.3.1 Static Semantics: Early Errors\n\nNumericLiteral :: LegacyOctalIntegerLiteral\n\n\nDecimalIntegerLiteral :: NonOctalDecimalIntegerLiteral\n\n\n\nIt is a Syntax Error if the source text matched by this production is strict mode code.\n\nNoteIn non-strict code, this syntax is Legacy.\n\n\n12.8.3.2 Static Semantics: MV\nA numeric literal stands for a value of the Number type or the BigInt type.\n\n\n            The MV of \nDecimalLiteral :: \nDecimalIntegerLiteral\n.\nDecimalDigits\n\n\n is the MV of DecimalIntegerLiteral plus (the MV of DecimalDigits \u00d7 10-n), where n is the number of code points in DecimalDigits, excluding all occurrences of NumericLiteralSeparator.\n          \n\n            The MV of \nDecimalLiteral :: \nDecimalIntegerLiteral\n.\nExponentPart\n\n\n is the MV of DecimalIntegerLiteral \u00d7 10e, where e is the MV of ExponentPart.\n          \n\n            The MV of \nDecimalLiteral :: \nDecimalIntegerLiteral\n.\nDecimalDigits\nExponentPart\n\n\n is (the MV of DecimalIntegerLiteral plus (the MV of DecimalDigits \u00d7 10-n)) \u00d7 10e, where n is the number of code points in DecimalDigits, excluding all occurrences of NumericLiteralSeparator and e is the MV of ExponentPart.\n          \n\n            The MV of \nDecimalLiteral :: \n.\nDecimalDigits\n\n\n is the MV of DecimalDigits \u00d7 10-n, where n is the number of code points in DecimalDigits, excluding all occurrences of NumericLiteralSeparator.\n          \n\n            The MV of \nDecimalLiteral :: \n.\nDecimalDigits\nExponentPart\n\n\n is the MV of DecimalDigits \u00d7 10e - n, where n is the number of code points in DecimalDigits, excluding all occurrences of NumericLiteralSeparator, and e is the MV of ExponentPart.\n          \n\n            The MV of \nDecimalLiteral :: \nDecimalIntegerLiteral\nExponentPart\n\n\n is the MV of DecimalIntegerLiteral \u00d7 10e, where e is the MV of ExponentPart.\n          \n\n            The MV of \nDecimalIntegerLiteral :: 0\n\n is 0.\n          \n\n            The MV of \nDecimalIntegerLiteral :: \nNonZeroDigit\nNumericLiteralSeparatoropt\nDecimalDigits\n\n\n is (the MV of NonZeroDigit \u00d7 10n) plus the MV of DecimalDigits, where n is the number of code points in DecimalDigits, excluding all occurrences of NumericLiteralSeparator.\n          \n\n            The MV of \nDecimalDigits :: \nDecimalDigits\nDecimalDigit\n\n\n is (the MV of DecimalDigits \u00d7 10) plus the MV of DecimalDigit.\n          \n\n            The MV of \nDecimalDigits :: \nDecimalDigits\nNumericLiteralSeparator\nDecimalDigit\n\n\n is (the MV of DecimalDigits \u00d7 10) plus the MV of DecimalDigit.\n          \n\n            The MV of \nExponentPart :: \nExponentIndicator\nSignedInteger\n\n\n is the MV of SignedInteger.\n          \n\n            The MV of \nSignedInteger :: \n-\nDecimalDigits\n\n\n is the negative of the MV of DecimalDigits.\n          \n\n            The MV of \nDecimalDigit :: 0\n\n or of \nHexDigit :: 0\n\n or of \nOctalDigit :: 0\n\n or of \nLegacyOctalEscapeSequence :: 0\n\n or of \nBinaryDigit :: 0\n\n is 0.\n          \n\n            The MV of \nDecimalDigit :: 1\n\n or of \nNonZeroDigit :: 1\n\n or of \nHexDigit :: 1\n\n or of \nOctalDigit :: 1\n\n or of \nBinaryDigit :: 1\n\n is 1.\n          \n\n            The MV of \nDecimalDigit :: 2\n\n or of \nNonZeroDigit :: 2\n\n or of \nHexDigit :: 2\n\n or of \nOctalDigit :: 2\n\n is 2.\n          \n\n            The MV of \nDecimalDigit :: 3\n\n or of \nNonZeroDigit :: 3\n\n or of \nHexDigit :: 3\n\n or of \nOctalDigit :: 3\n\n is 3.\n          \n\n            The MV of \nDecimalDigit :: 4\n\n or of \nNonZeroDigit :: 4\n\n or of \nHexDigit :: 4\n\n or of \nOctalDigit :: 4\n\n is 4.\n          \n\n            The MV of \nDecimalDigit :: 5\n\n or of \nNonZeroDigit :: 5\n\n or of \nHexDigit :: 5\n\n or of \nOctalDigit :: 5\n\n is 5.\n          \n\n            The MV of \nDecimalDigit :: 6\n\n or of \nNonZeroDigit :: 6\n\n or of \nHexDigit :: 6\n\n or of \nOctalDigit :: 6\n\n is 6.\n          \n\n            The MV of \nDecimalDigit :: 7\n\n or of \nNonZeroDigit :: 7\n\n or of \nHexDigit :: 7\n\n or of \nOctalDigit :: 7\n\n is 7.\n          \n\n            The MV of \nDecimalDigit :: 8\n\n or of \nNonZeroDigit :: 8\n\n or of \nNonOctalDigit :: 8\n\n or of \nHexDigit :: 8\n\n is 8.\n          \n\n            The MV of \nDecimalDigit :: 9\n\n or of \nNonZeroDigit :: 9\n\n or of \nNonOctalDigit :: 9\n\n or of \nHexDigit :: 9\n\n is 9.\n          \n\n            The MV of \nHexDigit :: a\n\n or of \nHexDigit :: A\n\n is 10.\n          \n\n            The MV of \nHexDigit :: b\n\n or of \nHexDigit :: B\n\n is 11.\n          \n\n            The MV of \nHexDigit :: c\n\n or of \nHexDigit :: C\n\n is 12.\n          \n\n            The MV of \nHexDigit :: d\n\n or of \nHexDigit :: D\n\n is 13.\n          \n\n            The MV of \nHexDigit :: e\n\n or of \nHexDigit :: E\n\n is 14.\n          \n\n            The MV of \nHexDigit :: f\n\n or of \nHexDigit :: F\n\n is 15.\n          \n\n            The MV of \nBinaryDigits :: \nBinaryDigits\nBinaryDigit\n\n\n is (the MV of BinaryDigits \u00d7 2) plus the MV of BinaryDigit.\n          \n\n            The MV of \nBinaryDigits :: \nBinaryDigits\nNumericLiteralSeparator\nBinaryDigit\n\n\n is (the MV of BinaryDigits \u00d7 2) plus the MV of BinaryDigit.\n          \n\n            The MV of \nOctalDigits :: \nOctalDigits\nOctalDigit\n\n\n is (the MV of OctalDigits \u00d7 8) plus the MV of OctalDigit.\n          \n\n            The MV of \nOctalDigits :: \nOctalDigits\nNumericLiteralSeparator\nOctalDigit\n\n\n is (the MV of OctalDigits \u00d7 8) plus the MV of OctalDigit.\n          \n\n            The MV of \nLegacyOctalIntegerLiteral :: \nLegacyOctalIntegerLiteral\nOctalDigit\n\n\n is (the MV of LegacyOctalIntegerLiteral times 8) plus the MV of OctalDigit.\n          \n\n            The MV of \nNonOctalDecimalIntegerLiteral :: \nLegacyOctalLikeDecimalIntegerLiteral\nNonOctalDigit\n\n\n is (the MV of LegacyOctalLikeDecimalIntegerLiteral times 10) plus the MV of NonOctalDigit.\n          \n\n            The MV of \nNonOctalDecimalIntegerLiteral :: \nNonOctalDecimalIntegerLiteral\nDecimalDigit\n\n\n is (the MV of NonOctalDecimalIntegerLiteral times 10) plus the MV of DecimalDigit.\n          \n\n            The MV of \nLegacyOctalLikeDecimalIntegerLiteral :: \nLegacyOctalLikeDecimalIntegerLiteral\nOctalDigit\n\n\n is (the MV of LegacyOctalLikeDecimalIntegerLiteral times 10) plus the MV of OctalDigit.\n          \n\n            The MV of \nHexDigits :: \nHexDigits\nHexDigit\n\n\n is (the MV of HexDigits \u00d7 16) plus the MV of HexDigit.\n          \n\n            The MV of \nHexDigits :: \nHexDigits\nNumericLiteralSeparator\nHexDigit\n\n\n is (the MV of HexDigits \u00d7 16) plus the MV of HexDigit.\n          \n\n\n\n12.8.3.3 Static Semantics: NumericValue\nThe syntax-directed operation NumericValue takes no arguments\n and returns a Number or a BigInt. It is defined piecewise over the \nfollowing productions:\n\nNumericLiteral :: DecimalLiteral\n\n\n1. Return RoundMVResult(MV of DecimalLiteral).\n\nNumericLiteral :: NonDecimalIntegerLiteral\n\n\n1. Return \ud835\udd3d(MV of NonDecimalIntegerLiteral).\n\nNumericLiteral :: LegacyOctalIntegerLiteral\n\n\n1. Return \ud835\udd3d(MV of LegacyOctalIntegerLiteral).\n\nNumericLiteral :: \nNonDecimalIntegerLiteral\nBigIntLiteralSuffix\n\n\n\n1. Return the BigInt value that represents the MV of NonDecimalIntegerLiteral.\n\nDecimalBigIntegerLiteral :: \n0\nBigIntLiteralSuffix\n\n\n\n1. Return 0\u2124.\n\nDecimalBigIntegerLiteral :: \nNonZeroDigit\nBigIntLiteralSuffix\n\n\n\n1. Return the BigInt value that represents the MV of NonZeroDigit.\n\nDecimalBigIntegerLiteral :: \nNonZeroDigit\nDecimalDigits\nBigIntLiteralSuffix\n\n\nNonZeroDigit\nNumericLiteralSeparator\nDecimalDigits\nBigIntLiteralSuffix\n\n\n\n1. Let n be the number of code points in DecimalDigits, excluding all occurrences of NumericLiteralSeparator.2. Let mv be (the MV of NonZeroDigit \u00d7 10n) plus the MV of DecimalDigits.3. Return \u2124(mv).\n\n\n\n12.8.4 String Literals\nNote 1\nA string literal is 0 or more Unicode code points enclosed in\n single or double quotes. Unicode code points may also be represented by\n an escape sequence. All code points may appear literally in a string \nliteral except for the closing quote code points, U+005C (REVERSE \nSOLIDUS), U+000D (CARRIAGE RETURN), and U+000A (LINE FEED). Any code \npoints may appear in the form of an escape sequence. String literals \nevaluate to ECMAScript String values. When generating these String \nvalues Unicode code points are UTF-16 encoded as defined in 11.1.1.\n Code points belonging to the Basic Multilingual Plane are encoded as a \nsingle code unit element of the string. All other code points are \nencoded as two code unit elements of the string.\n\nSyntax\n\nStringLiteral :: \n\"\nDoubleStringCharactersopt\n\"\n\n\n'\nSingleStringCharactersopt\n'\n\n\n\nDoubleStringCharacters :: \nDoubleStringCharacter\nDoubleStringCharactersopt\n\n\n\nSingleStringCharacters :: \nSingleStringCharacter\nSingleStringCharactersopt\n\n\n\nDoubleStringCharacter :: \nSourceCharacter but not one of \" or \\ or LineTerminator\n\n\n<LS>\n\n\n<PS>\n\n\n\\\nEscapeSequence\n\n\nLineContinuation\n\n\n\nSingleStringCharacter :: \nSourceCharacter but not one of ' or \\ or LineTerminator\n\n\n<LS>\n\n\n<PS>\n\n\n\\\nEscapeSequence\n\n\nLineContinuation\n\n\n\nLineContinuation :: \n\\\nLineTerminatorSequence\n\n\n\nEscapeSequence :: \nCharacterEscapeSequence\n\n\n0\n[lookahead \u2209 DecimalDigit]\n\n\nLegacyOctalEscapeSequence\n\n\nNonOctalDecimalEscapeSequence\n\n\nHexEscapeSequence\n\n\nUnicodeEscapeSequence\n\n\n\nCharacterEscapeSequence :: \nSingleEscapeCharacter\n\n\nNonEscapeCharacter\n\n\n\nSingleEscapeCharacter :: one of ' \" \\ b f n r t v\n\n\nNonEscapeCharacter :: \nSourceCharacter but not one of EscapeCharacter or LineTerminator\n\n\n\nEscapeCharacter :: \nSingleEscapeCharacter\n\n\nDecimalDigit\n\n\nx\n\n\nu\n\n\n\nLegacyOctalEscapeSequence :: \n0\n[lookahead \u2208 { 8, 9 }]\n\n\nNonZeroOctalDigit\n[lookahead \u2209 OctalDigit]\n\n\nZeroToThree\nOctalDigit\n[lookahead \u2209 OctalDigit]\n\n\nFourToSeven\nOctalDigit\n\n\nZeroToThree\nOctalDigit\nOctalDigit\n\n\n\nNonZeroOctalDigit :: \nOctalDigit but not 0\n\n\n\nZeroToThree :: one of 0 1 2 3\n\n\nFourToSeven :: one of 4 5 6 7\n\n\nNonOctalDecimalEscapeSequence :: one of 8 9\n\n\nHexEscapeSequence :: \nx\nHexDigit\nHexDigit\n\n\n\nUnicodeEscapeSequence :: \nu\nHex4Digits\n\n\nu{\nCodePoint\n}\n\n\n\nHex4Digits :: \nHexDigit\nHexDigit\nHexDigit\nHexDigit\n\n\n\nThe definition of the nonterminal HexDigit is given in 12.8.3. SourceCharacter is defined in 11.1.\nNote 2\n<LF> and <CR> cannot appear in a string literal, except as part of a LineContinuation\n to produce the empty code points sequence. The proper way to include \neither in the String value of a string literal is to use an escape \nsequence such as \\n or \\u000A.\n\n\n12.8.4.1 Static Semantics: Early Errors\n\nEscapeSequence :: \nLegacyOctalEscapeSequence\n\n\nNonOctalDecimalEscapeSequence\n\n\n\n\nIt is a Syntax Error if the source text matched by this production is strict mode code.\n\nNote 1In non-strict code, this syntax is Legacy.\nNote 2\nIt is possible for string literals to precede a Use Strict Directive that places the enclosing code in strict mode,\n and implementations must take care to enforce the above rules for such \nliterals. For example, the following source text contains a Syntax \nError:\nfunction invalid() { \"\\7\"; \"use strict\"; }\n\n\n\n12.8.4.2 Static Semantics: SV\nThe syntax-directed operation SV takes no arguments and returns a String.\nA string literal stands for a value of the String type. \nSV produces String values for string literals through recursive \napplication on the various parts of the string literal. As part of this \nprocess, some Unicode code points within the string literal are \ninterpreted as having a mathematical value, as described below or in 12.8.3.\n\n\n            The SV of \nStringLiteral :: \n\"\n\"\n\n\n is the empty String.\n          \n\n            The SV of \nStringLiteral :: \n'\n'\n\n\n is the empty String.\n          \n\n            The SV of \nDoubleStringCharacters :: \nDoubleStringCharacter\nDoubleStringCharacters\n\n\n is the string-concatenation of the SV of DoubleStringCharacter and the SV of DoubleStringCharacters.\n          \n\n            The SV of \nSingleStringCharacters :: \nSingleStringCharacter\nSingleStringCharacters\n\n\n is the string-concatenation of the SV of SingleStringCharacter and the SV of SingleStringCharacters.\n          \n\n            The SV of \nDoubleStringCharacter :: SourceCharacter but not one of \" or \\ or LineTerminator\n\n is the result of performing UTF16EncodeCodePoint on the code point matched by SourceCharacter.\n          \n\n            The SV of \nDoubleStringCharacter :: <LS>\n\n is the String value consisting of the code unit 0x2028 (LINE SEPARATOR).\n          \n\n            The SV of \nDoubleStringCharacter :: <PS>\n\n is the String value consisting of the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n\n            The SV of \nDoubleStringCharacter :: LineContinuation\n\n is the empty String.\n          \n\n            The SV of \nSingleStringCharacter :: SourceCharacter but not one of ' or \\ or LineTerminator\n\n is the result of performing UTF16EncodeCodePoint on the code point matched by SourceCharacter.\n          \n\n            The SV of \nSingleStringCharacter :: <LS>\n\n is the String value consisting of the code unit 0x2028 (LINE SEPARATOR).\n          \n\n            The SV of \nSingleStringCharacter :: <PS>\n\n is the String value consisting of the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n\n            The SV of \nSingleStringCharacter :: LineContinuation\n\n is the empty String.\n          \n\n            The SV of \nEscapeSequence :: 0\n\n is the String value consisting of the code unit 0x0000 (NULL).\n          \n\n            The SV of \nCharacterEscapeSequence :: SingleEscapeCharacter\n\n is the String value consisting of the code unit whose value is determined by the SingleEscapeCharacter according to Table 40.\n          \n\nTable 40: String Single Character Escape Sequences\n\n\n\n                Escape Sequence\n              \n\n                Code Unit Value\n              \n\n                Unicode Character Name\n              \n\n                Symbol\n              \n\n\n\n\\b\n\n\n0x0008\n\n\n                BACKSPACE\n              \n\n                <BS>\n              \n\n\n\n\\t\n\n\n0x0009\n\n\n                CHARACTER TABULATION\n              \n\n                <HT>\n              \n\n\n\n\\n\n\n\n0x000A\n\n\n                LINE FEED (LF)\n              \n\n                <LF>\n              \n\n\n\n\\v\n\n\n0x000B\n\n\n                LINE TABULATION\n              \n\n                <VT>\n              \n\n\n\n\\f\n\n\n0x000C\n\n\n                FORM FEED (FF)\n              \n\n                <FF>\n              \n\n\n\n\\r\n\n\n0x000D\n\n\n                CARRIAGE RETURN (CR)\n              \n\n                <CR>\n              \n\n\n\n\\\"\n\n\n0x0022\n\n\n                QUOTATION MARK\n              \n\n\"\n\n\n\n\n\\'\n\n\n0x0027\n\n\n                APOSTROPHE\n              \n\n'\n\n\n\n\n\\\\\n\n\n0x005C\n\n\n                REVERSE SOLIDUS\n              \n\n\\\n\n\n\n\n\n\n            The SV of \nNonEscapeCharacter :: SourceCharacter but not one of EscapeCharacter or LineTerminator\n\n is the result of performing UTF16EncodeCodePoint on the code point matched by SourceCharacter.\n          \n\n            The SV of \nEscapeSequence :: LegacyOctalEscapeSequence\n\n is the String value consisting of the code unit whose value is the MV of LegacyOctalEscapeSequence.\n          \n\n            The SV of \nNonOctalDecimalEscapeSequence :: 8\n\n is the String value consisting of the code unit 0x0038 (DIGIT EIGHT).\n          \n\n            The SV of \nNonOctalDecimalEscapeSequence :: 9\n\n is the String value consisting of the code unit 0x0039 (DIGIT NINE).\n          \n\n            The SV of \nHexEscapeSequence :: \nx\nHexDigit\nHexDigit\n\n\n is the String value consisting of the code unit whose value is the MV of HexEscapeSequence.\n          \n\n            The SV of \nHex4Digits :: \nHexDigit\nHexDigit\nHexDigit\nHexDigit\n\n\n is the String value consisting of the code unit whose value is the MV of Hex4Digits.\n          \n\n            The SV of \nUnicodeEscapeSequence :: \nu{\nCodePoint\n}\n\n\n is the result of performing UTF16EncodeCodePoint on the MV of CodePoint.\n          \n\n            The SV of \nTemplateEscapeSequence :: 0\n\n is the String value consisting of the code unit 0x0000 (NULL).\n          \n\n\n\n12.8.4.3 Static Semantics: MV\n\n\n            The MV of \nLegacyOctalEscapeSequence :: \nZeroToThree\nOctalDigit\n\n\n is (8 times the MV of ZeroToThree) plus the MV of OctalDigit.\n          \n\n            The MV of \nLegacyOctalEscapeSequence :: \nFourToSeven\nOctalDigit\n\n\n is (8 times the MV of FourToSeven) plus the MV of OctalDigit.\n          \n\n            The MV of \nLegacyOctalEscapeSequence :: \nZeroToThree\nOctalDigit\nOctalDigit\n\n\n is (64 (that is, 82) times the MV of ZeroToThree) plus (8 times the MV of the first OctalDigit) plus the MV of the second OctalDigit.\n          \n\n            The MV of \nZeroToThree :: 0\n\n is 0.\n          \n\n            The MV of \nZeroToThree :: 1\n\n is 1.\n          \n\n            The MV of \nZeroToThree :: 2\n\n is 2.\n          \n\n            The MV of \nZeroToThree :: 3\n\n is 3.\n          \n\n            The MV of \nFourToSeven :: 4\n\n is 4.\n          \n\n            The MV of \nFourToSeven :: 5\n\n is 5.\n          \n\n            The MV of \nFourToSeven :: 6\n\n is 6.\n          \n\n            The MV of \nFourToSeven :: 7\n\n is 7.\n          \n\n            The MV of \nHexEscapeSequence :: \nx\nHexDigit\nHexDigit\n\n\n is (16 times the MV of the first HexDigit) plus the MV of the second HexDigit.\n          \n\n            The MV of \nHex4Digits :: \nHexDigit\nHexDigit\nHexDigit\nHexDigit\n\n\n is (0x1000 \u00d7 the MV of the first HexDigit) plus (0x100 \u00d7 the MV of the second HexDigit) plus (0x10 \u00d7 the MV of the third HexDigit) plus the MV of the fourth HexDigit.\n          \n\n\n\n\n12.8.5 Regular Expression Literals\nNote 1\nA regular expression literal is an input element that is converted to a RegExp object (see 22.2)\n each time the literal is evaluated. Two regular expression literals in a\n program evaluate to regular expression objects that never compare as === to each other even if the two literals' contents are identical. A RegExp object may also be created at runtime by new RegExp or calling the RegExp constructor as a function (see 22.2.3).\n\nThe productions below describe the syntax for a regular \nexpression literal and are used by the input element scanner to find the\n end of the regular expression literal. The source text comprising the RegularExpressionBody and the RegularExpressionFlags are subsequently parsed again using the more stringent ECMAScript Regular Expression grammar (22.2.1).\nAn implementation may extend the ECMAScript Regular Expression grammar defined in 22.2.1, but it must not extend the RegularExpressionBody and RegularExpressionFlags productions defined below or the productions used by these productions.\nSyntax\n\nRegularExpressionLiteral :: \n/\nRegularExpressionBody\n/\nRegularExpressionFlags\n\n\n\nRegularExpressionBody :: \nRegularExpressionFirstChar\nRegularExpressionChars\n\n\n\nRegularExpressionChars :: \n[empty]\n\n\nRegularExpressionChars\nRegularExpressionChar\n\n\n\nRegularExpressionFirstChar :: \nRegularExpressionNonTerminator but not one of * or \\ or / or [\n\n\nRegularExpressionBackslashSequence\n\n\nRegularExpressionClass\n\n\n\nRegularExpressionChar :: \nRegularExpressionNonTerminator but not one of \\ or / or [\n\n\nRegularExpressionBackslashSequence\n\n\nRegularExpressionClass\n\n\n\nRegularExpressionBackslashSequence :: \n\\\nRegularExpressionNonTerminator\n\n\n\nRegularExpressionNonTerminator :: \nSourceCharacter but not LineTerminator\n\n\n\nRegularExpressionClass :: \n[\nRegularExpressionClassChars\n]\n\n\n\nRegularExpressionClassChars :: \n[empty]\n\n\nRegularExpressionClassChars\nRegularExpressionClassChar\n\n\n\nRegularExpressionClassChar :: \nRegularExpressionNonTerminator but not one of ] or \\\n\n\nRegularExpressionBackslashSequence\n\n\n\nRegularExpressionFlags :: \n[empty]\n\n\nRegularExpressionFlags\nIdentifierPartChar\n\n\n\nNote 2\nRegular expression literals may not be empty; instead of \nrepresenting an empty regular expression literal, the code unit sequence\n // starts a single-line comment. To specify an empty regular expression, use: /(?:)/.\n\n\n12.8.5.1 Static Semantics: BodyText\nThe syntax-directed operation BodyText takes no arguments and\n returns source text. It is defined piecewise over the following \nproductions:\n\nRegularExpressionLiteral :: \n/\nRegularExpressionBody\n/\nRegularExpressionFlags\n\n\n\n1. Return the source text that was recognized as RegularExpressionBody.\n\n\n12.8.5.2 Static Semantics: FlagText\nThe syntax-directed operation FlagText takes no arguments and\n returns source text. It is defined piecewise over the following \nproductions:\n\nRegularExpressionLiteral :: \n/\nRegularExpressionBody\n/\nRegularExpressionFlags\n\n\n\n1. Return the source text that was recognized as RegularExpressionFlags.\n\n\n\n12.8.6 Template Literal Lexical Components\nSyntax\n\nTemplate :: \nNoSubstitutionTemplate\n\n\nTemplateHead\n\n\n\nNoSubstitutionTemplate :: \n`\nTemplateCharactersopt\n`\n\n\n\nTemplateHead :: \n`\nTemplateCharactersopt\n${\n\n\n\nTemplateSubstitutionTail :: \nTemplateMiddle\n\n\nTemplateTail\n\n\n\nTemplateMiddle :: \n}\nTemplateCharactersopt\n${\n\n\n\nTemplateTail :: \n}\nTemplateCharactersopt\n`\n\n\n\nTemplateCharacters :: \nTemplateCharacter\nTemplateCharactersopt\n\n\n\nTemplateCharacter :: \n$\n[lookahead \u2260 {]\n\n\n\\\nTemplateEscapeSequence\n\n\n\\\nNotEscapeSequence\n\n\nLineContinuation\n\n\nLineTerminatorSequence\n\n\nSourceCharacter but not one of ` or \\ or $ or LineTerminator\n\n\n\nTemplateEscapeSequence :: \nCharacterEscapeSequence\n\n\n0\n[lookahead \u2209 DecimalDigit]\n\n\nHexEscapeSequence\n\n\nUnicodeEscapeSequence\n\n\n\nNotEscapeSequence :: \n0\nDecimalDigit\n\n\nDecimalDigit but not 0\n\n\nx\n[lookahead \u2209 HexDigit]\n\n\nx\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\nu\n[lookahead \u2209 HexDigit]\n[lookahead \u2260 {]\n\n\nu\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\nu\nHexDigit\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\nu\nHexDigit\nHexDigit\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\nu\n{\n[lookahead \u2209 HexDigit]\n\n\nu\n{\nNotCodePoint\n[lookahead \u2209 HexDigit]\n\n\nu\n{\nCodePoint\n[lookahead \u2209 HexDigit]\n[lookahead \u2260 }]\n\n\n\nNotCodePoint :: \nHexDigits[~Sep]\nbut only if MV of HexDigits > 0x10FFFF\n\n\n\nCodePoint :: \nHexDigits[~Sep]\nbut only if MV of HexDigits \u2264 0x10FFFF\n\n\n\nNote\nTemplateSubstitutionTail is used by the InputElementTemplateTail alternative lexical goal.\n\n\n12.8.6.1 Static Semantics: TV\nThe syntax-directed operation TV takes no arguments and returns a String or undefined.\n A template literal component is interpreted by TV as a value of the \nString type. TV is used to construct the indexed components of a \ntemplate object (colloquially, the template values). In TV, escape \nsequences are replaced by the UTF-16 code unit(s) of the Unicode code \npoint represented by the escape sequence.\n\n\n            The TV of \nNoSubstitutionTemplate :: \n`\n`\n\n\n is the empty String.\n          \n\n            The TV of \nTemplateHead :: \n`\n${\n\n\n is the empty String.\n          \n\n            The TV of \nTemplateMiddle :: \n}\n${\n\n\n is the empty String.\n          \n\n            The TV of \nTemplateTail :: \n}\n`\n\n\n is the empty String.\n          \n\n            The TV of \nTemplateCharacters :: \nTemplateCharacter\nTemplateCharacters\n\n\n is undefined if either the TV of TemplateCharacter is undefined or the TV of TemplateCharacters is undefined. Otherwise, it is the string-concatenation of the TV of TemplateCharacter and the TV of TemplateCharacters.\n          \n\n            The TV of \nTemplateCharacter :: SourceCharacter but not one of ` or \\ or $ or LineTerminator\n\n is the result of performing UTF16EncodeCodePoint on the code point matched by SourceCharacter.\n          \n\n            The TV of \nTemplateCharacter :: $\n\n is the String value consisting of the code unit 0x0024 (DOLLAR SIGN).\n          \n\n            The TV of \nTemplateCharacter :: \n\\\nTemplateEscapeSequence\n\n\n is the SV of TemplateEscapeSequence.\n          \n\n            The TV of \nTemplateCharacter :: \n\\\nNotEscapeSequence\n\n\n is undefined.\n          \n\n            The TV of \nTemplateCharacter :: LineTerminatorSequence\n\n is the TRV of LineTerminatorSequence.\n          \n\n            The TV of \nLineContinuation :: \n\\\nLineTerminatorSequence\n\n\n is the empty String.\n          \n\n\n\n12.8.6.2 Static Semantics: TRV\nThe syntax-directed operation TRV takes no arguments and \nreturns a String. A template literal component is interpreted by TRV as a\n value of the String type. TRV is used to construct the raw components \nof a template object (colloquially, the template raw values). TRV is \nsimilar to TV with the difference being that in TRV, escape sequences are interpreted as they appear in the literal.\n\n\n            The TRV of \nNoSubstitutionTemplate :: \n`\n`\n\n\n is the empty String.\n          \n\n            The TRV of \nTemplateHead :: \n`\n${\n\n\n is the empty String.\n          \n\n            The TRV of \nTemplateMiddle :: \n}\n${\n\n\n is the empty String.\n          \n\n            The TRV of \nTemplateTail :: \n}\n`\n\n\n is the empty String.\n          \n\n            The TRV of \nTemplateCharacters :: \nTemplateCharacter\nTemplateCharacters\n\n\n is the string-concatenation of the TRV of TemplateCharacter and the TRV of TemplateCharacters.\n          \n\n            The TRV of \nTemplateCharacter :: SourceCharacter but not one of ` or \\ or $ or LineTerminator\n\n is the result of performing UTF16EncodeCodePoint on the code point matched by SourceCharacter.\n          \n\n            The TRV of \nTemplateCharacter :: $\n\n is the String value consisting of the code unit 0x0024 (DOLLAR SIGN).\n          \n\n            The TRV of \nTemplateCharacter :: \n\\\nTemplateEscapeSequence\n\n\n is the string-concatenation of the code unit 0x005C (REVERSE SOLIDUS) and the TRV of TemplateEscapeSequence.\n          \n\n            The TRV of \nTemplateCharacter :: \n\\\nNotEscapeSequence\n\n\n is the string-concatenation of the code unit 0x005C (REVERSE SOLIDUS) and the TRV of NotEscapeSequence.\n          \n\n            The TRV of \nTemplateEscapeSequence :: 0\n\n is the String value consisting of the code unit 0x0030 (DIGIT ZERO).\n          \n\n            The TRV of \nNotEscapeSequence :: \n0\nDecimalDigit\n\n\n is the string-concatenation of the code unit 0x0030 (DIGIT ZERO) and the TRV of DecimalDigit.\n          \n\n            The TRV of \nNotEscapeSequence :: \nx\n[lookahead \u2209 HexDigit]\n\n\n is the String value consisting of the code unit 0x0078 (LATIN SMALL LETTER X).\n          \n\n            The TRV of \nNotEscapeSequence :: \nx\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\n is the string-concatenation of the code unit 0x0078 (LATIN SMALL LETTER X) and the TRV of HexDigit.\n          \n\n            The TRV of \nNotEscapeSequence :: \nu\n[lookahead \u2209 HexDigit]\n[lookahead \u2260 {]\n\n\n is the String value consisting of the code unit 0x0075 (LATIN SMALL LETTER U).\n          \n\n            The TRV of \nNotEscapeSequence :: \nu\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\n is the string-concatenation of the code unit 0x0075 (LATIN SMALL LETTER U) and the TRV of HexDigit.\n          \n\n            The TRV of \nNotEscapeSequence :: \nu\nHexDigit\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\n is the string-concatenation of the code unit 0x0075 (LATIN SMALL LETTER U), the TRV of the first HexDigit, and the TRV of the second HexDigit.\n          \n\n            The TRV of \nNotEscapeSequence :: \nu\nHexDigit\nHexDigit\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\n is the string-concatenation of the code unit 0x0075 (LATIN SMALL LETTER U), the TRV of the first HexDigit, the TRV of the second HexDigit, and the TRV of the third HexDigit.\n          \n\n            The TRV of \nNotEscapeSequence :: \nu\n{\n[lookahead \u2209 HexDigit]\n\n\n is the string-concatenation of the code unit 0x0075 (LATIN SMALL LETTER U) and the code unit 0x007B (LEFT CURLY BRACKET).\n          \n\n            The TRV of \nNotEscapeSequence :: \nu\n{\nNotCodePoint\n[lookahead \u2209 HexDigit]\n\n\n is the string-concatenation of the code unit 0x0075 (LATIN SMALL LETTER U), the code unit 0x007B (LEFT CURLY BRACKET), and the TRV of NotCodePoint.\n          \n\n            The TRV of \nNotEscapeSequence :: \nu\n{\nCodePoint\n[lookahead \u2209 HexDigit]\n[lookahead \u2260 }]\n\n\n is the string-concatenation of the code unit 0x0075 (LATIN SMALL LETTER U), the code unit 0x007B (LEFT CURLY BRACKET), and the TRV of CodePoint.\n          \n\n            The TRV of \nDecimalDigit :: one of 0 1 2 3 4 5 6 7 8 9\n\n is the result of performing UTF16EncodeCodePoint on the single code point matched by this production.\n          \n\n            The TRV of \nCharacterEscapeSequence :: NonEscapeCharacter\n\n is the SV of NonEscapeCharacter.\n          \n\n            The TRV of \nSingleEscapeCharacter :: one of ' \" \\ b f n r t v\n\n is the result of performing UTF16EncodeCodePoint on the single code point matched by this production.\n          \n\n            The TRV of \nHexEscapeSequence :: \nx\nHexDigit\nHexDigit\n\n\n is the string-concatenation of the code unit 0x0078 (LATIN SMALL LETTER X), the TRV of the first HexDigit, and the TRV of the second HexDigit.\n          \n\n            The TRV of \nUnicodeEscapeSequence :: \nu\nHex4Digits\n\n\n is the string-concatenation of the code unit 0x0075 (LATIN SMALL LETTER U) and the TRV of Hex4Digits.\n          \n\n            The TRV of \nUnicodeEscapeSequence :: \nu{\nCodePoint\n}\n\n\n is the string-concatenation of the code unit 0x0075 (LATIN SMALL LETTER U), the code unit 0x007B (LEFT CURLY BRACKET), the TRV of CodePoint, and the code unit 0x007D (RIGHT CURLY BRACKET).\n          \n\n            The TRV of \nHex4Digits :: \nHexDigit\nHexDigit\nHexDigit\nHexDigit\n\n\n is the string-concatenation of the TRV of the first HexDigit, the TRV of the second HexDigit, the TRV of the third HexDigit, and the TRV of the fourth HexDigit.\n          \n\n            The TRV of \nHexDigits :: \nHexDigits\nHexDigit\n\n\n is the string-concatenation of the TRV of HexDigits and the TRV of HexDigit.\n          \n\n            The TRV of \nHexDigit :: one of 0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n is the result of performing UTF16EncodeCodePoint on the single code point matched by this production.\n          \n\n            The TRV of \nLineContinuation :: \n\\\nLineTerminatorSequence\n\n\n is the string-concatenation of the code unit 0x005C (REVERSE SOLIDUS) and the TRV of LineTerminatorSequence.\n          \n\n            The TRV of \nLineTerminatorSequence :: <LF>\n\n is the String value consisting of the code unit 0x000A (LINE FEED).\n          \n\n            The TRV of \nLineTerminatorSequence :: <CR>\n\n is the String value consisting of the code unit 0x000A (LINE FEED).\n          \n\n            The TRV of \nLineTerminatorSequence :: <LS>\n\n is the String value consisting of the code unit 0x2028 (LINE SEPARATOR).\n          \n\n            The TRV of \nLineTerminatorSequence :: <PS>\n\n is the String value consisting of the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n\n            The TRV of \nLineTerminatorSequence :: \n<CR>\n<LF>\n\n\n is the String value consisting of the code unit 0x000A (LINE FEED).\n          \n\nNote\nTV excludes the code units of LineContinuation while TRV includes them. <CR><LF> and <CR> LineTerminatorSequences are normalized to <LF> for both TV and TRV. An explicit TemplateEscapeSequence is needed to include a <CR> or <CR><LF> sequence.\n\n\n\n\n\n12.9 Automatic Semicolon Insertion\nMost ECMAScript statements and declarations must be terminated \nwith a semicolon. Such semicolons may always appear explicitly in the \nsource text. For convenience, however, such semicolons may be omitted \nfrom the source text in certain situations. These situations are \ndescribed by saying that semicolons are automatically inserted into the \nsource code token stream in those situations.\n\n12.9.1 Rules of Automatic Semicolon Insertion\nIn the following rules, \u201ctoken\u201d means the actual recognized lexical token determined using the current lexical goal symbol as described in clause 12.\nThere are three basic rules of semicolon insertion:\n\n\nWhen, as the source text is parsed from left to right, a token (called the offending token)\n is encountered that is not allowed by any production of the grammar, \nthen a semicolon is automatically inserted before the offending token if\n one or more of the following conditions is true:\n\n\n              The offending token is separated from the previous token by at least one LineTerminator.\n            \n\n              The offending token is }.\n            \n\n              The previous token is ) and the inserted semicolon would then be parsed as the terminating semicolon of a do-while statement (14.7.2).\n            \n\n\n\n          When, as the source text is parsed from left to right, the end\n of the input stream of tokens is encountered and the parser is unable \nto parse the input token stream as a single instance of the goal \nnonterminal, then a semicolon is automatically inserted at the end of \nthe input stream.\n        \n\n          When, as the source text is parsed from left to right, a token\n is encountered that is allowed by some production of the grammar, but \nthe production is a restricted production and the token would be the first token for a terminal or nonterminal immediately following the annotation \u201c[no LineTerminator\n here]\u201d within the restricted production (and therefore such a token is \ncalled a restricted token), and the restricted token is separated from \nthe previous token by at least one LineTerminator, then a semicolon is automatically inserted before the restricted token.\n        \n\nHowever, there is an additional overriding condition on the \npreceding rules: a semicolon is never inserted automatically if the \nsemicolon would then be parsed as an empty statement or if that \nsemicolon would become one of the two semicolons in the header of a for statement (see 14.7.4).\nNote\nThe following are the only restricted productions in the grammar:\n\nUpdateExpression[Yield, Await] : \nLeftHandSideExpression[?Yield, ?Await]\n[no LineTerminator here]\n++\n\n\nLeftHandSideExpression[?Yield, ?Await]\n[no LineTerminator here]\n--\n\n\n\nContinueStatement[Yield, Await] : \ncontinue\n;\n\n\ncontinue\n[no LineTerminator here]\nLabelIdentifier[?Yield, ?Await]\n;\n\n\n\nBreakStatement[Yield, Await] : \nbreak\n;\n\n\nbreak\n[no LineTerminator here]\nLabelIdentifier[?Yield, ?Await]\n;\n\n\n\nReturnStatement[Yield, Await] : \nreturn\n;\n\n\nreturn\n[no LineTerminator here]\nExpression[+In, ?Yield, ?Await]\n;\n\n\n\nThrowStatement[Yield, Await] : \nthrow\n[no LineTerminator here]\nExpression[+In, ?Yield, ?Await]\n;\n\n\n\nYieldExpression[In, Await] : \nyield\n\n\nyield\n[no LineTerminator here]\nAssignmentExpression[?In, +Yield, ?Await]\n\n\nyield\n[no LineTerminator here]\n*\nAssignmentExpression[?In, +Yield, ?Await]\n\n\n\nArrowFunction[In, Yield, Await] : \nArrowParameters[?Yield, ?Await]\n[no LineTerminator here]\n=>\nConciseBody[?In]\n\n\n\nAsyncFunctionDeclaration[Yield, Await, Default] : \nasync\n[no LineTerminator here]\nfunction\nBindingIdentifier[?Yield, ?Await]\n(\nFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n[+Default]\nasync\n[no LineTerminator here]\nfunction\n(\nFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncFunctionExpression : \nasync\n[no LineTerminator here]\nfunction\nBindingIdentifier[~Yield, +Await]opt\n(\nFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncMethod[Yield, Await] : \nasync\n[no LineTerminator here]\nClassElementName[?Yield, ?Await]\n(\nUniqueFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncGeneratorDeclaration[Yield, Await, Default] : \nasync\n[no LineTerminator here]\nfunction\n*\nBindingIdentifier[?Yield, ?Await]\n(\nFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n[+Default]\nasync\n[no LineTerminator here]\nfunction\n*\n(\nFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorExpression : \nasync\n[no LineTerminator here]\nfunction\n*\nBindingIdentifier[+Yield, +Await]opt\n(\nFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorMethod[Yield, Await] : \nasync\n[no LineTerminator here]\n*\nClassElementName[?Yield, ?Await]\n(\nUniqueFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncArrowFunction[In, Yield, Await] : \nasync\n[no LineTerminator here]\nAsyncArrowBindingIdentifier[?Yield]\n[no LineTerminator here]\n=>\nAsyncConciseBody[?In]\n\n\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\n[no LineTerminator here]\n=>\nAsyncConciseBody[?In]\n\n\n\nAsyncArrowHead : \nasync\n[no LineTerminator here]\nArrowFormalParameters[~Yield, +Await]\n\n\n\nThe practical effect of these restricted productions is as follows:\n\n\n            When a ++ or -- token is encountered where the parser would treat it as a postfix operator, and at least one LineTerminator occurred between the preceding token and the ++ or -- token, then a semicolon is automatically inserted before the ++ or -- token.\n          \n\n            When a continue, break, return, throw, or yield token is encountered and a LineTerminator is encountered before the next token, a semicolon is automatically inserted after the continue, break, return, throw, or yield token.\n          \n\n            When arrow function parameter(s) are followed by a LineTerminator before a => token, a semicolon is automatically inserted and the punctuator causes a syntax error.\n          \n\n            When an async token is followed by a LineTerminator before a function or IdentifierName or ( token, a semicolon is automatically inserted and the async token is not treated as part of the same expression or class element as the following tokens.\n          \n\n            When an async token is followed by a LineTerminator before a * token, a semicolon is automatically inserted and the punctuator causes a syntax error.\n          \n\nThe resulting practical advice to ECMAScript programmers is:\n\n\n            A postfix ++ or -- operator should be on the same line as its operand.\n          \n\n            An Expression in a return or throw statement or an AssignmentExpression in a yield expression should start on the same line as the return, throw, or yield token.\n          \n\n            A LabelIdentifier in a break or continue statement should be on the same line as the break or continue token.\n          \n\n            The end of an arrow function's parameter(s) and its => should be on the same line.\n          \n\n            The async token preceding an asynchronous function or method should be on the same line as the immediately following token.\n          \n\n\n\n\n12.9.2 Examples of Automatic Semicolon Insertion\nThis section is non-normative.\nThe source\n{ 1 2 } 3\nis not a valid sentence in the ECMAScript grammar, even with the automatic semicolon insertion rules. In contrast, the source\n{ 1\n2 } 3\nis also not a valid ECMAScript sentence, but is transformed by automatic semicolon insertion into the following:\n{ 1\n;2 ;} 3;\nwhich is a valid ECMAScript sentence.\nThe source\nfor (a; b\n)\nis not a valid ECMAScript sentence and is not altered by \nautomatic semicolon insertion because the semicolon is needed for the \nheader of a for statement. Automatic semicolon insertion never inserts one of the two semicolons in the header of a for statement.\nThe source\nreturn\na + b\nis transformed by automatic semicolon insertion into the following:\nreturn;\na + b;\nNote 1\nThe expression a + b is not treated as a value to be returned by the return statement, because a LineTerminator separates it from the token return.\n\nThe source\na = b\n++c\nis transformed by automatic semicolon insertion into the following:\na = b;\n++c;\nNote 2\nThe token ++ is not treated as a postfix operator applying to the variable b, because a LineTerminator occurs between b and ++.\n\nThe source\nif (a > b)\nelse c = d\nis not a valid ECMAScript sentence and is not altered by automatic semicolon insertion before the else\n token, even though no production of the grammar applies at that point, \nbecause an automatically inserted semicolon would then be parsed as an \nempty statement.\nThe source\na = b + c\n(d + e).print()\nis not transformed by automatic semicolon insertion, \nbecause the parenthesized expression that begins the second line can be \ninterpreted as an argument list for a function call:\na = b + c(d + e).print()\nIn the circumstance that an assignment statement must begin \nwith a left parenthesis, it is a good idea for the programmer to provide\n an explicit semicolon at the end of the preceding statement rather than\n to rely on automatic semicolon insertion.\n\n\n12.9.3 Interesting Cases of Automatic Semicolon Insertion\nThis section is non-normative.\nECMAScript programs can be written in a style with very few \nsemicolons by relying on automatic semicolon insertion. As described \nabove, semicolons are not inserted at every newline, and automatic \nsemicolon insertion can depend on multiple tokens across line \nterminators.\nAs new syntactic features are added to ECMAScript, additional \ngrammar productions could be added that cause lines relying on automatic\n semicolon insertion preceding them to change grammar productions when \nparsed.\nFor the purposes of this section, a case of automatic semicolon\n insertion is considered interesting if it is a place where a semicolon \nmay or may not be inserted, depending on the source text which precedes \nit. The rest of this section describes a number of interesting cases of \nautomatic semicolon insertion in this version of ECMAScript.\n\n12.9.3.1 Interesting Cases of Automatic Semicolon Insertion in Statement Lists\nIn a StatementList, many StatementListItems\n end in semicolons, which may be omitted using automatic semicolon \ninsertion. As a consequence of the rules above, at the end of a line \nending an expression, a semicolon is required if the following line \nbegins with any of the following:\n\nAn opening parenthesis ((). Without a semicolon, the two lines together are treated as a CallExpression.\nAn opening square bracket ([). Without a semicolon, the two lines together are treated as property access, rather than an ArrayLiteral or ArrayAssignmentPattern.\nA template literal (`). Without a semicolon, the two lines together are interpreted as a tagged Template (13.3.11), with the previous expression as the MemberExpression.\nUnary + or -. Without a semicolon, the two lines together are interpreted as a usage of the corresponding binary operator.\nA RegExp literal. Without a semicolon, the two lines together may be parsed instead as the / MultiplicativeOperator, for example if the RegExp has flags.\n\n\n\n12.9.3.2 Cases of Automatic Semicolon Insertion and \u201c[no LineTerminator here]\u201d\nThis section is non-normative.\nECMAScript contains grammar productions which include \u201c[no LineTerminator here]\u201d. These productions are sometimes a means to have optional operands in the grammar. Introducing a LineTerminator\n in these locations would change the grammar production of a source text\n by using the grammar production without the optional operand.\nThe rest of this section describes a number of productions using \u201c[no LineTerminator here]\u201d in this version of ECMAScript.\n\n12.9.3.2.1 List of Grammar Productions with Optional Operands and \u201c[no LineTerminator here]\u201d\n\nUpdateExpression.\nContinueStatement.\nBreakStatement.\nReturnStatement.\nYieldExpression.\nAsync Function Definitions (15.8) with relation to Function Definitions (15.2)\n\n\n\n\n\n\n\n13 ECMAScript Language: Expressions\n\n13.1 Identifiers\nSyntax\n\nIdentifierReference[Yield, Await] : \nIdentifier\n\n[~Yield]\nyield\n\n[~Await]\nawait\n\n\n\nBindingIdentifier[Yield, Await] : \nIdentifier\n\n\nyield\n\n\nawait\n\n\n\nLabelIdentifier[Yield, Await] : \nIdentifier\n\n[~Yield]\nyield\n\n[~Await]\nawait\n\n\n\nIdentifier : \nIdentifierName but not ReservedWord\n\n\n\nNote\nyield and await are permitted as BindingIdentifier in the grammar, and prohibited with static semantics below, to prohibit automatic semicolon insertion in cases such as\nlet\nawait 0;\n\n\n13.1.1 Static Semantics: Early Errors\n\nBindingIdentifier : Identifier\n\n\n\n\n          It is a Syntax Error if the source text matched by this production is contained in strict mode code and the StringValue of Identifier is \"arguments\" or \"eval\".\n        \n\n\nIdentifierReference : yield\n\n\nBindingIdentifier : yield\n\n\nLabelIdentifier : yield\n\n\n\n\n          It is a Syntax Error if the source text matched by this production is contained in strict mode code.\n        \n\n\nIdentifierReference : await\n\n\nBindingIdentifier : await\n\n\nLabelIdentifier : await\n\n\n\n\n          It is a Syntax Error if the goal symbol of the syntactic grammar is Module.\n        \n\n\nBindingIdentifier[Yield, Await] : yield\n\n\n\n\n          It is a Syntax Error if this production has a [Yield] parameter.\n        \n\n\nBindingIdentifier[Yield, Await] : await\n\n\n\n\n          It is a Syntax Error if this production has an [Await] parameter.\n        \n\n\nIdentifierReference[Yield, Await] : Identifier\n\n\nBindingIdentifier[Yield, Await] : Identifier\n\n\nLabelIdentifier[Yield, Await] : Identifier\n\n\n\n\n          It is a Syntax Error if this production has a [Yield] parameter and StringValue of Identifier is \"yield\".\n        \n\n          It is a Syntax Error if this production has an [Await] parameter and StringValue of Identifier is \"await\".\n        \n\n\nIdentifier : IdentifierName but not ReservedWord\n\n\n\n\n          It is a Syntax Error if this phrase is contained in strict mode code and the StringValue of IdentifierName is: \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", or \"yield\".\n        \n\n          It is a Syntax Error if the goal symbol of the syntactic grammar is Module and the StringValue of IdentifierName is \"await\".\n        \n\n          It is a Syntax Error if StringValue of IdentifierName is the same String value as the StringValue of any ReservedWord except for yield or await.\n        \n\nNote\nStringValue of IdentifierName normalizes any Unicode escape sequences in IdentifierName hence such escapes cannot be used to write an Identifier whose code point sequence is the same as a ReservedWord.\n\n\n\n13.1.2 Static Semantics: StringValue\nThe syntax-directed operation StringValue takes no arguments \nand returns a String. It is defined piecewise over the following \nproductions:\n\nIdentifierName :: \nIdentifierStart\n\n\nIdentifierName\nIdentifierPart\n\n\n\n1. Let idTextUnescaped be IdentifierCodePoints of IdentifierName.2. Return CodePointsToString(idTextUnescaped).\n\nIdentifierReference : yield\n\n\nBindingIdentifier : yield\n\n\nLabelIdentifier : yield\n\n\n1. Return \"yield\".\n\nIdentifierReference : await\n\n\nBindingIdentifier : await\n\n\nLabelIdentifier : await\n\n\n1. Return \"await\".\n\nIdentifier : IdentifierName but not ReservedWord\n\n\n1. Return the StringValue of IdentifierName.\n\nPrivateIdentifier :: \n#\nIdentifierName\n\n\n\n1. Return the string-concatenation of 0x0023 (NUMBER SIGN) and the StringValue of IdentifierName.\n\nModuleExportName : StringLiteral\n\n\n1. Return the SV of StringLiteral.\n\n\n13.1.3 Runtime Semantics: Evaluation\n\nIdentifierReference : Identifier\n\n\n1. Return ?\u00a0ResolveBinding(StringValue of Identifier).\n\nIdentifierReference : yield\n\n\n1. Return ?\u00a0ResolveBinding(\"yield\").\n\nIdentifierReference : await\n\n\n1. Return ?\u00a0ResolveBinding(\"await\").\nNote 1\nThe result of evaluating an IdentifierReference is always a value of type Reference.\n\nNote 2\nIn non-strict code, the keyword yield may be used as an identifier. Evaluating the IdentifierReference resolves the binding of yield as if it was an Identifier. Early Error restriction ensures that such an evaluation only can occur for non-strict code.\n\n\n\n\n13.2 Primary Expression\nSyntax\n\nPrimaryExpression[Yield, Await] : \nthis\n\n\nIdentifierReference[?Yield, ?Await]\n\n\nLiteral\n\n\nArrayLiteral[?Yield, ?Await]\n\n\nObjectLiteral[?Yield, ?Await]\n\n\nFunctionExpression\n\n\nClassExpression[?Yield, ?Await]\n\n\nGeneratorExpression\n\n\nAsyncFunctionExpression\n\n\nAsyncGeneratorExpression\n\n\nRegularExpressionLiteral\n\n\nTemplateLiteral[?Yield, ?Await, ~Tagged]\n\n\nCoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]\n\n\n\nCoverParenthesizedExpressionAndArrowParameterList[Yield, Await] : \n(\nExpression[+In, ?Yield, ?Await]\n)\n\n\n(\nExpression[+In, ?Yield, ?Await]\n,\n)\n\n\n(\n)\n\n\n(\n...\nBindingIdentifier[?Yield, ?Await]\n)\n\n\n(\n...\nBindingPattern[?Yield, ?Await]\n)\n\n\n(\nExpression[+In, ?Yield, ?Await]\n,\n...\nBindingIdentifier[?Yield, ?Await]\n)\n\n\n(\nExpression[+In, ?Yield, ?Await]\n,\n...\nBindingPattern[?Yield, ?Await]\n)\n\n\n\nSupplemental Syntax\n\n      When processing an instance of the production\n\nPrimaryExpression[Yield, Await] : CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]\n\n\n      the interpretation of CoverParenthesizedExpressionAndArrowParameterList is refined using the following grammar:\n    \n\nParenthesizedExpression[Yield, Await] : \n(\nExpression[+In, ?Yield, ?Await]\n)\n\n\n\n\n13.2.1 The this Keyword\n\n13.2.1.1 Runtime Semantics: Evaluation\n\nPrimaryExpression : this\n\n\n1. Return ?\u00a0ResolveThisBinding().\n\n\n\n13.2.2 Identifier Reference\nSee 13.1 for IdentifierReference.\n\n\n13.2.3 Literals\nSyntax\n\nLiteral : \nNullLiteral\n\n\nBooleanLiteral\n\n\nNumericLiteral\n\n\nStringLiteral\n\n\n\n\n13.2.3.1 Runtime Semantics: Evaluation\n\nLiteral : NullLiteral\n\n\n1. Return null.\n\nLiteral : BooleanLiteral\n\n\n1. If BooleanLiteral is the token false, return false.2. If BooleanLiteral is the token true, return true.\n\nLiteral : NumericLiteral\n\n\n1. Return the NumericValue of NumericLiteral as defined in 12.8.3.\n\nLiteral : StringLiteral\n\n\n1. Return the SV of StringLiteral as defined in 12.8.4.2.\n\n\n\n13.2.4 Array Initializer\nNote\nAn ArrayLiteral\n is an expression describing the initialization of an Array, using a \nlist, of zero or more expressions each of which represents an array \nelement, enclosed in square brackets. The elements need not be literals;\n they are evaluated each time the array initializer is evaluated.\n\nArray elements may be elided at the beginning, middle or end of\n the element list. Whenever a comma in the element list is not preceded \nby an AssignmentExpression\n (i.e., a comma at the beginning or after another comma), the missing \narray element contributes to the length of the Array and increases the \nindex of subsequent elements. Elided array elements are not defined. If \nan element is elided at the end of an array, that element does not \ncontribute to the length of the Array.\nSyntax\n\nArrayLiteral[Yield, Await] : \n[\nElisionopt\n]\n\n\n[\nElementList[?Yield, ?Await]\n]\n\n\n[\nElementList[?Yield, ?Await]\n,\nElisionopt\n]\n\n\n\nElementList[Yield, Await] : \nElisionopt\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\nElisionopt\nSpreadElement[?Yield, ?Await]\n\n\nElementList[?Yield, ?Await]\n,\nElisionopt\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\nElementList[?Yield, ?Await]\n,\nElisionopt\nSpreadElement[?Yield, ?Await]\n\n\n\nElision : \n,\n\n\nElision\n,\n\n\n\nSpreadElement[Yield, Await] : \n...\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\n\n\n13.2.4.1 Runtime Semantics: ArrayAccumulation\nThe syntax-directed operation ArrayAccumulation takes arguments array (an Array) and nextIndex (an integer) and returns either a normal completion containing an integer or an abrupt completion. It is defined piecewise over the following productions:\n\nElision : ,\n\n\n1. Let len be nextIndex + 1.2. Perform ?\u00a0Set(array, \"length\", \ud835\udd3d(len), true).3. NOTE: The above step throws if len exceeds 232-1.4. Return len.\n\nElision : \nElision\n,\n\n\n\n1. Return ?\u00a0ArrayAccumulation of Elision with arguments array and (nextIndex + 1).\n\nElementList : \nElisionopt\nAssignmentExpression\n\n\n\n1. If Elision is present, thena. Set nextIndex to ?\u00a0ArrayAccumulation of Elision with arguments array and nextIndex.2. Let initResult be the result of evaluating AssignmentExpression.3. Let initValue be ?\u00a0GetValue(initResult).4. Let created be !\u00a0CreateDataPropertyOrThrow(array, !\u00a0ToString(\ud835\udd3d(nextIndex)), initValue).5. Return nextIndex + 1.\n\nElementList : \nElisionopt\nSpreadElement\n\n\n\n1. If Elision is present, thena. Set nextIndex to ?\u00a0ArrayAccumulation of Elision with arguments array and nextIndex.2. Return ?\u00a0ArrayAccumulation of SpreadElement with arguments array and nextIndex.\n\nElementList : \nElementList\n,\nElisionopt\nAssignmentExpression\n\n\n\n1. Set nextIndex to ?\u00a0ArrayAccumulation of ElementList with arguments array and nextIndex.2. If Elision is present, thena. Set nextIndex to ?\u00a0ArrayAccumulation of Elision with arguments array and nextIndex.3. Let initResult be the result of evaluating AssignmentExpression.4. Let initValue be ?\u00a0GetValue(initResult).5. Let created be !\u00a0CreateDataPropertyOrThrow(array, !\u00a0ToString(\ud835\udd3d(nextIndex)), initValue).6. Return nextIndex + 1.\n\nElementList : \nElementList\n,\nElisionopt\nSpreadElement\n\n\n\n1. Set nextIndex to ?\u00a0ArrayAccumulation of ElementList with arguments array and nextIndex.2. If Elision is present, thena. Set nextIndex to ?\u00a0ArrayAccumulation of Elision with arguments array and nextIndex.3. Return ?\u00a0ArrayAccumulation of SpreadElement with arguments array and nextIndex.\n\nSpreadElement : \n...\nAssignmentExpression\n\n\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.2. Let spreadObj be ?\u00a0GetValue(spreadRef).3. Let iteratorRecord be ?\u00a0GetIterator(spreadObj).4. Repeat,a. Let next be ?\u00a0IteratorStep(iteratorRecord).b. If next is false, return nextIndex.c. Let nextValue be ?\u00a0IteratorValue(next).d. Perform !\u00a0CreateDataPropertyOrThrow(array, !\u00a0ToString(\ud835\udd3d(nextIndex)), nextValue).e. Set nextIndex to nextIndex + 1.\nNote\nCreateDataPropertyOrThrow is used to ensure that own properties are defined for the array even if the standard built-in Array prototype object has been modified in a manner that would preclude the creation of new own properties using [[Set]].\n\n\n\n13.2.4.2 Runtime Semantics: Evaluation\n\nArrayLiteral : \n[\nElisionopt\n]\n\n\n\n1. Let array be !\u00a0ArrayCreate(0).2. If Elision is present, thena. Perform ?\u00a0ArrayAccumulation of Elision with arguments array and 0.3. Return array.\n\nArrayLiteral : \n[\nElementList\n]\n\n\n\n1. Let array be !\u00a0ArrayCreate(0).2. Perform ?\u00a0ArrayAccumulation of ElementList with arguments array and 0.3. Return array.\n\nArrayLiteral : \n[\nElementList\n,\nElisionopt\n]\n\n\n\n1. Let array be !\u00a0ArrayCreate(0).2. Let nextIndex be ?\u00a0ArrayAccumulation of ElementList with arguments array and 0.3. If Elision is present, thena. Perform ?\u00a0ArrayAccumulation of Elision with arguments array and nextIndex.4. Return array.\n\n\n\n13.2.5 Object Initializer\nNote 1\nAn object initializer is an expression describing the \ninitialization of an Object, written in a form resembling a literal. It \nis a list of zero or more pairs of property keys\n and associated values, enclosed in curly brackets. The values need not \nbe literals; they are evaluated each time the object initializer is \nevaluated.\n\nSyntax\n\nObjectLiteral[Yield, Await] : \n{\n}\n\n\n{\nPropertyDefinitionList[?Yield, ?Await]\n}\n\n\n{\nPropertyDefinitionList[?Yield, ?Await]\n,\n}\n\n\n\nPropertyDefinitionList[Yield, Await] : \nPropertyDefinition[?Yield, ?Await]\n\n\nPropertyDefinitionList[?Yield, ?Await]\n,\nPropertyDefinition[?Yield, ?Await]\n\n\n\nPropertyDefinition[Yield, Await] : \nIdentifierReference[?Yield, ?Await]\n\n\nCoverInitializedName[?Yield, ?Await]\n\n\nPropertyName[?Yield, ?Await]\n:\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\nMethodDefinition[?Yield, ?Await]\n\n\n...\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\n\nPropertyName[Yield, Await] : \nLiteralPropertyName\n\n\nComputedPropertyName[?Yield, ?Await]\n\n\n\nLiteralPropertyName : \nIdentifierName\n\n\nStringLiteral\n\n\nNumericLiteral\n\n\n\nComputedPropertyName[Yield, Await] : \n[\nAssignmentExpression[+In, ?Yield, ?Await]\n]\n\n\n\nCoverInitializedName[Yield, Await] : \nIdentifierReference[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]\n\n\n\nInitializer[In, Yield, Await] : \n=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\n\nNote 2\nMethodDefinition is defined in 15.4.\n\nNote 3\nIn certain contexts, ObjectLiteral is used as a cover grammar for a more restricted secondary grammar. The CoverInitializedName\n production is necessary to fully cover these secondary grammars. \nHowever, use of this production results in an early Syntax Error in \nnormal contexts where an actual ObjectLiteral is expected.\n\n\n13.2.5.1 Static Semantics: Early Errors\n\nPropertyDefinition : MethodDefinition\n\n\n\n\n            It is a Syntax Error if HasDirectSuper of MethodDefinition is true.\n          \n\n            It is a Syntax Error if PrivateBoundIdentifiers of MethodDefinition is not empty.\n          \n\nIn addition to describing an actual object initializer the ObjectLiteral productions are also used as a cover grammar for ObjectAssignmentPattern and may be recognized as part of a CoverParenthesizedExpressionAndArrowParameterList. When ObjectLiteral appears in a context where ObjectAssignmentPattern is required the following Early Error rules are not applied. In addition, they are not applied when initially parsing a CoverParenthesizedExpressionAndArrowParameterList or CoverCallExpressionAndAsyncArrowHead.\n\nPropertyDefinition : CoverInitializedName\n\n\n\n\n            It is a Syntax Error if any source text is matched by this production.\n          \n\nNote 1\nThis production exists so that ObjectLiteral can serve as a cover grammar for ObjectAssignmentPattern. It cannot occur in an actual object initializer.\n\n\nObjectLiteral : \n{\nPropertyDefinitionList\n}\n\n\n{\nPropertyDefinitionList\n,\n}\n\n\n\n\n\n            It is a Syntax Error if PropertyNameList of PropertyDefinitionList contains any duplicate entries for \"__proto__\" and at least two of those entries were obtained from productions of the form \nPropertyDefinition : \nPropertyName\n:\nAssignmentExpression\n\n\n. This rule is not applied if this ObjectLiteral is contained within a Script that is being parsed for JSON.parse (see step 4 of JSON.parse).\n          \n\nNote 2\nThe List returned by PropertyNameList does not include property names defined using a ComputedPropertyName.\n\n\n\n13.2.5.2 Static Semantics: IsComputedPropertyKey\nThe syntax-directed operation IsComputedPropertyKey takes no \narguments and returns a Boolean. It is defined piecewise over the \nfollowing productions:\n\nPropertyName : LiteralPropertyName\n\n\n1. Return false.\n\nPropertyName : ComputedPropertyName\n\n\n1. Return true.\n\n\n13.2.5.3 Static Semantics: PropertyNameList\nThe syntax-directed operation PropertyNameList takes no arguments and returns a List of Strings. It is defined piecewise over the following productions:\n\nPropertyDefinitionList : PropertyDefinition\n\n\n1. Let propName be PropName of PropertyDefinition.2. If propName is empty, return a new empty List.3. Return \u00ab propName \u00bb.\n\nPropertyDefinitionList : \nPropertyDefinitionList\n,\nPropertyDefinition\n\n\n\n1. Let list be PropertyNameList of PropertyDefinitionList.2. Let propName be PropName of PropertyDefinition.3. If propName is empty, return list.4. Return the list-concatenation of list and \u00ab propName \u00bb.\n\n\n13.2.5.4 Runtime Semantics: Evaluation\n\nObjectLiteral : \n{\n}\n\n\n\n1. Return OrdinaryObjectCreate(%Object.prototype%).\n\nObjectLiteral : \n{\nPropertyDefinitionList\n}\n\n\n{\nPropertyDefinitionList\n,\n}\n\n\n\n1. Let obj be OrdinaryObjectCreate(%Object.prototype%).2. Perform ?\u00a0PropertyDefinitionEvaluation of PropertyDefinitionList with argument obj.3. Return obj.\n\nLiteralPropertyName : IdentifierName\n\n\n1. Return StringValue of IdentifierName.\n\nLiteralPropertyName : StringLiteral\n\n\n1. Return the SV of StringLiteral.\n\nLiteralPropertyName : NumericLiteral\n\n\n1. Let nbr be the NumericValue of NumericLiteral.2. Return !\u00a0ToString(nbr).\n\nComputedPropertyName : \n[\nAssignmentExpression\n]\n\n\n\n1. Let exprValue be the result of evaluating AssignmentExpression.2. Let propName be ?\u00a0GetValue(exprValue).3. Return ?\u00a0ToPropertyKey(propName).\n\n\n13.2.5.5 Runtime Semantics: PropertyDefinitionEvaluation\nThe syntax-directed operation PropertyDefinitionEvaluation takes argument object and returns either a normal completion containing unused or an abrupt completion. It is defined piecewise over the following productions:\n\nPropertyDefinitionList : \nPropertyDefinitionList\n,\nPropertyDefinition\n\n\n\n1. Perform ?\u00a0PropertyDefinitionEvaluation of PropertyDefinitionList with argument object.2. Perform ?\u00a0PropertyDefinitionEvaluation of PropertyDefinition with argument object.3. Return unused.\n\nPropertyDefinition : \n...\nAssignmentExpression\n\n\n\n1. Let exprValue be the result of evaluating AssignmentExpression.2. Let fromValue be ?\u00a0GetValue(exprValue).3. Let excludedNames be a new empty List.4. Perform ?\u00a0CopyDataProperties(object, fromValue, excludedNames).5. Return unused.\n\nPropertyDefinition : IdentifierReference\n\n\n1. Let propName be StringValue of IdentifierReference.2. Let exprValue be the result of evaluating IdentifierReference.3. Let propValue be ?\u00a0GetValue(exprValue).4. Assert: object is an ordinary, extensible object with no non-configurable properties.5. Perform !\u00a0CreateDataPropertyOrThrow(object, propName, propValue).6. Return unused.\n\nPropertyDefinition : \nPropertyName\n:\nAssignmentExpression\n\n\n\n1. Let propKey be the result of evaluating PropertyName.2. ReturnIfAbrupt(propKey).3. If this PropertyDefinition is contained within a Script that is being evaluated for JSON.parse (see step 7 of JSON.parse), thena. Let isProtoSetter be false.4. Else if propKey is the String value \"__proto__\" and if IsComputedPropertyKey of PropertyName is false, thena. Let isProtoSetter be true.5. Else,a. Let isProtoSetter be false.6. If IsAnonymousFunctionDefinition(AssignmentExpression) is true and isProtoSetter is false, thena. Let propValue be ?\u00a0NamedEvaluation of AssignmentExpression with argument propKey.7. Else,a. Let exprValueRef be the result of evaluating AssignmentExpression.b. Let propValue be ?\u00a0GetValue(exprValueRef).8. If isProtoSetter is true, thena. If Type(propValue) is either Object or Null, theni. Perform !\u00a0object.[[SetPrototypeOf]](propValue).b. Return unused.9. Assert: object is an ordinary, extensible object with no non-configurable properties.10. Perform !\u00a0CreateDataPropertyOrThrow(object, propKey, propValue).11. Return unused.\n\nPropertyDefinition : MethodDefinition\n\n\n1. Perform ?\u00a0MethodDefinitionEvaluation of MethodDefinition with arguments object and true.2. Return unused.\n\n\n\n13.2.6 Function Defining Expressions\nSee 15.2 for \nPrimaryExpression : FunctionExpression\n\n.\nSee 15.5 for \nPrimaryExpression : GeneratorExpression\n\n.\nSee 15.7 for \nPrimaryExpression : ClassExpression\n\n.\nSee 15.8 for \nPrimaryExpression : AsyncFunctionExpression\n\n.\nSee 15.6 for \nPrimaryExpression : AsyncGeneratorExpression\n\n.\n\n\n13.2.7 Regular Expression Literals\nSyntax\nSee 12.8.5.\n\n13.2.7.1 Static Semantics: Early Errors\n\nPrimaryExpression : RegularExpressionLiteral\n\n\n\n\n            It is a Syntax Error if IsValidRegularExpressionLiteral(RegularExpressionLiteral) is false.\n          \n\n\n\n13.2.7.2 Static Semantics: IsValidRegularExpressionLiteral ( literal )\nThe abstract operation IsValidRegularExpressionLiteral takes argument literal (a RegularExpressionLiteral Parse Node)\n and returns a Boolean. It determines if its argument is a valid regular\n expression literal. It performs the following steps when called:\n1. If FlagText of literal contains any code points other than g, i, m, s, u, or y, or if it contains the same code point more than once, return false.2. Let patternText be BodyText of literal.3. If FlagText of literal contains u, let u be true; else let u be false.4. If u is false, thena. Let stringValue be CodePointsToString(patternText).b. Set patternText to the sequence of code points resulting from interpreting each of the 16-bit elements of stringValue as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.5. Let parseResult be ParsePattern(patternText, u).6. If parseResult is a Parse Node, return true; else return false.\n\n\n13.2.7.3 Runtime Semantics: Evaluation\n\nPrimaryExpression : RegularExpressionLiteral\n\n\n1. Let pattern be CodePointsToString(BodyText of RegularExpressionLiteral).2. Let flags be CodePointsToString(FlagText of RegularExpressionLiteral).3. Return !\u00a0RegExpCreate(pattern, flags).\n\n\n\n13.2.8 Template Literals\nSyntax\n\nTemplateLiteral[Yield, Await, Tagged] : \nNoSubstitutionTemplate\n\n\nSubstitutionTemplate[?Yield, ?Await, ?Tagged]\n\n\n\nSubstitutionTemplate[Yield, Await, Tagged] : \nTemplateHead\nExpression[+In, ?Yield, ?Await]\nTemplateSpans[?Yield, ?Await, ?Tagged]\n\n\n\nTemplateSpans[Yield, Await, Tagged] : \nTemplateTail\n\n\nTemplateMiddleList[?Yield, ?Await, ?Tagged]\nTemplateTail\n\n\n\nTemplateMiddleList[Yield, Await, Tagged] : \nTemplateMiddle\nExpression[+In, ?Yield, ?Await]\n\n\nTemplateMiddleList[?Yield, ?Await, ?Tagged]\nTemplateMiddle\nExpression[+In, ?Yield, ?Await]\n\n\n\n\n13.2.8.1 Static Semantics: Early Errors\n\nTemplateLiteral[Yield, Await, Tagged] : NoSubstitutionTemplate\n\n\n\n\n            It is a Syntax Error if the [Tagged] parameter was not set and NoSubstitutionTemplate Contains NotEscapeSequence.\n          \n\n\nTemplateLiteral[Yield, Await, Tagged] : SubstitutionTemplate[?Yield, ?Await, ?Tagged]\n\n\n\n\n            It is a Syntax Error if the number of elements in the result of TemplateStrings of TemplateLiteral with argument false is greater than 232 - 1.\n          \n\n\nSubstitutionTemplate[Yield, Await, Tagged] : \nTemplateHead\nExpression[+In, ?Yield, ?Await]\nTemplateSpans[?Yield, ?Await, ?Tagged]\n\n\n\n\n\n            It is a Syntax Error if the [Tagged] parameter was not set and TemplateHead Contains NotEscapeSequence.\n          \n\n\nTemplateSpans[Yield, Await, Tagged] : TemplateTail\n\n\n\n\n            It is a Syntax Error if the [Tagged] parameter was not set and TemplateTail Contains NotEscapeSequence.\n          \n\n\nTemplateMiddleList[Yield, Await, Tagged] : \nTemplateMiddle\nExpression[+In, ?Yield, ?Await]\n\n\nTemplateMiddleList[?Yield, ?Await, ?Tagged]\nTemplateMiddle\nExpression[+In, ?Yield, ?Await]\n\n\n\n\n\n            It is a Syntax Error if the [Tagged] parameter was not set and TemplateMiddle Contains NotEscapeSequence.\n          \n\n\n\n13.2.8.2 Static Semantics: TemplateStrings\nThe syntax-directed operation TemplateStrings takes argument raw and returns a List of Strings. It is defined piecewise over the following productions:\n\nTemplateLiteral : NoSubstitutionTemplate\n\n\n1. If raw is false, thena. Let string be the TV of NoSubstitutionTemplate.2. Else,a. Let string be the TRV of NoSubstitutionTemplate.3. Return \u00ab string \u00bb.\n\nSubstitutionTemplate : \nTemplateHead\nExpression\nTemplateSpans\n\n\n\n1. If raw is false, thena. Let head be the TV of TemplateHead.2. Else,a. Let head be the TRV of TemplateHead.3. Let tail be TemplateStrings of TemplateSpans with argument raw.4. Return the list-concatenation of \u00ab head \u00bb and tail.\n\nTemplateSpans : TemplateTail\n\n\n1. If raw is false, thena. Let tail be the TV of TemplateTail.2. Else,a. Let tail be the TRV of TemplateTail.3. Return \u00ab tail \u00bb.\n\nTemplateSpans : \nTemplateMiddleList\nTemplateTail\n\n\n\n1. Let middle be TemplateStrings of TemplateMiddleList with argument raw.2. If raw is false, thena. Let tail be the TV of TemplateTail.3. Else,a. Let tail be the TRV of TemplateTail.4. Return the list-concatenation of middle and \u00ab tail \u00bb.\n\nTemplateMiddleList : \nTemplateMiddle\nExpression\n\n\n\n1. If raw is false, thena. Let string be the TV of TemplateMiddle.2. Else,a. Let string be the TRV of TemplateMiddle.3. Return \u00ab string \u00bb.\n\nTemplateMiddleList : \nTemplateMiddleList\nTemplateMiddle\nExpression\n\n\n\n1. Let front be TemplateStrings of TemplateMiddleList with argument raw.2. If raw is false, thena. Let last be the TV of TemplateMiddle.3. Else,a. Let last be the TRV of TemplateMiddle.4. Return the list-concatenation of front and \u00ab last \u00bb.\n\n\n13.2.8.3 GetTemplateObject ( templateLiteral )\nThe abstract operation GetTemplateObject takes argument templateLiteral (a Parse Node) and returns an Array. It performs the following steps when called:\n1. Let realm be the current Realm Record.2. Let templateRegistry be realm.[[TemplateMap]].3. For each element e of templateRegistry, doa. If e.[[Site]] is the same Parse Node as templateLiteral, theni. Return e.[[Array]].4. Let rawStrings be TemplateStrings of templateLiteral with argument true.5. Let cookedStrings be TemplateStrings of templateLiteral with argument false.6. Let count be the number of elements in the List cookedStrings.7. Assert: count \u2264 232 - 1.8. Let template be !\u00a0ArrayCreate(count).9. Let rawObj be !\u00a0ArrayCreate(count).10. Let index be 0.11. Repeat, while index < count,a. Let prop be !\u00a0ToString(\ud835\udd3d(index)).b. Let cookedValue be cookedStrings[index].c. Perform !\u00a0DefinePropertyOrThrow(template, prop, PropertyDescriptor { [[Value]]: cookedValue, [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: false }).d. Let rawValue be the String value rawStrings[index].e. Perform !\u00a0DefinePropertyOrThrow(rawObj, prop, PropertyDescriptor { [[Value]]: rawValue, [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: false }).f. Set index to index + 1.12. Perform !\u00a0SetIntegrityLevel(rawObj, frozen).13. Perform !\u00a0DefinePropertyOrThrow(template, \"raw\", PropertyDescriptor { [[Value]]: rawObj, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }).14. Perform !\u00a0SetIntegrityLevel(template, frozen).15. Append the Record { [[Site]]: templateLiteral, [[Array]]: template } to templateRegistry.16. Return template.\nNote 1\nThe creation of a template object cannot result in an abrupt completion.\n\nNote 2\nEach TemplateLiteral in the program code of a realm is associated with a unique template object that is used in the evaluation of tagged Templates (13.2.8.5).\n The template objects are frozen and the same template object is used \neach time a specific tagged Template is evaluated. Whether template \nobjects are created lazily upon first evaluation of the TemplateLiteral or eagerly prior to first evaluation is an implementation choice that is not observable to ECMAScript code.\n\nNote 3\nFuture editions of this specification may define additional non-enumerable properties of template objects.\n\n\n\n13.2.8.4 Runtime Semantics: SubstitutionEvaluation\nThe syntax-directed operation SubstitutionEvaluation takes no arguments and returns either a normal completion containing a List of ECMAScript language values or an abrupt completion. It is defined piecewise over the following productions:\n\nTemplateSpans : TemplateTail\n\n\n1. Return a new empty List.\n\nTemplateSpans : \nTemplateMiddleList\nTemplateTail\n\n\n\n1. Return ?\u00a0SubstitutionEvaluation of TemplateMiddleList.\n\nTemplateMiddleList : \nTemplateMiddle\nExpression\n\n\n\n1. Let subRef be the result of evaluating Expression.2. Let sub be ?\u00a0GetValue(subRef).3. Return \u00ab sub \u00bb.\n\nTemplateMiddleList : \nTemplateMiddleList\nTemplateMiddle\nExpression\n\n\n\n1. Let preceding be ?\u00a0SubstitutionEvaluation of TemplateMiddleList.2. Let nextRef be the result of evaluating Expression.3. Let next be ?\u00a0GetValue(nextRef).4. Return the list-concatenation of preceding and \u00ab next \u00bb.\n\n\n13.2.8.5 Runtime Semantics: Evaluation\n\nTemplateLiteral : NoSubstitutionTemplate\n\n\n1. Return the TV of NoSubstitutionTemplate as defined in 12.8.6.\n\nSubstitutionTemplate : \nTemplateHead\nExpression\nTemplateSpans\n\n\n\n1. Let head be the TV of TemplateHead as defined in 12.8.6.2. Let subRef be the result of evaluating Expression.3. Let sub be ?\u00a0GetValue(subRef).4. Let middle be ?\u00a0ToString(sub).5. Let tail be the result of evaluating TemplateSpans.6. ReturnIfAbrupt(tail).7. Return the string-concatenation of head, middle, and tail.\nNote 1\nThe string conversion semantics applied to the Expression value are like String.prototype.concat rather than the + operator.\n\n\nTemplateSpans : TemplateTail\n\n\n1. Return the TV of TemplateTail as defined in 12.8.6.\n\nTemplateSpans : \nTemplateMiddleList\nTemplateTail\n\n\n\n1. Let head be the result of evaluating TemplateMiddleList.2. ReturnIfAbrupt(head).3. Let tail be the TV of TemplateTail as defined in 12.8.6.4. Return the string-concatenation of head and tail.\n\nTemplateMiddleList : \nTemplateMiddle\nExpression\n\n\n\n1. Let head be the TV of TemplateMiddle as defined in 12.8.6.2. Let subRef be the result of evaluating Expression.3. Let sub be ?\u00a0GetValue(subRef).4. Let middle be ?\u00a0ToString(sub).5. Return the string-concatenation of head and middle.\nNote 2\nThe string conversion semantics applied to the Expression value are like String.prototype.concat rather than the + operator.\n\n\nTemplateMiddleList : \nTemplateMiddleList\nTemplateMiddle\nExpression\n\n\n\n1. Let rest be the result of evaluating TemplateMiddleList.2. ReturnIfAbrupt(rest).3. Let middle be the TV of TemplateMiddle as defined in 12.8.6.4. Let subRef be the result of evaluating Expression.5. Let sub be ?\u00a0GetValue(subRef).6. Let last be ?\u00a0ToString(sub).7. Return the string-concatenation of rest, middle, and last.\nNote 3\nThe string conversion semantics applied to the Expression value are like String.prototype.concat rather than the + operator.\n\n\n\n\n13.2.9 The Grouping Operator\n\n13.2.9.1 Static Semantics: Early Errors\n\nPrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList\n\n\n\n\nCoverParenthesizedExpressionAndArrowParameterList must cover a ParenthesizedExpression.\n          \n\n\n\n13.2.9.2 Runtime Semantics: Evaluation\n\nPrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let expr be the ParenthesizedExpression that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return the result of evaluating expr.\n\nParenthesizedExpression : \n(\nExpression\n)\n\n\n\n1. Return the result of evaluating Expression. This may be of type Reference.\nNote\nThis algorithm does not apply GetValue to the result of evaluating Expression. The principal motivation for this is so that operators such as delete and typeof may be applied to parenthesized expressions.\n\n\n\n\n\n13.3 Left-Hand-Side Expressions\nSyntax\n\nMemberExpression[Yield, Await] : \nPrimaryExpression[?Yield, ?Await]\n\n\nMemberExpression[?Yield, ?Await]\n[\nExpression[+In, ?Yield, ?Await]\n]\n\n\nMemberExpression[?Yield, ?Await]\n.\nIdentifierName\n\n\nMemberExpression[?Yield, ?Await]\nTemplateLiteral[?Yield, ?Await, +Tagged]\n\n\nSuperProperty[?Yield, ?Await]\n\n\nMetaProperty\n\n\nnew\nMemberExpression[?Yield, ?Await]\nArguments[?Yield, ?Await]\n\n\nMemberExpression[?Yield, ?Await]\n.\nPrivateIdentifier\n\n\n\nSuperProperty[Yield, Await] : \nsuper\n[\nExpression[+In, ?Yield, ?Await]\n]\n\n\nsuper\n.\nIdentifierName\n\n\n\nMetaProperty : \nNewTarget\n\n\nImportMeta\n\n\n\nNewTarget : \nnew\n.\ntarget\n\n\n\nImportMeta : \nimport\n.\nmeta\n\n\n\nNewExpression[Yield, Await] : \nMemberExpression[?Yield, ?Await]\n\n\nnew\nNewExpression[?Yield, ?Await]\n\n\n\nCallExpression[Yield, Await] : \nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\n\n\nSuperCall[?Yield, ?Await]\n\n\nImportCall[?Yield, ?Await]\n\n\nCallExpression[?Yield, ?Await]\nArguments[?Yield, ?Await]\n\n\nCallExpression[?Yield, ?Await]\n[\nExpression[+In, ?Yield, ?Await]\n]\n\n\nCallExpression[?Yield, ?Await]\n.\nIdentifierName\n\n\nCallExpression[?Yield, ?Await]\nTemplateLiteral[?Yield, ?Await, +Tagged]\n\n\nCallExpression[?Yield, ?Await]\n.\nPrivateIdentifier\n\n\n\nSuperCall[Yield, Await] : \nsuper\nArguments[?Yield, ?Await]\n\n\n\nImportCall[Yield, Await] : \nimport\n(\nAssignmentExpression[+In, ?Yield, ?Await]\n)\n\n\n\nArguments[Yield, Await] : \n(\n)\n\n\n(\nArgumentList[?Yield, ?Await]\n)\n\n\n(\nArgumentList[?Yield, ?Await]\n,\n)\n\n\n\nArgumentList[Yield, Await] : \nAssignmentExpression[+In, ?Yield, ?Await]\n\n\n...\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\nArgumentList[?Yield, ?Await]\n,\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\nArgumentList[?Yield, ?Await]\n,\n...\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\n\nOptionalExpression[Yield, Await] : \nMemberExpression[?Yield, ?Await]\nOptionalChain[?Yield, ?Await]\n\n\nCallExpression[?Yield, ?Await]\nOptionalChain[?Yield, ?Await]\n\n\nOptionalExpression[?Yield, ?Await]\nOptionalChain[?Yield, ?Await]\n\n\n\nOptionalChain[Yield, Await] : \n?.\nArguments[?Yield, ?Await]\n\n\n?.\n[\nExpression[+In, ?Yield, ?Await]\n]\n\n\n?.\nIdentifierName\n\n\n?.\nTemplateLiteral[?Yield, ?Await, +Tagged]\n\n\n?.\nPrivateIdentifier\n\n\nOptionalChain[?Yield, ?Await]\nArguments[?Yield, ?Await]\n\n\nOptionalChain[?Yield, ?Await]\n[\nExpression[+In, ?Yield, ?Await]\n]\n\n\nOptionalChain[?Yield, ?Await]\n.\nIdentifierName\n\n\nOptionalChain[?Yield, ?Await]\nTemplateLiteral[?Yield, ?Await, +Tagged]\n\n\nOptionalChain[?Yield, ?Await]\n.\nPrivateIdentifier\n\n\n\nLeftHandSideExpression[Yield, Await] : \nNewExpression[?Yield, ?Await]\n\n\nCallExpression[?Yield, ?Await]\n\n\nOptionalExpression[?Yield, ?Await]\n\n\n\nSupplemental Syntax\n\n      When processing an instance of the production\n\nCallExpression : CoverCallExpressionAndAsyncArrowHead\n\n\n      the interpretation of CoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\n    \n\nCallMemberExpression[Yield, Await] : \nMemberExpression[?Yield, ?Await]\nArguments[?Yield, ?Await]\n\n\n\n\n13.3.1 Static Semantics\n\n13.3.1.1 Static Semantics: Early Errors\n\nOptionalChain : \n?.\nTemplateLiteral\n\n\nOptionalChain\nTemplateLiteral\n\n\n\n\n\n            It is a Syntax Error if any source text is matched by this production.\n          \n\nNote\nThis production exists in order to prevent automatic semicolon insertion rules (12.9) from being applied to the following code:\na?.b\n`c`\nso that it would be interpreted as two valid statements. \nThe purpose is to maintain consistency with similar code without \noptional chaining:\na.b\n`c`\nwhich is a valid statement and where automatic semicolon insertion does not apply.\n\n\nImportMeta : \nimport\n.\nmeta\n\n\n\n\n\n            It is a Syntax Error if the syntactic goal symbol is not Module.\n          \n\n\n\n\n13.3.2 Property Accessors\nNote\nProperties are accessed by name, using either the dot notation:\n\nMemberExpression . IdentifierName\nCallExpression . IdentifierName\n\nor the bracket notation:\n\nMemberExpression [ Expression ]\nCallExpression [ Expression ]\n\nThe dot notation is explained by the following syntactic conversion:\n\nMemberExpression . IdentifierName\n\nis identical in its behaviour to\n\nMemberExpression [ <identifier-name-string> ]\n\nand similarly\n\nCallExpression . IdentifierName\n\nis identical in its behaviour to\n\nCallExpression [ <identifier-name-string> ]\n\nwhere <identifier-name-string> is the result of evaluating StringValue of IdentifierName.\n\n\n13.3.2.1 Runtime Semantics: Evaluation\n\nMemberExpression : \nMemberExpression\n[\nExpression\n]\n\n\n\n1. Let baseReference be the result of evaluating MemberExpression.2. Let baseValue be ?\u00a0GetValue(baseReference).3. If the source text matched by this MemberExpression is strict mode code, let strict be true; else let strict be false.4. Return ?\u00a0EvaluatePropertyAccessWithExpressionKey(baseValue, Expression, strict).\n\nMemberExpression : \nMemberExpression\n.\nIdentifierName\n\n\n\n1. Let baseReference be the result of evaluating MemberExpression.2. Let baseValue be ?\u00a0GetValue(baseReference).3. If the source text matched by this MemberExpression is strict mode code, let strict be true; else let strict be false.4. Return EvaluatePropertyAccessWithIdentifierKey(baseValue, IdentifierName, strict).\n\nMemberExpression : \nMemberExpression\n.\nPrivateIdentifier\n\n\n\n1. Let baseReference be the result of evaluating MemberExpression.2. Let baseValue be ?\u00a0GetValue(baseReference).3. Let fieldNameString be the StringValue of PrivateIdentifier.4. Return MakePrivateReference(baseValue, fieldNameString).\n\nCallExpression : \nCallExpression\n[\nExpression\n]\n\n\n\n1. Let baseReference be the result of evaluating CallExpression.2. Let baseValue be ?\u00a0GetValue(baseReference).3. If the source text matched by this CallExpression is strict mode code, let strict be true; else let strict be false.4. Return ?\u00a0EvaluatePropertyAccessWithExpressionKey(baseValue, Expression, strict).\n\nCallExpression : \nCallExpression\n.\nIdentifierName\n\n\n\n1. Let baseReference be the result of evaluating CallExpression.2. Let baseValue be ?\u00a0GetValue(baseReference).3. If the source text matched by this CallExpression is strict mode code, let strict be true; else let strict be false.4. Return EvaluatePropertyAccessWithIdentifierKey(baseValue, IdentifierName, strict).\n\nCallExpression : \nCallExpression\n.\nPrivateIdentifier\n\n\n\n1. Let baseReference be the result of evaluating CallExpression.2. Let baseValue be ?\u00a0GetValue(baseReference).3. Let fieldNameString be the StringValue of PrivateIdentifier.4. Return MakePrivateReference(baseValue, fieldNameString).\n\n\n\n13.3.3 EvaluatePropertyAccessWithExpressionKey ( baseValue, expression, strict )\nThe abstract operation EvaluatePropertyAccessWithExpressionKey takes arguments baseValue (an ECMAScript language value), expression (a Parse Node), and strict (a Boolean) and returns either a normal completion containing a Reference Record or an abrupt completion. It performs the following steps when called:\n1. Let propertyNameReference be the result of evaluating expression.2. Let propertyNameValue be ?\u00a0GetValue(propertyNameReference).3. Let propertyKey be ?\u00a0ToPropertyKey(propertyNameValue).4. Return the Reference Record { [[Base]]: baseValue, [[ReferencedName]]: propertyKey, [[Strict]]: strict, [[ThisValue]]: empty }.\n\n\n13.3.4 EvaluatePropertyAccessWithIdentifierKey ( baseValue, identifierName, strict )\nThe abstract operation EvaluatePropertyAccessWithIdentifierKey takes arguments baseValue (an ECMAScript language value), identifierName (an IdentifierName Parse Node), and strict (a Boolean) and returns a Reference Record. It performs the following steps when called:\n1. Let propertyNameString be StringValue of identifierName.2. Return the Reference Record { [[Base]]: baseValue, [[ReferencedName]]: propertyNameString, [[Strict]]: strict, [[ThisValue]]: empty }.\n\n\n13.3.5 The new Operator\n\n13.3.5.1 Runtime Semantics: Evaluation\n\nNewExpression : \nnew\nNewExpression\n\n\n\n1. Return ?\u00a0EvaluateNew(NewExpression, empty).\n\nMemberExpression : \nnew\nMemberExpression\nArguments\n\n\n\n1. Return ?\u00a0EvaluateNew(MemberExpression, Arguments).\n\n13.3.5.1.1 EvaluateNew ( constructExpr, arguments )\nThe abstract operation EvaluateNew takes arguments constructExpr (a NewExpression Parse Node or a MemberExpression Parse Node) and arguments (empty or an Arguments Parse Node) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let ref be the result of evaluating constructExpr.2. Let constructor be ?\u00a0GetValue(ref).3. If arguments is empty, let argList be a new empty List.4. Else,a. Let argList be ?\u00a0ArgumentListEvaluation of arguments.5. If IsConstructor(constructor) is false, throw a TypeError exception.6. Return ?\u00a0Construct(constructor, argList).\n\n\n\n\n13.3.6 Function Calls\n\n13.3.6.1 Runtime Semantics: Evaluation\n\nCallExpression : CoverCallExpressionAndAsyncArrowHead\n\n\n1. Let expr be the CallMemberExpression that is covered by CoverCallExpressionAndAsyncArrowHead.2. Let memberExpr be the MemberExpression of expr.3. Let arguments be the Arguments of expr.4. Let ref be the result of evaluating memberExpr.5. Let func be ?\u00a0GetValue(ref).6. If ref is a Reference Record, IsPropertyReference(ref) is false, and ref.[[ReferencedName]] is \"eval\", thena. If SameValue(func, %eval%) is true, theni. Let argList be ?\u00a0ArgumentListEvaluation of arguments.ii. If argList has no elements, return undefined.iii. Let evalArg be the first element of argList.iv. If the source text matched by this CallExpression is strict mode code, let strictCaller be true. Otherwise let strictCaller be false.v. Let evalRealm be the current Realm Record.vi. Return ?\u00a0PerformEval(evalArg, evalRealm, strictCaller, true).7. Let thisCall be this CallExpression.8. Let tailCall be IsInTailPosition(thisCall).9. Return ?\u00a0EvaluateCall(func, ref, arguments, tailCall).\nA CallExpression evaluation that executes step 6.a.vi is a direct eval.\n\nCallExpression : \nCallExpression\nArguments\n\n\n\n1. Let ref be the result of evaluating CallExpression.2. Let func be ?\u00a0GetValue(ref).3. Let thisCall be this CallExpression.4. Let tailCall be IsInTailPosition(thisCall).5. Return ?\u00a0EvaluateCall(func, ref, Arguments, tailCall).\n\n\n13.3.6.2 EvaluateCall ( func, ref, arguments, tailPosition )\nThe abstract operation EvaluateCall takes arguments func (an ECMAScript language value), ref (an ECMAScript language value or a Reference Record), arguments (a Parse Node), and tailPosition (a Boolean) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. If ref is a Reference Record, thena. If IsPropertyReference(ref) is true, theni. Let thisValue be GetThisValue(ref).b. Else,i. Let refEnv be ref.[[Base]].ii. Assert: refEnv is an Environment Record.iii. Let thisValue be refEnv.WithBaseObject().2. Else,a. Let thisValue be undefined.3. Let argList be ?\u00a0ArgumentListEvaluation of arguments.4. If Type(func) is not Object, throw a TypeError exception.5. If IsCallable(func) is false, throw a TypeError exception.6. If tailPosition is true, perform PrepareForTailCall().7. Return ?\u00a0Call(func, thisValue, argList).\n\n\n\n13.3.7 The super Keyword\n\n13.3.7.1 Runtime Semantics: Evaluation\n\nSuperProperty : \nsuper\n[\nExpression\n]\n\n\n\n1. Let env be GetThisEnvironment().2. Let actualThis be ?\u00a0env.GetThisBinding().3. Let propertyNameReference be the result of evaluating Expression.4. Let propertyNameValue be ?\u00a0GetValue(propertyNameReference).5. Let propertyKey be ?\u00a0ToPropertyKey(propertyNameValue).6. If the source text matched by this SuperProperty is strict mode code, let strict be true; else let strict be false.7. Return ?\u00a0MakeSuperPropertyReference(actualThis, propertyKey, strict).\n\nSuperProperty : \nsuper\n.\nIdentifierName\n\n\n\n1. Let env be GetThisEnvironment().2. Let actualThis be ?\u00a0env.GetThisBinding().3. Let propertyKey be StringValue of IdentifierName.4. If the source text matched by this SuperProperty is strict mode code, let strict be true; else let strict be false.5. Return ?\u00a0MakeSuperPropertyReference(actualThis, propertyKey, strict).\n\nSuperCall : \nsuper\nArguments\n\n\n\n1. Let newTarget be GetNewTarget().2. Assert: Type(newTarget) is Object.3. Let func be GetSuperConstructor().4. Let argList be ?\u00a0ArgumentListEvaluation of Arguments.5. If IsConstructor(func) is false, throw a TypeError exception.6. Let result be ?\u00a0Construct(func, argList, newTarget).7. Let thisER be GetThisEnvironment().8. Perform ?\u00a0thisER.BindThisValue(result).9. Let F be thisER.[[FunctionObject]].10. Assert: F is an ECMAScript function object.11. Perform ?\u00a0InitializeInstanceElements(result, F).12. Return result.\n\n\n13.3.7.2 GetSuperConstructor ( )\nThe abstract operation GetSuperConstructor takes no arguments and returns an ECMAScript language value. It performs the following steps when called:\n1. Let envRec be GetThisEnvironment().2. Assert: envRec is a function Environment Record.3. Let activeFunction be envRec.[[FunctionObject]].4. Assert: activeFunction is an ECMAScript function object.5. Let superConstructor be !\u00a0activeFunction.[[GetPrototypeOf]]().6. Return superConstructor.\n\n\n13.3.7.3 MakeSuperPropertyReference ( actualThis, propertyKey, strict )\nThe abstract operation MakeSuperPropertyReference takes arguments actualThis, propertyKey, and strict and returns either a normal completion containing a Super Reference Record or an abrupt completion. It performs the following steps when called:\n1. Let env be GetThisEnvironment().2. Assert: env.HasSuperBinding() is true.3. Let baseValue be ?\u00a0env.GetSuperBase().4. Return the Reference Record { [[Base]]: baseValue, [[ReferencedName]]: propertyKey, [[Strict]]: strict, [[ThisValue]]: actualThis }.\n\n\n\n13.3.8 Argument Lists\nNote\nThe evaluation of an argument list produces a List of values.\n\n\n13.3.8.1 Runtime Semantics: ArgumentListEvaluation\nThe syntax-directed operation ArgumentListEvaluation takes no arguments and returns either a normal completion containing a List of ECMAScript language values or an abrupt completion. It is defined piecewise over the following productions:\n\nArguments : \n(\n)\n\n\n\n1. Return a new empty List.\n\nArgumentList : AssignmentExpression\n\n\n1. Let ref be the result of evaluating AssignmentExpression.2. Let arg be ?\u00a0GetValue(ref).3. Return \u00ab arg \u00bb.\n\nArgumentList : \n...\nAssignmentExpression\n\n\n\n1. Let list be a new empty List.2. Let spreadRef be the result of evaluating AssignmentExpression.3. Let spreadObj be ?\u00a0GetValue(spreadRef).4. Let iteratorRecord be ?\u00a0GetIterator(spreadObj).5. Repeat,a. Let next be ?\u00a0IteratorStep(iteratorRecord).b. If next is false, return list.c. Let nextArg be ?\u00a0IteratorValue(next).d. Append nextArg as the last element of list.\n\nArgumentList : \nArgumentList\n,\nAssignmentExpression\n\n\n\n1. Let precedingArgs be ?\u00a0ArgumentListEvaluation of ArgumentList.2. Let ref be the result of evaluating AssignmentExpression.3. Let arg be ?\u00a0GetValue(ref).4. Return the list-concatenation of precedingArgs and \u00ab arg \u00bb.\n\nArgumentList : \nArgumentList\n,\n...\nAssignmentExpression\n\n\n\n1. Let precedingArgs be ?\u00a0ArgumentListEvaluation of ArgumentList.2. Let spreadRef be the result of evaluating AssignmentExpression.3. Let iteratorRecord be ?\u00a0GetIterator(? GetValue(spreadRef)).4. Repeat,a. Let next be ?\u00a0IteratorStep(iteratorRecord).b. If next is false, return precedingArgs.c. Let nextArg be ?\u00a0IteratorValue(next).d. Append nextArg as the last element of precedingArgs.\n\nTemplateLiteral : NoSubstitutionTemplate\n\n\n1. Let templateLiteral be this TemplateLiteral.2. Let siteObj be GetTemplateObject(templateLiteral).3. Return \u00ab siteObj \u00bb.\n\nTemplateLiteral : SubstitutionTemplate\n\n\n1. Let templateLiteral be this TemplateLiteral.2. Let siteObj be GetTemplateObject(templateLiteral).3. Let remaining be ?\u00a0ArgumentListEvaluation of SubstitutionTemplate.4. Return the list-concatenation of \u00ab siteObj \u00bb and remaining.\n\nSubstitutionTemplate : \nTemplateHead\nExpression\nTemplateSpans\n\n\n\n1. Let firstSubRef be the result of evaluating Expression.2. Let firstSub be ?\u00a0GetValue(firstSubRef).3. Let restSub be ?\u00a0SubstitutionEvaluation of TemplateSpans.4. Assert: restSub is a possibly empty List.5. Return the list-concatenation of \u00ab firstSub \u00bb and restSub.\n\n\n\n13.3.9 Optional Chains\nNoteAn optional chain is a chain of one or more property accesses and function calls, the first of which begins with the token ?..\n\n13.3.9.1 Runtime Semantics: Evaluation\n\nOptionalExpression : \nMemberExpression\nOptionalChain\n\n\n\n1. Let baseReference be the result of evaluating MemberExpression.2. Let baseValue be ?\u00a0GetValue(baseReference).3. If baseValue is undefined or null, thena. Return undefined.4. Return ?\u00a0ChainEvaluation of OptionalChain with arguments baseValue and baseReference.\n\nOptionalExpression : \nCallExpression\nOptionalChain\n\n\n\n1. Let baseReference be the result of evaluating CallExpression.2. Let baseValue be ?\u00a0GetValue(baseReference).3. If baseValue is undefined or null, thena. Return undefined.4. Return ?\u00a0ChainEvaluation of OptionalChain with arguments baseValue and baseReference.\n\nOptionalExpression : \nOptionalExpression\nOptionalChain\n\n\n\n1. Let baseReference be the result of evaluating OptionalExpression.2. Let baseValue be ?\u00a0GetValue(baseReference).3. If baseValue is undefined or null, thena. Return undefined.4. Return ?\u00a0ChainEvaluation of OptionalChain with arguments baseValue and baseReference.\n\n\n13.3.9.2 Runtime Semantics: ChainEvaluation\nThe syntax-directed operation ChainEvaluation takes arguments baseValue and baseReference and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nOptionalChain : \n?.\nArguments\n\n\n\n1. Let thisChain be this OptionalChain.2. Let tailCall be IsInTailPosition(thisChain).3. Return ?\u00a0EvaluateCall(baseValue, baseReference, Arguments, tailCall).\n\nOptionalChain : \n?.\n[\nExpression\n]\n\n\n\n1. If the source text matched by this OptionalChain is strict mode code, let strict be true; else let strict be false.2. Return ?\u00a0EvaluatePropertyAccessWithExpressionKey(baseValue, Expression, strict).\n\nOptionalChain : \n?.\nIdentifierName\n\n\n\n1. If the source text matched by this OptionalChain is strict mode code, let strict be true; else let strict be false.2. Return EvaluatePropertyAccessWithIdentifierKey(baseValue, IdentifierName, strict).\n\nOptionalChain : \n?.\nPrivateIdentifier\n\n\n\n1. Let fieldNameString be the StringValue of PrivateIdentifier.2. Return MakePrivateReference(baseValue, fieldNameString).\n\nOptionalChain : \nOptionalChain\nArguments\n\n\n\n1. Let optionalChain be OptionalChain.2. Let newReference be ?\u00a0ChainEvaluation of optionalChain with arguments baseValue and baseReference.3. Let newValue be ?\u00a0GetValue(newReference).4. Let thisChain be this OptionalChain.5. Let tailCall be IsInTailPosition(thisChain).6. Return ?\u00a0EvaluateCall(newValue, newReference, Arguments, tailCall).\n\nOptionalChain : \nOptionalChain\n[\nExpression\n]\n\n\n\n1. Let optionalChain be OptionalChain.2. Let newReference be ?\u00a0ChainEvaluation of optionalChain with arguments baseValue and baseReference.3. Let newValue be ?\u00a0GetValue(newReference).4. If the source text matched by this OptionalChain is strict mode code, let strict be true; else let strict be false.5. Return ?\u00a0EvaluatePropertyAccessWithExpressionKey(newValue, Expression, strict).\n\nOptionalChain : \nOptionalChain\n.\nIdentifierName\n\n\n\n1. Let optionalChain be OptionalChain.2. Let newReference be ?\u00a0ChainEvaluation of optionalChain with arguments baseValue and baseReference.3. Let newValue be ?\u00a0GetValue(newReference).4. If the source text matched by this OptionalChain is strict mode code, let strict be true; else let strict be false.5. Return EvaluatePropertyAccessWithIdentifierKey(newValue, IdentifierName, strict).\n\nOptionalChain : \nOptionalChain\n.\nPrivateIdentifier\n\n\n\n1. Let optionalChain be OptionalChain.2. Let newReference be ?\u00a0ChainEvaluation of optionalChain with arguments baseValue and baseReference.3. Let newValue be ?\u00a0GetValue(newReference).4. Let fieldNameString be the StringValue of PrivateIdentifier.5. Return MakePrivateReference(newValue, fieldNameString).\n\n\n\n13.3.10 Import Calls\n\n13.3.10.1 Runtime Semantics: Evaluation\n\nImportCall : \nimport\n(\nAssignmentExpression\n)\n\n\n\n1. Let referencingScriptOrModule be GetActiveScriptOrModule().2. Let argRef be the result of evaluating AssignmentExpression.3. Let specifier be ?\u00a0GetValue(argRef).4. Let promiseCapability be !\u00a0NewPromiseCapability(%Promise%).5. Let specifierString be Completion(ToString(specifier)).6. IfAbruptRejectPromise(specifierString, promiseCapability).7. Perform HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).8. Return promiseCapability.[[Promise]].\n\n\n\n13.3.11 Tagged Templates\nNote\nA tagged template is a function call where the arguments of the call are derived from a TemplateLiteral (13.2.8). The actual arguments include a template object (13.2.8.3) and the values produced by evaluating the expressions embedded within the TemplateLiteral.\n\n\n13.3.11.1 Runtime Semantics: Evaluation\n\nMemberExpression : \nMemberExpression\nTemplateLiteral\n\n\n\n1. Let tagRef be the result of evaluating MemberExpression.2. Let tagFunc be ?\u00a0GetValue(tagRef).3. Let thisCall be this MemberExpression.4. Let tailCall be IsInTailPosition(thisCall).5. Return ?\u00a0EvaluateCall(tagFunc, tagRef, TemplateLiteral, tailCall).\n\nCallExpression : \nCallExpression\nTemplateLiteral\n\n\n\n1. Let tagRef be the result of evaluating CallExpression.2. Let tagFunc be ?\u00a0GetValue(tagRef).3. Let thisCall be this CallExpression.4. Let tailCall be IsInTailPosition(thisCall).5. Return ?\u00a0EvaluateCall(tagFunc, tagRef, TemplateLiteral, tailCall).\n\n\n\n13.3.12 Meta Properties\n\n13.3.12.1 Runtime Semantics: Evaluation\n\nNewTarget : \nnew\n.\ntarget\n\n\n\n1. Return GetNewTarget().\n\nImportMeta : \nimport\n.\nmeta\n\n\n\n1. Let module be GetActiveScriptOrModule().2. Assert: module is a Source Text Module Record.3. Let importMeta be module.[[ImportMeta]].4. If importMeta is empty, thena. Set importMeta to OrdinaryObjectCreate(null).b. Let importMetaValues be HostGetImportMetaProperties(module).c. For each Record { [[Key]], [[Value]] } p of importMetaValues, doi. Perform !\u00a0CreateDataPropertyOrThrow(importMeta, p.[[Key]], p.[[Value]]).d. Perform HostFinalizeImportMeta(importMeta, module).e. Set module.[[ImportMeta]] to importMeta.f. Return importMeta.5. Else,a. Assert: Type(importMeta) is Object.b. Return importMeta.\n\n13.3.12.1.1 HostGetImportMetaProperties ( moduleRecord )\nThe host-defined abstract operation HostGetImportMetaProperties takes argument moduleRecord (a Module Record) and returns a List of Records with fields [[Key]] (a property key) and [[Value]] (an ECMAScript language value). It allows hosts to provide property keys and values for the object returned from import.meta.\nAn implementation of HostGetImportMetaProperties must conform to the following requirements:\n\nIt must return a List whose values are all Records with two fields, [[Key]] and [[Value]].\nEach such Record's [[Key]] field must be a property key, i.e., IsPropertyKey must return true when applied to it.\nEach such Record's [[Value]] field must be an ECMAScript language value.\n\nThe default implementation of HostGetImportMetaProperties is to return a new empty List.\n\n\n13.3.12.1.2 HostFinalizeImportMeta ( importMeta, moduleRecord )\nThe host-defined abstract operation HostFinalizeImportMeta takes arguments importMeta (an Object) and moduleRecord (a Module Record) and returns unused. It allows hosts to perform any extraordinary operations to prepare the object returned from import.meta.\nMost hosts will be able to simply define HostGetImportMetaProperties, and leave HostFinalizeImportMeta with its default behaviour. However, HostFinalizeImportMeta provides an \"escape hatch\" for hosts which need to directly manipulate the object before it is exposed to ECMAScript code.\nAn implementation of HostFinalizeImportMeta must conform to the following requirements:\n\nIt must return unused.\n\nThe default implementation of HostFinalizeImportMeta is to return unused.\n\n\n\n\n\n13.4 Update Expressions\nSyntax\n\nUpdateExpression[Yield, Await] : \nLeftHandSideExpression[?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\n[no LineTerminator here]\n++\n\n\nLeftHandSideExpression[?Yield, ?Await]\n[no LineTerminator here]\n--\n\n\n++\nUnaryExpression[?Yield, ?Await]\n\n\n--\nUnaryExpression[?Yield, ?Await]\n\n\n\n\n13.4.1 Static Semantics: Early Errors\n\nUpdateExpression : \nLeftHandSideExpression\n++\n\n\nLeftHandSideExpression\n--\n\n\n\n\n\n          It is an early Syntax Error if AssignmentTargetType of LeftHandSideExpression is not simple.\n        \n\n\nUpdateExpression : \n++\nUnaryExpression\n\n\n--\nUnaryExpression\n\n\n\n\n\n          It is an early Syntax Error if AssignmentTargetType of UnaryExpression is not simple.\n        \n\n\n\n13.4.2 Postfix Increment Operator\n\n13.4.2.1 Runtime Semantics: Evaluation\n\nUpdateExpression : \nLeftHandSideExpression\n++\n\n\n\n1. Let lhs be the result of evaluating LeftHandSideExpression.2. Let oldValue be ?\u00a0ToNumeric(? GetValue(lhs)).3. If Type(oldValue) is Number, thena. Let newValue be Number::add(oldValue, 1\ud835\udd3d).4. Else,a. Assert: Type(oldValue) is BigInt.b. Let newValue be BigInt::add(oldValue, 1\u2124).5. Perform ?\u00a0PutValue(lhs, newValue).6. Return oldValue.\n\n\n\n13.4.3 Postfix Decrement Operator\n\n13.4.3.1 Runtime Semantics: Evaluation\n\nUpdateExpression : \nLeftHandSideExpression\n--\n\n\n\n1. Let lhs be the result of evaluating LeftHandSideExpression.2. Let oldValue be ?\u00a0ToNumeric(? GetValue(lhs)).3. If Type(oldValue) is Number, thena. Let newValue be Number::subtract(oldValue, 1\ud835\udd3d).4. Else,a. Assert: Type(oldValue) is BigInt.b. Let newValue be BigInt::subtract(oldValue, 1\u2124).5. Perform ?\u00a0PutValue(lhs, newValue).6. Return oldValue.\n\n\n\n13.4.4 Prefix Increment Operator\n\n13.4.4.1 Runtime Semantics: Evaluation\n\nUpdateExpression : \n++\nUnaryExpression\n\n\n\n1. Let expr be the result of evaluating UnaryExpression.2. Let oldValue be ?\u00a0ToNumeric(? GetValue(expr)).3. If Type(oldValue) is Number, thena. Let newValue be Number::add(oldValue, 1\ud835\udd3d).4. Else,a. Assert: Type(oldValue) is BigInt.b. Let newValue be BigInt::add(oldValue, 1\u2124).5. Perform ?\u00a0PutValue(expr, newValue).6. Return newValue.\n\n\n\n13.4.5 Prefix Decrement Operator\n\n13.4.5.1 Runtime Semantics: Evaluation\n\nUpdateExpression : \n--\nUnaryExpression\n\n\n\n1. Let expr be the result of evaluating UnaryExpression.2. Let oldValue be ?\u00a0ToNumeric(? GetValue(expr)).3. If Type(oldValue) is Number, thena. Let newValue be Number::subtract(oldValue, 1\ud835\udd3d).4. Else,a. Assert: Type(oldValue) is BigInt.b. Let newValue be BigInt::subtract(oldValue, 1\u2124).5. Perform ?\u00a0PutValue(expr, newValue).6. Return newValue.\n\n\n\n\n13.5 Unary Operators\nSyntax\n\nUnaryExpression[Yield, Await] : \nUpdateExpression[?Yield, ?Await]\n\n\ndelete\nUnaryExpression[?Yield, ?Await]\n\n\nvoid\nUnaryExpression[?Yield, ?Await]\n\n\ntypeof\nUnaryExpression[?Yield, ?Await]\n\n\n+\nUnaryExpression[?Yield, ?Await]\n\n\n-\nUnaryExpression[?Yield, ?Await]\n\n\n~\nUnaryExpression[?Yield, ?Await]\n\n\n!\nUnaryExpression[?Yield, ?Await]\n\n[+Await]\nAwaitExpression[?Yield]\n\n\n\n\n13.5.1 The delete Operator\n\n13.5.1.1 Static Semantics: Early Errors\n\nUnaryExpression : \ndelete\nUnaryExpression\n\n\n\n\n\n            It is a Syntax Error if the UnaryExpression is contained in strict mode code and the derived UnaryExpression is \nPrimaryExpression : IdentifierReference\n\n, \nMemberExpression : \nMemberExpression\n.\nPrivateIdentifier\n\n\n, \nCallExpression : \nCallExpression\n.\nPrivateIdentifier\n\n\n, \nOptionalChain : \n?.\nPrivateIdentifier\n\n\n, or \nOptionalChain : \nOptionalChain\n.\nPrivateIdentifier\n\n\n.\n          \n\n\n              It is a Syntax Error if the derived UnaryExpression is\n\nPrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList\n\n\n              and CoverParenthesizedExpressionAndArrowParameterList ultimately derives a phrase that, if used in place of UnaryExpression, would produce a Syntax Error according to these rules. This rule is recursively applied.\n            \n\n\nNote\nThe last rule means that expressions such as delete (((foo))) produce early errors because of recursive application of the first rule.\n\n\n\n13.5.1.2 Runtime Semantics: Evaluation\n\nUnaryExpression : \ndelete\nUnaryExpression\n\n\n\n1. Let ref be the result of evaluating UnaryExpression.2. ReturnIfAbrupt(ref).3. If ref is not a Reference Record, return true.4. If IsUnresolvableReference(ref) is true, thena. Assert: ref.[[Strict]] is false.b. Return true.5. If IsPropertyReference(ref) is true, thena. Assert: IsPrivateReference(ref) is false.b. If IsSuperReference(ref) is true, throw a ReferenceError exception.c. Let baseObj be ?\u00a0ToObject(ref.[[Base]]).d. Let deleteStatus be ?\u00a0baseObj.[[Delete]](ref.[[ReferencedName]]).e. If deleteStatus is false and ref.[[Strict]] is true, throw a TypeError exception.f. Return deleteStatus.6. Else,a. Let base be ref.[[Base]].b. Assert: base is an Environment Record.c. Return ?\u00a0base.DeleteBinding(ref.[[ReferencedName]]).\nNote 1\nWhen a delete operator occurs within strict mode code, a SyntaxError exception is thrown if its UnaryExpression is a direct reference to a variable, function argument, or function name. In addition, if a delete operator occurs within strict mode code and the property to be deleted has the attribute { [[Configurable]]: false } (or otherwise cannot be deleted), a TypeError exception is thrown.\n\nNote 2\nThe object that may be created in step 5.c is not accessible outside of the above abstract operation and the ordinary object [[Delete]] internal method. An implementation might choose to avoid the actual creation of that object.\n\n\n\n\n13.5.2 The void Operator\n\n13.5.2.1 Runtime Semantics: Evaluation\n\nUnaryExpression : \nvoid\nUnaryExpression\n\n\n\n1. Let expr be the result of evaluating UnaryExpression.2. Perform ?\u00a0GetValue(expr).3. Return undefined.\nNote\nGetValue must be called even though its value is not used because it may have observable side-effects.\n\n\n\n\n13.5.3 The typeof Operator\n\n13.5.3.1 Runtime Semantics: Evaluation\n\nUnaryExpression : \ntypeof\nUnaryExpression\n\n\n\n1. Let val be the result of evaluating UnaryExpression.2. If val is a Reference Record, thena. If IsUnresolvableReference(val) is true, return \"undefined\".3. Set val to ?\u00a0GetValue(val).4. NOTE: This step is replaced in section B.3.6.3.5. Return a String according to Table 41.\nTable 41: typeof Operator Results\n\n\n\n                Type of val\n\n\n                Result\n              \n\n\n\n                Undefined\n              \n\n\"undefined\"\n\n\n\n\n                Null\n              \n\n\"object\"\n\n\n\n\n                Boolean\n              \n\n\"boolean\"\n\n\n\n\n                Number\n              \n\n\"number\"\n\n\n\n\n                String\n              \n\n\"string\"\n\n\n\n\n                Symbol\n              \n\n\"symbol\"\n\n\n\n\n                BigInt\n              \n\n\"bigint\"\n\n\n\n\n                Object (does not implement [[Call]])\n              \n\n\"object\"\n\n\n\n\n                Object (implements [[Call]])\n              \n\n\"function\"\n\n\n\n\nNote\nAn additional entry related to [[IsHTMLDDA]] Internal Slot can be found in B.3.6.3.\n\n\n\n\n13.5.4 Unary + Operator\nNote\nThe unary + operator converts its operand to Number type.\n\n\n13.5.4.1 Runtime Semantics: Evaluation\n\nUnaryExpression : \n+\nUnaryExpression\n\n\n\n1. Let expr be the result of evaluating UnaryExpression.2. Return ?\u00a0ToNumber(? GetValue(expr)).\n\n\n\n13.5.5 Unary - Operator\nNote\nThe unary - operator converts its operand to Number type and then negates it. Negating +0\ud835\udd3d produces -0\ud835\udd3d, and negating -0\ud835\udd3d produces +0\ud835\udd3d.\n\n\n13.5.5.1 Runtime Semantics: Evaluation\n\nUnaryExpression : \n-\nUnaryExpression\n\n\n\n1. Let expr be the result of evaluating UnaryExpression.2. Let oldValue be ?\u00a0ToNumeric(? GetValue(expr)).3. Let T be Type(oldValue).4. If Type(oldValue) is Number, thena. Return Number::unaryMinus(oldValue).5. Else,a. Assert: Type(oldValue) is BigInt.b. Return BigInt::unaryMinus(oldValue).\n\n\n\n13.5.6 Bitwise NOT Operator ( ~ )\n\n13.5.6.1 Runtime Semantics: Evaluation\n\nUnaryExpression : \n~\nUnaryExpression\n\n\n\n1. Let expr be the result of evaluating UnaryExpression.2. Let oldValue be ?\u00a0ToNumeric(? GetValue(expr)).3. Let T be Type(oldValue).4. If Type(oldValue) is Number, thena. Return Number::bitwiseNOT(oldValue).5. Else,a. Assert: Type(oldValue) is BigInt.b. Return BigInt::bitwiseNOT(oldValue).\n\n\n\n13.5.7 Logical NOT Operator ( ! )\n\n13.5.7.1 Runtime Semantics: Evaluation\n\nUnaryExpression : \n!\nUnaryExpression\n\n\n\n1. Let expr be the result of evaluating UnaryExpression.2. Let oldValue be ToBoolean(? GetValue(expr)).3. If oldValue is true, return false.4. Return true.\n\n\n\n\n13.6 Exponentiation Operator\nSyntax\n\nExponentiationExpression[Yield, Await] : \nUnaryExpression[?Yield, ?Await]\n\n\nUpdateExpression[?Yield, ?Await]\n**\nExponentiationExpression[?Yield, ?Await]\n\n\n\n\n13.6.1 Runtime Semantics: Evaluation\n\nExponentiationExpression : \nUpdateExpression\n**\nExponentiationExpression\n\n\n\n1. Return ?\u00a0EvaluateStringOrNumericBinaryExpression(UpdateExpression, **, ExponentiationExpression).\n\n\n\n13.7 Multiplicative Operators\nSyntax\n\nMultiplicativeExpression[Yield, Await] : \nExponentiationExpression[?Yield, ?Await]\n\n\nMultiplicativeExpression[?Yield, ?Await]\nMultiplicativeOperator\nExponentiationExpression[?Yield, ?Await]\n\n\n\nMultiplicativeOperator : one of * / %\n\n\nNote\n\nThe * operator performs multiplication, producing the product of its operands.\nThe / operator performs division, producing the quotient of its operands.\nThe % operator yields the remainder of its operands from an implied division.\n\n\n\n13.7.1 Runtime Semantics: Evaluation\n\nMultiplicativeExpression : \nMultiplicativeExpression\nMultiplicativeOperator\nExponentiationExpression\n\n\n\n1. Let opText be the source text matched by MultiplicativeOperator.2. Return ?\u00a0EvaluateStringOrNumericBinaryExpression(MultiplicativeExpression, opText, ExponentiationExpression).\n\n\n\n13.8 Additive Operators\nSyntax\n\nAdditiveExpression[Yield, Await] : \nMultiplicativeExpression[?Yield, ?Await]\n\n\nAdditiveExpression[?Yield, ?Await]\n+\nMultiplicativeExpression[?Yield, ?Await]\n\n\nAdditiveExpression[?Yield, ?Await]\n-\nMultiplicativeExpression[?Yield, ?Await]\n\n\n\n\n13.8.1 The Addition Operator ( + )\nNote\nThe addition operator either performs string concatenation or numeric addition.\n\n\n13.8.1.1 Runtime Semantics: Evaluation\n\nAdditiveExpression : \nAdditiveExpression\n+\nMultiplicativeExpression\n\n\n\n1. Return ?\u00a0EvaluateStringOrNumericBinaryExpression(AdditiveExpression, +, MultiplicativeExpression).\n\n\n\n13.8.2 The Subtraction Operator ( - )\nNote\nThe - operator performs subtraction, producing the difference of its operands.\n\n\n13.8.2.1 Runtime Semantics: Evaluation\n\nAdditiveExpression : \nAdditiveExpression\n-\nMultiplicativeExpression\n\n\n\n1. Return ?\u00a0EvaluateStringOrNumericBinaryExpression(AdditiveExpression, -, MultiplicativeExpression).\n\n\n\n\n13.9 Bitwise Shift Operators\nSyntax\n\nShiftExpression[Yield, Await] : \nAdditiveExpression[?Yield, ?Await]\n\n\nShiftExpression[?Yield, ?Await]\n<<\nAdditiveExpression[?Yield, ?Await]\n\n\nShiftExpression[?Yield, ?Await]\n>>\nAdditiveExpression[?Yield, ?Await]\n\n\nShiftExpression[?Yield, ?Await]\n>>>\nAdditiveExpression[?Yield, ?Await]\n\n\n\n\n13.9.1 The Left Shift Operator ( << )\nNote\nPerforms a bitwise left shift operation on the left operand by the amount specified by the right operand.\n\n\n13.9.1.1 Runtime Semantics: Evaluation\n\nShiftExpression : \nShiftExpression\n<<\nAdditiveExpression\n\n\n\n1. Return ?\u00a0EvaluateStringOrNumericBinaryExpression(ShiftExpression, <<, AdditiveExpression).\n\n\n\n13.9.2 The Signed Right Shift Operator ( >> )\nNote\nPerforms a sign-filling bitwise right shift operation on the left operand by the amount specified by the right operand.\n\n\n13.9.2.1 Runtime Semantics: Evaluation\n\nShiftExpression : \nShiftExpression\n>>\nAdditiveExpression\n\n\n\n1. Return ?\u00a0EvaluateStringOrNumericBinaryExpression(ShiftExpression, >>, AdditiveExpression).\n\n\n\n13.9.3 The Unsigned Right Shift Operator ( >>> )\nNote\nPerforms a zero-filling bitwise right shift operation on the left operand by the amount specified by the right operand.\n\n\n13.9.3.1 Runtime Semantics: Evaluation\n\nShiftExpression : \nShiftExpression\n>>>\nAdditiveExpression\n\n\n\n1. Return ?\u00a0EvaluateStringOrNumericBinaryExpression(ShiftExpression, >>>, AdditiveExpression).\n\n\n\n\n13.10 Relational Operators\nNote 1\nThe result of evaluating a relational operator is always of \ntype Boolean, reflecting whether the relationship named by the operator \nholds between its two operands.\n\nSyntax\n\nRelationalExpression[In, Yield, Await] : \nShiftExpression[?Yield, ?Await]\n\n\nRelationalExpression[?In, ?Yield, ?Await]\n<\nShiftExpression[?Yield, ?Await]\n\n\nRelationalExpression[?In, ?Yield, ?Await]\n>\nShiftExpression[?Yield, ?Await]\n\n\nRelationalExpression[?In, ?Yield, ?Await]\n<=\nShiftExpression[?Yield, ?Await]\n\n\nRelationalExpression[?In, ?Yield, ?Await]\n>=\nShiftExpression[?Yield, ?Await]\n\n\nRelationalExpression[?In, ?Yield, ?Await]\ninstanceof\nShiftExpression[?Yield, ?Await]\n\n[+In]\nRelationalExpression[+In, ?Yield, ?Await]\nin\nShiftExpression[?Yield, ?Await]\n\n[+In]\nPrivateIdentifier\nin\nShiftExpression[?Yield, ?Await]\n\n\n\nNote 2\nThe [In] grammar parameter is needed to avoid confusing the in operator in a relational expression with the in operator in a for statement.\n\n\n13.10.1 Runtime Semantics: Evaluation\n\nRelationalExpression : \nRelationalExpression\n<\nShiftExpression\n\n\n\n1. Let lref be the result of evaluating RelationalExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating ShiftExpression.4. Let rval be ?\u00a0GetValue(rref).5. Let r be ?\u00a0IsLessThan(lval, rval, true).6. If r is undefined, return false. Otherwise, return r.\n\nRelationalExpression : \nRelationalExpression\n>\nShiftExpression\n\n\n\n1. Let lref be the result of evaluating RelationalExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating ShiftExpression.4. Let rval be ?\u00a0GetValue(rref).5. Let r be ?\u00a0IsLessThan(rval, lval, false).6. If r is undefined, return false. Otherwise, return r.\n\nRelationalExpression : \nRelationalExpression\n<=\nShiftExpression\n\n\n\n1. Let lref be the result of evaluating RelationalExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating ShiftExpression.4. Let rval be ?\u00a0GetValue(rref).5. Let r be ?\u00a0IsLessThan(rval, lval, false).6. If r is true or undefined, return false. Otherwise, return true.\n\nRelationalExpression : \nRelationalExpression\n>=\nShiftExpression\n\n\n\n1. Let lref be the result of evaluating RelationalExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating ShiftExpression.4. Let rval be ?\u00a0GetValue(rref).5. Let r be ?\u00a0IsLessThan(lval, rval, true).6. If r is true or undefined, return false. Otherwise, return true.\n\nRelationalExpression : \nRelationalExpression\ninstanceof\nShiftExpression\n\n\n\n1. Let lref be the result of evaluating RelationalExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating ShiftExpression.4. Let rval be ?\u00a0GetValue(rref).5. Return ?\u00a0InstanceofOperator(lval, rval).\n\nRelationalExpression : \nRelationalExpression\nin\nShiftExpression\n\n\n\n1. Let lref be the result of evaluating RelationalExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating ShiftExpression.4. Let rval be ?\u00a0GetValue(rref).5. If Type(rval) is not Object, throw a TypeError exception.6. Return ?\u00a0HasProperty(rval, ?\u00a0ToPropertyKey(lval)).\n\nRelationalExpression : \nPrivateIdentifier\nin\nShiftExpression\n\n\n\n1. Let privateIdentifier be the StringValue of PrivateIdentifier.2. Let rref be the result of evaluating ShiftExpression.3. Let rval be ?\u00a0GetValue(rref).4. If Type(rval) is not Object, throw a TypeError exception.5. Let privateEnv be the running execution context's PrivateEnvironment.6. Let privateName be ResolvePrivateIdentifier(privateEnv, privateIdentifier).7. If PrivateElementFind(rval, privateName) is not empty, return true.8. Return false.\n\n\n13.10.2 InstanceofOperator ( V, target )\nThe abstract operation InstanceofOperator takes arguments V (an ECMAScript language value) and target (an ECMAScript language value) and returns either a normal completion containing a Boolean or an abrupt completion. It implements the generic algorithm for determining if V is an instance of target either by consulting target's @@hasInstance method or, if absent, determining whether the value of target's \"prototype\" property is present in V's prototype chain. It performs the following steps when called:\n1. If Type(target) is not Object, throw a TypeError exception.2. Let instOfHandler be ?\u00a0GetMethod(target, @@hasInstance).3. If instOfHandler is not undefined, thena. Return ToBoolean(? Call(instOfHandler, target, \u00ab V \u00bb)).4. If IsCallable(target) is false, throw a TypeError exception.5. Return ?\u00a0OrdinaryHasInstance(target, V).\nNote\nSteps 4 and 5 provide compatibility with previous editions of ECMAScript that did not use a @@hasInstance method to define the instanceof operator semantics. If an object does not define or inherit @@hasInstance it uses the default instanceof semantics.\n\n\n\n\n13.11 Equality Operators\nNote\nThe result of evaluating an equality operator is always of type\n Boolean, reflecting whether the relationship named by the operator \nholds between its two operands.\n\nSyntax\n\nEqualityExpression[In, Yield, Await] : \nRelationalExpression[?In, ?Yield, ?Await]\n\n\nEqualityExpression[?In, ?Yield, ?Await]\n==\nRelationalExpression[?In, ?Yield, ?Await]\n\n\nEqualityExpression[?In, ?Yield, ?Await]\n!=\nRelationalExpression[?In, ?Yield, ?Await]\n\n\nEqualityExpression[?In, ?Yield, ?Await]\n===\nRelationalExpression[?In, ?Yield, ?Await]\n\n\nEqualityExpression[?In, ?Yield, ?Await]\n!==\nRelationalExpression[?In, ?Yield, ?Await]\n\n\n\n\n13.11.1 Runtime Semantics: Evaluation\n\nEqualityExpression : \nEqualityExpression\n==\nRelationalExpression\n\n\n\n1. Let lref be the result of evaluating EqualityExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating RelationalExpression.4. Let rval be ?\u00a0GetValue(rref).5. Return ?\u00a0IsLooselyEqual(rval, lval).\n\nEqualityExpression : \nEqualityExpression\n!=\nRelationalExpression\n\n\n\n1. Let lref be the result of evaluating EqualityExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating RelationalExpression.4. Let rval be ?\u00a0GetValue(rref).5. Let r be ?\u00a0IsLooselyEqual(rval, lval).6. If r is true, return false. Otherwise, return true.\n\nEqualityExpression : \nEqualityExpression\n===\nRelationalExpression\n\n\n\n1. Let lref be the result of evaluating EqualityExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating RelationalExpression.4. Let rval be ?\u00a0GetValue(rref).5. Return IsStrictlyEqual(rval, lval).\n\nEqualityExpression : \nEqualityExpression\n!==\nRelationalExpression\n\n\n\n1. Let lref be the result of evaluating EqualityExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating RelationalExpression.4. Let rval be ?\u00a0GetValue(rref).5. Let r be IsStrictlyEqual(rval, lval).6. If r is true, return false. Otherwise, return true.\nNote 1\nGiven the above definition of equality:\n\n\n            String comparison can be forced by: `${a}` == `${b}`.\n          \n\n            Numeric comparison can be forced by: +a == +b.\n          \n\n            Boolean comparison can be forced by: !a == !b.\n          \n\n\nNote 2\nThe equality operators maintain the following invariants:\n\n\nA != B is equivalent to !(A == B).\n          \n\nA == B is equivalent to B == A, except in the order of evaluation of A and B.\n          \n\n\nNote 3\nThe equality operator is not always transitive. For example, \nthere might be two distinct String objects, each representing the same \nString value; each String object would be considered equal to the String\n value by the == operator, but the two String objects would not be equal to each other. For example:\n\n\nnew String(\"a\") == \"a\" and \"a\" == new String(\"a\") are both true.\n          \n\nnew String(\"a\") == new String(\"a\") is false.\n          \n\n\nNote 4\nComparison of Strings uses a simple equality test on \nsequences of code unit values. There is no attempt to use the more \ncomplex, semantically oriented definitions of character or string \nequality and collating order defined in the Unicode specification. \nTherefore Strings values that are canonically equal according to the \nUnicode Standard could test as unequal. In effect this algorithm assumes\n that both Strings are already in normalized form.\n\n\n\n\n13.12 Binary Bitwise Operators\nSyntax\n\nBitwiseANDExpression[In, Yield, Await] : \nEqualityExpression[?In, ?Yield, ?Await]\n\n\nBitwiseANDExpression[?In, ?Yield, ?Await]\n&\nEqualityExpression[?In, ?Yield, ?Await]\n\n\n\nBitwiseXORExpression[In, Yield, Await] : \nBitwiseANDExpression[?In, ?Yield, ?Await]\n\n\nBitwiseXORExpression[?In, ?Yield, ?Await]\n^\nBitwiseANDExpression[?In, ?Yield, ?Await]\n\n\n\nBitwiseORExpression[In, Yield, Await] : \nBitwiseXORExpression[?In, ?Yield, ?Await]\n\n\nBitwiseORExpression[?In, ?Yield, ?Await]\n|\nBitwiseXORExpression[?In, ?Yield, ?Await]\n\n\n\n\n13.12.1 Runtime Semantics: Evaluation\n\nBitwiseANDExpression : \nBitwiseANDExpression\n&\nEqualityExpression\n\n\n\n1. Return ?\u00a0EvaluateStringOrNumericBinaryExpression(BitwiseANDExpression, &, EqualityExpression).\n\nBitwiseXORExpression : \nBitwiseXORExpression\n^\nBitwiseANDExpression\n\n\n\n1. Return ?\u00a0EvaluateStringOrNumericBinaryExpression(BitwiseXORExpression, ^, BitwiseANDExpression).\n\nBitwiseORExpression : \nBitwiseORExpression\n|\nBitwiseXORExpression\n\n\n\n1. Return ?\u00a0EvaluateStringOrNumericBinaryExpression(BitwiseORExpression, |, BitwiseXORExpression).\n\n\n\n13.13 Binary Logical Operators\nSyntax\n\nLogicalANDExpression[In, Yield, Await] : \nBitwiseORExpression[?In, ?Yield, ?Await]\n\n\nLogicalANDExpression[?In, ?Yield, ?Await]\n&&\nBitwiseORExpression[?In, ?Yield, ?Await]\n\n\n\nLogicalORExpression[In, Yield, Await] : \nLogicalANDExpression[?In, ?Yield, ?Await]\n\n\nLogicalORExpression[?In, ?Yield, ?Await]\n||\nLogicalANDExpression[?In, ?Yield, ?Await]\n\n\n\nCoalesceExpression[In, Yield, Await] : \nCoalesceExpressionHead[?In, ?Yield, ?Await]\n??\nBitwiseORExpression[?In, ?Yield, ?Await]\n\n\n\nCoalesceExpressionHead[In, Yield, Await] : \nCoalesceExpression[?In, ?Yield, ?Await]\n\n\nBitwiseORExpression[?In, ?Yield, ?Await]\n\n\n\nShortCircuitExpression[In, Yield, Await] : \nLogicalORExpression[?In, ?Yield, ?Await]\n\n\nCoalesceExpression[?In, ?Yield, ?Await]\n\n\n\nNote\nThe value produced by a && or || operator is not necessarily of type Boolean. The value produced will always be the value of one of the two operand expressions.\n\n\n13.13.1 Runtime Semantics: Evaluation\n\nLogicalANDExpression : \nLogicalANDExpression\n&&\nBitwiseORExpression\n\n\n\n1. Let lref be the result of evaluating LogicalANDExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let lbool be ToBoolean(lval).4. If lbool is false, return lval.5. Let rref be the result of evaluating BitwiseORExpression.6. Return ?\u00a0GetValue(rref).\n\nLogicalORExpression : \nLogicalORExpression\n||\nLogicalANDExpression\n\n\n\n1. Let lref be the result of evaluating LogicalORExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let lbool be ToBoolean(lval).4. If lbool is true, return lval.5. Let rref be the result of evaluating LogicalANDExpression.6. Return ?\u00a0GetValue(rref).\n\nCoalesceExpression : \nCoalesceExpressionHead\n??\nBitwiseORExpression\n\n\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.2. Let lval be ?\u00a0GetValue(lref).3. If lval is undefined or null, thena. Let rref be the result of evaluating BitwiseORExpression.b. Return ?\u00a0GetValue(rref).4. Otherwise, return lval.\n\n\n\n13.14 Conditional Operator ( ? : )\nSyntax\n\nConditionalExpression[In, Yield, Await] : \nShortCircuitExpression[?In, ?Yield, ?Await]\n\n\nShortCircuitExpression[?In, ?Yield, ?Await]\n?\nAssignmentExpression[+In, ?Yield, ?Await]\n:\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\n\nNote\nThe grammar for a ConditionalExpression in ECMAScript is slightly different from that in C and Java, which each allow the second subexpression to be an Expression but restrict the third expression to be a ConditionalExpression.\n The motivation for this difference in ECMAScript is to allow an \nassignment expression to be governed by either arm of a conditional and \nto eliminate the confusing and fairly useless case of a comma expression\n as the centre expression.\n\n\n13.14.1 Runtime Semantics: Evaluation\n\nConditionalExpression : \nShortCircuitExpression\n?\nAssignmentExpression\n:\nAssignmentExpression\n\n\n\n1. Let lref be the result of evaluating ShortCircuitExpression.2. Let lval be ToBoolean(? GetValue(lref)).3. If lval is true, thena. Let trueRef be the result of evaluating the first AssignmentExpression.b. Return ?\u00a0GetValue(trueRef).4. Else,a. Let falseRef be the result of evaluating the second AssignmentExpression.b. Return ?\u00a0GetValue(falseRef).\n\n\n\n13.15 Assignment Operators\nSyntax\n\nAssignmentExpression[In, Yield, Await] : \nConditionalExpression[?In, ?Yield, ?Await]\n\n[+Yield]\nYieldExpression[?In, ?Await]\n\n\nArrowFunction[?In, ?Yield, ?Await]\n\n\nAsyncArrowFunction[?In, ?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\n=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\nAssignmentOperator\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\n&&=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\n||=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\n??=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\n\nAssignmentOperator : one of *= /= %= += -= <<= >>= >>>= &= ^= |= **=\n\n\n\n13.15.1 Static Semantics: Early Errors\n\nAssignmentExpression : \nLeftHandSideExpression\n=\nAssignmentExpression\n\n\n\nIf LeftHandSideExpression is an ObjectLiteral or an ArrayLiteral, the following Early Error rules are applied:\n\n\nLeftHandSideExpression must cover an AssignmentPattern.\n        \n\nIf LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, the following Early Error rule is applied:\n\n\n          It is a Syntax Error if AssignmentTargetType of LeftHandSideExpression is not simple.\n        \n\n\nAssignmentExpression : \nLeftHandSideExpression\nAssignmentOperator\nAssignmentExpression\n\n\nLeftHandSideExpression\n&&=\nAssignmentExpression\n\n\nLeftHandSideExpression\n||=\nAssignmentExpression\n\n\nLeftHandSideExpression\n??=\nAssignmentExpression\n\n\n\n\n\n          It is a Syntax Error if AssignmentTargetType of LeftHandSideExpression is not simple.\n        \n\n\n\n13.15.2 Runtime Semantics: Evaluation\n\nAssignmentExpression : \nLeftHandSideExpression\n=\nAssignmentExpression\n\n\n\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, thena. Let lref be the result of evaluating LeftHandSideExpression.b. ReturnIfAbrupt(lref).c. If IsAnonymousFunctionDefinition(AssignmentExpression) and IsIdentifierRef of LeftHandSideExpression are both true, theni. Let rval be ?\u00a0NamedEvaluation of AssignmentExpression with argument lref.[[ReferencedName]].d. Else,i. Let rref be the result of evaluating AssignmentExpression.ii. Let rval be ?\u00a0GetValue(rref).e. Perform ?\u00a0PutValue(lref, rval).f. Return rval.2. Let assignmentPattern be the AssignmentPattern that is covered by LeftHandSideExpression.3. Let rref be the result of evaluating AssignmentExpression.4. Let rval be ?\u00a0GetValue(rref).5. Perform ?\u00a0DestructuringAssignmentEvaluation of assignmentPattern with argument rval.6. Return rval.\n\nAssignmentExpression : \nLeftHandSideExpression\nAssignmentOperator\nAssignmentExpression\n\n\n\n1. Let lref be the result of evaluating LeftHandSideExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating AssignmentExpression.4. Let rval be ?\u00a0GetValue(rref).5. Let assignmentOpText be the source text matched by AssignmentOperator.6. Let opText be the sequence of Unicode code points associated with assignmentOpText in the following table:\n          \n\n\n assignmentOpText  opText \n **=  ** \n *=  * \n /=  / \n %=  % \n +=  + \n -=  - \n <<=  << \n >>=  >> \n >>>=  >>> \n &=  & \n ^=  ^ \n |=  | \n\n7. Let r be ?\u00a0ApplyStringOrNumericBinaryOperator(lval, opText, rval).8. Perform ?\u00a0PutValue(lref, r).9. Return r.\n\nAssignmentExpression : \nLeftHandSideExpression\n&&=\nAssignmentExpression\n\n\n\n1. Let lref be the result of evaluating LeftHandSideExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let lbool be ToBoolean(lval).4. If lbool is false, return lval.5. If IsAnonymousFunctionDefinition(AssignmentExpression) is true and IsIdentifierRef of LeftHandSideExpression is true, thena. Let rval be ?\u00a0NamedEvaluation of AssignmentExpression with argument lref.[[ReferencedName]].6. Else,a. Let rref be the result of evaluating AssignmentExpression.b. Let rval be ?\u00a0GetValue(rref).7. Perform ?\u00a0PutValue(lref, rval).8. Return rval.\n\nAssignmentExpression : \nLeftHandSideExpression\n||=\nAssignmentExpression\n\n\n\n1. Let lref be the result of evaluating LeftHandSideExpression.2. Let lval be ?\u00a0GetValue(lref).3. Let lbool be ToBoolean(lval).4. If lbool is true, return lval.5. If IsAnonymousFunctionDefinition(AssignmentExpression) is true and IsIdentifierRef of LeftHandSideExpression is true, thena. Let rval be ?\u00a0NamedEvaluation of AssignmentExpression with argument lref.[[ReferencedName]].6. Else,a. Let rref be the result of evaluating AssignmentExpression.b. Let rval be ?\u00a0GetValue(rref).7. Perform ?\u00a0PutValue(lref, rval).8. Return rval.\n\nAssignmentExpression : \nLeftHandSideExpression\n??=\nAssignmentExpression\n\n\n\n1. Let lref be the result of evaluating LeftHandSideExpression.2. Let lval be ?\u00a0GetValue(lref).3. If lval is neither undefined nor null, return lval.4. If IsAnonymousFunctionDefinition(AssignmentExpression) is true and IsIdentifierRef of LeftHandSideExpression is true, thena. Let rval be ?\u00a0NamedEvaluation of AssignmentExpression with argument lref.[[ReferencedName]].5. Else,a. Let rref be the result of evaluating AssignmentExpression.b. Let rval be ?\u00a0GetValue(rref).6. Perform ?\u00a0PutValue(lref, rval).7. Return rval.\nNote\nWhen this expression occurs within strict mode code, it is a runtime error if lref in step 1.e, 2, 2, 2, 2 is an unresolvable reference. If it is, a ReferenceError exception is thrown. Additionally, it is a runtime error if the lref in step 8, 7, 7, 6 is a reference to a data property with the attribute value { [[Writable]]: false }, to an accessor property with the attribute value { [[Set]]: undefined }, or to a non-existent property of an object for which the IsExtensible predicate returns the value false. In these cases a TypeError exception is thrown.\n\n\n\n13.15.3 ApplyStringOrNumericBinaryOperator ( lval, opText, rval )\nThe abstract operation ApplyStringOrNumericBinaryOperator takes arguments lval (an ECMAScript language value), opText (**, *, /, %, +, -, <<, >>, >>>, &, ^, or |), and rval (an ECMAScript language value) and returns either a normal completion containing either a String, a BigInt, or a Number, or an abrupt completion. It performs the following steps when called:\n1. If opText is +, thena. Let lprim be ?\u00a0ToPrimitive(lval).b. Let rprim be ?\u00a0ToPrimitive(rval).c. If Type(lprim) is String or Type(rprim) is String, theni. Let lstr be ?\u00a0ToString(lprim).ii. Let rstr be ?\u00a0ToString(rprim).iii. Return the string-concatenation of lstr and rstr.d. Set lval to lprim.e. Set rval to rprim.2. NOTE: At this point, it must be a numeric operation.3. Let lnum be ?\u00a0ToNumeric(lval).4. Let rnum be ?\u00a0ToNumeric(rval).5. If Type(lnum) is different from Type(rnum), throw a TypeError exception.6. If Type(lnum) is BigInt, thena. If opText is **, return ?\u00a0BigInt::exponentiate(lnum, rnum).b. If opText is /, return ?\u00a0BigInt::divide(lnum, rnum).c. If opText is %, return ?\u00a0BigInt::remainder(lnum, rnum).d. If opText is >>>, return ?\u00a0BigInt::unsignedRightShift(lnum, rnum).7. Let operation be the abstract operation associated with opText and Type(lnum) in the following table:\n          \n\n\n opText  Type(lnum)  operation \n **  Number        Number::exponentiate \n *  Number        Number::multiply \n *  BigInt        BigInt::multiply \n /  Number        Number::divide \n %  Number        Number::remainder \n +  Number        Number::add \n +  BigInt        BigInt::add \n -  Number        Number::subtract \n -  BigInt        BigInt::subtract \n <<  Number        Number::leftShift \n <<  BigInt        BigInt::leftShift \n >>  Number        Number::signedRightShift \n >>  BigInt        BigInt::signedRightShift \n >>>  Number        Number::unsignedRightShift \n &  Number        Number::bitwiseAND \n &  BigInt        BigInt::bitwiseAND \n ^  Number        Number::bitwiseXOR \n ^  BigInt        BigInt::bitwiseXOR \n |  Number        Number::bitwiseOR \n |  BigInt        BigInt::bitwiseOR \n\n8. Return operation(lnum, rnum).\nNote 1\nNo hint is provided in the calls to ToPrimitive in steps 1.a and 1.b. All standard objects except Dates handle the absence of a hint as if number were given; Dates handle the absence of a hint as if string were given. Exotic objects may handle the absence of a hint in some other manner.\n\nNote 2\nStep 1.c differs from step 3 of the IsLessThan algorithm, by using the logical-or operation instead of the logical-and operation.\n\n\n\n13.15.4 EvaluateStringOrNumericBinaryExpression ( leftOperand, opText, rightOperand )\nThe abstract operation EvaluateStringOrNumericBinaryExpression takes arguments leftOperand (a Parse Node), opText (a sequence of Unicode code points), and rightOperand (a Parse Node) and returns either a normal completion containing either a String, a BigInt, or a Number, or an abrupt completion. It performs the following steps when called:\n1. Let lref be the result of evaluating leftOperand.2. Let lval be ?\u00a0GetValue(lref).3. Let rref be the result of evaluating rightOperand.4. Let rval be ?\u00a0GetValue(rref).5. Return ?\u00a0ApplyStringOrNumericBinaryOperator(lval, opText, rval).\n\n\n13.15.5 Destructuring Assignment\nSupplemental Syntax\n\n        In certain circumstances when processing an instance of the production\n\nAssignmentExpression : \nLeftHandSideExpression\n=\nAssignmentExpression\n\n\n\n        the interpretation of LeftHandSideExpression is refined using the following grammar:\n      \n\nAssignmentPattern[Yield, Await] : \nObjectAssignmentPattern[?Yield, ?Await]\n\n\nArrayAssignmentPattern[?Yield, ?Await]\n\n\n\nObjectAssignmentPattern[Yield, Await] : \n{\n}\n\n\n{\nAssignmentRestProperty[?Yield, ?Await]\n}\n\n\n{\nAssignmentPropertyList[?Yield, ?Await]\n}\n\n\n{\nAssignmentPropertyList[?Yield, ?Await]\n,\nAssignmentRestProperty[?Yield, ?Await]opt\n}\n\n\n\nArrayAssignmentPattern[Yield, Await] : \n[\nElisionopt\nAssignmentRestElement[?Yield, ?Await]opt\n]\n\n\n[\nAssignmentElementList[?Yield, ?Await]\n]\n\n\n[\nAssignmentElementList[?Yield, ?Await]\n,\nElisionopt\nAssignmentRestElement[?Yield, ?Await]opt\n]\n\n\n\nAssignmentRestProperty[Yield, Await] : \n...\nDestructuringAssignmentTarget[?Yield, ?Await]\n\n\n\nAssignmentPropertyList[Yield, Await] : \nAssignmentProperty[?Yield, ?Await]\n\n\nAssignmentPropertyList[?Yield, ?Await]\n,\nAssignmentProperty[?Yield, ?Await]\n\n\n\nAssignmentElementList[Yield, Await] : \nAssignmentElisionElement[?Yield, ?Await]\n\n\nAssignmentElementList[?Yield, ?Await]\n,\nAssignmentElisionElement[?Yield, ?Await]\n\n\n\nAssignmentElisionElement[Yield, Await] : \nElisionopt\nAssignmentElement[?Yield, ?Await]\n\n\n\nAssignmentProperty[Yield, Await] : \nIdentifierReference[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]opt\n\n\nPropertyName[?Yield, ?Await]\n:\nAssignmentElement[?Yield, ?Await]\n\n\n\nAssignmentElement[Yield, Await] : \nDestructuringAssignmentTarget[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]opt\n\n\n\nAssignmentRestElement[Yield, Await] : \n...\nDestructuringAssignmentTarget[?Yield, ?Await]\n\n\n\nDestructuringAssignmentTarget[Yield, Await] : \nLeftHandSideExpression[?Yield, ?Await]\n\n\n\n\n13.15.5.1 Static Semantics: Early Errors\n\nAssignmentProperty : \nIdentifierReference\nInitializeropt\n\n\n\n\n\n            It is a Syntax Error if AssignmentTargetType of IdentifierReference is not simple.\n          \n\n\nAssignmentRestProperty : \n...\nDestructuringAssignmentTarget\n\n\n\n\n\n            It is a Syntax Error if DestructuringAssignmentTarget is an ArrayLiteral or an ObjectLiteral.\n          \n\n\nDestructuringAssignmentTarget : LeftHandSideExpression\n\n\nIf LeftHandSideExpression is an ObjectLiteral or an ArrayLiteral, the following Early Error rules are applied:\n\n\nLeftHandSideExpression must cover an AssignmentPattern.\n          \n\nIf LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, the following Early Error rule is applied:\n\n\n            It is a Syntax Error if AssignmentTargetType of LeftHandSideExpression is not simple.\n          \n\n\n\n13.15.5.2 Runtime Semantics: DestructuringAssignmentEvaluation\nThe syntax-directed operation DestructuringAssignmentEvaluation takes argument value and returns either a normal completion containing unused or an abrupt completion. It is defined piecewise over the following productions:\n\nObjectAssignmentPattern : \n{\n}\n\n\n\n1. Perform ?\u00a0RequireObjectCoercible(value).2. Return unused.\n\nObjectAssignmentPattern : \n{\nAssignmentPropertyList\n}\n\n\n{\nAssignmentPropertyList\n,\n}\n\n\n\n1. Perform ?\u00a0RequireObjectCoercible(value).2. Perform ?\u00a0PropertyDestructuringAssignmentEvaluation of AssignmentPropertyList with argument value.3. Return unused.\n\nObjectAssignmentPattern : \n{\nAssignmentRestProperty\n}\n\n\n\n1. Perform ?\u00a0RequireObjectCoercible(value).2. Let excludedNames be a new empty List.3. Return ?\u00a0RestDestructuringAssignmentEvaluation of AssignmentRestProperty with arguments value and excludedNames.\n\nObjectAssignmentPattern : \n{\nAssignmentPropertyList\n,\nAssignmentRestProperty\n}\n\n\n\n1. Perform ?\u00a0RequireObjectCoercible(value).2. Let excludedNames be ?\u00a0PropertyDestructuringAssignmentEvaluation of AssignmentPropertyList with argument value.3. Return ?\u00a0RestDestructuringAssignmentEvaluation of AssignmentRestProperty with arguments value and excludedNames.\n\nArrayAssignmentPattern : \n[\n]\n\n\n\n1. Let iteratorRecord be ?\u00a0GetIterator(value).2. Return ?\u00a0IteratorClose(iteratorRecord, NormalCompletion(unused)).\n\nArrayAssignmentPattern : \n[\nElision\n]\n\n\n\n1. Let iteratorRecord be ?\u00a0GetIterator(value).2. Let result be Completion(IteratorDestructuringAssignmentEvaluation of Elision with argument iteratorRecord).3. If iteratorRecord.[[Done]] is false, return ?\u00a0IteratorClose(iteratorRecord, result).4. Return result.\n\nArrayAssignmentPattern : \n[\nElisionopt\nAssignmentRestElement\n]\n\n\n\n1. Let iteratorRecord be ?\u00a0GetIterator(value).2. If Elision is present, thena. Let status be Completion(IteratorDestructuringAssignmentEvaluation of Elision with argument iteratorRecord).b. If status is an abrupt completion, theni. Assert: iteratorRecord.[[Done]] is true.ii. Return ?\u00a0status.3. Let result be Completion(IteratorDestructuringAssignmentEvaluation of AssignmentRestElement with argument iteratorRecord).4. If iteratorRecord.[[Done]] is false, return ?\u00a0IteratorClose(iteratorRecord, result).5. Return result.\n\nArrayAssignmentPattern : \n[\nAssignmentElementList\n]\n\n\n\n1. Let iteratorRecord be ?\u00a0GetIterator(value).2. Let result be Completion(IteratorDestructuringAssignmentEvaluation of AssignmentElementList with argument iteratorRecord).3. If iteratorRecord.[[Done]] is false, return ?\u00a0IteratorClose(iteratorRecord, result).4. Return result.\n\nArrayAssignmentPattern : \n[\nAssignmentElementList\n,\nElisionopt\nAssignmentRestElementopt\n]\n\n\n\n1. Let iteratorRecord be ?\u00a0GetIterator(value).2. Let status be Completion(IteratorDestructuringAssignmentEvaluation of AssignmentElementList with argument iteratorRecord).3. If status is an abrupt completion, thena. If iteratorRecord.[[Done]] is false, return ?\u00a0IteratorClose(iteratorRecord, status).b. Return ?\u00a0status.4. If Elision is present, thena. Set status to Completion(IteratorDestructuringAssignmentEvaluation of Elision with argument iteratorRecord).b. If status is an abrupt completion, theni. Assert: iteratorRecord.[[Done]] is true.ii. Return ?\u00a0status.5. If AssignmentRestElement is present, thena. Set status to Completion(IteratorDestructuringAssignmentEvaluation of AssignmentRestElement with argument iteratorRecord).6. If iteratorRecord.[[Done]] is false, return ?\u00a0IteratorClose(iteratorRecord, status).7. Return ?\u00a0status.\n\n\n13.15.5.3 Runtime Semantics: PropertyDestructuringAssignmentEvaluation\nThe syntax-directed operation PropertyDestructuringAssignmentEvaluation takes argument value and returns either a normal completion containing a List of property keys or an abrupt completion. It collects a list of all destructured property keys. It is defined piecewise over the following productions:\n\nAssignmentPropertyList : \nAssignmentPropertyList\n,\nAssignmentProperty\n\n\n\n1. Let propertyNames be ?\u00a0PropertyDestructuringAssignmentEvaluation of AssignmentPropertyList with argument value.2. Let nextNames be ?\u00a0PropertyDestructuringAssignmentEvaluation of AssignmentProperty with argument value.3. Return the list-concatenation of propertyNames and nextNames.\n\nAssignmentProperty : \nIdentifierReference\nInitializeropt\n\n\n\n1. Let P be StringValue of IdentifierReference.2. Let lref be ?\u00a0ResolveBinding(P).3. Let v be ?\u00a0GetV(value, P).4. If Initializeropt is present and v is undefined, thena. If IsAnonymousFunctionDefinition(Initializer) is true, theni. Set v to ?\u00a0NamedEvaluation of Initializer with argument P.b. Else,i. Let defaultValue be the result of evaluating Initializer.ii. Set v to ?\u00a0GetValue(defaultValue).5. Perform ?\u00a0PutValue(lref, v).6. Return \u00ab P \u00bb.\n\nAssignmentProperty : \nPropertyName\n:\nAssignmentElement\n\n\n\n1. Let name be the result of evaluating PropertyName.2. ReturnIfAbrupt(name).3. Perform ?\u00a0KeyedDestructuringAssignmentEvaluation of AssignmentElement with arguments value and name.4. Return \u00ab name \u00bb.\n\n\n13.15.5.4 Runtime Semantics: RestDestructuringAssignmentEvaluation\nThe syntax-directed operation RestDestructuringAssignmentEvaluation takes arguments value and excludedNames and returns either a normal completion containing unused or an abrupt completion. It is defined piecewise over the following productions:\n\nAssignmentRestProperty : \n...\nDestructuringAssignmentTarget\n\n\n\n1. Let lref be the result of evaluating DestructuringAssignmentTarget.2. ReturnIfAbrupt(lref).3. Let restObj be OrdinaryObjectCreate(%Object.prototype%).4. Perform ?\u00a0CopyDataProperties(restObj, value, excludedNames).5. Return ?\u00a0PutValue(lref, restObj).\n\n\n13.15.5.5 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\nThe syntax-directed operation IteratorDestructuringAssignmentEvaluation takes argument iteratorRecord and returns either a normal completion containing unused or an abrupt completion. It is defined piecewise over the following productions:\n\nAssignmentElementList : AssignmentElisionElement\n\n\n1. Return ?\u00a0IteratorDestructuringAssignmentEvaluation of AssignmentElisionElement with argument iteratorRecord.\n\nAssignmentElementList : \nAssignmentElementList\n,\nAssignmentElisionElement\n\n\n\n1. Perform ?\u00a0IteratorDestructuringAssignmentEvaluation of AssignmentElementList with argument iteratorRecord.2. Return ?\u00a0IteratorDestructuringAssignmentEvaluation of AssignmentElisionElement with argument iteratorRecord.\n\nAssignmentElisionElement : AssignmentElement\n\n\n1. Return ?\u00a0IteratorDestructuringAssignmentEvaluation of AssignmentElement with argument iteratorRecord.\n\nAssignmentElisionElement : \nElision\nAssignmentElement\n\n\n\n1. Perform ?\u00a0IteratorDestructuringAssignmentEvaluation of Elision with argument iteratorRecord.2. Return ?\u00a0IteratorDestructuringAssignmentEvaluation of AssignmentElement with argument iteratorRecord.\n\nElision : ,\n\n\n1. If iteratorRecord.[[Done]] is false, thena. Let next be Completion(IteratorStep(iteratorRecord)).b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(next).d. If next is false, set iteratorRecord.[[Done]] to true.2. Return unused.\n\nElision : \nElision\n,\n\n\n\n1. Perform ?\u00a0IteratorDestructuringAssignmentEvaluation of Elision with argument iteratorRecord.2. If iteratorRecord.[[Done]] is false, thena. Let next be Completion(IteratorStep(iteratorRecord)).b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(next).d. If next is false, set iteratorRecord.[[Done]] to true.3. Return unused.\n\nAssignmentElement : \nDestructuringAssignmentTarget\nInitializeropt\n\n\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, thena. Let lref be the result of evaluating DestructuringAssignmentTarget.b. ReturnIfAbrupt(lref).2. If iteratorRecord.[[Done]] is false, thena. Let next be Completion(IteratorStep(iteratorRecord)).b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(next).d. If next is false, set iteratorRecord.[[Done]] to true.e. Else,i. Let value be Completion(IteratorValue(next)).ii. If value is an abrupt completion, set iteratorRecord.[[Done]] to true.iii. ReturnIfAbrupt(value).3. If iteratorRecord.[[Done]] is true, let value be undefined.4. If Initializer is present and value is undefined, thena. If IsAnonymousFunctionDefinition(Initializer) is true and IsIdentifierRef of DestructuringAssignmentTarget is true, theni. Let v be ?\u00a0NamedEvaluation of Initializer with argument lref.[[ReferencedName]].b. Else,i. Let defaultValue be the result of evaluating Initializer.ii. Let v be ?\u00a0GetValue(defaultValue).5. Else, let v be value.6. If DestructuringAssignmentTarget is an ObjectLiteral or an ArrayLiteral, thena. Let nestedAssignmentPattern be the AssignmentPattern that is covered by DestructuringAssignmentTarget.b. Return ?\u00a0DestructuringAssignmentEvaluation of nestedAssignmentPattern with argument v.7. Return ?\u00a0PutValue(lref, v).\nNote\nLeft to right evaluation order is maintained by evaluating a DestructuringAssignmentTarget that is not a destructuring pattern prior to accessing the iterator or evaluating the Initializer.\n\n\nAssignmentRestElement : \n...\nDestructuringAssignmentTarget\n\n\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, thena. Let lref be the result of evaluating DestructuringAssignmentTarget.b. ReturnIfAbrupt(lref).2. Let A be !\u00a0ArrayCreate(0).3. Let n be 0.4. Repeat, while iteratorRecord.[[Done]] is false,a. Let next be Completion(IteratorStep(iteratorRecord)).b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(next).d. If next is false, set iteratorRecord.[[Done]] to true.e. Else,i. Let nextValue be Completion(IteratorValue(next)).ii. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.iii. ReturnIfAbrupt(nextValue).iv. Perform !\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(n)), nextValue).v. Set n to n + 1.5. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, thena. Return ?\u00a0PutValue(lref, A).6. Let nestedAssignmentPattern be the AssignmentPattern that is covered by DestructuringAssignmentTarget.7. Return ?\u00a0DestructuringAssignmentEvaluation of nestedAssignmentPattern with argument A.\n\n\n13.15.5.6 Runtime Semantics: KeyedDestructuringAssignmentEvaluation\nThe syntax-directed operation KeyedDestructuringAssignmentEvaluation takes arguments value and propertyName and returns either a normal completion containing unused or an abrupt completion. It is defined piecewise over the following productions:\n\nAssignmentElement : \nDestructuringAssignmentTarget\nInitializeropt\n\n\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, thena. Let lref be the result of evaluating DestructuringAssignmentTarget.b. ReturnIfAbrupt(lref).2. Let v be ?\u00a0GetV(value, propertyName).3. If Initializer is present and v is undefined, thena. If IsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of DestructuringAssignmentTarget are both true, theni. Let rhsValue be ?\u00a0NamedEvaluation of Initializer with argument lref.[[ReferencedName]].b. Else,i. Let defaultValue be the result of evaluating Initializer.ii. Let rhsValue be ?\u00a0GetValue(defaultValue).4. Else, let rhsValue be v.5. If DestructuringAssignmentTarget is an ObjectLiteral or an ArrayLiteral, thena. Let assignmentPattern be the AssignmentPattern that is covered by DestructuringAssignmentTarget.b. Return ?\u00a0DestructuringAssignmentEvaluation of assignmentPattern with argument rhsValue.6. Return ?\u00a0PutValue(lref, rhsValue).\n\n\n\n\n13.16 Comma Operator ( , )\nSyntax\n\nExpression[In, Yield, Await] : \nAssignmentExpression[?In, ?Yield, ?Await]\n\n\nExpression[?In, ?Yield, ?Await]\n,\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\n\n\n13.16.1 Runtime Semantics: Evaluation\n\nExpression : \nExpression\n,\nAssignmentExpression\n\n\n\n1. Let lref be the result of evaluating Expression.2. Perform ?\u00a0GetValue(lref).3. Let rref be the result of evaluating AssignmentExpression.4. Return ?\u00a0GetValue(rref).\nNote\nGetValue must be called even though its value is not used because it may have observable side-effects.\n\n\n\n\n\n14 ECMAScript Language: Statements and Declarations\nSyntax\n\nStatement[Yield, Await, Return] : \nBlockStatement[?Yield, ?Await, ?Return]\n\n\nVariableStatement[?Yield, ?Await]\n\n\nEmptyStatement\n\n\nExpressionStatement[?Yield, ?Await]\n\n\nIfStatement[?Yield, ?Await, ?Return]\n\n\nBreakableStatement[?Yield, ?Await, ?Return]\n\n\nContinueStatement[?Yield, ?Await]\n\n\nBreakStatement[?Yield, ?Await]\n\n[+Return]\nReturnStatement[?Yield, ?Await]\n\n\nWithStatement[?Yield, ?Await, ?Return]\n\n\nLabelledStatement[?Yield, ?Await, ?Return]\n\n\nThrowStatement[?Yield, ?Await]\n\n\nTryStatement[?Yield, ?Await, ?Return]\n\n\nDebuggerStatement\n\n\n\nDeclaration[Yield, Await] : \nHoistableDeclaration[?Yield, ?Await, ~Default]\n\n\nClassDeclaration[?Yield, ?Await, ~Default]\n\n\nLexicalDeclaration[+In, ?Yield, ?Await]\n\n\n\nHoistableDeclaration[Yield, Await, Default] : \nFunctionDeclaration[?Yield, ?Await, ?Default]\n\n\nGeneratorDeclaration[?Yield, ?Await, ?Default]\n\n\nAsyncFunctionDeclaration[?Yield, ?Await, ?Default]\n\n\nAsyncGeneratorDeclaration[?Yield, ?Await, ?Default]\n\n\n\nBreakableStatement[Yield, Await, Return] : \nIterationStatement[?Yield, ?Await, ?Return]\n\n\nSwitchStatement[?Yield, ?Await, ?Return]\n\n\n\n\n14.1 Statement Semantics\n\n14.1.1 Runtime Semantics: Evaluation\n\nHoistableDeclaration : \nGeneratorDeclaration\n\n\nAsyncFunctionDeclaration\n\n\nAsyncGeneratorDeclaration\n\n\n\n1. Return empty.\n\nHoistableDeclaration : FunctionDeclaration\n\n\n1. Return the result of evaluating FunctionDeclaration.\n\nBreakableStatement : \nIterationStatement\n\n\nSwitchStatement\n\n\n\n1. Let newLabelSet be a new empty List.2. Return ?\u00a0LabelledEvaluation of this BreakableStatement with argument newLabelSet.\n\n\n\n14.2 Block\nSyntax\n\nBlockStatement[Yield, Await, Return] : \nBlock[?Yield, ?Await, ?Return]\n\n\n\nBlock[Yield, Await, Return] : \n{\nStatementList[?Yield, ?Await, ?Return]opt\n}\n\n\n\nStatementList[Yield, Await, Return] : \nStatementListItem[?Yield, ?Await, ?Return]\n\n\nStatementList[?Yield, ?Await, ?Return]\nStatementListItem[?Yield, ?Await, ?Return]\n\n\n\nStatementListItem[Yield, Await, Return] : \nStatement[?Yield, ?Await, ?Return]\n\n\nDeclaration[?Yield, ?Await]\n\n\n\n\n14.2.1 Static Semantics: Early Errors\n\nBlock : \n{\nStatementList\n}\n\n\n\n\n\n          It is a Syntax Error if the LexicallyDeclaredNames of StatementList contains any duplicate entries.\n        \n\n          It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList also occurs in the VarDeclaredNames of StatementList.\n        \n\n\n\n14.2.2 Runtime Semantics: Evaluation\n\nBlock : \n{\n}\n\n\n\n1. Return empty.\n\nBlock : \n{\nStatementList\n}\n\n\n\n1. Let oldEnv be the running execution context's LexicalEnvironment.2. Let blockEnv be NewDeclarativeEnvironment(oldEnv).3. Perform BlockDeclarationInstantiation(StatementList, blockEnv).4. Set the running execution context's LexicalEnvironment to blockEnv.5. Let blockValue be the result of evaluating StatementList.6. Set the running execution context's LexicalEnvironment to oldEnv.7. Return blockValue.\nNote 1\nNo matter how control leaves the Block the LexicalEnvironment is always restored to its former state.\n\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let sl be the result of evaluating StatementList.2. ReturnIfAbrupt(sl).3. Let s be the result of evaluating StatementListItem.4. Return ?\u00a0UpdateEmpty(s, sl).\nNote 2\nThe value of a StatementList is the value of the last value-producing item in the StatementList. For example, the following calls to the eval function all return the value 1:\neval(\"1;;;;;\")\neval(\"1;{}\")\neval(\"1;var a;\")\n\n\n\n14.2.3 BlockDeclarationInstantiation ( code, env )\nThe abstract operation BlockDeclarationInstantiation takes arguments code (a Parse Node) and env (a declarative Environment Record) and returns unused. code is the Parse Node corresponding to the body of the block. env is the Environment Record in which bindings are to be created.\nNote\nWhen a Block or CaseBlock is evaluated a new declarative Environment Record\n is created and bindings for each block scoped variable, constant, \nfunction, or class declared in the block are instantiated in the Environment Record.\n\nIt performs the following steps when called:\n\n1. Let declarations be the LexicallyScopedDeclarations of code.2. Let privateEnv be the running execution context's PrivateEnvironment.3. For each element d of declarations, doa. For each element dn of the BoundNames of d, doi. If IsConstantDeclaration of d is true, then1. Perform !\u00a0env.CreateImmutableBinding(dn, true).ii. Else,1. Perform !\u00a0env.CreateMutableBinding(dn, false). NOTE: This step is replaced in section B.3.2.6.b. If d is a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration, theni. Let fn be the sole element of the BoundNames of d.ii. Let fo be InstantiateFunctionObject of d with arguments env and privateEnv.iii. Perform !\u00a0env.InitializeBinding(fn, fo). NOTE: This step is replaced in section B.3.2.6.4. Return unused.\n\n\n\n14.3 Declarations and the Variable Statement\n\n14.3.1 Let and Const Declarations\nNote\nlet and const declarations define variables that are scoped to the running execution context's LexicalEnvironment. The variables are created when their containing Environment Record is instantiated but may not be accessed in any way until the variable's LexicalBinding is evaluated. A variable defined by a LexicalBinding with an Initializer is assigned the value of its Initializer's AssignmentExpression when the LexicalBinding is evaluated, not when the variable is created. If a LexicalBinding in a let declaration does not have an Initializer the variable is assigned the value undefined when the LexicalBinding is evaluated.\n\nSyntax\n\nLexicalDeclaration[In, Yield, Await] : \nLetOrConst\nBindingList[?In, ?Yield, ?Await]\n;\n\n\n\nLetOrConst : \nlet\n\n\nconst\n\n\n\nBindingList[In, Yield, Await] : \nLexicalBinding[?In, ?Yield, ?Await]\n\n\nBindingList[?In, ?Yield, ?Await]\n,\nLexicalBinding[?In, ?Yield, ?Await]\n\n\n\nLexicalBinding[In, Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\nInitializer[?In, ?Yield, ?Await]opt\n\n\nBindingPattern[?Yield, ?Await]\nInitializer[?In, ?Yield, ?Await]\n\n\n\n\n14.3.1.1 Static Semantics: Early Errors\n\nLexicalDeclaration : \nLetOrConst\nBindingList\n;\n\n\n\n\n\n            It is a Syntax Error if the BoundNames of BindingList contains \"let\".\n          \n\n            It is a Syntax Error if the BoundNames of BindingList contains any duplicate entries.\n          \n\n\nLexicalBinding : \nBindingIdentifier\nInitializeropt\n\n\n\n\n\n            It is a Syntax Error if Initializer is not present and IsConstantDeclaration of the LexicalDeclaration containing this LexicalBinding is true.\n          \n\n\n\n14.3.1.2 Runtime Semantics: Evaluation\n\nLexicalDeclaration : \nLetOrConst\nBindingList\n;\n\n\n\n1. Let next be the result of evaluating BindingList.2. ReturnIfAbrupt(next).3. Return empty.\n\nBindingList : \nBindingList\n,\nLexicalBinding\n\n\n\n1. Let next be the result of evaluating BindingList.2. ReturnIfAbrupt(next).3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingIdentifier\n\n\n1. Let lhs be Completion(ResolveBinding(StringValue of BindingIdentifier)).2. Perform ?\u00a0InitializeReferencedBinding(lhs, undefined).3. Return empty.\nNote\nA static semantics rule ensures that this form of LexicalBinding never occurs in a const declaration.\n\n\nLexicalBinding : \nBindingIdentifier\nInitializer\n\n\n\n1. Let bindingId be StringValue of BindingIdentifier.2. Let lhs be Completion(ResolveBinding(bindingId)).3. If IsAnonymousFunctionDefinition(Initializer) is true, thena. Let value be ?\u00a0NamedEvaluation of Initializer with argument bindingId.4. Else,a. Let rhs be the result of evaluating Initializer.b. Let value be ?\u00a0GetValue(rhs).5. Perform ?\u00a0InitializeReferencedBinding(lhs, value).6. Return empty.\n\nLexicalBinding : \nBindingPattern\nInitializer\n\n\n\n1. Let rhs be the result of evaluating Initializer.2. Let value be ?\u00a0GetValue(rhs).3. Let env be the running execution context's LexicalEnvironment.4. Return ?\u00a0BindingInitialization of BindingPattern with arguments value and env.\n\n\n\n14.3.2 Variable Statement\nNote\nA var statement declares variables that are scoped to the running execution context's VariableEnvironment. Var variables are created when their containing Environment Record is instantiated and are initialized to undefined when created. Within the scope of any VariableEnvironment a common BindingIdentifier may appear in more than one VariableDeclaration but those declarations collectively define only one variable. A variable defined by a VariableDeclaration with an Initializer is assigned the value of its Initializer's AssignmentExpression when the VariableDeclaration is executed, not when the variable is created.\n\nSyntax\n\nVariableStatement[Yield, Await] : \nvar\nVariableDeclarationList[+In, ?Yield, ?Await]\n;\n\n\n\nVariableDeclarationList[In, Yield, Await] : \nVariableDeclaration[?In, ?Yield, ?Await]\n\n\nVariableDeclarationList[?In, ?Yield, ?Await]\n,\nVariableDeclaration[?In, ?Yield, ?Await]\n\n\n\nVariableDeclaration[In, Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\nInitializer[?In, ?Yield, ?Await]opt\n\n\nBindingPattern[?Yield, ?Await]\nInitializer[?In, ?Yield, ?Await]\n\n\n\n\n14.3.2.1 Runtime Semantics: Evaluation\n\nVariableStatement : \nvar\nVariableDeclarationList\n;\n\n\n\n1. Let next be the result of evaluating VariableDeclarationList.2. ReturnIfAbrupt(next).3. Return empty.\n\nVariableDeclarationList : \nVariableDeclarationList\n,\nVariableDeclaration\n\n\n\n1. Let next be the result of evaluating VariableDeclarationList.2. ReturnIfAbrupt(next).3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingIdentifier\n\n\n1. Return empty.\n\nVariableDeclaration : \nBindingIdentifier\nInitializer\n\n\n\n1. Let bindingId be StringValue of BindingIdentifier.2. Let lhs be ?\u00a0ResolveBinding(bindingId).3. If IsAnonymousFunctionDefinition(Initializer) is true, thena. Let value be ?\u00a0NamedEvaluation of Initializer with argument bindingId.4. Else,a. Let rhs be the result of evaluating Initializer.b. Let value be ?\u00a0GetValue(rhs).5. Perform ?\u00a0PutValue(lhs, value).6. Return empty.\nNote\nIf a VariableDeclaration is nested within a with statement and the BindingIdentifier in the VariableDeclaration is the same as a property name of the binding object of the with statement's object Environment Record, then step 5 will assign value to the property instead of assigning to the VariableEnvironment binding of the Identifier.\n\n\nVariableDeclaration : \nBindingPattern\nInitializer\n\n\n\n1. Let rhs be the result of evaluating Initializer.2. Let rval be ?\u00a0GetValue(rhs).3. Return ?\u00a0BindingInitialization of BindingPattern with arguments rval and undefined.\n\n\n\n14.3.3 Destructuring Binding Patterns\nSyntax\n\nBindingPattern[Yield, Await] : \nObjectBindingPattern[?Yield, ?Await]\n\n\nArrayBindingPattern[?Yield, ?Await]\n\n\n\nObjectBindingPattern[Yield, Await] : \n{\n}\n\n\n{\nBindingRestProperty[?Yield, ?Await]\n}\n\n\n{\nBindingPropertyList[?Yield, ?Await]\n}\n\n\n{\nBindingPropertyList[?Yield, ?Await]\n,\nBindingRestProperty[?Yield, ?Await]opt\n}\n\n\n\nArrayBindingPattern[Yield, Await] : \n[\nElisionopt\nBindingRestElement[?Yield, ?Await]opt\n]\n\n\n[\nBindingElementList[?Yield, ?Await]\n]\n\n\n[\nBindingElementList[?Yield, ?Await]\n,\nElisionopt\nBindingRestElement[?Yield, ?Await]opt\n]\n\n\n\nBindingRestProperty[Yield, Await] : \n...\nBindingIdentifier[?Yield, ?Await]\n\n\n\nBindingPropertyList[Yield, Await] : \nBindingProperty[?Yield, ?Await]\n\n\nBindingPropertyList[?Yield, ?Await]\n,\nBindingProperty[?Yield, ?Await]\n\n\n\nBindingElementList[Yield, Await] : \nBindingElisionElement[?Yield, ?Await]\n\n\nBindingElementList[?Yield, ?Await]\n,\nBindingElisionElement[?Yield, ?Await]\n\n\n\nBindingElisionElement[Yield, Await] : \nElisionopt\nBindingElement[?Yield, ?Await]\n\n\n\nBindingProperty[Yield, Await] : \nSingleNameBinding[?Yield, ?Await]\n\n\nPropertyName[?Yield, ?Await]\n:\nBindingElement[?Yield, ?Await]\n\n\n\nBindingElement[Yield, Await] : \nSingleNameBinding[?Yield, ?Await]\n\n\nBindingPattern[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]opt\n\n\n\nSingleNameBinding[Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]opt\n\n\n\nBindingRestElement[Yield, Await] : \n...\nBindingIdentifier[?Yield, ?Await]\n\n\n...\nBindingPattern[?Yield, ?Await]\n\n\n\n\n14.3.3.1 Runtime Semantics: PropertyBindingInitialization\nThe syntax-directed operation PropertyBindingInitialization takes arguments value and environment and returns either a normal completion containing a List of property keys or an abrupt completion. It collects a list of all bound property names. It is defined piecewise over the following productions:\n\nBindingPropertyList : \nBindingPropertyList\n,\nBindingProperty\n\n\n\n1. Let boundNames be ?\u00a0PropertyBindingInitialization of BindingPropertyList with arguments value and environment.2. Let nextNames be ?\u00a0PropertyBindingInitialization of BindingProperty with arguments value and environment.3. Return the list-concatenation of boundNames and nextNames.\n\nBindingProperty : SingleNameBinding\n\n\n1. Let name be the string that is the only element of BoundNames of SingleNameBinding.2. Perform ?\u00a0KeyedBindingInitialization of SingleNameBinding with arguments value, environment, and name.3. Return \u00ab name \u00bb.\n\nBindingProperty : \nPropertyName\n:\nBindingElement\n\n\n\n1. Let P be the result of evaluating PropertyName.2. ReturnIfAbrupt(P).3. Perform ?\u00a0KeyedBindingInitialization of BindingElement with arguments value, environment, and P.4. Return \u00ab P \u00bb.\n\n\n14.3.3.2 Runtime Semantics: RestBindingInitialization\nThe syntax-directed operation RestBindingInitialization takes arguments value, environment, and excludedNames and returns either a normal completion containing unused or an abrupt completion. It is defined piecewise over the following productions:\n\nBindingRestProperty : \n...\nBindingIdentifier\n\n\n\n1. Let lhs be ?\u00a0ResolveBinding(StringValue of BindingIdentifier, environment).2. Let restObj be OrdinaryObjectCreate(%Object.prototype%).3. Perform ?\u00a0CopyDataProperties(restObj, value, excludedNames).4. If environment is undefined, return ?\u00a0PutValue(lhs, restObj).5. Return ?\u00a0InitializeReferencedBinding(lhs, restObj).\n\n\n14.3.3.3 Runtime Semantics: KeyedBindingInitialization\nThe syntax-directed operation KeyedBindingInitialization takes arguments value, environment, and propertyName and returns either a normal completion containing unused or an abrupt completion.\nNote\nWhen undefined is passed for environment it indicates that a PutValue operation should be used to assign the initialization value. This is the case for formal parameter lists of non-strict functions.\n In that case the formal parameter bindings are preinitialized in order \nto deal with the possibility of multiple parameters with the same name.\n\nIt is defined piecewise over the following productions:\n\nBindingElement : \nBindingPattern\nInitializeropt\n\n\n\n1. Let v be ?\u00a0GetV(value, propertyName).2. If Initializer is present and v is undefined, thena. Let defaultValue be the result of evaluating Initializer.b. Set v to ?\u00a0GetValue(defaultValue).3. Return ?\u00a0BindingInitialization of BindingPattern with arguments v and environment.\n\nSingleNameBinding : \nBindingIdentifier\nInitializeropt\n\n\n\n1. Let bindingId be StringValue of BindingIdentifier.2. Let lhs be ?\u00a0ResolveBinding(bindingId, environment).3. Let v be ?\u00a0GetV(value, propertyName).4. If Initializer is present and v is undefined, thena. If IsAnonymousFunctionDefinition(Initializer) is true, theni. Set v to ?\u00a0NamedEvaluation of Initializer with argument bindingId.b. Else,i. Let defaultValue be the result of evaluating Initializer.ii. Set v to ?\u00a0GetValue(defaultValue).5. If environment is undefined, return ?\u00a0PutValue(lhs, v).6. Return ?\u00a0InitializeReferencedBinding(lhs, v).\n\n\n\n\n14.4 Empty Statement\nSyntax\n\nEmptyStatement : \n;\n\n\n\n\n14.4.1 Runtime Semantics: Evaluation\n\nEmptyStatement : ;\n\n\n1. Return empty.\n\n\n\n14.5 Expression Statement\nSyntax\n\nExpressionStatement[Yield, Await] : \n[lookahead \u2209 { {, function, async\n[no LineTerminator here]\nfunction, class, let\n[ }]\nExpression[+In, ?Yield, ?Await]\n;\n\n\n\nNote\nAn ExpressionStatement cannot start with a U+007B (LEFT CURLY BRACKET) because that might make it ambiguous with a Block. An ExpressionStatement cannot start with the function or class keywords because that would make it ambiguous with a FunctionDeclaration, a GeneratorDeclaration, or a ClassDeclaration. An ExpressionStatement cannot start with async function because that would make it ambiguous with an AsyncFunctionDeclaration or a AsyncGeneratorDeclaration. An ExpressionStatement cannot start with the two token sequence let [ because that would make it ambiguous with a let LexicalDeclaration whose first LexicalBinding was an ArrayBindingPattern.\n\n\n14.5.1 Runtime Semantics: Evaluation\n\nExpressionStatement : \nExpression\n;\n\n\n\n1. Let exprRef be the result of evaluating Expression.2. Return ?\u00a0GetValue(exprRef).\n\n\n\n14.6 The if Statement\nSyntax\n\nIfStatement[Yield, Await, Return] : \nif\n(\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\nelse\nStatement[?Yield, ?Await, ?Return]\n\n\nif\n(\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n[lookahead \u2260 else]\n\n\n\nNoteThe lookahead-restriction [lookahead \u2260 else] resolves the classic \"dangling else\" problem in the usual way. That is, when the choice of associated if is otherwise ambiguous, the else is associated with the nearest (innermost) of the candidate ifs\n\n14.6.1 Static Semantics: Early Errors\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\nelse\nStatement\n\n\n\n\n\n          It is a Syntax Error if IsLabelledFunction(the first Statement) is true.\n        \n\n          It is a Syntax Error if IsLabelledFunction(the second Statement) is true.\n        \n\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\n\n\n\n\n\n          It is a Syntax Error if IsLabelledFunction(Statement) is true.\n        \n\nNote\nIt is only necessary to apply this rule if the extension specified in B.3.1 is implemented.\n\n\n\n14.6.2 Runtime Semantics: Evaluation\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\nelse\nStatement\n\n\n\n1. Let exprRef be the result of evaluating Expression.2. Let exprValue be ToBoolean(? GetValue(exprRef)).3. If exprValue is true, thena. Let stmtCompletion be the result of evaluating the first Statement.4. Else,a. Let stmtCompletion be the result of evaluating the second Statement.5. Return ?\u00a0UpdateEmpty(stmtCompletion, undefined).\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\n\n\n\n1. Let exprRef be the result of evaluating Expression.2. Let exprValue be ToBoolean(? GetValue(exprRef)).3. If exprValue is false, thena. Return undefined.4. Else,a. Let stmtCompletion be the result of evaluating Statement.b. Return ?\u00a0UpdateEmpty(stmtCompletion, undefined).\n\n\n\n14.7 Iteration Statements\nSyntax\n\nIterationStatement[Yield, Await, Return] : \nDoWhileStatement[?Yield, ?Await, ?Return]\n\n\nWhileStatement[?Yield, ?Await, ?Return]\n\n\nForStatement[?Yield, ?Await, ?Return]\n\n\nForInOfStatement[?Yield, ?Await, ?Return]\n\n\n\n\n14.7.1 Semantics\n\n14.7.1.1 LoopContinues ( completion, labelSet )\nThe abstract operation LoopContinues takes arguments completion and labelSet and returns a Boolean. It performs the following steps when called:\n1. If completion.[[Type]] is normal, return true.2. If completion.[[Type]] is not continue, return false.3. If completion.[[Target]] is empty, return true.4. If completion.[[Target]] is an element of labelSet, return true.5. Return false.\nNote\nWithin the Statement part of an IterationStatement a ContinueStatement may be used to begin a new iteration.\n\n\n\n14.7.1.2 Runtime Semantics: LoopEvaluation\nThe syntax-directed operation LoopEvaluation takes argument labelSet and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nIterationStatement : DoWhileStatement\n\n\n1. Return ?\u00a0DoWhileLoopEvaluation of DoWhileStatement with argument labelSet.\n\nIterationStatement : WhileStatement\n\n\n1. Return ?\u00a0WhileLoopEvaluation of WhileStatement with argument labelSet.\n\nIterationStatement : ForStatement\n\n\n1. Return ?\u00a0ForLoopEvaluation of ForStatement with argument labelSet.\n\nIterationStatement : ForInOfStatement\n\n\n1. Return ?\u00a0ForInOfLoopEvaluation of ForInOfStatement with argument labelSet.\n\n\n\n14.7.2 The do-while Statement\nSyntax\n\nDoWhileStatement[Yield, Await, Return] : \ndo\nStatement[?Yield, ?Await, ?Return]\nwhile\n(\nExpression[+In, ?Yield, ?Await]\n)\n;\n\n\n\n\n14.7.2.1 Static Semantics: Early Errors\n\nDoWhileStatement : \ndo\nStatement\nwhile\n(\nExpression\n)\n;\n\n\n\n\n\n            It is a Syntax Error if IsLabelledFunction(Statement) is true.\n          \n\nNote\nIt is only necessary to apply this rule if the extension specified in B.3.1 is implemented.\n\n\n\n14.7.2.2 Runtime Semantics: DoWhileLoopEvaluation\nThe syntax-directed operation DoWhileLoopEvaluation takes argument labelSet and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nDoWhileStatement : \ndo\nStatement\nwhile\n(\nExpression\n)\n;\n\n\n\n1. Let V be undefined.2. Repeat,a. Let stmtResult be the result of evaluating Statement.b. If LoopContinues(stmtResult, labelSet) is false, return ?\u00a0UpdateEmpty(stmtResult, V).c. If stmtResult.[[Value]] is not empty, set V to stmtResult.[[Value]].d. Let exprRef be the result of evaluating Expression.e. Let exprValue be ?\u00a0GetValue(exprRef).f. If ToBoolean(exprValue) is false, return V.\n\n\n\n14.7.3 The while Statement\nSyntax\n\nWhileStatement[Yield, Await, Return] : \nwhile\n(\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\n\n\n14.7.3.1 Static Semantics: Early Errors\n\nWhileStatement : \nwhile\n(\nExpression\n)\nStatement\n\n\n\n\n\n            It is a Syntax Error if IsLabelledFunction(Statement) is true.\n          \n\nNote\nIt is only necessary to apply this rule if the extension specified in B.3.1 is implemented.\n\n\n\n14.7.3.2 Runtime Semantics: WhileLoopEvaluation\nThe syntax-directed operation WhileLoopEvaluation takes argument labelSet and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nWhileStatement : \nwhile\n(\nExpression\n)\nStatement\n\n\n\n1. Let V be undefined.2. Repeat,a. Let exprRef be the result of evaluating Expression.b. Let exprValue be ?\u00a0GetValue(exprRef).c. If ToBoolean(exprValue) is false, return V.d. Let stmtResult be the result of evaluating Statement.e. If LoopContinues(stmtResult, labelSet) is false, return ?\u00a0UpdateEmpty(stmtResult, V).f. If stmtResult.[[Value]] is not empty, set V to stmtResult.[[Value]].\n\n\n\n14.7.4 The for Statement\nSyntax\n\nForStatement[Yield, Await, Return] : \nfor\n(\n[lookahead \u2260 let\n[]\nExpression[~In, ?Yield, ?Await]opt\n;\nExpression[+In, ?Yield, ?Await]opt\n;\nExpression[+In, ?Yield, ?Await]opt\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nvar\nVariableDeclarationList[~In, ?Yield, ?Await]\n;\nExpression[+In, ?Yield, ?Await]opt\n;\nExpression[+In, ?Yield, ?Await]opt\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nLexicalDeclaration[~In, ?Yield, ?Await]\nExpression[+In, ?Yield, ?Await]opt\n;\nExpression[+In, ?Yield, ?Await]opt\n)\nStatement[?Yield, ?Await, ?Return]\n\n\n\n\n14.7.4.1 Static Semantics: Early Errors\n\nForStatement : \nfor\n(\nExpressionopt\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nvar\nVariableDeclarationList\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nLexicalDeclaration\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n\n\n            It is a Syntax Error if IsLabelledFunction(Statement) is true.\n          \n\nNote\nIt is only necessary to apply this rule if the extension specified in B.3.1 is implemented.\n\n\nForStatement : \nfor\n(\nLexicalDeclaration\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n\n\n            It is a Syntax Error if any element of the BoundNames of LexicalDeclaration also occurs in the VarDeclaredNames of Statement.\n          \n\n\n\n14.7.4.2 Runtime Semantics: ForLoopEvaluation\nThe syntax-directed operation ForLoopEvaluation takes argument labelSet and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nForStatement : \nfor\n(\nExpressionopt\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. If the first Expression is present, thena. Let exprRef be the result of evaluating the first Expression.b. Perform ?\u00a0GetValue(exprRef).2. Return ?\u00a0ForBodyEvaluation(the second Expression, the third Expression, Statement, \u00ab \u00bb, labelSet).\n\nForStatement : \nfor\n(\nvar\nVariableDeclarationList\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.2. ReturnIfAbrupt(varDcl).3. Return ?\u00a0ForBodyEvaluation(the first Expression, the second Expression, Statement, \u00ab \u00bb, labelSet).\n\nForStatement : \nfor\n(\nLexicalDeclaration\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\n1. Let oldEnv be the running execution context's LexicalEnvironment.2. Let loopEnv be NewDeclarativeEnvironment(oldEnv).3. Let isConst be IsConstantDeclaration of LexicalDeclaration.4. Let boundNames be the BoundNames of LexicalDeclaration.5. For each element dn of boundNames, doa. If isConst is true, theni. Perform !\u00a0loopEnv.CreateImmutableBinding(dn, true).b. Else,i. Perform !\u00a0loopEnv.CreateMutableBinding(dn, false).6. Set the running execution context's LexicalEnvironment to loopEnv.7. Let forDcl be the result of evaluating LexicalDeclaration.8. If forDcl is an abrupt completion, thena. Set the running execution context's LexicalEnvironment to oldEnv.b. Return ?\u00a0forDcl.9. If isConst is false, let perIterationLets be boundNames; otherwise let perIterationLets be a new empty List.10. Let bodyResult be Completion(ForBodyEvaluation(the first Expression, the second Expression, Statement, perIterationLets, labelSet)).11. Set the running execution context's LexicalEnvironment to oldEnv.12. Return ?\u00a0bodyResult.\n\n\n14.7.4.3 ForBodyEvaluation ( test, increment, stmt, perIterationBindings, labelSet )\nThe abstract operation ForBodyEvaluation takes arguments test, increment, stmt, perIterationBindings, and labelSet and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let V be undefined.2. Perform ?\u00a0CreatePerIterationEnvironment(perIterationBindings).3. Repeat,a. If test is not [empty], theni. Let testRef be the result of evaluating test.ii. Let testValue be ?\u00a0GetValue(testRef).iii. If ToBoolean(testValue) is false, return V.b. Let result be the result of evaluating stmt.c. If LoopContinues(result, labelSet) is false, return ?\u00a0UpdateEmpty(result, V).d. If result.[[Value]] is not empty, set V to result.[[Value]].e. Perform ?\u00a0CreatePerIterationEnvironment(perIterationBindings).f. If increment is not [empty], theni. Let incRef be the result of evaluating increment.ii. Perform ?\u00a0GetValue(incRef).\n\n\n14.7.4.4 CreatePerIterationEnvironment ( perIterationBindings )\nThe abstract operation CreatePerIterationEnvironment takes argument perIterationBindings and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. If perIterationBindings has any elements, thena. Let lastIterationEnv be the running execution context's LexicalEnvironment.b. Let outer be lastIterationEnv.[[OuterEnv]].c. Assert: outer is not null.d. Let thisIterationEnv be NewDeclarativeEnvironment(outer).e. For each element bn of perIterationBindings, doi. Perform !\u00a0thisIterationEnv.CreateMutableBinding(bn, false).ii. Let lastValue be ?\u00a0lastIterationEnv.GetBindingValue(bn, true).iii. Perform !\u00a0thisIterationEnv.InitializeBinding(bn, lastValue).f. Set the running execution context's LexicalEnvironment to thisIterationEnv.2. Return unused.\n\n\n\n14.7.5 The for-in, for-of, and for-await-of Statements\nSyntax\n\nForInOfStatement[Yield, Await, Return] : \nfor\n(\n[lookahead \u2260 let\n[]\nLeftHandSideExpression[?Yield, ?Await]\nin\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nvar\nForBinding[?Yield, ?Await]\nin\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nForDeclaration[?Yield, ?Await]\nin\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\n[lookahead \u2209 { let, async\nof }]\nLeftHandSideExpression[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nvar\nForBinding[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nForDeclaration[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n[+Await]\nfor\nawait\n(\n[lookahead \u2260 let]\nLeftHandSideExpression[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n[+Await]\nfor\nawait\n(\nvar\nForBinding[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n[+Await]\nfor\nawait\n(\nForDeclaration[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\n\nForDeclaration[Yield, Await] : \nLetOrConst\nForBinding[?Yield, ?Await]\n\n\n\nForBinding[Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\n\n\nBindingPattern[?Yield, ?Await]\n\n\n\nNote\nThis section is extended by Annex B.3.5.\n\n\n14.7.5.1 Static Semantics: Early Errors\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nin\nExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nin\nExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nin\nExpression\n)\nStatement\n\n\nfor\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\n\n\n\n            It is a Syntax Error if IsLabelledFunction(Statement) is true.\n          \n\nNote\nIt is only necessary to apply this rule if the extension specified in B.3.1 is implemented.\n\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nin\nExpression\n)\nStatement\n\n\nfor\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\n\nIf LeftHandSideExpression is either an ObjectLiteral or an ArrayLiteral, the following Early Error rules are applied:\n\n\nLeftHandSideExpression must cover an AssignmentPattern.\n          \n\nIf LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, the following Early Error rule is applied:\n\n\n            It is a Syntax Error if AssignmentTargetType of LeftHandSideExpression is not simple.\n          \n\n\nForInOfStatement : \nfor\n(\nForDeclaration\nin\nExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\nawait\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\n\n\n\n            It is a Syntax Error if the BoundNames of ForDeclaration contains \"let\".\n          \n\n            It is a Syntax Error if any element of the BoundNames of ForDeclaration also occurs in the VarDeclaredNames of Statement.\n          \n\n            It is a Syntax Error if the BoundNames of ForDeclaration contains any duplicate entries.\n          \n\n\n\n14.7.5.2 Static Semantics: IsDestructuring\nThe syntax-directed operation IsDestructuring takes no \narguments and returns a Boolean. It is defined piecewise over the \nfollowing productions:\n\nMemberExpression : PrimaryExpression\n\n\n1. If PrimaryExpression is either an ObjectLiteral or an ArrayLiteral, return true.2. Return false.\n\nMemberExpression : \nMemberExpression\n[\nExpression\n]\n\n\nMemberExpression\n.\nIdentifierName\n\n\nMemberExpression\nTemplateLiteral\n\n\nSuperProperty\n\n\nMetaProperty\n\n\nnew\nMemberExpression\nArguments\n\n\nMemberExpression\n.\nPrivateIdentifier\n\n\n\nNewExpression : \nnew\nNewExpression\n\n\n\nLeftHandSideExpression : \nCallExpression\n\n\nOptionalExpression\n\n\n\n1. Return false.\n\nForDeclaration : \nLetOrConst\nForBinding\n\n\n\n1. Return IsDestructuring of ForBinding.\n\nForBinding : BindingIdentifier\n\n\n1. Return false.\n\nForBinding : BindingPattern\n\n\n1. Return true.\nNote\nThis section is extended by Annex B.3.5.\n\n\n\n14.7.5.3 Runtime Semantics: ForDeclarationBindingInitialization\nThe syntax-directed operation ForDeclarationBindingInitialization takes arguments value and environment and returns either a normal completion containing unused or an abrupt completion.\nNote\nundefined is passed for environment to indicate that a PutValue operation should be used to assign the initialization value. This is the case for var statements and the formal parameter lists of some non-strict functions (see 10.2.11). In those cases a lexical binding is hoisted and preinitialized prior to evaluation of its initializer.\n\nIt is defined piecewise over the following productions:\n\nForDeclaration : \nLetOrConst\nForBinding\n\n\n\n1. Return ?\u00a0BindingInitialization of ForBinding with arguments value and environment.\n\n\n14.7.5.4 Runtime Semantics: ForDeclarationBindingInstantiation\nThe syntax-directed operation ForDeclarationBindingInstantiation takes argument environment and returns unused. It is defined piecewise over the following productions:\n\nForDeclaration : \nLetOrConst\nForBinding\n\n\n\n1. Assert: environment is a declarative Environment Record.2. For each element name of the BoundNames of ForBinding, doa. If IsConstantDeclaration of LetOrConst is true, theni. Perform !\u00a0environment.CreateImmutableBinding(name, true).b. Else,i. Perform !\u00a0environment.CreateMutableBinding(name, false).3. Return unused.\n\n\n14.7.5.5 Runtime Semantics: ForInOfLoopEvaluation\nThe syntax-directed operation ForInOfLoopEvaluation takes argument labelSet and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nin\nExpression\n)\nStatement\n\n\n\n1. Let keyResult be ?\u00a0ForIn/OfHeadEvaluation(\u00ab \u00bb, Expression, enumerate).2. Return ?\u00a0ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement, keyResult, enumerate, assignment, labelSet).\n\nForInOfStatement : \nfor\n(\nvar\nForBinding\nin\nExpression\n)\nStatement\n\n\n\n1. Let keyResult be ?\u00a0ForIn/OfHeadEvaluation(\u00ab \u00bb, Expression, enumerate).2. Return ?\u00a0ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult, enumerate, varBinding, labelSet).\n\nForInOfStatement : \nfor\n(\nForDeclaration\nin\nExpression\n)\nStatement\n\n\n\n1. Let keyResult be ?\u00a0ForIn/OfHeadEvaluation(BoundNames of ForDeclaration, Expression, enumerate).2. Return ?\u00a0ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult, enumerate, lexicalBinding, labelSet).\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Let keyResult be ?\u00a0ForIn/OfHeadEvaluation(\u00ab \u00bb, AssignmentExpression, iterate).2. Return ?\u00a0ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement, keyResult, iterate, assignment, labelSet).\n\nForInOfStatement : \nfor\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Let keyResult be ?\u00a0ForIn/OfHeadEvaluation(\u00ab \u00bb, AssignmentExpression, iterate).2. Return ?\u00a0ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult, iterate, varBinding, labelSet).\n\nForInOfStatement : \nfor\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Let keyResult be ?\u00a0ForIn/OfHeadEvaluation(BoundNames of ForDeclaration, AssignmentExpression, iterate).2. Return ?\u00a0ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult, iterate, lexicalBinding, labelSet).\n\nForInOfStatement : \nfor\nawait\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Let keyResult be ?\u00a0ForIn/OfHeadEvaluation(\u00ab \u00bb, AssignmentExpression, async-iterate).2. Return ?\u00a0ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement, keyResult, iterate, assignment, labelSet, async).\n\nForInOfStatement : \nfor\nawait\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Let keyResult be ?\u00a0ForIn/OfHeadEvaluation(\u00ab \u00bb, AssignmentExpression, async-iterate).2. Return ?\u00a0ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult, iterate, varBinding, labelSet, async).\n\nForInOfStatement : \nfor\nawait\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\n\n1. Let keyResult be ?\u00a0ForIn/OfHeadEvaluation(BoundNames of ForDeclaration, AssignmentExpression, async-iterate).2. Return ?\u00a0ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult, iterate, lexicalBinding, labelSet, async).\nNote\nThis section is extended by Annex B.3.5.\n\n\n\n14.7.5.6 ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )\nThe abstract operation ForIn/OfHeadEvaluation takes arguments uninitializedBoundNames, expr, and iterationKind (enumerate, iterate, or async-iterate) and returns either a normal completion containing an Iterator Record or an abrupt completion. It performs the following steps when called:\n1. Let oldEnv be the running execution context's LexicalEnvironment.2. If uninitializedBoundNames is not an empty List, thena. Assert: uninitializedBoundNames has no duplicate entries.b. Let newEnv be NewDeclarativeEnvironment(oldEnv).c. For each String name of uninitializedBoundNames, doi. Perform !\u00a0newEnv.CreateMutableBinding(name, false).d. Set the running execution context's LexicalEnvironment to newEnv.3. Let exprRef be the result of evaluating expr.4. Set the running execution context's LexicalEnvironment to oldEnv.5. Let exprValue be ?\u00a0GetValue(exprRef).6. If iterationKind is enumerate, thena. If exprValue is undefined or null, theni. Return Completion Record { [[Type]]: break, [[Value]]: empty, [[Target]]: empty }.b. Let obj be !\u00a0ToObject(exprValue).c. Let iterator be EnumerateObjectProperties(obj).d. Let nextMethod be !\u00a0GetV(iterator, \"next\").e. Return the Iterator Record { [[Iterator]]: iterator, [[NextMethod]]: nextMethod, [[Done]]: false }.7. Else,a. Assert: iterationKind is iterate or async-iterate.b. If iterationKind is async-iterate, let iteratorHint be async.c. Else, let iteratorHint be sync.d. Return ?\u00a0GetIterator(exprValue, iteratorHint).\n\n\n14.7.5.7 ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )\nThe abstract operation ForIn/OfBodyEvaluation takes arguments lhs, stmt, iteratorRecord, iterationKind, lhsKind (assignment, varBinding, or lexicalBinding), and labelSet and optional argument iteratorKind (sync or async) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. If iteratorKind is not present, set iteratorKind to sync.2. Let oldEnv be the running execution context's LexicalEnvironment.3. Let V be undefined.4. Let destructuring be IsDestructuring of lhs.5. If destructuring is true and if lhsKind is assignment, thena. Assert: lhs is a LeftHandSideExpression.b. Let assignmentPattern be the AssignmentPattern that is covered by lhs.6. Repeat,a. Let nextResult be ?\u00a0Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]]).b. If iteratorKind is async, set nextResult to ?\u00a0Await(nextResult).c. If Type(nextResult) is not Object, throw a TypeError exception.d. Let done be ?\u00a0IteratorComplete(nextResult).e. If done is true, return V.f. Let nextValue be ?\u00a0IteratorValue(nextResult).g. If lhsKind is either assignment or varBinding, theni. If destructuring is false, then1. Let lhsRef be the result of evaluating lhs. (It may be evaluated repeatedly.)h. Else,i. Assert: lhsKind is lexicalBinding.ii. Assert: lhs is a ForDeclaration.iii. Let iterationEnv be NewDeclarativeEnvironment(oldEnv).iv. Perform ForDeclarationBindingInstantiation of lhs with argument iterationEnv.v. Set the running execution context's LexicalEnvironment to iterationEnv.vi. If destructuring is false, then1. Assert: lhs binds a single name.2. Let lhsName be the sole element of BoundNames of lhs.3. Let lhsRef be !\u00a0ResolveBinding(lhsName).i. If destructuring is false, theni. If lhsRef is an abrupt completion, then1. Let status be lhsRef.ii. Else if lhsKind is lexicalBinding, then1. Let status be Completion(InitializeReferencedBinding(lhsRef, nextValue)).iii. Else,1. Let status be Completion(PutValue(lhsRef, nextValue)).j. Else,i. If lhsKind is assignment, then1. Let status be Completion(DestructuringAssignmentEvaluation of assignmentPattern with argument nextValue).ii. Else if lhsKind is varBinding, then1. Assert: lhs is a ForBinding.2. Let status be Completion(BindingInitialization of lhs with arguments nextValue and undefined).iii. Else,1. Assert: lhsKind is lexicalBinding.2. Assert: lhs is a ForDeclaration.3. Let status be Completion(ForDeclarationBindingInitialization of lhs with arguments nextValue and iterationEnv).k. If status is an abrupt completion, theni. Set the running execution context's LexicalEnvironment to oldEnv.ii. If iteratorKind is async, return ?\u00a0AsyncIteratorClose(iteratorRecord, status).iii. If iterationKind is enumerate, then1. Return ?\u00a0status.iv. Else,1. Assert: iterationKind is iterate.2. Return ?\u00a0IteratorClose(iteratorRecord, status).l. Let result be the result of evaluating stmt.m. Set the running execution context's LexicalEnvironment to oldEnv.n. If LoopContinues(result, labelSet) is false, theni. If iterationKind is enumerate, then1. Return ?\u00a0UpdateEmpty(result, V).ii. Else,1. Assert: iterationKind is iterate.2. Set status to Completion(UpdateEmpty(result, V)).3. If iteratorKind is async, return ?\u00a0AsyncIteratorClose(iteratorRecord, status).4. Return ?\u00a0IteratorClose(iteratorRecord, status).o. If result.[[Value]] is not empty, set V to result.[[Value]].\n\n\n14.7.5.8 Runtime Semantics: Evaluation\n\nBindingIdentifier : \nIdentifier\n\n\nyield\n\n\nawait\n\n\n\n1. Let bindingId be StringValue of BindingIdentifier.2. Return ?\u00a0ResolveBinding(bindingId).\n\n\n14.7.5.9 EnumerateObjectProperties ( O )\nThe abstract operation EnumerateObjectProperties takes argument O (an Object) and returns an Iterator. It performs the following steps when called:\n1. Return an Iterator object (27.1.1.2) whose next method iterates over all the String-valued keys of enumerable properties of O.\n The iterator object is never directly accessible to ECMAScript code. \nThe mechanics and order of enumerating the properties is not specified \nbut must conform to the rules specified below.\nThe iterator's throw and return methods are null and are never invoked. The iterator's next method processes object properties to determine whether the property key should be returned as an iterator value. Returned property keys\n do not include keys that are Symbols. Properties of the target object \nmay be deleted during enumeration. A property that is deleted before it \nis processed by the iterator's next method is ignored. If \nnew properties are added to the target object during enumeration, the \nnewly added properties are not guaranteed to be processed in the active \nenumeration. A property name will be returned by the iterator's next method at most once in any enumeration.\nEnumerating the properties of the target object includes \nenumerating properties of its prototype, and the prototype of the \nprototype, and so on, recursively; but a property of a prototype is not \nprocessed if it has the same name as a property that has already been \nprocessed by the iterator's next method. The values of \n[[Enumerable]] attributes are not considered when determining if a \nproperty of a prototype object has already been processed. The \nenumerable property names of prototype objects must be obtained by \ninvoking EnumerateObjectProperties passing the prototype object as the \nargument. EnumerateObjectProperties must obtain the own property keys\n of the target object by calling its [[OwnPropertyKeys]] internal \nmethod. Property attributes of the target object must be obtained by \ncalling its [[GetOwnProperty]] internal method.\nIn addition, if neither O nor any object in its prototype chain is a Proxy exotic object, Integer-Indexed exotic object, module namespace exotic object, or implementation provided exotic object, then the iterator must behave as would the iterator given by CreateForInIterator(O) until one of the following occurs:\n\nthe value of the [[Prototype]] internal slot of O or an object in its prototype chain changes,\na property is removed from O or an object in its prototype chain,\na property is added to an object in O's prototype chain, or\nthe value of the [[Enumerable]] attribute of a property of O or an object in its prototype chain changes.\n\nNote 1\nECMAScript implementations are not required to implement the algorithm in 14.7.5.10.2.1\n directly. They may choose any implementation whose behaviour will not \ndeviate from that algorithm unless one of the constraints in the \nprevious paragraph is violated.\nThe following is an informative definition of an ECMAScript generator function that conforms to these rules:\nfunction* EnumerateObjectProperties(obj) {\n  const visited = new Set();\n  for (const key of Reflect.ownKeys(obj)) {\n    if (typeof key === \"symbol\") continue;\n    const desc = Reflect.getOwnPropertyDescriptor(obj, key);\n    if (desc) {\n      visited.add(key);\n      if (desc.enumerable) yield key;\n    }\n  }\n  const proto = Reflect.getPrototypeOf(obj);\n  if (proto === null) return;\n  for (const protoKey of EnumerateObjectProperties(proto)) {\n    if (!visited.has(protoKey)) yield protoKey;\n  }\n}\n\nNote 2\n          The list of exotic objects for which implementations are not required to match CreateForInIterator was chosen because implementations historically differed in behaviour for those cases, and agreed in all others.\n        \n\n\n14.7.5.10 For-In Iterator Objects\nA For-In Iterator is an object that represents a specific \niteration over some specific object. For-In Iterator objects are never \ndirectly accessible to ECMAScript code; they exist solely to illustrate \nthe behaviour of EnumerateObjectProperties.\n\n14.7.5.10.1 CreateForInIterator ( object )\nThe abstract operation CreateForInIterator takes argument object\n (an Object) and returns a For-In Iterator. It is used to create a \nFor-In Iterator object which iterates over the own and inherited \nenumerable string properties of object in a specific order. It performs the following steps when called:\n1. Let iterator be OrdinaryObjectCreate(%ForInIteratorPrototype%, \u00ab [[Object]], [[ObjectWasVisited]], [[VisitedKeys]], [[RemainingKeys]] \u00bb).2. Set iterator.[[Object]] to object.3. Set iterator.[[ObjectWasVisited]] to false.4. Set iterator.[[VisitedKeys]] to a new empty List.5. Set iterator.[[RemainingKeys]] to a new empty List.6. Return iterator.\n\n\n14.7.5.10.2 The %ForInIteratorPrototype% Object\nThe %ForInIteratorPrototype% object:\n\nhas properties that are inherited by all For-In Iterator Objects.\nis an ordinary object.\nhas a [[Prototype]] internal slot whose value is %IteratorPrototype%.\nis never directly accessible to ECMAScript code.\nhas the following properties:\n\n\n14.7.5.10.2.1 %ForInIteratorPrototype%.next ( )\n1. Let O be the this value.2. Assert: Type(O) is Object.3. Assert: O has all of the internal slots of a For-In Iterator Instance (14.7.5.10.3).4. Let object be O.[[Object]].5. Let visited be O.[[VisitedKeys]].6. Let remaining be O.[[RemainingKeys]].7. Repeat,a. If O.[[ObjectWasVisited]] is false, theni. Let keys be ?\u00a0object.[[OwnPropertyKeys]]().ii. For each element key of keys, do1. If Type(key) is String, thena. Append key to remaining.iii. Set O.[[ObjectWasVisited]] to true.b. Repeat, while remaining is not empty,i. Let r be the first element of remaining.ii. Remove the first element from remaining.iii. If there does not exist an element v of visited such that SameValue(r, v) is true, then1. Let desc be ?\u00a0object.[[GetOwnProperty]](r).2. If desc is not undefined, thena. Append r to visited.b. If desc.[[Enumerable]] is true, return CreateIterResultObject(r, false).c. Set object to ?\u00a0object.[[GetPrototypeOf]]().d. Set O.[[Object]] to object.e. Set O.[[ObjectWasVisited]] to false.f. If object is null, return CreateIterResultObject(undefined, true).\n\n\n\n14.7.5.10.3 Properties of For-In Iterator Instances\nFor-In Iterator instances are ordinary objects that inherit properties from the %ForInIteratorPrototype% intrinsic object. For-In Iterator instances are initially created with the internal slots listed in Table 42.\nTable 42: Internal Slots of For-In Iterator Instances\n\n\n\n                  Internal Slot\n                \n\n                  Type\n                \n\n                  Description\n                \n\n\n\n                  [[Object]]\n                \n\n                  an Object\n                \n\n                  The Object value whose properties are being iterated.\n                \n\n\n\n                  [[ObjectWasVisited]]\n                \n\n                  a Boolean\n                \n\ntrue if the iterator has invoked [[OwnPropertyKeys]] on [[Object]], false otherwise.\n                \n\n\n\n                  [[VisitedKeys]]\n                \n\n                  a List of Strings\n                \n\n                  The values that have been emitted by this iterator thus far.\n                \n\n\n\n                  [[RemainingKeys]]\n                \n\n                  a List of Strings\n                \n\n                  The values remaining to be emitted for the current \nobject, before iterating the properties of its prototype (if its \nprototype is not null).\n                \n\n\n\n\n\n\n\n\n14.8 The continue Statement\nSyntax\n\nContinueStatement[Yield, Await] : \ncontinue\n;\n\n\ncontinue\n[no LineTerminator here]\nLabelIdentifier[?Yield, ?Await]\n;\n\n\n\n\n14.8.1 Static Semantics: Early Errors\n\nContinueStatement : \ncontinue\n;\n\n\ncontinue\nLabelIdentifier\n;\n\n\n\n\n\n          It is a Syntax Error if this ContinueStatement is not nested, directly or indirectly (but not crossing function or static initialization block boundaries), within an IterationStatement.\n        \n\n\n\n14.8.2 Runtime Semantics: Evaluation\n\nContinueStatement : \ncontinue\n;\n\n\n\n1. Return Completion Record { [[Type]]: continue, [[Value]]: empty, [[Target]]: empty }.\n\nContinueStatement : \ncontinue\nLabelIdentifier\n;\n\n\n\n1. Let label be the StringValue of LabelIdentifier.2. Return Completion Record { [[Type]]: continue, [[Value]]: empty, [[Target]]: label }.\n\n\n\n14.9 The break Statement\nSyntax\n\nBreakStatement[Yield, Await] : \nbreak\n;\n\n\nbreak\n[no LineTerminator here]\nLabelIdentifier[?Yield, ?Await]\n;\n\n\n\n\n14.9.1 Static Semantics: Early Errors\n\nBreakStatement : \nbreak\n;\n\n\n\n\n\n          It is a Syntax Error if this BreakStatement is not nested, directly or indirectly (but not crossing function or static initialization block boundaries), within an IterationStatement or a SwitchStatement.\n        \n\n\n\n14.9.2 Runtime Semantics: Evaluation\n\nBreakStatement : \nbreak\n;\n\n\n\n1. Return Completion Record { [[Type]]: break, [[Value]]: empty, [[Target]]: empty }.\n\nBreakStatement : \nbreak\nLabelIdentifier\n;\n\n\n\n1. Let label be the StringValue of LabelIdentifier.2. Return Completion Record { [[Type]]: break, [[Value]]: empty, [[Target]]: label }.\n\n\n\n14.10 The return Statement\nSyntax\n\nReturnStatement[Yield, Await] : \nreturn\n;\n\n\nreturn\n[no LineTerminator here]\nExpression[+In, ?Yield, ?Await]\n;\n\n\n\nNote\nA return statement causes a function to cease execution and, in most cases, returns a value to the caller. If Expression is omitted, the return value is undefined. Otherwise, the return value is the value of Expression. A return statement may not actually return a value to the caller depending on surrounding context. For example, in a try block, a return statement's Completion Record may be replaced with another Completion Record during evaluation of the finally block.\n\n\n14.10.1 Runtime Semantics: Evaluation\n\nReturnStatement : \nreturn\n;\n\n\n\n1. Return Completion Record { [[Type]]: return, [[Value]]: undefined, [[Target]]: empty }.\n\nReturnStatement : \nreturn\nExpression\n;\n\n\n\n1. Let exprRef be the result of evaluating Expression.2. Let exprValue be ?\u00a0GetValue(exprRef).3. If GetGeneratorKind() is async, set exprValue to ?\u00a0Await(exprValue).4. Return Completion Record { [[Type]]: return, [[Value]]: exprValue, [[Target]]: empty }.\n\n\nLegacy\n14.11 The with Statement\nNote 1\nUse of the Legacy with statement is discouraged in new ECMAScript code. Consider alternatives that are permitted in both strict mode code and non-strict code, such as destructuring assignment.\n\nSyntax\n\nWithStatement[Yield, Await, Return] : \nwith\n(\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\n\nNote 2\nThe with statement adds an object Environment Record for a computed object to the lexical environment of the running execution context. It then executes a statement using this augmented lexical environment. Finally, it restores the original lexical environment.\n\n\n14.11.1 Static Semantics: Early Errors\n\nWithStatement : \nwith\n(\nExpression\n)\nStatement\n\n\n\n\n\n          It is a Syntax Error if the source text matched by this production is contained in strict mode code.\n        \n\n          It is a Syntax Error if IsLabelledFunction(Statement) is true.\n        \n\nNote\nIt is only necessary to apply the second rule if the extension specified in B.3.1 is implemented.\n\n\n\n14.11.2 Runtime Semantics: Evaluation\n\nWithStatement : \nwith\n(\nExpression\n)\nStatement\n\n\n\n1. Let val be the result of evaluating Expression.2. Let obj be ?\u00a0ToObject(? GetValue(val)).3. Let oldEnv be the running execution context's LexicalEnvironment.4. Let newEnv be NewObjectEnvironment(obj, true, oldEnv).5. Set the running execution context's LexicalEnvironment to newEnv.6. Let C be the result of evaluating Statement.7. Set the running execution context's LexicalEnvironment to oldEnv.8. Return ?\u00a0UpdateEmpty(C, undefined).\nNote\nNo matter how control leaves the embedded Statement, whether normally or by some form of abrupt completion or exception, the LexicalEnvironment is always restored to its former state.\n\n\n\n\n14.12 The switch Statement\nSyntax\n\nSwitchStatement[Yield, Await, Return] : \nswitch\n(\nExpression[+In, ?Yield, ?Await]\n)\nCaseBlock[?Yield, ?Await, ?Return]\n\n\n\nCaseBlock[Yield, Await, Return] : \n{\nCaseClauses[?Yield, ?Await, ?Return]opt\n}\n\n\n{\nCaseClauses[?Yield, ?Await, ?Return]opt\nDefaultClause[?Yield, ?Await, ?Return]\nCaseClauses[?Yield, ?Await, ?Return]opt\n}\n\n\n\nCaseClauses[Yield, Await, Return] : \nCaseClause[?Yield, ?Await, ?Return]\n\n\nCaseClauses[?Yield, ?Await, ?Return]\nCaseClause[?Yield, ?Await, ?Return]\n\n\n\nCaseClause[Yield, Await, Return] : \ncase\nExpression[+In, ?Yield, ?Await]\n:\nStatementList[?Yield, ?Await, ?Return]opt\n\n\n\nDefaultClause[Yield, Await, Return] : \ndefault\n:\nStatementList[?Yield, ?Await, ?Return]opt\n\n\n\n\n14.12.1 Static Semantics: Early Errors\n\nSwitchStatement : \nswitch\n(\nExpression\n)\nCaseBlock\n\n\n\n\n\n          It is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any duplicate entries.\n        \n\n          It is a Syntax Error if any element of the LexicallyDeclaredNames of CaseBlock also occurs in the VarDeclaredNames of CaseBlock.\n        \n\n\n\n14.12.2 Runtime Semantics: CaseBlockEvaluation\nThe syntax-directed operation CaseBlockEvaluation takes argument input and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nCaseBlock : \n{\n}\n\n\n\n1. Return undefined.\n\nCaseBlock : \n{\nCaseClauses\n}\n\n\n\n1. Let V be undefined.2. Let A be the List of CaseClause items in CaseClauses, in source text order.3. Let found be false.4. For each CaseClause C of A, doa. If found is false, theni. Set found to ?\u00a0CaseClauseIsSelected(C, input).b. If found is true, theni. Let R be the result of evaluating C.ii. If R.[[Value]] is not empty, set V to R.[[Value]].iii. If R is an abrupt completion, return ?\u00a0UpdateEmpty(R, V).5. Return V.\n\nCaseBlock : \n{\nCaseClausesopt\nDefaultClause\nCaseClausesopt\n}\n\n\n\n1. Let V be undefined.2. If the first CaseClauses is present, thena. Let A be the List of CaseClause items in the first CaseClauses, in source text order.3. Else,a. Let A be a new empty List.4. Let found be false.5. For each CaseClause C of A, doa. If found is false, theni. Set found to ?\u00a0CaseClauseIsSelected(C, input).b. If found is true, theni. Let R be the result of evaluating C.ii. If R.[[Value]] is not empty, set V to R.[[Value]].iii. If R is an abrupt completion, return ?\u00a0UpdateEmpty(R, V).6. Let foundInB be false.7. If the second CaseClauses is present, thena. Let B be the List of CaseClause items in the second CaseClauses, in source text order.8. Else,a. Let B be a new empty List.9. If found is false, thena. For each CaseClause C of B, doi. If foundInB is false, then1. Set foundInB to ?\u00a0CaseClauseIsSelected(C, input).ii. If foundInB is true, then1. Let R be the result of evaluating CaseClause C.2. If R.[[Value]] is not empty, set V to R.[[Value]].3. If R is an abrupt completion, return ?\u00a0UpdateEmpty(R, V).10. If foundInB is true, return V.11. Let R be the result of evaluating DefaultClause.12. If R.[[Value]] is not empty, set V to R.[[Value]].13. If R is an abrupt completion, return ?\u00a0UpdateEmpty(R, V).14. NOTE: The following is another complete iteration of the second CaseClauses.15. For each CaseClause C of B, doa. Let R be the result of evaluating CaseClause C.b. If R.[[Value]] is not empty, set V to R.[[Value]].c. If R is an abrupt completion, return ?\u00a0UpdateEmpty(R, V).16. Return V.\n\n\n14.12.3 CaseClauseIsSelected ( C, input )\nThe abstract operation CaseClauseIsSelected takes arguments C (a CaseClause Parse Node) and input (an ECMAScript language value) and returns either a normal completion containing a Boolean or an abrupt completion. It determines whether C matches input. It performs the following steps when called:\n1. Assert: C is an instance of the production \nCaseClause : \ncase\nExpression\n:\nStatementListopt\n\n\n.2. Let exprRef be the result of evaluating the Expression of C.3. Let clauseSelector be ?\u00a0GetValue(exprRef).4. Return IsStrictlyEqual(input, clauseSelector).\nNote\nThis operation does not execute C's StatementList (if any). The CaseBlock algorithm uses its return value to determine which StatementList to start executing.\n\n\n\n14.12.4 Runtime Semantics: Evaluation\n\nSwitchStatement : \nswitch\n(\nExpression\n)\nCaseBlock\n\n\n\n1. Let exprRef be the result of evaluating Expression.2. Let switchValue be ?\u00a0GetValue(exprRef).3. Let oldEnv be the running execution context's LexicalEnvironment.4. Let blockEnv be NewDeclarativeEnvironment(oldEnv).5. Perform BlockDeclarationInstantiation(CaseBlock, blockEnv).6. Set the running execution context's LexicalEnvironment to blockEnv.7. Let R be Completion(CaseBlockEvaluation of CaseBlock with argument switchValue).8. Set the running execution context's LexicalEnvironment to oldEnv.9. Return R.\nNote\nNo matter how control leaves the SwitchStatement the LexicalEnvironment is always restored to its former state.\n\n\nCaseClause : \ncase\nExpression\n:\n\n\n\n1. Return empty.\n\nCaseClause : \ncase\nExpression\n:\nStatementList\n\n\n\n1. Return the result of evaluating StatementList.\n\nDefaultClause : \ndefault\n:\n\n\n\n1. Return empty.\n\nDefaultClause : \ndefault\n:\nStatementList\n\n\n\n1. Return the result of evaluating StatementList.\n\n\n\n14.13 Labelled Statements\nSyntax\n\nLabelledStatement[Yield, Await, Return] : \nLabelIdentifier[?Yield, ?Await]\n:\nLabelledItem[?Yield, ?Await, ?Return]\n\n\n\nLabelledItem[Yield, Await, Return] : \nStatement[?Yield, ?Await, ?Return]\n\n\nFunctionDeclaration[?Yield, ?Await, ~Default]\n\n\n\nNote\nA Statement may be prefixed by a label. Labelled statements are only used in conjunction with labelled break and continue statements. ECMAScript has no goto statement. A Statement can be part of a LabelledStatement, which itself can be part of a LabelledStatement,\n and so on. The labels introduced this way are collectively referred to \nas the \u201ccurrent label set\u201d when describing the semantics of individual \nstatements.\n\n\n14.13.1 Static Semantics: Early Errors\n\nLabelledItem : FunctionDeclaration\n\n\n\n\n          It is a Syntax Error if any source text is matched by this production.\n        \n\nNote\nAn alternative definition for this rule is provided in B.3.1.\n\n\n\n14.13.2 Static Semantics: IsLabelledFunction ( stmt )\nThe abstract operation IsLabelledFunction takes argument stmt and returns a Boolean. It performs the following steps when called:\n1. If stmt is not a LabelledStatement, return false.2. Let item be the LabelledItem of stmt.3. If item is \nLabelledItem : FunctionDeclaration\n\n , return true.4. Let subStmt be the Statement of item.5. Return IsLabelledFunction(subStmt).\n\n\n14.13.3 Runtime Semantics: Evaluation\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Return ?\u00a0LabelledEvaluation of this LabelledStatement with argument \u00ab \u00bb.\n\n\n14.13.4 Runtime Semantics: LabelledEvaluation\nThe syntax-directed operation LabelledEvaluation takes argument labelSet and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nBreakableStatement : IterationStatement\n\n\n1. Let stmtResult be Completion(LoopEvaluation of IterationStatement with argument labelSet).2. If stmtResult.[[Type]] is break, thena. If stmtResult.[[Target]] is empty, theni. If stmtResult.[[Value]] is empty, set stmtResult to NormalCompletion(undefined).ii. Else, set stmtResult to NormalCompletion(stmtResult.[[Value]]).3. Return ?\u00a0stmtResult.\n\nBreakableStatement : SwitchStatement\n\n\n1. Let stmtResult be the result of evaluating SwitchStatement.2. If stmtResult.[[Type]] is break, thena. If stmtResult.[[Target]] is empty, theni. If stmtResult.[[Value]] is empty, set stmtResult to NormalCompletion(undefined).ii. Else, set stmtResult to NormalCompletion(stmtResult.[[Value]]).3. Return ?\u00a0stmtResult.\nNote 1\nA BreakableStatement is one that can be exited via an unlabelled BreakStatement.\n\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Let label be the StringValue of LabelIdentifier.2. Let newLabelSet be the list-concatenation of labelSet and \u00ab label \u00bb.3. Let stmtResult be Completion(LabelledEvaluation of LabelledItem with argument newLabelSet).4. If stmtResult.[[Type]] is break and SameValue(stmtResult.[[Target]], label) is true, thena. Set stmtResult to NormalCompletion(stmtResult.[[Value]]).5. Return ?\u00a0stmtResult.\n\nLabelledItem : FunctionDeclaration\n\n\n1. Return the result of evaluating FunctionDeclaration.\n\nStatement : \nBlockStatement\n\n\nVariableStatement\n\n\nEmptyStatement\n\n\nExpressionStatement\n\n\nIfStatement\n\n\nContinueStatement\n\n\nBreakStatement\n\n\nReturnStatement\n\n\nWithStatement\n\n\nThrowStatement\n\n\nTryStatement\n\n\nDebuggerStatement\n\n\n\n1. Return the result of evaluating Statement.\nNote 2\nThe only two productions of Statement which have special semantics for LabelledEvaluation are BreakableStatement and LabelledStatement.\n\n\n\n\n14.14 The throw Statement\nSyntax\n\nThrowStatement[Yield, Await] : \nthrow\n[no LineTerminator here]\nExpression[+In, ?Yield, ?Await]\n;\n\n\n\n\n14.14.1 Runtime Semantics: Evaluation\n\nThrowStatement : \nthrow\nExpression\n;\n\n\n\n1. Let exprRef be the result of evaluating Expression.2. Let exprValue be ?\u00a0GetValue(exprRef).3. Return ThrowCompletion(exprValue).\n\n\n\n14.15 The try Statement\nSyntax\n\nTryStatement[Yield, Await, Return] : \ntry\nBlock[?Yield, ?Await, ?Return]\nCatch[?Yield, ?Await, ?Return]\n\n\ntry\nBlock[?Yield, ?Await, ?Return]\nFinally[?Yield, ?Await, ?Return]\n\n\ntry\nBlock[?Yield, ?Await, ?Return]\nCatch[?Yield, ?Await, ?Return]\nFinally[?Yield, ?Await, ?Return]\n\n\n\nCatch[Yield, Await, Return] : \ncatch\n(\nCatchParameter[?Yield, ?Await]\n)\nBlock[?Yield, ?Await, ?Return]\n\n\ncatch\nBlock[?Yield, ?Await, ?Return]\n\n\n\nFinally[Yield, Await, Return] : \nfinally\nBlock[?Yield, ?Await, ?Return]\n\n\n\nCatchParameter[Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\n\n\nBindingPattern[?Yield, ?Await]\n\n\n\nNote\nThe try statement encloses a block of code in which an exceptional condition can occur, such as a runtime error or a throw statement. The catch clause provides the exception-handling code. When a catch clause catches an exception, its CatchParameter is bound to that exception.\n\n\n14.15.1 Static Semantics: Early Errors\n\nCatch : \ncatch\n(\nCatchParameter\n)\nBlock\n\n\n\n\n\n          It is a Syntax Error if BoundNames of CatchParameter contains any duplicate elements.\n        \n\n          It is a Syntax Error if any element of the BoundNames of CatchParameter also occurs in the LexicallyDeclaredNames of Block.\n        \n\n          It is a Syntax Error if any element of the BoundNames of CatchParameter also occurs in the VarDeclaredNames of Block.\n        \n\nNote\nAn alternative static semantics for this production is given in B.3.4.\n\n\n\n14.15.2 Runtime Semantics: CatchClauseEvaluation\nThe syntax-directed operation CatchClauseEvaluation takes argument thrownValue and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nCatch : \ncatch\n(\nCatchParameter\n)\nBlock\n\n\n\n1. Let oldEnv be the running execution context's LexicalEnvironment.2. Let catchEnv be NewDeclarativeEnvironment(oldEnv).3. For each element argName of the BoundNames of CatchParameter, doa. Perform !\u00a0catchEnv.CreateMutableBinding(argName, false).4. Set the running execution context's LexicalEnvironment to catchEnv.5. Let status be Completion(BindingInitialization of CatchParameter with arguments thrownValue and catchEnv).6. If status is an abrupt completion, thena. Set the running execution context's LexicalEnvironment to oldEnv.b. Return ?\u00a0status.7. Let B be the result of evaluating Block.8. Set the running execution context's LexicalEnvironment to oldEnv.9. Return ?\u00a0B.\n\nCatch : \ncatch\nBlock\n\n\n\n1. Return the result of evaluating Block.\nNote\nNo matter how control leaves the Block the LexicalEnvironment is always restored to its former state.\n\n\n\n14.15.3 Runtime Semantics: Evaluation\n\nTryStatement : \ntry\nBlock\nCatch\n\n\n\n1. Let B be the result of evaluating Block.2. If B.[[Type]] is throw, let C be Completion(CatchClauseEvaluation of Catch with argument B.[[Value]]).3. Else, let C be B.4. Return ?\u00a0UpdateEmpty(C, undefined).\n\nTryStatement : \ntry\nBlock\nFinally\n\n\n\n1. Let B be the result of evaluating Block.2. Let F be the result of evaluating Finally.3. If F.[[Type]] is normal, set F to B.4. Return ?\u00a0UpdateEmpty(F, undefined).\n\nTryStatement : \ntry\nBlock\nCatch\nFinally\n\n\n\n1. Let B be the result of evaluating Block.2. If B.[[Type]] is throw, let C be Completion(CatchClauseEvaluation of Catch with argument B.[[Value]]).3. Else, let C be B.4. Let F be the result of evaluating Finally.5. If F.[[Type]] is normal, set F to C.6. Return ?\u00a0UpdateEmpty(F, undefined).\n\n\n\n14.16 The debugger Statement\nSyntax\n\nDebuggerStatement : \ndebugger\n;\n\n\n\n\n14.16.1 Runtime Semantics: Evaluation\nNote\nEvaluating a DebuggerStatement\n may allow an implementation to cause a breakpoint when run under a \ndebugger. If a debugger is not present or active this statement has no \nobservable effect.\n\n\nDebuggerStatement : \ndebugger\n;\n\n\n\n1. If an implementation-defined debugging facility is available and enabled, thena. Perform an implementation-defined debugging action.b. Return a new implementation-defined Completion Record.2. Else,a. Return empty.\n\n\n\n\n15 ECMAScript Language: Functions and Classes\nNote\nVarious ECMAScript language elements cause the creation of ECMAScript function objects (10.2). Evaluation of such functions starts with the execution of their [[Call]] internal method (10.2.1).\n\n\n15.1 Parameter Lists\nSyntax\n\nUniqueFormalParameters[Yield, Await] : \nFormalParameters[?Yield, ?Await]\n\n\n\nFormalParameters[Yield, Await] : \n[empty]\n\n\nFunctionRestParameter[?Yield, ?Await]\n\n\nFormalParameterList[?Yield, ?Await]\n\n\nFormalParameterList[?Yield, ?Await]\n,\n\n\nFormalParameterList[?Yield, ?Await]\n,\nFunctionRestParameter[?Yield, ?Await]\n\n\n\nFormalParameterList[Yield, Await] : \nFormalParameter[?Yield, ?Await]\n\n\nFormalParameterList[?Yield, ?Await]\n,\nFormalParameter[?Yield, ?Await]\n\n\n\nFunctionRestParameter[Yield, Await] : \nBindingRestElement[?Yield, ?Await]\n\n\n\nFormalParameter[Yield, Await] : \nBindingElement[?Yield, ?Await]\n\n\n\n\n15.1.1 Static Semantics: Early Errors\n\nUniqueFormalParameters : FormalParameters\n\n\n\n\n          It is a Syntax Error if BoundNames of FormalParameters contains any duplicate elements.\n        \n\n\nFormalParameters : FormalParameterList\n\n\n\n\n          It is a Syntax Error if IsSimpleParameterList of FormalParameterList is false and BoundNames of FormalParameterList contains any duplicate elements.\n        \n\nNote\nMultiple occurrences of the same BindingIdentifier in a FormalParameterList is only allowed for functions which have simple parameter lists and which are not defined in strict mode code.\n\n\n\n15.1.2 Static Semantics: ContainsExpression\nThe syntax-directed operation ContainsExpression takes no \narguments and returns a Boolean. It is defined piecewise over the \nfollowing productions:\n\nObjectBindingPattern : \n{\n}\n\n\n{\nBindingRestProperty\n}\n\n\n\n1. Return false.\n\nObjectBindingPattern : \n{\nBindingPropertyList\n,\nBindingRestProperty\n}\n\n\n\n1. Return ContainsExpression of BindingPropertyList.\n\nArrayBindingPattern : \n[\nElisionopt\n]\n\n\n\n1. Return false.\n\nArrayBindingPattern : \n[\nElisionopt\nBindingRestElement\n]\n\n\n\n1. Return ContainsExpression of BindingRestElement.\n\nArrayBindingPattern : \n[\nBindingElementList\n,\nElisionopt\n]\n\n\n\n1. Return ContainsExpression of BindingElementList.\n\nArrayBindingPattern : \n[\nBindingElementList\n,\nElisionopt\nBindingRestElement\n]\n\n\n\n1. Let has be ContainsExpression of BindingElementList.2. If has is true, return true.3. Return ContainsExpression of BindingRestElement.\n\nBindingPropertyList : \nBindingPropertyList\n,\nBindingProperty\n\n\n\n1. Let has be ContainsExpression of BindingPropertyList.2. If has is true, return true.3. Return ContainsExpression of BindingProperty.\n\nBindingElementList : \nBindingElementList\n,\nBindingElisionElement\n\n\n\n1. Let has be ContainsExpression of BindingElementList.2. If has is true, return true.3. Return ContainsExpression of BindingElisionElement.\n\nBindingElisionElement : \nElisionopt\nBindingElement\n\n\n\n1. Return ContainsExpression of BindingElement.\n\nBindingProperty : \nPropertyName\n:\nBindingElement\n\n\n\n1. Let has be IsComputedPropertyKey of PropertyName.2. If has is true, return true.3. Return ContainsExpression of BindingElement.\n\nBindingElement : \nBindingPattern\nInitializer\n\n\n\n1. Return true.\n\nSingleNameBinding : BindingIdentifier\n\n\n1. Return false.\n\nSingleNameBinding : \nBindingIdentifier\nInitializer\n\n\n\n1. Return true.\n\nBindingRestElement : \n...\nBindingIdentifier\n\n\n\n1. Return false.\n\nBindingRestElement : \n...\nBindingPattern\n\n\n\n1. Return ContainsExpression of BindingPattern.\n\nFormalParameters : [empty]\n\n\n1. Return false.\n\nFormalParameters : \nFormalParameterList\n,\nFunctionRestParameter\n\n\n\n1. If ContainsExpression of FormalParameterList is true, return true.2. Return ContainsExpression of FunctionRestParameter.\n\nFormalParameterList : \nFormalParameterList\n,\nFormalParameter\n\n\n\n1. If ContainsExpression of FormalParameterList is true, return true.2. Return ContainsExpression of FormalParameter.\n\nArrowParameters : BindingIdentifier\n\n\n1. Return false.\n\nArrowParameters : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let formals be the ArrowFormalParameters that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return ContainsExpression of formals.\n\nAsyncArrowBindingIdentifier : BindingIdentifier\n\n\n1. Return false.\n\n\n15.1.3 Static Semantics: IsSimpleParameterList\nThe syntax-directed operation IsSimpleParameterList takes no \narguments and returns a Boolean. It is defined piecewise over the \nfollowing productions:\n\nBindingElement : BindingPattern\n\n\n1. Return false.\n\nBindingElement : \nBindingPattern\nInitializer\n\n\n\n1. Return false.\n\nSingleNameBinding : BindingIdentifier\n\n\n1. Return true.\n\nSingleNameBinding : \nBindingIdentifier\nInitializer\n\n\n\n1. Return false.\n\nFormalParameters : [empty]\n\n\n1. Return true.\n\nFormalParameters : FunctionRestParameter\n\n\n1. Return false.\n\nFormalParameters : \nFormalParameterList\n,\nFunctionRestParameter\n\n\n\n1. Return false.\n\nFormalParameterList : \nFormalParameterList\n,\nFormalParameter\n\n\n\n1. If IsSimpleParameterList of FormalParameterList is false, return false.2. Return IsSimpleParameterList of FormalParameter.\n\nFormalParameter : BindingElement\n\n\n1. Return IsSimpleParameterList of BindingElement.\n\nArrowParameters : BindingIdentifier\n\n\n1. Return true.\n\nArrowParameters : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let formals be the ArrowFormalParameters that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return IsSimpleParameterList of formals.\n\nAsyncArrowBindingIdentifier : BindingIdentifier\n\n\n1. Return true.\n\nCoverCallExpressionAndAsyncArrowHead : \nMemberExpression\nArguments\n\n\n\n1. Let head be the AsyncArrowHead that is covered by CoverCallExpressionAndAsyncArrowHead.2. Return IsSimpleParameterList of head.\n\n\n15.1.4 Static Semantics: HasInitializer\nThe syntax-directed operation HasInitializer takes no arguments\n and returns a Boolean. It is defined piecewise over the following \nproductions:\n\nBindingElement : BindingPattern\n\n\n1. Return false.\n\nBindingElement : \nBindingPattern\nInitializer\n\n\n\n1. Return true.\n\nSingleNameBinding : BindingIdentifier\n\n\n1. Return false.\n\nSingleNameBinding : \nBindingIdentifier\nInitializer\n\n\n\n1. Return true.\n\nFormalParameterList : \nFormalParameterList\n,\nFormalParameter\n\n\n\n1. If HasInitializer of FormalParameterList is true, return true.2. Return HasInitializer of FormalParameter.\n\n\n15.1.5 Static Semantics: ExpectedArgumentCount\nThe syntax-directed operation ExpectedArgumentCount takes no arguments and returns an integer. It is defined piecewise over the following productions:\n\nFormalParameters : \n[empty]\n\n\nFunctionRestParameter\n\n\n\n1. Return 0.\n\nFormalParameters : \nFormalParameterList\n,\nFunctionRestParameter\n\n\n\n1. Return ExpectedArgumentCount of FormalParameterList.\nNote\nThe ExpectedArgumentCount of a FormalParameterList is the number of FormalParameters to the left of either the rest parameter or the first FormalParameter with an Initializer. A FormalParameter\n without an initializer is allowed after the first parameter with an \ninitializer but such parameters are considered to be optional with undefined as their default value.\n\n\nFormalParameterList : FormalParameter\n\n\n1. If HasInitializer of FormalParameter is true, return 0.2. Return 1.\n\nFormalParameterList : \nFormalParameterList\n,\nFormalParameter\n\n\n\n1. Let count be ExpectedArgumentCount of FormalParameterList.2. If HasInitializer of FormalParameterList is true or HasInitializer of FormalParameter is true, return count.3. Return count + 1.\n\nArrowParameters : BindingIdentifier\n\n\n1. Return 1.\n\nArrowParameters : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let formals be the ArrowFormalParameters that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return ExpectedArgumentCount of formals.\n\nPropertySetParameterList : FormalParameter\n\n\n1. If HasInitializer of FormalParameter is true, return 0.2. Return 1.\n\nAsyncArrowBindingIdentifier : BindingIdentifier\n\n\n1. Return 1.\n\n\n\n15.2 Function Definitions\nSyntax\n\nFunctionDeclaration[Yield, Await, Default] : \nfunction\nBindingIdentifier[?Yield, ?Await]\n(\nFormalParameters[~Yield, ~Await]\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n[+Default]\nfunction\n(\nFormalParameters[~Yield, ~Await]\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\n\nFunctionExpression : \nfunction\nBindingIdentifier[~Yield, ~Await]opt\n(\nFormalParameters[~Yield, ~Await]\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\n\nFunctionBody[Yield, Await] : \nFunctionStatementList[?Yield, ?Await]\n\n\n\nFunctionStatementList[Yield, Await] : \nStatementList[?Yield, ?Await, +Return]opt\n\n\n\n\n15.2.1 Static Semantics: Early Errors\n\nFunctionDeclaration : \nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\nFunctionExpression : \nfunction\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n\n\n          If the source text matched by FormalParameters is strict mode code, the Early Error rules for \nUniqueFormalParameters : FormalParameters\n\n are applied.\n        \n\n          If BindingIdentifier is present and the source text matched by BindingIdentifier is strict mode code, it is a Syntax Error if the StringValue of BindingIdentifier is \"eval\" or \"arguments\".\n        \n\n          It is a Syntax Error if FunctionBodyContainsUseStrict of FunctionBody is true and IsSimpleParameterList of FormalParameters is false.\n        \n\n          It is a Syntax Error if any element of the BoundNames of FormalParameters also occurs in the LexicallyDeclaredNames of FunctionBody.\n        \n\n          It is a Syntax Error if FormalParameters Contains SuperProperty is true.\n        \n\n          It is a Syntax Error if FunctionBody Contains SuperProperty is true.\n        \n\n          It is a Syntax Error if FormalParameters Contains SuperCall is true.\n        \n\n          It is a Syntax Error if FunctionBody Contains SuperCall is true.\n        \n\nNote\nThe LexicallyDeclaredNames of a FunctionBody does not include identifiers bound using var or function declarations.\n\n\nFunctionBody : FunctionStatementList\n\n\n\n\n          It is a Syntax Error if the LexicallyDeclaredNames of FunctionStatementList contains any duplicate entries.\n        \n\n          It is a Syntax Error if any element of the LexicallyDeclaredNames of FunctionStatementList also occurs in the VarDeclaredNames of FunctionStatementList.\n        \n\n          It is a Syntax Error if ContainsDuplicateLabels of FunctionStatementList with argument \u00ab \u00bb is true.\n        \n\n          It is a Syntax Error if ContainsUndefinedBreakTarget of FunctionStatementList with argument \u00ab \u00bb is true.\n        \n\n          It is a Syntax Error if ContainsUndefinedContinueTarget of FunctionStatementList with arguments \u00ab \u00bb and \u00ab \u00bb is true.\n        \n\n\n\n15.2.2 Static Semantics: FunctionBodyContainsUseStrict\nThe syntax-directed operation FunctionBodyContainsUseStrict \ntakes no arguments and returns a Boolean. It is defined piecewise over \nthe following productions:\n\nFunctionBody : FunctionStatementList\n\n\n1. If the Directive Prologue of FunctionBody contains a Use Strict Directive, return true; otherwise, return false.\n\n\n15.2.3 Runtime Semantics: EvaluateFunctionBody\nThe syntax-directed operation EvaluateFunctionBody takes arguments functionObject and argumentsList (a List) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nFunctionBody : FunctionStatementList\n\n\n1. Perform ?\u00a0FunctionDeclarationInstantiation(functionObject, argumentsList).2. Return the result of evaluating FunctionStatementList.\n\n\n15.2.4 Runtime Semantics: InstantiateOrdinaryFunctionObject\nThe syntax-directed operation InstantiateOrdinaryFunctionObject takes arguments env and privateEnv and returns a function object. It is defined piecewise over the following productions:\n\nFunctionDeclaration : \nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Let name be StringValue of BindingIdentifier.2. Let sourceText be the source text matched by FunctionDeclaration.3. Let F be OrdinaryFunctionCreate(%Function.prototype%, sourceText, FormalParameters, FunctionBody, non-lexical-this, env, privateEnv).4. Perform SetFunctionName(F, name).5. Perform MakeConstructor(F).6. Return F.\n\nFunctionDeclaration : \nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Let sourceText be the source text matched by FunctionDeclaration.2. Let F be OrdinaryFunctionCreate(%Function.prototype%, sourceText, FormalParameters, FunctionBody, non-lexical-this, env, privateEnv).3. Perform SetFunctionName(F, \"default\").4. Perform MakeConstructor(F).5. Return F.\nNote\nAn anonymous FunctionDeclaration can only occur as part of an export default declaration, and its function code is therefore always strict mode code.\n\n\n\n15.2.5 Runtime Semantics: InstantiateOrdinaryFunctionExpression\nThe syntax-directed operation InstantiateOrdinaryFunctionExpression takes optional argument name and returns a function object. It is defined piecewise over the following productions:\n\nFunctionExpression : \nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. If name is not present, set name to \"\".2. Let env be the LexicalEnvironment of the running execution context.3. Let privateEnv be the running execution context's PrivateEnvironment.4. Let sourceText be the source text matched by FunctionExpression.5. Let closure be OrdinaryFunctionCreate(%Function.prototype%, sourceText, FormalParameters, FunctionBody, non-lexical-this, env, privateEnv).6. Perform SetFunctionName(closure, name).7. Perform MakeConstructor(closure).8. Return closure.\n\nFunctionExpression : \nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Assert: name is not present.2. Set name to StringValue of BindingIdentifier.3. Let outerEnv be the running execution context's LexicalEnvironment.4. Let funcEnv be NewDeclarativeEnvironment(outerEnv).5. Perform funcEnv.CreateImmutableBinding(name, false).6. Let privateEnv be the running execution context's PrivateEnvironment.7. Let sourceText be the source text matched by FunctionExpression.8. Let closure be OrdinaryFunctionCreate(%Function.prototype%, sourceText, FormalParameters, FunctionBody, non-lexical-this, funcEnv, privateEnv).9. Perform SetFunctionName(closure, name).10. Perform MakeConstructor(closure).11. Perform !\u00a0funcEnv.InitializeBinding(name, closure).12. Return closure.\nNote\nThe BindingIdentifier in a FunctionExpression can be referenced from inside the FunctionExpression's FunctionBody to allow the function to call itself recursively. However, unlike in a FunctionDeclaration, the BindingIdentifier in a FunctionExpression cannot be referenced from and does not affect the scope enclosing the FunctionExpression.\n\n\n\n15.2.6 Runtime Semantics: Evaluation\n\nFunctionDeclaration : \nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Return empty.\nNote 1\nAn alternative semantics is provided in B.3.2.\n\n\nFunctionDeclaration : \nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Return empty.\n\nFunctionExpression : \nfunction\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Return InstantiateOrdinaryFunctionExpression of FunctionExpression.\nNote 2\nA \"prototype\" property is automatically created for every function defined using a FunctionDeclaration or FunctionExpression, to allow for the possibility that the function will be used as a constructor.\n\n\nFunctionStatementList : [empty]\n\n\n1. Return undefined.\n\n\n\n15.3 Arrow Function Definitions\nSyntax\n\nArrowFunction[In, Yield, Await] : \nArrowParameters[?Yield, ?Await]\n[no LineTerminator here]\n=>\nConciseBody[?In]\n\n\n\nArrowParameters[Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\n\n\nCoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]\n\n\n\nConciseBody[In] : \n[lookahead \u2260 {]\nExpressionBody[?In, ~Await]\n\n\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\n\nExpressionBody[In, Await] : \nAssignmentExpression[?In, ~Yield, ?Await]\n\n\n\nSupplemental Syntax\n\n      When processing an instance of the production\n\nArrowParameters[Yield, Await] : CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]\n\n\n      the interpretation of CoverParenthesizedExpressionAndArrowParameterList is refined using the following grammar:\n    \n\nArrowFormalParameters[Yield, Await] : \n(\nUniqueFormalParameters[?Yield, ?Await]\n)\n\n\n\n\n15.3.1 Static Semantics: Early Errors\n\nArrowFunction : \nArrowParameters\n=>\nConciseBody\n\n\n\n\n\n          It is a Syntax Error if ArrowParameters Contains YieldExpression is true.\n        \n\n          It is a Syntax Error if ArrowParameters Contains AwaitExpression is true.\n        \n\n          It is a Syntax Error if ConciseBodyContainsUseStrict of ConciseBody is true and IsSimpleParameterList of ArrowParameters is false.\n        \n\n          It is a Syntax Error if any element of the BoundNames of ArrowParameters also occurs in the LexicallyDeclaredNames of ConciseBody.\n        \n\n\nArrowParameters : CoverParenthesizedExpressionAndArrowParameterList\n\n\n\n\nCoverParenthesizedExpressionAndArrowParameterList must cover an ArrowFormalParameters.\n        \n\n\n\n15.3.2 Static Semantics: ConciseBodyContainsUseStrict\nThe syntax-directed operation ConciseBodyContainsUseStrict \ntakes no arguments and returns a Boolean. It is defined piecewise over \nthe following productions:\n\nConciseBody : ExpressionBody\n\n\n1. Return false.\n\nConciseBody : \n{\nFunctionBody\n}\n\n\n\n1. Return FunctionBodyContainsUseStrict of FunctionBody.\n\n\n15.3.3 Runtime Semantics: EvaluateConciseBody\nThe syntax-directed operation EvaluateConciseBody takes arguments functionObject and argumentsList (a List) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nConciseBody : ExpressionBody\n\n\n1. Perform ?\u00a0FunctionDeclarationInstantiation(functionObject, argumentsList).2. Return the result of evaluating ExpressionBody.\n\n\n15.3.4 Runtime Semantics: InstantiateArrowFunctionExpression\nThe syntax-directed operation InstantiateArrowFunctionExpression takes optional argument name and returns a function object. It is defined piecewise over the following productions:\n\nArrowFunction : \nArrowParameters\n=>\nConciseBody\n\n\n\n1. If name is not present, set name to \"\".2. Let env be the LexicalEnvironment of the running execution context.3. Let privateEnv be the running execution context's PrivateEnvironment.4. Let sourceText be the source text matched by ArrowFunction.5. Let closure be OrdinaryFunctionCreate(%Function.prototype%, sourceText, ArrowParameters, ConciseBody, lexical-this, env, privateEnv).6. Perform SetFunctionName(closure, name).7. Return closure.\nNote\nAn ArrowFunction does not define local bindings for arguments, super, this, or new.target. Any reference to arguments, super, this, or new.target within an ArrowFunction\n must resolve to a binding in a lexically enclosing environment. \nTypically this will be the Function Environment of an immediately \nenclosing function. Even though an ArrowFunction may contain references to super, the function object created in step 5 is not made into a method by performing MakeMethod. An ArrowFunction that references super is always contained within a non-ArrowFunction and the necessary state to implement super is accessible via the env that is captured by the function object of the ArrowFunction.\n\n\n\n15.3.5 Runtime Semantics: Evaluation\n\nArrowFunction : \nArrowParameters\n=>\nConciseBody\n\n\n\n1. Return InstantiateArrowFunctionExpression of ArrowFunction.\n\nExpressionBody : AssignmentExpression\n\n\n1. Let exprRef be the result of evaluating AssignmentExpression.2. Let exprValue be ?\u00a0GetValue(exprRef).3. Return Completion Record { [[Type]]: return, [[Value]]: exprValue, [[Target]]: empty }.\n\n\n\n15.4 Method Definitions\nSyntax\n\nMethodDefinition[Yield, Await] : \nClassElementName[?Yield, ?Await]\n(\nUniqueFormalParameters[~Yield, ~Await]\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\nGeneratorMethod[?Yield, ?Await]\n\n\nAsyncMethod[?Yield, ?Await]\n\n\nAsyncGeneratorMethod[?Yield, ?Await]\n\n\nget\nClassElementName[?Yield, ?Await]\n(\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\nset\nClassElementName[?Yield, ?Await]\n(\nPropertySetParameterList\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\n\nPropertySetParameterList : \nFormalParameter[~Yield, ~Await]\n\n\n\n\n15.4.1 Static Semantics: Early Errors\n\nMethodDefinition : \nClassElementName\n(\nUniqueFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n\n\n          It is a Syntax Error if FunctionBodyContainsUseStrict of FunctionBody is true and IsSimpleParameterList of UniqueFormalParameters is false.\n        \n\n          It is a Syntax Error if any element of the BoundNames of UniqueFormalParameters also occurs in the LexicallyDeclaredNames of FunctionBody.\n        \n\n\nMethodDefinition : \nset\nClassElementName\n(\nPropertySetParameterList\n)\n{\nFunctionBody\n}\n\n\n\n\n\n          It is a Syntax Error if BoundNames of PropertySetParameterList contains any duplicate elements.\n        \n\n          It is a Syntax Error if FunctionBodyContainsUseStrict of FunctionBody is true and IsSimpleParameterList of PropertySetParameterList is false.\n        \n\n          It is a Syntax Error if any element of the BoundNames of PropertySetParameterList also occurs in the LexicallyDeclaredNames of FunctionBody.\n        \n\n\n\n15.4.2 Static Semantics: HasDirectSuper\nThe syntax-directed operation HasDirectSuper takes no arguments\n and returns a Boolean. It is defined piecewise over the following \nproductions:\n\nMethodDefinition : \nClassElementName\n(\nUniqueFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. If UniqueFormalParameters Contains SuperCall is true, return true.2. Return FunctionBody Contains SuperCall.\n\nMethodDefinition : \nget\nClassElementName\n(\n)\n{\nFunctionBody\n}\n\n\n\n1. Return FunctionBody Contains SuperCall.\n\nMethodDefinition : \nset\nClassElementName\n(\nPropertySetParameterList\n)\n{\nFunctionBody\n}\n\n\n\n1. If PropertySetParameterList Contains SuperCall is true, return true.2. Return FunctionBody Contains SuperCall.\n\nGeneratorMethod : \n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. If UniqueFormalParameters Contains SuperCall is true, return true.2. Return GeneratorBody Contains SuperCall.\n\nAsyncGeneratorMethod : \nasync\n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. If UniqueFormalParameters Contains SuperCall is true, return true.2. Return AsyncGeneratorBody Contains SuperCall.\n\nAsyncMethod : \nasync\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. If UniqueFormalParameters Contains SuperCall is true, return true.2. Return AsyncFunctionBody Contains SuperCall.\n\n\n15.4.3 Static Semantics: SpecialMethod\nThe syntax-directed operation SpecialMethod takes no arguments \nand returns a Boolean. It is defined piecewise over the following \nproductions:\n\nMethodDefinition : \nClassElementName\n(\nUniqueFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Return false.\n\nMethodDefinition : \nGeneratorMethod\n\n\nAsyncMethod\n\n\nAsyncGeneratorMethod\n\n\nget\nClassElementName\n(\n)\n{\nFunctionBody\n}\n\n\nset\nClassElementName\n(\nPropertySetParameterList\n)\n{\nFunctionBody\n}\n\n\n\n1. Return true.\n\n\n15.4.4 Runtime Semantics: DefineMethod\nThe syntax-directed operation DefineMethod takes argument object and optional argument functionPrototype and returns either a normal completion containing a Record with fields [[Key]] (a property key) and [[Closure]] (a function object) or an abrupt completion. It is defined piecewise over the following productions:\n\nMethodDefinition : \nClassElementName\n(\nUniqueFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Let propKey be the result of evaluating ClassElementName.2. ReturnIfAbrupt(propKey).3. Let env be the running execution context's LexicalEnvironment.4. Let privateEnv be the running execution context's PrivateEnvironment.5. If functionPrototype is present, thena. Let prototype be functionPrototype.6. Else,a. Let prototype be %Function.prototype%.7. Let sourceText be the source text matched by MethodDefinition.8. Let closure be OrdinaryFunctionCreate(prototype, sourceText, UniqueFormalParameters, FunctionBody, non-lexical-this, env, privateEnv).9. Perform MakeMethod(closure, object).10. Return the Record { [[Key]]: propKey, [[Closure]]: closure }.\n\n\n15.4.5 Runtime Semantics: MethodDefinitionEvaluation\nThe syntax-directed operation MethodDefinitionEvaluation takes arguments object and enumerable and returns either a normal completion containing either a PrivateElement or unused, or an abrupt completion. It is defined piecewise over the following productions:\n\nMethodDefinition : \nClassElementName\n(\nUniqueFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\n1. Let methodDef be ?\u00a0DefineMethod of MethodDefinition with argument object.2. Perform SetFunctionName(methodDef.[[Closure]], methodDef.[[Key]]).3. Return DefineMethodProperty(object, methodDef.[[Key]], methodDef.[[Closure]], enumerable).\n\nMethodDefinition : \nget\nClassElementName\n(\n)\n{\nFunctionBody\n}\n\n\n\n1. Let propKey be the result of evaluating ClassElementName.2. ReturnIfAbrupt(propKey).3. Let env be the running execution context's LexicalEnvironment.4. Let privateEnv be the running execution context's PrivateEnvironment.5. Let sourceText be the source text matched by MethodDefinition.6. Let formalParameterList be an instance of the production \nFormalParameters : [empty]\n\n.7. Let closure be OrdinaryFunctionCreate(%Function.prototype%, sourceText, formalParameterList, FunctionBody, non-lexical-this, env, privateEnv).8. Perform MakeMethod(closure, object).9. Perform SetFunctionName(closure, propKey, \"get\").10. If propKey is a Private Name, thena. Return PrivateElement { [[Key]]: propKey, [[Kind]]: accessor, [[Get]]: closure, [[Set]]: undefined }.11. Else,a. Let desc be the PropertyDescriptor { [[Get]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true }.b. Perform ?\u00a0DefinePropertyOrThrow(object, propKey, desc).c. Return unused.\n\nMethodDefinition : \nset\nClassElementName\n(\nPropertySetParameterList\n)\n{\nFunctionBody\n}\n\n\n\n1. Let propKey be the result of evaluating ClassElementName.2. ReturnIfAbrupt(propKey).3. Let env be the running execution context's LexicalEnvironment.4. Let privateEnv be the running execution context's PrivateEnvironment.5. Let sourceText be the source text matched by MethodDefinition.6. Let closure be OrdinaryFunctionCreate(%Function.prototype%, sourceText, PropertySetParameterList, FunctionBody, non-lexical-this, env, privateEnv).7. Perform MakeMethod(closure, object).8. Perform SetFunctionName(closure, propKey, \"set\").9. If propKey is a Private Name, thena. Return PrivateElement { [[Key]]: propKey, [[Kind]]: accessor, [[Get]]: undefined, [[Set]]: closure }.10. Else,a. Let desc be the PropertyDescriptor { [[Set]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true }.b. Perform ?\u00a0DefinePropertyOrThrow(object, propKey, desc).c. Return unused.\n\nGeneratorMethod : \n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Let propKey be the result of evaluating ClassElementName.2. ReturnIfAbrupt(propKey).3. Let env be the running execution context's LexicalEnvironment.4. Let privateEnv be the running execution context's PrivateEnvironment.5. Let sourceText be the source text matched by GeneratorMethod.6. Let closure be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, sourceText, UniqueFormalParameters, GeneratorBody, non-lexical-this, env, privateEnv).7. Perform MakeMethod(closure, object).8. Perform SetFunctionName(closure, propKey).9. Let prototype be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).10. Perform !\u00a0DefinePropertyOrThrow(closure, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).11. Return DefineMethodProperty(object, propKey, closure, enumerable).\n\nAsyncGeneratorMethod : \nasync\n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Let propKey be the result of evaluating ClassElementName.2. ReturnIfAbrupt(propKey).3. Let env be the running execution context's LexicalEnvironment.4. Let privateEnv be the running execution context's PrivateEnvironment.5. Let sourceText be the source text matched by AsyncGeneratorMethod.6. Let closure be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, sourceText, UniqueFormalParameters, AsyncGeneratorBody, non-lexical-this, env, privateEnv).7. Perform MakeMethod(closure, object).8. Perform SetFunctionName(closure, propKey).9. Let prototype be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).10. Perform !\u00a0DefinePropertyOrThrow(closure, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).11. Return DefineMethodProperty(object, propKey, closure, enumerable).\n\nAsyncMethod : \nasync\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Let propKey be the result of evaluating ClassElementName.2. ReturnIfAbrupt(propKey).3. Let env be the LexicalEnvironment of the running execution context.4. Let privateEnv be the running execution context's PrivateEnvironment.5. Let sourceText be the source text matched by AsyncMethod.6. Let closure be OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, UniqueFormalParameters, AsyncFunctionBody, non-lexical-this, env, privateEnv).7. Perform MakeMethod(closure, object).8. Perform SetFunctionName(closure, propKey).9. Return DefineMethodProperty(object, propKey, closure, enumerable).\n\n\n\n15.5 Generator Function Definitions\nSyntax\n\nGeneratorDeclaration[Yield, Await, Default] : \nfunction\n*\nBindingIdentifier[?Yield, ?Await]\n(\nFormalParameters[+Yield, ~Await]\n)\n{\nGeneratorBody\n}\n\n[+Default]\nfunction\n*\n(\nFormalParameters[+Yield, ~Await]\n)\n{\nGeneratorBody\n}\n\n\n\nGeneratorExpression : \nfunction\n*\nBindingIdentifier[+Yield, ~Await]opt\n(\nFormalParameters[+Yield, ~Await]\n)\n{\nGeneratorBody\n}\n\n\n\nGeneratorMethod[Yield, Await] : \n*\nClassElementName[?Yield, ?Await]\n(\nUniqueFormalParameters[+Yield, ~Await]\n)\n{\nGeneratorBody\n}\n\n\n\nGeneratorBody : \nFunctionBody[+Yield, ~Await]\n\n\n\nYieldExpression[In, Await] : \nyield\n\n\nyield\n[no LineTerminator here]\nAssignmentExpression[?In, +Yield, ?Await]\n\n\nyield\n[no LineTerminator here]\n*\nAssignmentExpression[?In, +Yield, ?Await]\n\n\n\nNote 1\nThe syntactic context immediately following yield requires use of the InputElementRegExpOrTemplateTail lexical goal.\n\nNote 2\nYieldExpression cannot be used within the FormalParameters of a generator function because any expressions that are part of FormalParameters are evaluated before the resulting Generator is in a resumable state.\n\nNote 3\nAbstract operations relating to Generators are defined in 27.5.3.\n\n\n15.5.1 Static Semantics: Early Errors\n\nGeneratorMethod : \n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n\n\n          It is a Syntax Error if HasDirectSuper of GeneratorMethod is true.\n        \n\n          It is a Syntax Error if UniqueFormalParameters Contains YieldExpression is true.\n        \n\n          It is a Syntax Error if FunctionBodyContainsUseStrict of GeneratorBody is true and IsSimpleParameterList of UniqueFormalParameters is false.\n        \n\n          It is a Syntax Error if any element of the BoundNames of UniqueFormalParameters also occurs in the LexicallyDeclaredNames of GeneratorBody.\n        \n\n\nGeneratorDeclaration : \nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\nfunction\n*\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nGeneratorExpression : \nfunction\n*\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n\n\n          If the source text matched by FormalParameters is strict mode code, the Early Error rules for \nUniqueFormalParameters : FormalParameters\n\n are applied.\n        \n\n          If BindingIdentifier is present and the source text matched by BindingIdentifier is strict mode code, it is a Syntax Error if the StringValue of BindingIdentifier is \"eval\" or \"arguments\".\n        \n\n          It is a Syntax Error if FunctionBodyContainsUseStrict of GeneratorBody is true and IsSimpleParameterList of FormalParameters is false.\n        \n\n          It is a Syntax Error if any element of the BoundNames of FormalParameters also occurs in the LexicallyDeclaredNames of GeneratorBody.\n        \n\n          It is a Syntax Error if FormalParameters Contains YieldExpression is true.\n        \n\n          It is a Syntax Error if FormalParameters Contains SuperProperty is true.\n        \n\n          It is a Syntax Error if GeneratorBody Contains SuperProperty is true.\n        \n\n          It is a Syntax Error if FormalParameters Contains SuperCall is true.\n        \n\n          It is a Syntax Error if GeneratorBody Contains SuperCall is true.\n        \n\n\n\n15.5.2 Runtime Semantics: EvaluateGeneratorBody\nThe syntax-directed operation EvaluateGeneratorBody takes arguments functionObject and argumentsList (a List) and returns a throw completion or a return completion. It is defined piecewise over the following productions:\n\nGeneratorBody : FunctionBody\n\n\n1. Perform ?\u00a0FunctionDeclarationInstantiation(functionObject, argumentsList).2. Let G be ?\u00a0OrdinaryCreateFromConstructor(functionObject, \"%GeneratorFunction.prototype.prototype%\", \u00ab [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] \u00bb).3. Set G.[[GeneratorBrand]] to empty.4. Perform GeneratorStart(G, FunctionBody).5. Return Completion Record { [[Type]]: return, [[Value]]: G, [[Target]]: empty }.\n\n\n15.5.3 Runtime Semantics: InstantiateGeneratorFunctionObject\nThe syntax-directed operation InstantiateGeneratorFunctionObject takes arguments env and privateEnv and returns a function object. It is defined piecewise over the following productions:\n\nGeneratorDeclaration : \nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Let name be StringValue of BindingIdentifier.2. Let sourceText be the source text matched by GeneratorDeclaration.3. Let F be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, sourceText, FormalParameters, GeneratorBody, non-lexical-this, env, privateEnv).4. Perform SetFunctionName(F, name).5. Let prototype be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).6. Perform !\u00a0DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).7. Return F.\n\nGeneratorDeclaration : \nfunction\n*\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Let sourceText be the source text matched by GeneratorDeclaration.2. Let F be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, sourceText, FormalParameters, GeneratorBody, non-lexical-this, env, privateEnv).3. Perform SetFunctionName(F, \"default\").4. Let prototype be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).5. Perform !\u00a0DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).6. Return F.\nNote\nAn anonymous GeneratorDeclaration can only occur as part of an export default declaration, and its function code is therefore always strict mode code.\n\n\n\n15.5.4 Runtime Semantics: InstantiateGeneratorFunctionExpression\nThe syntax-directed operation InstantiateGeneratorFunctionExpression takes optional argument name and returns a function object. It is defined piecewise over the following productions:\n\nGeneratorExpression : \nfunction\n*\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. If name is not present, set name to \"\".2. Let env be the LexicalEnvironment of the running execution context.3. Let privateEnv be the running execution context's PrivateEnvironment.4. Let sourceText be the source text matched by GeneratorExpression.5. Let closure be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, sourceText, FormalParameters, GeneratorBody, non-lexical-this, env, privateEnv).6. Perform SetFunctionName(closure, name).7. Let prototype be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).8. Perform !\u00a0DefinePropertyOrThrow(closure, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).9. Return closure.\n\nGeneratorExpression : \nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Assert: name is not present.2. Set name to StringValue of BindingIdentifier.3. Let outerEnv be the running execution context's LexicalEnvironment.4. Let funcEnv be NewDeclarativeEnvironment(outerEnv).5. Perform funcEnv.CreateImmutableBinding(name, false).6. Let privateEnv be the running execution context's PrivateEnvironment.7. Let sourceText be the source text matched by GeneratorExpression.8. Let closure be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, sourceText, FormalParameters, GeneratorBody, non-lexical-this, funcEnv, privateEnv).9. Perform SetFunctionName(closure, name).10. Let prototype be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).11. Perform !\u00a0DefinePropertyOrThrow(closure, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).12. Perform !\u00a0funcEnv.InitializeBinding(name, closure).13. Return closure.\nNote\nThe BindingIdentifier in a GeneratorExpression can be referenced from inside the GeneratorExpression's FunctionBody to allow the generator code to call itself recursively. However, unlike in a GeneratorDeclaration, the BindingIdentifier in a GeneratorExpression cannot be referenced from and does not affect the scope enclosing the GeneratorExpression.\n\n\n\n15.5.5 Runtime Semantics: Evaluation\n\nGeneratorExpression : \nfunction\n*\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\n1. Return InstantiateGeneratorFunctionExpression of GeneratorExpression.\n\nYieldExpression : yield\n\n\n1. Return ?\u00a0Yield(undefined).\n\nYieldExpression : \nyield\nAssignmentExpression\n\n\n\n1. Let exprRef be the result of evaluating AssignmentExpression.2. Let value be ?\u00a0GetValue(exprRef).3. Return ?\u00a0Yield(value).\n\nYieldExpression : \nyield\n*\nAssignmentExpression\n\n\n\n1. Let generatorKind be GetGeneratorKind().2. Let exprRef be the result of evaluating AssignmentExpression.3. Let value be ?\u00a0GetValue(exprRef).4. Let iteratorRecord be ?\u00a0GetIterator(value, generatorKind).5. Let iterator be iteratorRecord.[[Iterator]].6. Let received be NormalCompletion(undefined).7. Repeat,a. If received.[[Type]] is normal, theni. Let innerResult be ?\u00a0Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]], \u00ab received.[[Value]] \u00bb).ii. If generatorKind is async, set innerResult to ?\u00a0Await(innerResult).iii. If Type(innerResult) is not Object, throw a TypeError exception.iv. Let done be ?\u00a0IteratorComplete(innerResult).v. If done is true, then1. Return ?\u00a0IteratorValue(innerResult).vi. If generatorKind is async, set received to Completion(AsyncGeneratorYield(? IteratorValue(innerResult))).vii. Else, set received to Completion(GeneratorYield(innerResult)).b. Else if received.[[Type]] is throw, theni. Let throw be ?\u00a0GetMethod(iterator, \"throw\").ii. If throw is not undefined, then1. Let innerResult be ?\u00a0Call(throw, iterator, \u00ab received.[[Value]] \u00bb).2. If generatorKind is async, set innerResult to ?\u00a0Await(innerResult).3. NOTE: Exceptions from the inner iterator throw method are propagated. Normal completions from an inner throw method are processed similarly to an inner next.4. If Type(innerResult) is not Object, throw a TypeError exception.5. Let done be ?\u00a0IteratorComplete(innerResult).6. If done is true, thena. Return ?\u00a0IteratorValue(innerResult).7. If generatorKind is async, set received to Completion(AsyncGeneratorYield(? IteratorValue(innerResult))).8. Else, set received to Completion(GeneratorYield(innerResult)).iii. Else,1. NOTE: If iterator does not have a throw method, this throw is going to terminate the yield* loop. But first we need to give iterator a chance to clean up.2. Let closeCompletion be Completion Record { [[Type]]: normal, [[Value]]: empty, [[Target]]: empty }.3. If generatorKind is async, perform ?\u00a0AsyncIteratorClose(iteratorRecord, closeCompletion).4. Else, perform ?\u00a0IteratorClose(iteratorRecord, closeCompletion).5. NOTE: The next step throws a TypeError to indicate that there was a yield* protocol violation: iterator does not have a throw method.6. Throw a TypeError exception.c. Else,i. Assert: received.[[Type]] is return.ii. Let return be ?\u00a0GetMethod(iterator, \"return\").iii. If return is undefined, then1. If generatorKind is async, set received.[[Value]] to ?\u00a0Await(received.[[Value]]).2. Return ?\u00a0received.iv. Let innerReturnResult be ?\u00a0Call(return, iterator, \u00ab received.[[Value]] \u00bb).v. If generatorKind is async, set innerReturnResult to ?\u00a0Await(innerReturnResult).vi. If Type(innerReturnResult) is not Object, throw a TypeError exception.vii. Let done be ?\u00a0IteratorComplete(innerReturnResult).viii. If done is true, then1. Let value be ?\u00a0IteratorValue(innerReturnResult).2. Return Completion Record { [[Type]]: return, [[Value]]: value, [[Target]]: empty }.ix. If generatorKind is async, set received to Completion(AsyncGeneratorYield(? IteratorValue(innerReturnResult))).x. Else, set received to Completion(GeneratorYield(innerReturnResult)).\n\n\n\n15.6 Async Generator Function Definitions\nSyntax\n\nAsyncGeneratorDeclaration[Yield, Await, Default] : \nasync\n[no LineTerminator here]\nfunction\n*\nBindingIdentifier[?Yield, ?Await]\n(\nFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n[+Default]\nasync\n[no LineTerminator here]\nfunction\n*\n(\nFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorExpression : \nasync\n[no LineTerminator here]\nfunction\n*\nBindingIdentifier[+Yield, +Await]opt\n(\nFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorMethod[Yield, Await] : \nasync\n[no LineTerminator here]\n*\nClassElementName[?Yield, ?Await]\n(\nUniqueFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorBody : \nFunctionBody[+Yield, +Await]\n\n\n\nNote 1\nYieldExpression and AwaitExpression cannot be used within the FormalParameters of an async generator function because any expressions that are part of FormalParameters are evaluated before the resulting AsyncGenerator is in a resumable state.\n\nNote 2\nAbstract operations relating to AsyncGenerators are defined in 27.6.3.\n\n\n15.6.1 Static Semantics: Early Errors\n\nAsyncGeneratorMethod : \nasync\n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n\nIt is a Syntax Error if HasDirectSuper of AsyncGeneratorMethod is true.\nIt is a Syntax Error if UniqueFormalParameters Contains YieldExpression is true.\nIt is a Syntax Error if UniqueFormalParameters Contains AwaitExpression is true.\nIt is a Syntax Error if FunctionBodyContainsUseStrict of AsyncGeneratorBody is true and IsSimpleParameterList of UniqueFormalParameters is false.\nIt is a Syntax Error if any element of the BoundNames of UniqueFormalParameters also occurs in the LexicallyDeclaredNames of AsyncGeneratorBody.\n\n\nAsyncGeneratorDeclaration : \nasync\nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\nasync\nfunction\n*\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorExpression : \nasync\nfunction\n*\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n\nIf the source text matched by FormalParameters is strict mode code, the Early Error rules for \nUniqueFormalParameters : FormalParameters\n\n are applied.\nIf BindingIdentifier is present and the source text matched by BindingIdentifier is strict mode code, it is a Syntax Error if the StringValue of BindingIdentifier is \"eval\" or \"arguments\".\nIt is a Syntax Error if FunctionBodyContainsUseStrict of AsyncGeneratorBody is true and IsSimpleParameterList of FormalParameters is false.\nIt is a Syntax Error if any element of the BoundNames of FormalParameters also occurs in the LexicallyDeclaredNames of AsyncGeneratorBody.\nIt is a Syntax Error if FormalParameters Contains YieldExpression is true.\nIt is a Syntax Error if FormalParameters Contains AwaitExpression is true.\nIt is a Syntax Error if FormalParameters Contains SuperProperty is true.\nIt is a Syntax Error if AsyncGeneratorBody Contains SuperProperty is true.\nIt is a Syntax Error if FormalParameters Contains SuperCall is true.\nIt is a Syntax Error if AsyncGeneratorBody Contains SuperCall is true.\n\n\n\n15.6.2 Runtime Semantics: EvaluateAsyncGeneratorBody\nThe syntax-directed operation EvaluateAsyncGeneratorBody takes arguments functionObject and argumentsList (a List) and returns a throw completion or a return completion. It is defined piecewise over the following productions:\n\nAsyncGeneratorBody : FunctionBody\n\n\n1. Perform ?\u00a0FunctionDeclarationInstantiation(functionObject, argumentsList).2. Let generator be ?\u00a0OrdinaryCreateFromConstructor(functionObject, \"%AsyncGeneratorFunction.prototype.prototype%\", \u00ab [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]], [[GeneratorBrand]] \u00bb).3. Set generator.[[GeneratorBrand]] to empty.4. Perform AsyncGeneratorStart(generator, FunctionBody).5. Return Completion Record { [[Type]]: return, [[Value]]: generator, [[Target]]: empty }.\n\n\n15.6.3 Runtime Semantics: InstantiateAsyncGeneratorFunctionObject\nThe syntax-directed operation InstantiateAsyncGeneratorFunctionObject takes arguments env and privateEnv and returns a function object. It is defined piecewise over the following productions:\n\nAsyncGeneratorDeclaration : \nasync\nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Let name be StringValue of BindingIdentifier.2. Let sourceText be the source text matched by AsyncGeneratorDeclaration.3. Let F be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, sourceText, FormalParameters, AsyncGeneratorBody, non-lexical-this, env, privateEnv).4. Perform SetFunctionName(F, name).5. Let prototype be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).6. Perform !\u00a0DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).7. Return F.\n\nAsyncGeneratorDeclaration : \nasync\nfunction\n*\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Let sourceText be the source text matched by AsyncGeneratorDeclaration.2. Let F be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, sourceText, FormalParameters, AsyncGeneratorBody, non-lexical-this, env, privateEnv).3. Perform SetFunctionName(F, \"default\").4. Let prototype be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).5. Perform !\u00a0DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).6. Return F.\nNote\nAn anonymous AsyncGeneratorDeclaration can only occur as part of an export default declaration.\n\n\n\n15.6.4 Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression\nThe syntax-directed operation InstantiateAsyncGeneratorFunctionExpression takes optional argument name and returns a function object. It is defined piecewise over the following productions:\n\nAsyncGeneratorExpression : \nasync\nfunction\n*\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. If name is not present, set name to \"\".2. Let env be the LexicalEnvironment of the running execution context.3. Let privateEnv be the running execution context's PrivateEnvironment.4. Let sourceText be the source text matched by AsyncGeneratorExpression.5. Let closure be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, sourceText, FormalParameters, AsyncGeneratorBody, non-lexical-this, env, privateEnv).6. Perform SetFunctionName(closure, name).7. Let prototype be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).8. Perform !\u00a0DefinePropertyOrThrow(closure, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).9. Return closure.\n\nAsyncGeneratorExpression : \nasync\nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Assert: name is not present.2. Set name to StringValue of BindingIdentifier.3. Let outerEnv be the running execution context's LexicalEnvironment.4. Let funcEnv be NewDeclarativeEnvironment(outerEnv).5. Perform !\u00a0funcEnv.CreateImmutableBinding(name, false).6. Let privateEnv be the running execution context's PrivateEnvironment.7. Let sourceText be the source text matched by AsyncGeneratorExpression.8. Let closure be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, sourceText, FormalParameters, AsyncGeneratorBody, non-lexical-this, funcEnv, privateEnv).9. Perform SetFunctionName(closure, name).10. Let prototype be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).11. Perform !\u00a0DefinePropertyOrThrow(closure, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).12. Perform !\u00a0funcEnv.InitializeBinding(name, closure).13. Return closure.\nNote\nThe BindingIdentifier in an AsyncGeneratorExpression can be referenced from inside the AsyncGeneratorExpression's AsyncGeneratorBody to allow the generator code to call itself recursively. However, unlike in an AsyncGeneratorDeclaration, the BindingIdentifier in an AsyncGeneratorExpression cannot be referenced from and does not affect the scope enclosing the AsyncGeneratorExpression.\n\n\n\n15.6.5 Runtime Semantics: Evaluation\n\nAsyncGeneratorExpression : \nasync\nfunction\n*\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Return InstantiateAsyncGeneratorFunctionExpression of AsyncGeneratorExpression.\n\n\n\n15.7 Class Definitions\nSyntax\n\nClassDeclaration[Yield, Await, Default] : \nclass\nBindingIdentifier[?Yield, ?Await]\nClassTail[?Yield, ?Await]\n\n[+Default]\nclass\nClassTail[?Yield, ?Await]\n\n\n\nClassExpression[Yield, Await] : \nclass\nBindingIdentifier[?Yield, ?Await]opt\nClassTail[?Yield, ?Await]\n\n\n\nClassTail[Yield, Await] : \nClassHeritage[?Yield, ?Await]opt\n{\nClassBody[?Yield, ?Await]opt\n}\n\n\n\nClassHeritage[Yield, Await] : \nextends\nLeftHandSideExpression[?Yield, ?Await]\n\n\n\nClassBody[Yield, Await] : \nClassElementList[?Yield, ?Await]\n\n\n\nClassElementList[Yield, Await] : \nClassElement[?Yield, ?Await]\n\n\nClassElementList[?Yield, ?Await]\nClassElement[?Yield, ?Await]\n\n\n\nClassElement[Yield, Await] : \nMethodDefinition[?Yield, ?Await]\n\n\nstatic\nMethodDefinition[?Yield, ?Await]\n\n\nFieldDefinition[?Yield, ?Await]\n;\n\n\nstatic\nFieldDefinition[?Yield, ?Await]\n;\n\n\nClassStaticBlock\n\n\n;\n\n\n\nFieldDefinition[Yield, Await] : \nClassElementName[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]opt\n\n\n\nClassElementName[Yield, Await] : \nPropertyName[?Yield, ?Await]\n\n\nPrivateIdentifier\n\n\n\nClassStaticBlock : \nstatic\n{\nClassStaticBlockBody\n}\n\n\n\nClassStaticBlockBody : \nClassStaticBlockStatementList\n\n\n\nClassStaticBlockStatementList : \nStatementList[~Yield, +Await, ~Return]opt\n\n\n\nNote\nA class definition is always strict mode code.\n\n\n15.7.1 Static Semantics: Early Errors\n\nClassTail : \nClassHeritageopt\n{\nClassBody\n}\n\n\n\n\n\nIt is a Syntax Error if ClassHeritage is not present and the following algorithm returns true:\n1. Let constructor be ConstructorMethod of ClassBody.2. If constructor is empty, return false.3. Return HasDirectSuper of constructor.\n\n\n\nClassBody : ClassElementList\n\n\n\n\n          It is a Syntax Error if PrototypePropertyNameList of ClassElementList contains more than one occurrence of \"constructor\".\n        \n\n          It is a Syntax Error if PrivateBoundIdentifiers of ClassElementList\n contains any duplicate entries, unless the name is used once for a \ngetter and once for a setter and in no other entries, and the getter and\n setter are either both static or both non-static.\n        \n\n\nClassElement : MethodDefinition\n\n\n\n\n          It is a Syntax Error if PropName of MethodDefinition is not \"constructor\" and HasDirectSuper of MethodDefinition is true.\n        \n\n          It is a Syntax Error if PropName of MethodDefinition is \"constructor\" and SpecialMethod of MethodDefinition is true.\n        \n\n\nClassElement : \nstatic\nMethodDefinition\n\n\n\n\n\n          It is a Syntax Error if HasDirectSuper of MethodDefinition is true.\n        \n\n          It is a Syntax Error if PropName of MethodDefinition is \"prototype\".\n        \n\n\nClassElement : \nFieldDefinition\n;\n\n\n\n\nIt is a Syntax Error if PropName of FieldDefinition is \"constructor\".\n\n\nClassElement : \nstatic\nFieldDefinition\n;\n\n\n\n\n\n          It is a Syntax Error if PropName of FieldDefinition is \"prototype\" or \"constructor\".\n        \n\n\nFieldDefinition : \nClassElementName\nInitializeropt\n\n\n\n\nIt is a Syntax Error if Initializer is present and ContainsArguments of Initializer is true.\nIt is a Syntax Error if Initializer is present and Initializer Contains SuperCall is true.\n\n\nClassElementName : PrivateIdentifier\n\n\n\nIt is a Syntax Error if StringValue of PrivateIdentifier is \"#constructor\".\n\n\nClassStaticBlockBody : ClassStaticBlockStatementList\n\n\n\n\n          It is a Syntax Error if the LexicallyDeclaredNames of ClassStaticBlockStatementList contains any duplicate entries.\n        \n\n          It is a Syntax Error if any element of the LexicallyDeclaredNames of ClassStaticBlockStatementList also occurs in the VarDeclaredNames of ClassStaticBlockStatementList.\n        \n\n          It is a Syntax Error if ContainsDuplicateLabels of ClassStaticBlockStatementList with argument \u00ab \u00bb is true.\n        \n\n          It is a Syntax Error if ContainsUndefinedBreakTarget of ClassStaticBlockStatementList with argument \u00ab \u00bb is true.\n        \n\n          It is a Syntax Error if ContainsUndefinedContinueTarget of ClassStaticBlockStatementList with arguments \u00ab \u00bb and \u00ab \u00bb is true.\n        \n\n          It is a Syntax Error if ContainsArguments of ClassStaticBlockStatementList is true.\n        \n\n          It is a Syntax Error if ClassStaticBlockStatementList Contains SuperCall is true.\n        \n\n          It is a Syntax Error if ClassStaticBlockStatementList Contains await is true.\n        \n\n\n\n15.7.2 Static Semantics: ClassElementKind\nThe syntax-directed operation ClassElementKind takes no arguments and returns ConstructorMethod, NonConstructorMethod, or empty. It is defined piecewise over the following productions:\n\nClassElement : MethodDefinition\n\n\n1. If PropName of MethodDefinition is \"constructor\", return ConstructorMethod.2. Return NonConstructorMethod.\n\nClassElement : \nstatic\nMethodDefinition\n\n\nFieldDefinition\n;\n\n\nstatic\nFieldDefinition\n;\n\n\n\n1. Return NonConstructorMethod.\n\nClassElement : ClassStaticBlock\n\n\n1. Return NonConstructorMethod.\n\nClassElement : ;\n\n\n1. Return empty.\n\n\n15.7.3 Static Semantics: ConstructorMethod\nThe syntax-directed operation ConstructorMethod takes no arguments and returns a ClassElement Parse Node or empty. It is defined piecewise over the following productions:\n\nClassElementList : ClassElement\n\n\n1. If ClassElementKind of ClassElement is ConstructorMethod, return ClassElement.2. Return empty.\n\nClassElementList : \nClassElementList\nClassElement\n\n\n\n1. Let head be ConstructorMethod of ClassElementList.2. If head is not empty, return head.3. If ClassElementKind of ClassElement is ConstructorMethod, return ClassElement.4. Return empty.\nNote\nEarly Error rules ensure that there is only one method definition named \"constructor\" and that it is not an accessor property or generator definition.\n\n\n\n15.7.4 Static Semantics: IsStatic\nThe syntax-directed operation IsStatic takes no arguments and \nreturns a Boolean. It is defined piecewise over the following \nproductions:\n\nClassElement : MethodDefinition\n\n\n1. Return false.\n\nClassElement : \nstatic\nMethodDefinition\n\n\n\n1. Return true.\n\nClassElement : \nFieldDefinition\n;\n\n\n\n1. Return false.\n\nClassElement : \nstatic\nFieldDefinition\n;\n\n\n\n1. Return true.\n\nClassElement : ClassStaticBlock\n\n\n1. Return true.\n\nClassElement : ;\n\n\n1. Return false.\n\n\n15.7.5 Static Semantics: NonConstructorElements\nThe syntax-directed operation NonConstructorElements takes no arguments and returns a List of ClassElement Parse Nodes. It is defined piecewise over the following productions:\n\nClassElementList : ClassElement\n\n\n1. If ClassElementKind of ClassElement is NonConstructorMethod, thena. Return \u00ab ClassElement \u00bb.2. Return a new empty List.\n\nClassElementList : \nClassElementList\nClassElement\n\n\n\n1. Let list be NonConstructorElements of ClassElementList.2. If ClassElementKind of ClassElement is NonConstructorMethod, thena. Append ClassElement to the end of list.3. Return list.\n\n\n15.7.6 Static Semantics: PrototypePropertyNameList\nThe syntax-directed operation PrototypePropertyNameList takes no arguments and returns a List of property keys. It is defined piecewise over the following productions:\n\nClassElementList : ClassElement\n\n\n1. Let propName be PropName of ClassElement.2. If propName is empty, return a new empty List.3. If IsStatic of ClassElement is true, return a new empty List.4. Return \u00ab propName \u00bb.\n\nClassElementList : \nClassElementList\nClassElement\n\n\n\n1. Let list be PrototypePropertyNameList of ClassElementList.2. Let propName be PropName of ClassElement.3. If propName is empty, return list.4. If IsStatic of ClassElement is true, return list.5. Return the list-concatenation of list and \u00ab propName \u00bb.\n\n\n15.7.7 Static Semantics: AllPrivateIdentifiersValid\nThe syntax-directed operation AllPrivateIdentifiersValid takes argument names and returns a Boolean.\nEvery grammar production alternative in this specification \nwhich is not listed below implicitly has the following default \ndefinition of AllPrivateIdentifiersValid:\n1. For each child node child of this Parse Node, doa. If child is an instance of a nonterminal, theni. If AllPrivateIdentifiersValid of child with argument names is false, return false.2. Return true.\n\nMemberExpression : \nMemberExpression\n.\nPrivateIdentifier\n\n\n\n1. If names contains the StringValue of PrivateIdentifier, thena. Return AllPrivateIdentifiersValid of MemberExpression with argument names.2. Return false.\n\nCallExpression : \nCallExpression\n.\nPrivateIdentifier\n\n\n\n1. If names contains the StringValue of PrivateIdentifier, thena. Return AllPrivateIdentifiersValid of CallExpression with argument names.2. Return false.\n\nOptionalChain : \n?.\nPrivateIdentifier\n\n\n\n1. If names contains the StringValue of PrivateIdentifier, return true.2. Return false.\n\nOptionalChain : \nOptionalChain\n.\nPrivateIdentifier\n\n\n\n1. If names contains the StringValue of PrivateIdentifier, thena. Return AllPrivateIdentifiersValid of OptionalChain with argument names.2. Return false.\n\nClassBody : ClassElementList\n\n\n1. Let newNames be the list-concatenation of names and PrivateBoundIdentifiers of ClassBody.2. Return AllPrivateIdentifiersValid of ClassElementList with argument newNames.\n\nRelationalExpression : \nPrivateIdentifier\nin\nShiftExpression\n\n\n\n1. If names contains the StringValue of PrivateIdentifier, thena. Return AllPrivateIdentifiersValid of ShiftExpression with argument names.2. Return false.\n\n\n15.7.8 Static Semantics: PrivateBoundIdentifiers\nThe syntax-directed operation PrivateBoundIdentifiers takes no arguments and returns a List of Strings. It is defined piecewise over the following productions:\n\nFieldDefinition : \nClassElementName\nInitializeropt\n\n\n\n1. Return PrivateBoundIdentifiers of ClassElementName.\n\nClassElementName : PrivateIdentifier\n\n\n1. Return a List whose sole element is the StringValue of PrivateIdentifier.\n\nClassElementName : \nPropertyName\n\n\n\nClassElement : \nClassStaticBlock\n\n\n;\n\n\n\n1. Return a new empty List.\n\nClassElementList : \nClassElementList\nClassElement\n\n\n\n1. Let names1 be PrivateBoundIdentifiers of ClassElementList.2. Let names2 be PrivateBoundIdentifiers of ClassElement.3. Return the list-concatenation of names1 and names2.\n\nMethodDefinition : \nClassElementName\n(\nUniqueFormalParameters\n)\n{\nFunctionBody\n}\n\n\nget\nClassElementName\n(\n)\n{\nFunctionBody\n}\n\n\nset\nClassElementName\n(\nPropertySetParameterList\n)\n{\nFunctionBody\n}\n\n\n\nGeneratorMethod : \n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nAsyncMethod : \nasync\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncGeneratorMethod : \nasync\n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\n1. Return PrivateBoundIdentifiers of ClassElementName.\n\n\n15.7.9 Static Semantics: ContainsArguments\nThe syntax-directed operation ContainsArguments takes no arguments and returns a Boolean.\nEvery grammar production alternative in this specification \nwhich is not listed below implicitly has the following default \ndefinition of ContainsArguments:\n1. For each child node child of this Parse Node, doa. If child is an instance of a nonterminal, theni. If ContainsArguments of child is true, return true.2. Return false.\n\nIdentifierReference : Identifier\n\n\n1. If the StringValue of Identifier is \"arguments\", return true.2. Return false.\n\nFunctionDeclaration : \nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\nfunction\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\nFunctionExpression : \nfunction\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nFunctionBody\n}\n\n\n\nGeneratorDeclaration : \nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\nfunction\n*\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nGeneratorExpression : \nfunction\n*\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nAsyncGeneratorDeclaration : \nasync\nfunction\n*\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\nasync\nfunction\n*\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorExpression : \nasync\nfunction\n*\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncFunctionDeclaration : \nasync\nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\nasync\nfunction\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncFunctionExpression : \nasync\nfunction\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return false.\n\nMethodDefinition : \nClassElementName\n(\nUniqueFormalParameters\n)\n{\nFunctionBody\n}\n\n\nget\nClassElementName\n(\n)\n{\nFunctionBody\n}\n\n\nset\nClassElementName\n(\nPropertySetParameterList\n)\n{\nFunctionBody\n}\n\n\n\nGeneratorMethod : \n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nGeneratorBody\n}\n\n\n\nAsyncGeneratorMethod : \nasync\n*\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncMethod : \nasync\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return ContainsArguments of ClassElementName.\n\n\n15.7.10 Runtime Semantics: ClassFieldDefinitionEvaluation\nThe syntax-directed operation ClassFieldDefinitionEvaluation takes argument homeObject and returns either a normal completion containing a ClassFieldDefinition Record or an abrupt completion. It is defined piecewise over the following productions:\n\nFieldDefinition : \nClassElementName\nInitializeropt\n\n\n\n1. Let name be the result of evaluating ClassElementName.2. ReturnIfAbrupt(name).3. If Initializeropt is present, thena. Let formalParameterList be an instance of the production \nFormalParameters : [empty]\n\n.b. Let env be the LexicalEnvironment of the running execution context.c. Let privateEnv be the running execution context's PrivateEnvironment.d. Let sourceText be the empty sequence of Unicode code points.e. Let initializer be OrdinaryFunctionCreate(%Function.prototype%, sourceText, formalParameterList, Initializer, non-lexical-this, env, privateEnv).f. Perform MakeMethod(initializer, homeObject).g. Set initializer.[[ClassFieldInitializerName]] to name.4. Else,a. Let initializer be empty.5. Return the ClassFieldDefinition Record { [[Name]]: name, [[Initializer]]: initializer }.\nNote\n        The function created for initializer is never directly accessible to ECMAScript code.\n      \n\n\n15.7.11 Runtime Semantics: ClassStaticBlockDefinitionEvaluation\nThe syntax-directed operation ClassStaticBlockDefinitionEvaluation takes argument homeObject and returns a ClassStaticBlockDefinition Record. It is defined piecewise over the following productions:\n\nClassStaticBlock : \nstatic\n{\nClassStaticBlockBody\n}\n\n\n\n1. Let lex be the running execution context's LexicalEnvironment.2. Let privateEnv be the running execution context's PrivateEnvironment.3. Let sourceText be the empty sequence of Unicode code points.4. Let formalParameters be an instance of the production \nFormalParameters : [empty]\n\n.5. Let bodyFunction be OrdinaryFunctionCreate(%Function.prototype%, sourceText, formalParameters, ClassStaticBlockBody, non-lexical-this, lex, privateEnv).6. Perform MakeMethod(bodyFunction, homeObject).7. Return the ClassStaticBlockDefinition Record { [[BodyFunction]]: bodyFunction }.\nNoteThe function bodyFunction is never directly accessible to ECMAScript code.\n\n\n15.7.12 Runtime Semantics: EvaluateClassStaticBlockBody\nThe syntax-directed operation EvaluateClassStaticBlockBody takes argument functionObject and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It is defined piecewise over the following productions:\n\nClassStaticBlockBody : ClassStaticBlockStatementList\n\n\n1. Perform ?\u00a0FunctionDeclarationInstantiation(functionObject, \u00ab \u00bb).2. Return the result of evaluating ClassStaticBlockStatementList.\n\n\n15.7.13 Runtime Semantics: ClassElementEvaluation\nThe syntax-directed operation ClassElementEvaluation takes argument object and returns either a normal completion containing either a ClassFieldDefinition Record, a ClassStaticBlockDefinition Record, a Private Name, or unused, or an abrupt completion. It is defined piecewise over the following productions:\n\nClassElement : \nFieldDefinition\n;\n\n\nstatic\nFieldDefinition\n;\n\n\n\n1. Return ?\u00a0ClassFieldDefinitionEvaluation of FieldDefinition with argument object.\n\nClassElement : \nMethodDefinition\n\n\nstatic\nMethodDefinition\n\n\n\n1. Return ?\u00a0MethodDefinitionEvaluation of MethodDefinition with arguments object and false.\n\nClassElement : ClassStaticBlock\n\n\n1. Return ClassStaticBlockDefinitionEvaluation of ClassStaticBlock with argument object.\n\nClassElement : ;\n\n\n1. Return unused.\n\n\n15.7.14 Runtime Semantics: ClassDefinitionEvaluation\nThe syntax-directed operation ClassDefinitionEvaluation takes arguments classBinding and className and returns either a normal completion containing a function object or an abrupt completion.\nNote\nFor ease of specification, private methods and accessors are \nincluded alongside private fields in the [[PrivateElements]] slot of \nclass instances. However, any given object has either all or none of the\n private methods and accessors defined by a given class. This feature \nhas been designed so that implementations may choose to implement \nprivate methods and accessors using a strategy which does not require \ntracking each method or accessor individually.\nFor example, an implementation could directly associate instance private methods with their corresponding Private Name and track, for each object, which class constructors have run with that object as their this value. Looking up an instance private method on an object then consists of checking that the class constructor which defines the method has been used to initialize the object, then returning the method associated with the Private Name.\nThis differs from private fields: because field initializers \ncan throw during class instantiation, an individual object may have some\n proper subset of the private fields of a given class, and so private \nfields must in general be tracked individually.\n\nIt is defined piecewise over the following productions:\n\nClassTail : \nClassHeritageopt\n{\nClassBodyopt\n}\n\n\n\n1. Let env be the LexicalEnvironment of the running execution context.2. Let classEnv be NewDeclarativeEnvironment(env).3. If classBinding is not undefined, thena. Perform classEnv.CreateImmutableBinding(classBinding, true).4. Let outerPrivateEnvironment be the running execution context's PrivateEnvironment.5. Let classPrivateEnvironment be NewPrivateEnvironment(outerPrivateEnvironment).6. If ClassBodyopt is present, thena. For each String dn of the PrivateBoundIdentifiers of ClassBodyopt, doi. If classPrivateEnvironment.[[Names]] contains a Private Name whose [[Description]] is dn, then1. Assert: This is only possible for getter/setter pairs.ii. Else,1. Let name be a new Private Name whose [[Description]] value is dn.2. Append name to classPrivateEnvironment.[[Names]].7. If ClassHeritageopt is not present, thena. Let protoParent be %Object.prototype%.b. Let constructorParent be %Function.prototype%.8. Else,a. Set the running execution context's LexicalEnvironment to classEnv.b. NOTE: The running execution context's PrivateEnvironment is outerPrivateEnvironment when evaluating ClassHeritage.c. Let superclassRef be the result of evaluating ClassHeritage.d. Set the running execution context's LexicalEnvironment to env.e. Let superclass be ?\u00a0GetValue(superclassRef).f. If superclass is null, theni. Let protoParent be null.ii. Let constructorParent be %Function.prototype%.g. Else if IsConstructor(superclass) is false, throw a TypeError exception.h. Else,i. Let protoParent be ?\u00a0Get(superclass, \"prototype\").ii. If Type(protoParent) is neither Object nor Null, throw a TypeError exception.iii. Let constructorParent be superclass.9. Let proto be OrdinaryObjectCreate(protoParent).10. If ClassBodyopt is not present, let constructor be empty.11. Else, let constructor be ConstructorMethod of ClassBody.12. Set the running execution context's LexicalEnvironment to classEnv.13. Set the running execution context's PrivateEnvironment to classPrivateEnvironment.14. If constructor is empty, thena. Let defaultConstructor be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:i. Let args be the List of arguments that was passed to this function by [[Call]] or [[Construct]].ii. If NewTarget is undefined, throw a TypeError exception.iii. Let F be the active function object.iv. If F.[[ConstructorKind]] is derived, then1. NOTE: This branch behaves similarly to constructor(...args) { super(...args); }. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the @@iterator method on %Array.prototype%, this function does not.2. Let func be !\u00a0F.[[GetPrototypeOf]]().3. If IsConstructor(func) is false, throw a TypeError exception.4. Let result be ?\u00a0Construct(func, args, NewTarget).v. Else,1. NOTE: This branch behaves similarly to constructor() {}.2. Let result be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%Object.prototype%\").vi. Perform ?\u00a0InitializeInstanceElements(result, F).vii. Return result.b. Let F be CreateBuiltinFunction(defaultConstructor, 0, className, \u00ab [[ConstructorKind]], [[SourceText]] \u00bb, the current Realm Record, constructorParent).15. Else,a. Let constructorInfo be !\u00a0DefineMethod of constructor with arguments proto and constructorParent.b. Let F be constructorInfo.[[Closure]].c. Perform MakeClassConstructor(F).d. Perform SetFunctionName(F, className).16. Perform MakeConstructor(F, false, proto).17. If ClassHeritageopt is present, set F.[[ConstructorKind]] to derived.18. Perform CreateMethodProperty(proto, \"constructor\", F).19. If ClassBodyopt is not present, let elements be a new empty List.20. Else, let elements be NonConstructorElements of ClassBody.21. Let instancePrivateMethods be a new empty List.22. Let staticPrivateMethods be a new empty List.23. Let instanceFields be a new empty List.24. Let staticElements be a new empty List.25. For each ClassElement e of elements, doa. If IsStatic of e is false, theni. Let element be Completion(ClassElementEvaluation of e with argument proto).b. Else,i. Let element be Completion(ClassElementEvaluation of e with argument F).c. If element is an abrupt completion, theni. Set the running execution context's LexicalEnvironment to env.ii. Set the running execution context's PrivateEnvironment to outerPrivateEnvironment.iii. Return ?\u00a0element.d. Set element to element.[[Value]].e. If element is a PrivateElement, theni. Assert: element.[[Kind]] is either method or accessor.ii. If IsStatic of e is false, let container be instancePrivateMethods.iii. Else, let container be staticPrivateMethods.iv. If container contains a PrivateElement whose [[Key]] is element.[[Key]], then1. Let existing be that PrivateElement.2. Assert: element.[[Kind]] and existing.[[Kind]] are both accessor.3. If element.[[Get]] is undefined, thena. Let combined be PrivateElement { [[Key]]: element.[[Key]], [[Kind]]: accessor, [[Get]]: existing.[[Get]], [[Set]]: element.[[Set]] }.4. Else,a. Let combined be PrivateElement { [[Key]]: element.[[Key]], [[Kind]]: accessor, [[Get]]: element.[[Get]], [[Set]]: existing.[[Set]] }.5. Replace existing in container with combined.v. Else,1. Append element to container.f. Else if element is a ClassFieldDefinition Record, theni. If IsStatic of e is false, append element to instanceFields.ii. Else, append element to staticElements.g. Else if element is a ClassStaticBlockDefinition Record, theni. Append element to staticElements.26. Set the running execution context's LexicalEnvironment to env.27. If classBinding is not undefined, thena. Perform !\u00a0classEnv.InitializeBinding(classBinding, F).28. Set F.[[PrivateMethods]] to instancePrivateMethods.29. Set F.[[Fields]] to instanceFields.30. For each PrivateElement method of staticPrivateMethods, doa. Perform !\u00a0PrivateMethodOrAccessorAdd(F, method).31. For each element elementRecord of staticElements, doa. If elementRecord is a ClassFieldDefinition Record, theni. Let result be Completion(DefineField(F, elementRecord)).b. Else,i. Assert: elementRecord is a ClassStaticBlockDefinition Record.ii. Let result be Completion(Call(elementRecord.[[BodyFunction]], F)).c. If result is an abrupt completion, theni. Set the running execution context's PrivateEnvironment to outerPrivateEnvironment.ii. Return ?\u00a0result.32. Set the running execution context's PrivateEnvironment to outerPrivateEnvironment.33. Return F.\n\n\n15.7.15 Runtime Semantics: BindingClassDeclarationEvaluation\nThe syntax-directed operation BindingClassDeclarationEvaluation takes no arguments and returns either a normal completion containing a function object or an abrupt completion. It is defined piecewise over the following productions:\n\nClassDeclaration : \nclass\nBindingIdentifier\nClassTail\n\n\n\n1. Let className be StringValue of BindingIdentifier.2. Let value be ?\u00a0ClassDefinitionEvaluation of ClassTail with arguments className and className.3. Set value.[[SourceText]] to the source text matched by ClassDeclaration.4. Let env be the running execution context's LexicalEnvironment.5. Perform ?\u00a0InitializeBoundName(className, value, env).6. Return value.\n\nClassDeclaration : \nclass\nClassTail\n\n\n\n1. Let value be ?\u00a0ClassDefinitionEvaluation of ClassTail with arguments undefined and \"default\".2. Set value.[[SourceText]] to the source text matched by ClassDeclaration.3. Return value.\nNote\n\nClassDeclaration : \nclass\nClassTail\n\n\n only occurs as part of an ExportDeclaration and establishing its binding is handled as part of the evaluation action for that production. See 16.2.3.7.\n\n\n\n15.7.16 Runtime Semantics: Evaluation\n\nClassDeclaration : \nclass\nBindingIdentifier\nClassTail\n\n\n\n1. Perform ?\u00a0BindingClassDeclarationEvaluation of this ClassDeclaration.2. Return empty.\nNote\n\nClassDeclaration : \nclass\nClassTail\n\n\n only occurs as part of an ExportDeclaration and is never directly evaluated.\n\n\nClassExpression : \nclass\nClassTail\n\n\n\n1. Let value be ?\u00a0ClassDefinitionEvaluation of ClassTail with arguments undefined and \"\".2. Set value.[[SourceText]] to the source text matched by ClassExpression.3. Return value.\n\nClassExpression : \nclass\nBindingIdentifier\nClassTail\n\n\n\n1. Let className be StringValue of BindingIdentifier.2. Let value be ?\u00a0ClassDefinitionEvaluation of ClassTail with arguments className and className.3. Set value.[[SourceText]] to the source text matched by ClassExpression.4. Return value.\n\nClassElementName : PrivateIdentifier\n\n\n1. Let privateIdentifier be StringValue of PrivateIdentifier.2. Let privateEnvRec be the running execution context's PrivateEnvironment.3. Let names be privateEnvRec.[[Names]].4. Assert: Exactly one element of names is a Private Name whose [[Description]] is privateIdentifier.5. Let privateName be the Private Name in names whose [[Description]] is privateIdentifier.6. Return privateName.\n\nClassStaticBlockStatementList : [empty]\n\n\n1. Return undefined.\n\n\n\n15.8 Async Function Definitions\nSyntax\n\nAsyncFunctionDeclaration[Yield, Await, Default] : \nasync\n[no LineTerminator here]\nfunction\nBindingIdentifier[?Yield, ?Await]\n(\nFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n[+Default]\nasync\n[no LineTerminator here]\nfunction\n(\nFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncFunctionExpression : \nasync\n[no LineTerminator here]\nfunction\nBindingIdentifier[~Yield, +Await]opt\n(\nFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncMethod[Yield, Await] : \nasync\n[no LineTerminator here]\nClassElementName[?Yield, ?Await]\n(\nUniqueFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncFunctionBody : \nFunctionBody[~Yield, +Await]\n\n\n\nAwaitExpression[Yield] : \nawait\nUnaryExpression[?Yield, +Await]\n\n\n\nNote 1\nawait is parsed as a keyword of an AwaitExpression when the [Await] parameter is present. The [Await]\n parameter is present in the top level of the following contexts, \nalthough the parameter may be absent in some contexts depending on the \nnonterminals, such as FunctionBody:\n\nIn an AsyncFunctionBody.\nIn the FormalParameters of an AsyncFunctionDeclaration, AsyncFunctionExpression, AsyncGeneratorDeclaration, or AsyncGeneratorExpression. AwaitExpression in this position is a Syntax error via static semantics.\nIn a Module.\n\nWhen Script is the syntactic goal symbol, await may be parsed as an identifier when the [Await] parameter is absent. This includes the following contexts:\n\nAnywhere outside of an AsyncFunctionBody or FormalParameters of an AsyncFunctionDeclaration, AsyncFunctionExpression, AsyncGeneratorDeclaration, or AsyncGeneratorExpression.\nIn the BindingIdentifier of a FunctionExpression, GeneratorExpression, or AsyncGeneratorExpression.\n\n\nNote 2\nUnlike YieldExpression, it is a Syntax Error to omit the operand of an AwaitExpression. You must await something.\n\n\n15.8.1 Static Semantics: Early Errors\n\nAsyncMethod : \nasync\nClassElementName\n(\nUniqueFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n\nIt is a Syntax Error if FunctionBodyContainsUseStrict of AsyncFunctionBody is true and IsSimpleParameterList of UniqueFormalParameters is false.\nIt is a Syntax Error if HasDirectSuper of AsyncMethod is true.\nIt is a Syntax Error if UniqueFormalParameters Contains AwaitExpression is true.\nIt is a Syntax Error if any element of the BoundNames of UniqueFormalParameters also occurs in the LexicallyDeclaredNames of AsyncFunctionBody.\n\n\nAsyncFunctionDeclaration : \nasync\nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\nasync\nfunction\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncFunctionExpression : \nasync\nfunction\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n\nIt is a Syntax Error if FunctionBodyContainsUseStrict of AsyncFunctionBody is true and IsSimpleParameterList of FormalParameters is false.\nIt is a Syntax Error if FormalParameters Contains AwaitExpression is true.\nIf the source text matched by FormalParameters is strict mode code, the Early Error rules for \nUniqueFormalParameters : FormalParameters\n\n are applied.\nIf BindingIdentifier is present and the source text matched by BindingIdentifier is strict mode code, it is a Syntax Error if the StringValue of BindingIdentifier is \"eval\" or \"arguments\".\nIt is a Syntax Error if any element of the BoundNames of FormalParameters also occurs in the LexicallyDeclaredNames of AsyncFunctionBody.\nIt is a Syntax Error if FormalParameters Contains SuperProperty is true.\nIt is a Syntax Error if AsyncFunctionBody Contains SuperProperty is true.\nIt is a Syntax Error if FormalParameters Contains SuperCall is true.\nIt is a Syntax Error if AsyncFunctionBody Contains SuperCall is true.\n\n\n\n15.8.2 Runtime Semantics: InstantiateAsyncFunctionObject\nThe syntax-directed operation InstantiateAsyncFunctionObject takes arguments env and privateEnv and returns a function object. It is defined piecewise over the following productions:\n\nAsyncFunctionDeclaration : \nasync\nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Let name be StringValue of BindingIdentifier.2. Let sourceText be the source text matched by AsyncFunctionDeclaration.3. Let F be OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, FormalParameters, AsyncFunctionBody, non-lexical-this, env, privateEnv).4. Perform SetFunctionName(F, name).5. Return F.\n\nAsyncFunctionDeclaration : \nasync\nfunction\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Let sourceText be the source text matched by AsyncFunctionDeclaration.2. Let F be OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, FormalParameters, AsyncFunctionBody, non-lexical-this, env, privateEnv).3. Perform SetFunctionName(F, \"default\").4. Return F.\n\n\n15.8.3 Runtime Semantics: InstantiateAsyncFunctionExpression\nThe syntax-directed operation InstantiateAsyncFunctionExpression takes optional argument name and returns a function object. It is defined piecewise over the following productions:\n\nAsyncFunctionExpression : \nasync\nfunction\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. If name is not present, set name to \"\".2. Let env be the LexicalEnvironment of the running execution context.3. Let privateEnv be the running execution context's PrivateEnvironment.4. Let sourceText be the source text matched by AsyncFunctionExpression.5. Let closure be OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, FormalParameters, AsyncFunctionBody, non-lexical-this, env, privateEnv).6. Perform SetFunctionName(closure, name).7. Return closure.\n\nAsyncFunctionExpression : \nasync\nfunction\nBindingIdentifier\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Assert: name is not present.2. Set name to StringValue of BindingIdentifier.3. Let outerEnv be the LexicalEnvironment of the running execution context.4. Let funcEnv be NewDeclarativeEnvironment(outerEnv).5. Perform !\u00a0funcEnv.CreateImmutableBinding(name, false).6. Let privateEnv be the running execution context's PrivateEnvironment.7. Let sourceText be the source text matched by AsyncFunctionExpression.8. Let closure be OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, FormalParameters, AsyncFunctionBody, non-lexical-this, funcEnv, privateEnv).9. Perform SetFunctionName(closure, name).10. Perform !\u00a0funcEnv.InitializeBinding(name, closure).11. Return closure.\nNote\nThe BindingIdentifier in an AsyncFunctionExpression can be referenced from inside the AsyncFunctionExpression's AsyncFunctionBody to allow the function to call itself recursively. However, unlike in a FunctionDeclaration, the BindingIdentifier in a AsyncFunctionExpression cannot be referenced from and does not affect the scope enclosing the AsyncFunctionExpression.\n\n\n\n15.8.4 Runtime Semantics: EvaluateAsyncFunctionBody\nThe syntax-directed operation EvaluateAsyncFunctionBody takes arguments functionObject and argumentsList (a List) and returns a return completion. It is defined piecewise over the following productions:\n\nAsyncFunctionBody : FunctionBody\n\n\n1. Let promiseCapability be !\u00a0NewPromiseCapability(%Promise%).2. Let declResult be Completion(FunctionDeclarationInstantiation(functionObject, argumentsList)).3. If declResult is an abrupt completion, thena. Perform !\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab declResult.[[Value]] \u00bb).4. Else,a. Perform AsyncFunctionStart(promiseCapability, FunctionBody).5. Return Completion Record { [[Type]]: return, [[Value]]: promiseCapability.[[Promise]], [[Target]]: empty }.\n\n\n15.8.5 Runtime Semantics: Evaluation\n\nAsyncFunctionExpression : \nasync\nfunction\nBindingIdentifieropt\n(\nFormalParameters\n)\n{\nAsyncFunctionBody\n}\n\n\n\n1. Return InstantiateAsyncFunctionExpression of AsyncFunctionExpression.\n\nAwaitExpression : \nawait\nUnaryExpression\n\n\n\n1. Let exprRef be the result of evaluating UnaryExpression.2. Let value be ?\u00a0GetValue(exprRef).3. Return ?\u00a0Await(value).\n\n\n\n15.9 Async Arrow Function Definitions\nSyntax\n\nAsyncArrowFunction[In, Yield, Await] : \nasync\n[no LineTerminator here]\nAsyncArrowBindingIdentifier[?Yield]\n[no LineTerminator here]\n=>\nAsyncConciseBody[?In]\n\n\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\n[no LineTerminator here]\n=>\nAsyncConciseBody[?In]\n\n\n\nAsyncConciseBody[In] : \n[lookahead \u2260 {]\nExpressionBody[?In, +Await]\n\n\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncArrowBindingIdentifier[Yield] : \nBindingIdentifier[?Yield, +Await]\n\n\n\nCoverCallExpressionAndAsyncArrowHead[Yield, Await] : \nMemberExpression[?Yield, ?Await]\nArguments[?Yield, ?Await]\n\n\n\nSupplemental Syntax\n\n      When processing an instance of the production\n\nAsyncArrowFunction : \nCoverCallExpressionAndAsyncArrowHead\n=>\nAsyncConciseBody\n\n\n\n      the interpretation of CoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\n    \n\nAsyncArrowHead : \nasync\n[no LineTerminator here]\nArrowFormalParameters[~Yield, +Await]\n\n\n\n\n15.9.1 Static Semantics: Early Errors\n\nAsyncArrowFunction : \nasync\nAsyncArrowBindingIdentifier\n=>\nAsyncConciseBody\n\n\n\n\nIt is a Syntax Error if any element of the BoundNames of AsyncArrowBindingIdentifier also occurs in the LexicallyDeclaredNames of AsyncConciseBody.\n\n\nAsyncArrowFunction : \nCoverCallExpressionAndAsyncArrowHead\n=>\nAsyncConciseBody\n\n\n\n\nCoverCallExpressionAndAsyncArrowHead must cover an AsyncArrowHead.\nIt is a Syntax Error if CoverCallExpressionAndAsyncArrowHead Contains YieldExpression is true.\nIt is a Syntax Error if CoverCallExpressionAndAsyncArrowHead Contains AwaitExpression is true.\nIt is a Syntax Error if any element of the BoundNames of CoverCallExpressionAndAsyncArrowHead also occurs in the LexicallyDeclaredNames of AsyncConciseBody.\nIt is a Syntax Error if AsyncConciseBodyContainsUseStrict of AsyncConciseBody is true and IsSimpleParameterList of CoverCallExpressionAndAsyncArrowHead is false.\n\n\n\n15.9.2 Static Semantics: AsyncConciseBodyContainsUseStrict\nThe syntax-directed operation AsyncConciseBodyContainsUseStrict\n takes no arguments and returns a Boolean. It is defined piecewise over \nthe following productions:\n\nAsyncConciseBody : ExpressionBody\n\n\n1. Return false.\n\nAsyncConciseBody : \n{\nAsyncFunctionBody\n}\n\n\n\n1. Return FunctionBodyContainsUseStrict of AsyncFunctionBody.\n\n\n15.9.3 Runtime Semantics: EvaluateAsyncConciseBody\nThe syntax-directed operation EvaluateAsyncConciseBody takes arguments functionObject and argumentsList (a List) and returns a return completion. It is defined piecewise over the following productions:\n\nAsyncConciseBody : ExpressionBody\n\n\n1. Let promiseCapability be !\u00a0NewPromiseCapability(%Promise%).2. Let declResult be Completion(FunctionDeclarationInstantiation(functionObject, argumentsList)).3. If declResult is an abrupt completion, thena. Perform !\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab declResult.[[Value]] \u00bb).4. Else,a. Perform AsyncFunctionStart(promiseCapability, ExpressionBody).5. Return Completion Record { [[Type]]: return, [[Value]]: promiseCapability.[[Promise]], [[Target]]: empty }.\n\n\n15.9.4 Runtime Semantics: InstantiateAsyncArrowFunctionExpression\nThe syntax-directed operation InstantiateAsyncArrowFunctionExpression takes optional argument name and returns a function object. It is defined piecewise over the following productions:\n\nAsyncArrowFunction : \nasync\nAsyncArrowBindingIdentifier\n=>\nAsyncConciseBody\n\n\n\n1. If name is not present, set name to \"\".2. Let env be the LexicalEnvironment of the running execution context.3. Let privateEnv be the running execution context's PrivateEnvironment.4. Let sourceText be the source text matched by AsyncArrowFunction.5. Let parameters be AsyncArrowBindingIdentifier.6. Let closure be OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, parameters, AsyncConciseBody, lexical-this, env, privateEnv).7. Perform SetFunctionName(closure, name).8. Return closure.\n\nAsyncArrowFunction : \nCoverCallExpressionAndAsyncArrowHead\n=>\nAsyncConciseBody\n\n\n\n1. If name is not present, set name to \"\".2. Let env be the LexicalEnvironment of the running execution context.3. Let privateEnv be the running execution context's PrivateEnvironment.4. Let sourceText be the source text matched by AsyncArrowFunction.5. Let head be the AsyncArrowHead that is covered by CoverCallExpressionAndAsyncArrowHead.6. Let parameters be the ArrowFormalParameters of head.7. Let closure be OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, parameters, AsyncConciseBody, lexical-this, env, privateEnv).8. Perform SetFunctionName(closure, name).9. Return closure.\n\n\n15.9.5 Runtime Semantics: Evaluation\n\nAsyncArrowFunction : \nasync\nAsyncArrowBindingIdentifier\n=>\nAsyncConciseBody\n\n\nCoverCallExpressionAndAsyncArrowHead\n=>\nAsyncConciseBody\n\n\n\n1. Return InstantiateAsyncArrowFunctionExpression of AsyncArrowFunction.\n\n\n\n15.10 Tail Position Calls\n\n15.10.1 Static Semantics: IsInTailPosition ( call )\nThe abstract operation IsInTailPosition takes argument call (a Parse Node) and returns a Boolean. It performs the following steps when called:\n1. If the source text matched by call is non-strict code, return false.2. If call is not contained within a FunctionBody, ConciseBody, or AsyncConciseBody, return false.3. Let body be the FunctionBody, ConciseBody, or AsyncConciseBody that most closely contains call.4. If body is the FunctionBody of a GeneratorBody, return false.5. If body is the FunctionBody of an AsyncFunctionBody, return false.6. If body is the FunctionBody of an AsyncGeneratorBody, return false.7. If body is an AsyncConciseBody, return false.8. Return the result of HasCallInTailPosition of body with argument call.\nNote\nTail Position calls are only defined in strict mode code because of a common non-standard language extension (see 10.2.4) that enables observation of the chain of caller contexts.\n\n\n\n15.10.2 Static Semantics: HasCallInTailPosition\nThe syntax-directed operation HasCallInTailPosition takes argument call and returns a Boolean.\nNote\ncall is a Parse Node that represents a specific range of source text. When the following algorithms compare call to another Parse Node, it is a test of whether they represent the same source text.\n\n\n15.10.2.1 Statement Rules\n\nStatementList : \nStatementList\nStatementListItem\n\n\n\n1. Let has be HasCallInTailPosition of StatementList with argument call.2. If has is true, return true.3. Return HasCallInTailPosition of StatementListItem with argument call.\n\nFunctionStatementList : \n[empty]\n\n\n\nStatementListItem : \nDeclaration\n\n\n\nStatement : \nVariableStatement\n\n\nEmptyStatement\n\n\nExpressionStatement\n\n\nContinueStatement\n\n\nBreakStatement\n\n\nThrowStatement\n\n\nDebuggerStatement\n\n\n\nBlock : \n{\n}\n\n\n\nReturnStatement : \nreturn\n;\n\n\n\nLabelledItem : \nFunctionDeclaration\n\n\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nof\nAssignmentExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nof\nAssignmentExpression\n)\nStatement\n\n\n\nCaseBlock : \n{\n}\n\n\n\n1. Return false.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\nelse\nStatement\n\n\n\n1. Let has be HasCallInTailPosition of the first Statement with argument call.2. If has is true, return true.3. Return HasCallInTailPosition of the second Statement with argument call.\n\nIfStatement : \nif\n(\nExpression\n)\nStatement\n\n\n\nDoWhileStatement : \ndo\nStatement\nwhile\n(\nExpression\n)\n;\n\n\n\nWhileStatement : \nwhile\n(\nExpression\n)\nStatement\n\n\n\nForStatement : \nfor\n(\nExpressionopt\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nvar\nVariableDeclarationList\n;\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\nfor\n(\nLexicalDeclaration\nExpressionopt\n;\nExpressionopt\n)\nStatement\n\n\n\nForInOfStatement : \nfor\n(\nLeftHandSideExpression\nin\nExpression\n)\nStatement\n\n\nfor\n(\nvar\nForBinding\nin\nExpression\n)\nStatement\n\n\nfor\n(\nForDeclaration\nin\nExpression\n)\nStatement\n\n\n\nWithStatement : \nwith\n(\nExpression\n)\nStatement\n\n\n\n1. Return HasCallInTailPosition of Statement with argument call.\n\nLabelledStatement : \nLabelIdentifier\n:\nLabelledItem\n\n\n\n1. Return HasCallInTailPosition of LabelledItem with argument call.\n\nReturnStatement : \nreturn\nExpression\n;\n\n\n\n1. Return HasCallInTailPosition of Expression with argument call.\n\nSwitchStatement : \nswitch\n(\nExpression\n)\nCaseBlock\n\n\n\n1. Return HasCallInTailPosition of CaseBlock with argument call.\n\nCaseBlock : \n{\nCaseClausesopt\nDefaultClause\nCaseClausesopt\n}\n\n\n\n1. Let has be false.2. If the first CaseClauses is present, let has be HasCallInTailPosition of the first CaseClauses with argument call.3. If has is true, return true.4. Let has be HasCallInTailPosition of DefaultClause with argument call.5. If has is true, return true.6. If the second CaseClauses is present, let has be HasCallInTailPosition of the second CaseClauses with argument call.7. Return has.\n\nCaseClauses : \nCaseClauses\nCaseClause\n\n\n\n1. Let has be HasCallInTailPosition of CaseClauses with argument call.2. If has is true, return true.3. Return HasCallInTailPosition of CaseClause with argument call.\n\nCaseClause : \ncase\nExpression\n:\nStatementListopt\n\n\n\nDefaultClause : \ndefault\n:\nStatementListopt\n\n\n\n1. If StatementList is present, return HasCallInTailPosition of StatementList with argument call.2. Return false.\n\nTryStatement : \ntry\nBlock\nCatch\n\n\n\n1. Return HasCallInTailPosition of Catch with argument call.\n\nTryStatement : \ntry\nBlock\nFinally\n\n\ntry\nBlock\nCatch\nFinally\n\n\n\n1. Return HasCallInTailPosition of Finally with argument call.\n\nCatch : \ncatch\n(\nCatchParameter\n)\nBlock\n\n\n\n1. Return HasCallInTailPosition of Block with argument call.\n\n\n15.10.2.2 Expression Rules\nNote\nA potential tail position call that is immediately followed by return GetValue of the call result is also a possible tail position call. A function call cannot return a Reference Record, so such a GetValue operation will always return the same value as the actual function call result.\n\n\nAssignmentExpression : \nYieldExpression\n\n\nArrowFunction\n\n\nAsyncArrowFunction\n\n\nLeftHandSideExpression\n=\nAssignmentExpression\n\n\nLeftHandSideExpression\nAssignmentOperator\nAssignmentExpression\n\n\nLeftHandSideExpression\n&&=\nAssignmentExpression\n\n\nLeftHandSideExpression\n||=\nAssignmentExpression\n\n\nLeftHandSideExpression\n??=\nAssignmentExpression\n\n\n\nBitwiseANDExpression : \nBitwiseANDExpression\n&\nEqualityExpression\n\n\n\nBitwiseXORExpression : \nBitwiseXORExpression\n^\nBitwiseANDExpression\n\n\n\nBitwiseORExpression : \nBitwiseORExpression\n|\nBitwiseXORExpression\n\n\n\nEqualityExpression : \nEqualityExpression\n==\nRelationalExpression\n\n\nEqualityExpression\n!=\nRelationalExpression\n\n\nEqualityExpression\n===\nRelationalExpression\n\n\nEqualityExpression\n!==\nRelationalExpression\n\n\n\nRelationalExpression : \nRelationalExpression\n<\nShiftExpression\n\n\nRelationalExpression\n>\nShiftExpression\n\n\nRelationalExpression\n<=\nShiftExpression\n\n\nRelationalExpression\n>=\nShiftExpression\n\n\nRelationalExpression\ninstanceof\nShiftExpression\n\n\nRelationalExpression\nin\nShiftExpression\n\n\nPrivateIdentifier\nin\nShiftExpression\n\n\n\nShiftExpression : \nShiftExpression\n<<\nAdditiveExpression\n\n\nShiftExpression\n>>\nAdditiveExpression\n\n\nShiftExpression\n>>>\nAdditiveExpression\n\n\n\nAdditiveExpression : \nAdditiveExpression\n+\nMultiplicativeExpression\n\n\nAdditiveExpression\n-\nMultiplicativeExpression\n\n\n\nMultiplicativeExpression : \nMultiplicativeExpression\nMultiplicativeOperator\nExponentiationExpression\n\n\n\nExponentiationExpression : \nUpdateExpression\n**\nExponentiationExpression\n\n\n\nUpdateExpression : \nLeftHandSideExpression\n++\n\n\nLeftHandSideExpression\n--\n\n\n++\nUnaryExpression\n\n\n--\nUnaryExpression\n\n\n\nUnaryExpression : \ndelete\nUnaryExpression\n\n\nvoid\nUnaryExpression\n\n\ntypeof\nUnaryExpression\n\n\n+\nUnaryExpression\n\n\n-\nUnaryExpression\n\n\n~\nUnaryExpression\n\n\n!\nUnaryExpression\n\n\nAwaitExpression\n\n\n\nCallExpression : \nSuperCall\n\n\nCallExpression\n[\nExpression\n]\n\n\nCallExpression\n.\nIdentifierName\n\n\nCallExpression\n.\nPrivateIdentifier\n\n\n\nNewExpression : \nnew\nNewExpression\n\n\n\nMemberExpression : \nMemberExpression\n[\nExpression\n]\n\n\nMemberExpression\n.\nIdentifierName\n\n\nSuperProperty\n\n\nMetaProperty\n\n\nnew\nMemberExpression\nArguments\n\n\nMemberExpression\n.\nPrivateIdentifier\n\n\n\nPrimaryExpression : \nthis\n\n\nIdentifierReference\n\n\nLiteral\n\n\nArrayLiteral\n\n\nObjectLiteral\n\n\nFunctionExpression\n\n\nClassExpression\n\n\nGeneratorExpression\n\n\nAsyncFunctionExpression\n\n\nAsyncGeneratorExpression\n\n\nRegularExpressionLiteral\n\n\nTemplateLiteral\n\n\n\n1. Return false.\n\nExpression : \nAssignmentExpression\n\n\nExpression\n,\nAssignmentExpression\n\n\n\n1. Return HasCallInTailPosition of AssignmentExpression with argument call.\n\nConditionalExpression : \nShortCircuitExpression\n?\nAssignmentExpression\n:\nAssignmentExpression\n\n\n\n1. Let has be HasCallInTailPosition of the first AssignmentExpression with argument call.2. If has is true, return true.3. Return HasCallInTailPosition of the second AssignmentExpression with argument call.\n\nLogicalANDExpression : \nLogicalANDExpression\n&&\nBitwiseORExpression\n\n\n\n1. Return HasCallInTailPosition of BitwiseORExpression with argument call.\n\nLogicalORExpression : \nLogicalORExpression\n||\nLogicalANDExpression\n\n\n\n1. Return HasCallInTailPosition of LogicalANDExpression with argument call.\n\nCoalesceExpression : \nCoalesceExpressionHead\n??\nBitwiseORExpression\n\n\n\n1. Return HasCallInTailPosition of BitwiseORExpression with argument call.\n\nCallExpression : \nCoverCallExpressionAndAsyncArrowHead\n\n\nCallExpression\nArguments\n\n\nCallExpression\nTemplateLiteral\n\n\n\n1. If this CallExpression is call, return true.2. Return false.\n\nOptionalExpression : \nMemberExpression\nOptionalChain\n\n\nCallExpression\nOptionalChain\n\n\nOptionalExpression\nOptionalChain\n\n\n\n1. Return HasCallInTailPosition of OptionalChain with argument call.\n\nOptionalChain : \n?.\n[\nExpression\n]\n\n\n?.\nIdentifierName\n\n\n?.\nPrivateIdentifier\n\n\nOptionalChain\n[\nExpression\n]\n\n\nOptionalChain\n.\nIdentifierName\n\n\nOptionalChain\n.\nPrivateIdentifier\n\n\n\n1. Return false.\n\nOptionalChain : \n?.\nArguments\n\n\nOptionalChain\nArguments\n\n\n\n1. If this OptionalChain is call, return true.2. Return false.\n\nMemberExpression : \nMemberExpression\nTemplateLiteral\n\n\n\n1. If this MemberExpression is call, return true.2. Return false.\n\nPrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList\n\n\n1. Let expr be the ParenthesizedExpression that is covered by CoverParenthesizedExpressionAndArrowParameterList.2. Return HasCallInTailPosition of expr with argument call.\n\nParenthesizedExpression : \n(\nExpression\n)\n\n\n\n1. Return HasCallInTailPosition of Expression with argument call.\n\n\n\n15.10.3 PrepareForTailCall ( )\nThe abstract operation PrepareForTailCall takes no arguments and returns unused. It performs the following steps when called:\n1. Assert: The current execution context\n will not subsequently be used for the evaluation of any ECMAScript code\n or built-in functions. The invocation of Call subsequent to the \ninvocation of this abstract operation will create and push a new execution context before performing any such evaluation.2. Discard all resources associated with the current execution context.3. Return unused.\nA tail position call must either release any transient internal resources associated with the currently executing function execution context before invoking the target function or reuse those resources in support of the target function.\nNote\nFor example, a tail position call should only grow an \nimplementation's activation record stack by the amount that the size of \nthe target function's activation record exceeds the size of the calling \nfunction's activation record. If the target function's activation record\n is smaller, then the total size of the stack should decrease.\n\n\n\n\n\n16 ECMAScript Language: Scripts and Modules\n\n16.1 Scripts\nSyntax\n\nScript : \nScriptBodyopt\n\n\n\nScriptBody : \nStatementList[~Yield, ~Await, ~Return]\n\n\n\n\n16.1.1 Static Semantics: Early Errors\n\nScript : ScriptBody\n\n\n\n\n          It is a Syntax Error if the LexicallyDeclaredNames of ScriptBody contains any duplicate entries.\n        \n\n          It is a Syntax Error if any element of the LexicallyDeclaredNames of ScriptBody also occurs in the VarDeclaredNames of ScriptBody.\n        \n\n\nScriptBody : StatementList\n\n\n\n\n          It is a Syntax Error if StatementList Contains super unless the source text containing super is eval code that is being processed by a direct eval. Additional early error rules for super within direct eval are defined in 19.2.1.1.\n        \n\n          It is a Syntax Error if StatementList Contains NewTarget unless the source text containing NewTarget is eval code that is being processed by a direct eval. Additional early error rules for NewTarget in direct eval are defined in 19.2.1.1.\n        \n\n          It is a Syntax Error if ContainsDuplicateLabels of StatementList with argument \u00ab \u00bb is true.\n        \n\n          It is a Syntax Error if ContainsUndefinedBreakTarget of StatementList with argument \u00ab \u00bb is true.\n        \n\n          It is a Syntax Error if ContainsUndefinedContinueTarget of StatementList with arguments \u00ab \u00bb and \u00ab \u00bb is true.\n        \n\n          It is a Syntax Error if AllPrivateIdentifiersValid of StatementList with argument \u00ab \u00bb is false unless the source text containing ScriptBody is eval code that is being processed by a direct eval.\n        \n\n\n\n16.1.2 Static Semantics: IsStrict\nThe syntax-directed operation IsStrict takes no arguments and \nreturns a Boolean. It is defined piecewise over the following \nproductions:\n\nScript : ScriptBodyopt\n\n\n1. If ScriptBody is present and the Directive Prologue of ScriptBody contains a Use Strict Directive, return true; otherwise, return false.\n\n\n16.1.3 Runtime Semantics: Evaluation\n\nScript : [empty]\n\n\n1. Return undefined.\n\n\n16.1.4 Script Records\nA Script Record encapsulates information about a script being evaluated. Each script record contains the fields listed in Table 43.\nTable 43: Script Record Fields\n\n\n\n\n                Field Name\n              \n\n                Value Type\n              \n\n                Meaning\n              \n\n\n\n\n              [[Realm]]\n            \n\n              a Realm Record or undefined\n\n\n              The realm within which this script was created. undefined if not yet assigned.\n            \n\n\n\n              [[ECMAScriptCode]]\n            \n\n              a Parse Node\n\n\n              The result of parsing the source text of this script using Script as the goal symbol.\n            \n\n\n\n              [[HostDefined]]\n            \n\n              anything (default value is empty)\n            \n\n              Field reserved for use by host environments that need to associate additional information with a script.\n            \n\n\n\n\n\n16.1.5 ParseScript ( sourceText, realm, hostDefined )\nThe abstract operation ParseScript takes arguments sourceText (ECMAScript source text), realm, and hostDefined and returns a Script Record or a non-empty List of SyntaxError objects. It creates a Script Record based upon the result of parsing sourceText as a Script. It performs the following steps when called:\n1. Let script be ParseText(sourceText, Script).2. If script is a List of errors, return script.3. Return Script Record { [[Realm]]: realm, [[ECMAScriptCode]]: script, [[HostDefined]]: hostDefined }.\nNote\nAn implementation may parse script source text and analyse it\n for Early Error conditions prior to evaluation of ParseScript for that \nscript source text. However, the reporting of any errors must be \ndeferred until the point where this specification actually performs \nParseScript upon that source text.\n\n\n\n16.1.6 ScriptEvaluation ( scriptRecord )\nThe abstract operation ScriptEvaluation takes argument scriptRecord and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let globalEnv be scriptRecord.[[Realm]].[[GlobalEnv]].2. Let scriptContext be a new ECMAScript code execution context.3. Set the Function of scriptContext to null.4. Set the Realm of scriptContext to scriptRecord.[[Realm]].5. Set the ScriptOrModule of scriptContext to scriptRecord.6. Set the VariableEnvironment of scriptContext to globalEnv.7. Set the LexicalEnvironment of scriptContext to globalEnv.8. Set the PrivateEnvironment of scriptContext to null.9. Suspend the currently running execution context.10. Push scriptContext onto the execution context stack; scriptContext is now the running execution context.11. Let script be scriptRecord.[[ECMAScriptCode]].12. Let result be Completion(GlobalDeclarationInstantiation(script, globalEnv)).13. If result.[[Type]] is normal, thena. Set result to the result of evaluating script.14. If result.[[Type]] is normal and result.[[Value]] is empty, thena. Set result to NormalCompletion(undefined).15. Suspend scriptContext and remove it from the execution context stack.16. Assert: The execution context stack is not empty.17. Resume the context that is now on the top of the execution context stack as the running execution context.18. Return ?\u00a0result.\n\n\n16.1.7 GlobalDeclarationInstantiation ( script, env )\nThe abstract operation GlobalDeclarationInstantiation takes arguments script (a ScriptBody Parse Node) and env (a global Environment Record) and returns either a normal completion containing unused or an abrupt completion. script is the ScriptBody for which the execution context is being established. env is the global environment in which bindings are to be created.\nNote 1\nWhen an execution context\n is established for evaluating scripts, declarations are instantiated in\n the current global environment. Each global binding declared in the \ncode is instantiated.\n\nIt performs the following steps when called:\n\n1. Let lexNames be the LexicallyDeclaredNames of script.2. Let varNames be the VarDeclaredNames of script.3. For each element name of lexNames, doa. If env.HasVarDeclaration(name) is true, throw a SyntaxError exception.b. If env.HasLexicalDeclaration(name) is true, throw a SyntaxError exception.c. Let hasRestrictedGlobal be ?\u00a0env.HasRestrictedGlobalProperty(name).d. If hasRestrictedGlobal is true, throw a SyntaxError exception.4. For each element name of varNames, doa. If env.HasLexicalDeclaration(name) is true, throw a SyntaxError exception.5. Let varDeclarations be the VarScopedDeclarations of script.6. Let functionsToInitialize be a new empty List.7. Let declaredFunctionNames be a new empty List.8. For each element d of varDeclarations, in reverse List order, doa. If d is neither a VariableDeclaration nor a ForBinding nor a BindingIdentifier, theni. Assert: d is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration.ii. NOTE: If there are multiple function declarations for the same name, the last declaration is used.iii. Let fn be the sole element of the BoundNames of d.iv. If fn is not an element of declaredFunctionNames, then1. Let fnDefinable be ?\u00a0env.CanDeclareGlobalFunction(fn).2. If fnDefinable is false, throw a TypeError exception.3. Append fn to declaredFunctionNames.4. Insert d as the first element of functionsToInitialize.9. Let declaredVarNames be a new empty List.10. For each element d of varDeclarations, doa. If d is a VariableDeclaration, a ForBinding, or a BindingIdentifier, theni. For each String vn of the BoundNames of d, do1. If vn is not an element of declaredFunctionNames, thena. Let vnDefinable be ?\u00a0env.CanDeclareGlobalVar(vn).b. If vnDefinable is false, throw a TypeError exception.c. If vn is not an element of declaredVarNames, theni. Append vn to declaredVarNames.11. NOTE: No abnormal terminations occur after this algorithm step if the global object is an ordinary object. However, if the global object is a Proxy exotic object it may exhibit behaviours that cause abnormal terminations in some of the following steps.12. NOTE: Annex B.3.2.2 adds additional steps at this point.13. Let lexDeclarations be the LexicallyScopedDeclarations of script.14. Let privateEnv be null.15. For each element d of lexDeclarations, doa. NOTE: Lexically declared names are only instantiated here but not initialized.b. For each element dn of the BoundNames of d, doi. If IsConstantDeclaration of d is true, then1. Perform ?\u00a0env.CreateImmutableBinding(dn, true).ii. Else,1. Perform ?\u00a0env.CreateMutableBinding(dn, false).16. For each Parse Node f of functionsToInitialize, doa. Let fn be the sole element of the BoundNames of f.b. Let fo be InstantiateFunctionObject of f with arguments env and privateEnv.c. Perform ?\u00a0env.CreateGlobalFunctionBinding(fn, fo, false).17. For each String vn of declaredVarNames, doa. Perform ?\u00a0env.CreateGlobalVarBinding(vn, false).18. Return unused.\nNote 2\nEarly errors specified in 16.1.1\n prevent name conflicts between function/var declarations and \nlet/const/class declarations as well as redeclaration of let/const/class\n bindings for declaration contained within a single Script. However, such conflicts and redeclarations that span more than one Script\n are detected as runtime errors during GlobalDeclarationInstantiation. \nIf any such errors are detected, no bindings are instantiated for the \nscript. However, if the global object is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an abrupt completion and some global declarations not being instantiated. If this occurs, the code for the Script is not evaluated.\nUnlike explicit var or function declarations, properties that are directly created on the global object result in global bindings that may be shadowed by let/const/class declarations.\n\n\n\n\n16.2 Modules\nSyntax\n\nModule : \nModuleBodyopt\n\n\n\nModuleBody : \nModuleItemList\n\n\n\nModuleItemList : \nModuleItem\n\n\nModuleItemList\nModuleItem\n\n\n\nModuleItem : \nImportDeclaration\n\n\nExportDeclaration\n\n\nStatementListItem[~Yield, +Await, ~Return]\n\n\n\nModuleExportName : \nIdentifierName\n\n\nStringLiteral\n\n\n\n\n16.2.1 Module Semantics\n\n16.2.1.1 Static Semantics: Early Errors\n\nModuleBody : ModuleItemList\n\n\n\n\n            It is a Syntax Error if the LexicallyDeclaredNames of ModuleItemList contains any duplicate entries.\n          \n\n            It is a Syntax Error if any element of the LexicallyDeclaredNames of ModuleItemList also occurs in the VarDeclaredNames of ModuleItemList.\n          \n\n            It is a Syntax Error if the ExportedNames of ModuleItemList contains any duplicate entries.\n          \n\n            It is a Syntax Error if any element of the ExportedBindings of ModuleItemList does not also occur in either the VarDeclaredNames of ModuleItemList, or the LexicallyDeclaredNames of ModuleItemList.\n          \n\n            It is a Syntax Error if ModuleItemList Contains super.\n          \n\n            It is a Syntax Error if ModuleItemList Contains NewTarget.\n          \n\n            It is a Syntax Error if ContainsDuplicateLabels of ModuleItemList with argument \u00ab \u00bb is true.\n          \n\n            It is a Syntax Error if ContainsUndefinedBreakTarget of ModuleItemList with argument \u00ab \u00bb is true.\n          \n\n            It is a Syntax Error if ContainsUndefinedContinueTarget of ModuleItemList with arguments \u00ab \u00bb and \u00ab \u00bb is true.\n          \n\n            It is a Syntax Error if AllPrivateIdentifiersValid of ModuleItemList with argument \u00ab \u00bb is false.\n          \n\nNote\nThe duplicate ExportedNames rule implies that multiple export default ExportDeclaration items within a ModuleBody\n is a Syntax Error. Additional error conditions relating to conflicting \nor duplicate declarations are checked during module linking prior to \nevaluation of a Module. If any such errors are detected the Module is not evaluated.\n\n\nModuleExportName : StringLiteral\n\n\n\nIt is a Syntax Error if IsStringWellFormedUnicode(the SV of StringLiteral) is false.\n\n\n\n16.2.1.2 Static Semantics: ImportedLocalNames ( importEntries )\nThe abstract operation ImportedLocalNames takes argument importEntries (a List of ImportEntry Records) and returns a List of Strings. It creates a List of all of the local name bindings defined by importEntries. It performs the following steps when called:\n1. Let localNames be a new empty List.2. For each ImportEntry Record i of importEntries, doa. Append i.[[LocalName]] to localNames.3. Return localNames.\n\n\n16.2.1.3 Static Semantics: ModuleRequests\nThe syntax-directed operation ModuleRequests takes no arguments and returns a List of Strings. It is defined piecewise over the following productions:\n\nModule : [empty]\n\n\n1. Return a new empty List.\n\nModuleItemList : ModuleItem\n\n\n1. Return ModuleRequests of ModuleItem.\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let moduleNames be ModuleRequests of ModuleItemList.2. Let additionalNames be ModuleRequests of ModuleItem.3. Append to moduleNames each element of additionalNames that is not already an element of moduleNames.4. Return moduleNames.\n\nModuleItem : StatementListItem\n\n\n1. Return a new empty List.\n\nImportDeclaration : \nimport\nImportClause\nFromClause\n;\n\n\n\n1. Return ModuleRequests of FromClause.\n\nModuleSpecifier : StringLiteral\n\n\n1. Return a List whose sole element is the SV of StringLiteral.\n\nExportDeclaration : \nexport\nExportFromClause\nFromClause\n;\n\n\n\n1. Return the ModuleRequests of FromClause.\n\nExportDeclaration : \nexport\nNamedExports\n;\n\n\nexport\nVariableStatement\n\n\nexport\nDeclaration\n\n\nexport\ndefault\nHoistableDeclaration\n\n\nexport\ndefault\nClassDeclaration\n\n\nexport\ndefault\nAssignmentExpression\n;\n\n\n\n1. Return a new empty List.\n\n\n16.2.1.4 Abstract Module Records\nA Module Record \nencapsulates structural information about the imports and exports of a \nsingle module. This information is used to link the imports and exports \nof sets of connected modules. A Module Record includes four fields that \nare only used when evaluating a module.\nFor specification purposes Module Record values are values of the Record\n specification type and can be thought of as existing in a simple \nobject-oriented hierarchy where Module Record is an abstract class with \nboth abstract and concrete subclasses. This specification defines the \nabstract subclass named Cyclic Module Record and its concrete subclass named Source Text Module Record.\n Other specifications and implementations may define additional Module \nRecord subclasses corresponding to alternative module definition \nfacilities that they defined.\nModule Record defines the fields listed in Table 44. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in Table 45. All Module definition subclasses must provide concrete implementations of these abstract methods.\nTable 44: Module Record Fields\n\n\n\n\n                  Field Name\n                \n\n                  Value Type\n                \n\n                  Meaning\n                \n\n\n\n\n                [[Realm]]\n              \n\n                a Realm Record\n\n\n                The Realm within which this module was created.\n              \n\n\n\n                [[Environment]]\n              \n\n                a module Environment Record or empty\n\n\n                The Environment Record containing the top level bindings for this module. This field is set when the module is linked.\n              \n\n\n\n                [[Namespace]]\n              \n\n                an Object or empty\n\n\n                The Module Namespace Object (28.3) if one has been created for this module.\n              \n\n\n\n                [[HostDefined]]\n              \n\n                anything (default value is undefined)\n              \n\n                Field reserved for use by host environments that need to associate additional information with a module.\n              \n\n\n\nTable 45: Abstract Methods of Module Records\n\n\n\n                Method\n              \n\n                Purpose\n              \n\n\n\n                GetExportedNames([exportStarSet])\n              \n\n                Return a list of all names that are either directly or indirectly exported from this module.\n              \n\n\n\n                ResolveExport(exportName [, resolveSet])\n              \n\nReturn the binding of a name exported by this module. Bindings are represented by a ResolvedBinding Record, of the form { [[Module]]: Module Record, [[BindingName]]: String | namespace }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to namespace. Return null if the name cannot be resolved, or ambiguous if multiple bindings were found.\nEach time this operation is called with a specific exportName, resolveSet pair as arguments it must return the same result if it completes normally.\n\n\n\n\n                Link()\n              \n\nPrepare the module for evaluation by transitively resolving all module dependencies and creating a module Environment Record.\n\n\n\n\n                Evaluate()\n              \n\nReturns a promise for the evaluation of this module \nand its dependencies, resolving on successful evaluation or if it has \nalready been evaluated successfully, and rejecting for an evaluation \nerror or if it has already been evaluated unsuccessfully. If the promise\n is rejected, hosts are expected to handle the promise rejection and rethrow the evaluation error.\nLink must have completed successfully prior to invoking this method.\n\n\n\n\n\n\n16.2.1.5 Cyclic Module Records\nA Cyclic Module Record\n is used to represent information about a module that can participate in\n dependency cycles with other modules that are subclasses of the Cyclic Module Record type. Module Records that are not subclasses of the Cyclic Module Record type must not participate in dependency cycles with Source Text Module Records.\nIn addition to the fields defined in Table 44 Cyclic Module Records have the additional fields listed in Table 46\nTable 46: Additional Fields of Cyclic Module Records\n\n\n\n                Field Name\n              \n\n                Value Type\n              \n\n                Meaning\n              \n\n\n\n                [[Status]]\n              \n\nunlinked, linking, linked, evaluating, evaluating-async, or evaluated\n\n\n                Initially unlinked. Transitions to linking, linked, evaluating, possibly evaluating-async, evaluated (in that order) as the module progresses throughout its lifecycle. evaluating-async\n indicates this module is queued to execute on completion of its \nasynchronous dependencies or it is a module whose [[HasTLA]] field is true that has been executed and is pending top-level completion.\n              \n\n\n\n                [[EvaluationError]]\n              \n\n                an abrupt completion or empty\n\n\n                A throw completion representing the exception that occurred during evaluation. undefined if no exception occurred or if [[Status]] is not evaluated.\n              \n\n\n\n                [[DFSIndex]]\n              \n\n                an integer or empty\n\n\n                Auxiliary field used during Link and Evaluate only. If [[Status]] is linking or evaluating,\n this non-negative number records the point at which the module was \nfirst visited during the depth-first traversal of the dependency graph.\n              \n\n\n\n                [[DFSAncestorIndex]]\n              \n\n                an integer or empty\n\n\n                Auxiliary field used during Link and Evaluate only. If [[Status]] is linking or evaluating, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n              \n\n\n\n                [[RequestedModules]]\n              \n\n                a List of Strings\n              \n\n                A List of all the ModuleSpecifier strings used by the module represented by this record to request the importation of a module. The List is source text occurrence ordered.\n              \n\n\n\n                [[CycleRoot]]\n              \n\n                a Cyclic Module Record or empty\n\n\n                The first visited module of the cycle, the root DFS \nancestor of the strongly connected component. For a module not in a \ncycle this would be the module itself. Once Evaluate has completed, a \nmodule's [[DFSAncestorIndex]] is equal to the [[DFSIndex]] of its \n[[CycleRoot]].\n              \n\n\n\n                [[HasTLA]]\n              \n\n                a Boolean\n              \n\n                Whether this module is individually asynchronous (for example, if it's a Source Text Module Record containing a top-level await). Having an asynchronous dependency does not mean this field is true. This field must not change after the module is parsed.\n              \n\n\n\n                [[AsyncEvaluation]]\n              \n\n                a Boolean\n              \n\n                Whether this module is either itself asynchronous or has\n an asynchronous dependency. Note: The order in which this field is set \nis used to order queued executions, see 16.2.1.5.2.4.\n              \n\n\n\n                [[TopLevelCapability]]\n              \n\n                a PromiseCapability Record or empty\n\n\n                If this module is the [[CycleRoot]] of some cycle, and \nEvaluate() was called on some module in that cycle, this field contains \nthe PromiseCapability Record\n for that entire evaluation. It is used to settle the Promise object \nthat is returned from the Evaluate() abstract method. This field will be\n empty for any dependencies of that module, unless a top-level Evaluate() has been initiated for some of those dependencies.\n              \n\n\n\n                [[AsyncParentModules]]\n              \n\n                a List of Cyclic Module Records\n\n\n                If this module or a dependency has [[HasTLA]] true,\n and execution is in progress, this tracks the parent importers of this \nmodule for the top-level execution job. These parent modules will not \nstart executing before this module has successfully completed execution.\n              \n\n\n\n                [[PendingAsyncDependencies]]\n              \n\n                an integer or empty\n\n\n                If this module has any asynchronous dependencies, this \ntracks the number of asynchronous dependency modules remaining to \nexecute for this module. A module with asynchronous dependencies will be\n executed when this field reaches 0 and there are no execution errors.\n              \n\n\n\nIn addition to the methods defined in Table 45 Cyclic Module Records have the additional methods listed in Table 47\nTable 47: Additional Abstract Methods of Cyclic Module Records\n\n\n\n                Method\n              \n\n                Purpose\n              \n\n\n\n                InitializeEnvironment()\n              \n\n                Initialize the Environment Record of the module, including resolving all imported bindings, and create the module's execution context.\n              \n\n\n\n                ExecuteModule( [ promiseCapability ] )\n              \n\n                Evaluate the module's code within its execution context. If this module has true in [[HasTLA]], then a PromiseCapability Record\n is passed as an argument, and the method is expected to resolve or \nreject the given capability. In this case, the method must not throw an \nexception, but instead reject the PromiseCapability Record if necessary.\n              \n\n\n\n\n16.2.1.5.1 Link ( )\nThe Link concrete method of a Cyclic Module Record module takes no arguments and returns either a normal completion containing unused or an abrupt completion. On success, Link transitions this module's [[Status]] from unlinked to linked. On failure, an exception is thrown and this module's [[Status]] remains unlinked. (Most of the work is done by the auxiliary function InnerModuleLinking.) It performs the following steps when called:\n1. Assert: module.[[Status]] is not linking or evaluating.2. Let stack be a new empty List.3. Let result be Completion(InnerModuleLinking(module, stack, 0)).4. If result is an abrupt completion, thena. For each Cyclic Module Record m of stack, doi. Assert: m.[[Status]] is linking.ii. Set m.[[Status]] to unlinked.b. Assert: module.[[Status]] is unlinked.c. Return ?\u00a0result.5. Assert: module.[[Status]] is linked, evaluating-async, or evaluated.6. Assert: stack is empty.7. Return unused.\n\n16.2.1.5.1.1 InnerModuleLinking ( module, stack, index )\nThe abstract operation InnerModuleLinking takes arguments module (a Module Record), stack, and index (a non-negative integer) and returns either a normal completion containing a non-negative integer or an abrupt completion. It is used by Link to perform the actual linking process for module, as well as recursively on all other modules in the dependency graph. The stack and index\n parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]]\n fields, keep track of the depth-first search (DFS) traversal. In \nparticular, [[DFSAncestorIndex]] is used to discover strongly connected \ncomponents (SCCs), such that all modules in an SCC transition to linked together. It performs the following steps when called:\n1. If module is not a Cyclic Module Record, thena. Perform ?\u00a0module.Link().b. Return index.2. If module.[[Status]] is linking, linked, evaluating-async, or evaluated, thena. Return index.3. Assert: module.[[Status]] is unlinked.4. Set module.[[Status]] to linking.5. Set module.[[DFSIndex]] to index.6. Set module.[[DFSAncestorIndex]] to index.7. Set index to index + 1.8. Append module to stack.9. For each String required of module.[[RequestedModules]], doa. Let requiredModule be ?\u00a0HostResolveImportedModule(module, required).b. Set index to ?\u00a0InnerModuleLinking(requiredModule, stack, index).c. If requiredModule is a Cyclic Module Record, theni. Assert: requiredModule.[[Status]] is either linking, linked, evaluating-async, or evaluated.ii. Assert: requiredModule.[[Status]] is linking if and only if requiredModule is in stack.iii. If requiredModule.[[Status]] is linking, then1. Set module.[[DFSAncestorIndex]] to min(module.[[DFSAncestorIndex]], requiredModule.[[DFSAncestorIndex]]).10. Perform ?\u00a0module.InitializeEnvironment().11. Assert: module occurs exactly once in stack.12. Assert: module.[[DFSAncestorIndex]] \u2264 module.[[DFSIndex]].13. If module.[[DFSAncestorIndex]] = module.[[DFSIndex]], thena. Let done be false.b. Repeat, while done is false,i. Let requiredModule be the last element in stack.ii. Remove the last element of stack.iii. Assert: requiredModule is a Cyclic Module Record.iv. Set requiredModule.[[Status]] to linked.v. If requiredModule and module are the same Module Record, set done to true.14. Return index.\n\n\n\n16.2.1.5.2 Evaluate ( )\nThe Evaluate concrete method of a Cyclic Module Record module takes no arguments and returns a Promise. Evaluate transitions this module's [[Status]] from linked to either evaluating-async or evaluated.\n The first time it is called on a module in a given strongly connected \ncomponent, Evaluate creates and returns a Promise which resolves when \nthe module has finished evaluating. This Promise is stored in the \n[[TopLevelCapability]] field of the [[CycleRoot]] for the component. \nFuture invocations of Evaluate on any module in the component return the\n same Promise. (Most of the work is done by the auxiliary function InnerModuleEvaluation.) It performs the following steps when called:\n1. Assert: This call to Evaluate is not happening at the same time as another call to Evaluate within the surrounding agent.2. Assert: module.[[Status]] is linked, evaluating-async, or evaluated.3. If module.[[Status]] is evaluating-async or evaluated, set module to module.[[CycleRoot]].4. If module.[[TopLevelCapability]] is not empty, thena. Return module.[[TopLevelCapability]].[[Promise]].5. Let stack be a new empty List.6. Let capability be !\u00a0NewPromiseCapability(%Promise%).7. Set module.[[TopLevelCapability]] to capability.8. Let result be Completion(InnerModuleEvaluation(module, stack, 0)).9. If result is an abrupt completion, thena. For each Cyclic Module Record m of stack, doi. Assert: m.[[Status]] is evaluating.ii. Set m.[[Status]] to evaluated.iii. Set m.[[EvaluationError]] to result.b. Assert: module.[[Status]] is evaluated.c. Assert: module.[[EvaluationError]] is result.d. Perform !\u00a0Call(capability.[[Reject]], undefined, \u00ab result.[[Value]] \u00bb).10. Else,a. Assert: module.[[Status]] is evaluating-async or evaluated.b. Assert: module.[[EvaluationError]] is empty.c. If module.[[AsyncEvaluation]] is false, theni. Assert: module.[[Status]] is evaluated.ii. Perform !\u00a0Call(capability.[[Resolve]], undefined, \u00ab undefined \u00bb).d. Assert: stack is empty.11. Return capability.[[Promise]].\n\n16.2.1.5.2.1 InnerModuleEvaluation ( module, stack, index )\nThe abstract operation InnerModuleEvaluation takes arguments module (a Module Record), stack, and index (a non-negative integer) and returns either a normal completion containing a non-negative integer or an abrupt completion. It is used by Evaluate to perform the actual evaluation process for module, as well as recursively on all other modules in the dependency graph. The stack and index parameters, as well as module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the same way as in InnerModuleLinking. It performs the following steps when called:\n1. If module is not a Cyclic Module Record, thena. Let promise be !\u00a0module.Evaluate().b. Assert: promise.[[PromiseState]] is not pending.c. If promise.[[PromiseState]] is rejected, theni. Return ThrowCompletion(promise.[[PromiseResult]]).d. Return index.2. If module.[[Status]] is evaluating-async or evaluated, thena. If module.[[EvaluationError]] is empty, return index.b. Otherwise, return ?\u00a0module.[[EvaluationError]].3. If module.[[Status]] is evaluating, return index.4. Assert: module.[[Status]] is linked.5. Set module.[[Status]] to evaluating.6. Set module.[[DFSIndex]] to index.7. Set module.[[DFSAncestorIndex]] to index.8. Set module.[[PendingAsyncDependencies]] to 0.9. Set index to index + 1.10. Append module to stack.11. For each String required of module.[[RequestedModules]], doa. Let requiredModule be !\u00a0HostResolveImportedModule(module, required).b. NOTE:\n Link must be completed successfully prior to invoking this method, so \nevery requested module is guaranteed to resolve successfully.c. Set index to ?\u00a0InnerModuleEvaluation(requiredModule, stack, index).d. If requiredModule is a Cyclic Module Record, theni. Assert: requiredModule.[[Status]] is either evaluating, evaluating-async, or evaluated.ii. Assert: requiredModule.[[Status]] is evaluating if and only if requiredModule is in stack.iii. If requiredModule.[[Status]] is evaluating, then1. Set module.[[DFSAncestorIndex]] to min(module.[[DFSAncestorIndex]], requiredModule.[[DFSAncestorIndex]]).iv. Else,1. Set requiredModule to requiredModule.[[CycleRoot]].2. Assert: requiredModule.[[Status]] is evaluating-async or evaluated.3. If requiredModule.[[EvaluationError]] is not empty, return ?\u00a0requiredModule.[[EvaluationError]].v. If requiredModule.[[AsyncEvaluation]] is true, then1. Set module.[[PendingAsyncDependencies]] to module.[[PendingAsyncDependencies]] + 1.2. Append module to requiredModule.[[AsyncParentModules]].12. If module.[[PendingAsyncDependencies]] > 0 or module.[[HasTLA]] is true, thena. Assert: module.[[AsyncEvaluation]] is false and was never previously set to true.b. Set module.[[AsyncEvaluation]] to true.c. NOTE: The order in which module records have their [[AsyncEvaluation]] fields transition to true is significant. (See 16.2.1.5.2.4.)d. If module.[[PendingAsyncDependencies]] is 0, perform ExecuteAsyncModule(module).13. Otherwise, perform ?\u00a0module.ExecuteModule().14. Assert: module occurs exactly once in stack.15. Assert: module.[[DFSAncestorIndex]] \u2264 module.[[DFSIndex]].16. If module.[[DFSAncestorIndex]] = module.[[DFSIndex]], thena. Let done be false.b. Repeat, while done is false,i. Let requiredModule be the last element in stack.ii. Remove the last element of stack.iii. Assert: requiredModule is a Cyclic Module Record.iv. If requiredModule.[[AsyncEvaluation]] is false, set requiredModule.[[Status]] to evaluated.v. Otherwise, set requiredModule.[[Status]] to evaluating-async.vi. If requiredModule and module are the same Module Record, set done to true.vii. Set requiredModule.[[CycleRoot]] to module.17. Return index.\nNote 1\nA module is evaluating while it is being traversed by InnerModuleEvaluation. A module is evaluated on execution completion or evaluating-async during execution if its [[HasTLA]] field is true or if it has asynchronous dependencies.\n\nNote 2\nAny modules depending on a module of an asynchronous cycle when that cycle is not evaluating\n will instead depend on the execution of the root of the cycle via \n[[CycleRoot]]. This ensures that the cycle state can be treated as a \nsingle strongly connected component through its root module state.\n\n\n\n16.2.1.5.2.2 ExecuteAsyncModule ( module )\nThe abstract operation ExecuteAsyncModule takes argument module (a Cyclic Module Record) and returns unused. It performs the following steps when called:\n1. Assert: module.[[Status]] is evaluating or evaluating-async.2. Assert: module.[[HasTLA]] is true.3. Let capability be !\u00a0NewPromiseCapability(%Promise%).4. Let fulfilledClosure be a new Abstract Closure with no parameters that captures module and performs the following steps when called:a. Perform AsyncModuleExecutionFulfilled(module).b. Return undefined.5. Let onFulfilled be CreateBuiltinFunction(fulfilledClosure, 0, \"\", \u00ab \u00bb).6. Let rejectedClosure be a new Abstract Closure with parameters (error) that captures module and performs the following steps when called:a. Perform AsyncModuleExecutionRejected(module, error).b. Return undefined.7. Let onRejected be CreateBuiltinFunction(rejectedClosure, 0, \"\", \u00ab \u00bb).8. Perform PerformPromiseThen(capability.[[Promise]], onFulfilled, onRejected).9. Perform !\u00a0module.ExecuteModule(capability).10. Return unused.\n\n\n16.2.1.5.2.3 GatherAvailableAncestors ( module, execList )\nThe abstract operation GatherAvailableAncestors takes arguments module (a Cyclic Module Record) and execList (a List of Cyclic Module Records) and returns unused. It performs the following steps when called:\n1. For each Cyclic Module Record m of module.[[AsyncParentModules]], doa. If execList does not contain m and m.[[CycleRoot]].[[EvaluationError]] is empty, theni. Assert: m.[[Status]] is evaluating-async.ii. Assert: m.[[EvaluationError]] is empty.iii. Assert: m.[[AsyncEvaluation]] is true.iv. Assert: m.[[PendingAsyncDependencies]] > 0.v. Set m.[[PendingAsyncDependencies]] to m.[[PendingAsyncDependencies]] - 1.vi. If m.[[PendingAsyncDependencies]] = 0, then1. Append m to execList.2. If m.[[HasTLA]] is false, perform GatherAvailableAncestors(m, execList).2. Return unused.\nNote\nWhen an asynchronous execution for a root module\n is fulfilled, this function determines the list of modules which are \nable to synchronously execute together on this completion, populating \nthem in execList.\n\n\n\n16.2.1.5.2.4 AsyncModuleExecutionFulfilled ( module )\nThe abstract operation AsyncModuleExecutionFulfilled takes argument module (a Cyclic Module Record) and returns unused. It performs the following steps when called:\n1. If module.[[Status]] is evaluated, thena. Assert: module.[[EvaluationError]] is not empty.b. Return unused.2. Assert: module.[[Status]] is evaluating-async.3. Assert: module.[[AsyncEvaluation]] is true.4. Assert: module.[[EvaluationError]] is empty.5. Set module.[[AsyncEvaluation]] to false.6. Set module.[[Status]] to evaluated.7. If module.[[TopLevelCapability]] is not empty, thena. Assert: module.[[CycleRoot]] is module.b. Perform !\u00a0Call(module.[[TopLevelCapability]].[[Resolve]], undefined, \u00ab undefined \u00bb).8. Let execList be a new empty List.9. Perform GatherAvailableAncestors(module, execList).10. Let sortedExecList be a List whose elements are the elements of execList, in the order in which they had their [[AsyncEvaluation]] fields set to true in InnerModuleEvaluation.11. Assert: All elements of sortedExecList have their [[AsyncEvaluation]] field set to true, [[PendingAsyncDependencies]] field set to 0, and [[EvaluationError]] field set to empty.12. For each Cyclic Module Record m of sortedExecList, doa. If m.[[Status]] is evaluated, theni. Assert: m.[[EvaluationError]] is not empty.b. Else if m.[[HasTLA]] is true, theni. Perform ExecuteAsyncModule(m).c. Else,i. Let result be m.ExecuteModule().ii. If result is an abrupt completion, then1. Perform AsyncModuleExecutionRejected(m, result.[[Value]]).iii. Else,1. Set m.[[Status]] to evaluated.2. If m.[[TopLevelCapability]] is not empty, thena. Assert: m.[[CycleRoot]] is m.b. Perform !\u00a0Call(m.[[TopLevelCapability]].[[Resolve]], undefined, \u00ab undefined \u00bb).13. Return unused.\n\n\n16.2.1.5.2.5 AsyncModuleExecutionRejected ( module, error )\nThe abstract operation AsyncModuleExecutionRejected takes arguments module (a Cyclic Module Record) and error (an ECMAScript language value) and returns unused. It performs the following steps when called:\n1. If module.[[Status]] is evaluated, thena. Assert: module.[[EvaluationError]] is not empty.b. Return unused.2. Assert: module.[[Status]] is evaluating-async.3. Assert: module.[[AsyncEvaluation]] is true.4. Assert: module.[[EvaluationError]] is empty.5. Set module.[[EvaluationError]] to ThrowCompletion(error).6. Set module.[[Status]] to evaluated.7. For each Cyclic Module Record m of module.[[AsyncParentModules]], doa. Perform AsyncModuleExecutionRejected(m, error).8. If module.[[TopLevelCapability]] is not empty, thena. Assert: module.[[CycleRoot]] is module.b. Perform !\u00a0Call(module.[[TopLevelCapability]].[[Reject]], undefined, \u00ab error \u00bb).9. Return unused.\n\n\n\n16.2.1.5.3 Example Cyclic Module Record Graphs\nThis non-normative section gives a series of examples of \nthe linking and evaluation of a few common module graphs, with a \nspecific focus on how errors can occur.\nFirst consider the following simple module graph:\nFigure 2: A simple module graph\n\n\nLet's first assume that there are no error conditions. When a host first calls A.Link(), this will complete successfully by assumption, and recursively link modules B and C as well, such that A.[[Status]] = B.[[Status]] = C.[[Status]] = linked. This preparatory step can be performed at any time. Later, when the host is ready to incur any possible side effects of the modules, it can call A.Evaluate(), which will complete successfully, returning a Promise resolving to undefined (again by assumption), recursively having evaluated first C and then B. Each module's [[Status]] at this point will be evaluated.\nConsider then cases involving linking errors. If InnerModuleLinking of C succeeds but, thereafter, fails for B, for example because it imports something that C does not provide, then the original A.Link() will fail, and both A and B's [[Status]] remain unlinked. C's [[Status]] has become linked, though.\nFinally, consider a case involving evaluation errors. If InnerModuleEvaluation of C succeeds but, thereafter, fails for B, for example because B contains code that throws an exception, then the original A.Evaluate() will fail, returning a rejected Promise. The resulting exception will be recorded in both A and B's [[EvaluationError]] fields, and their [[Status]] will become evaluated. C will also become evaluated but, in contrast to A and B,\n will remain without an [[EvaluationError]], as it successfully \ncompleted evaluation. Storing the exception ensures that any time a host tries to reuse A or B by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these methods. However, the specification enables such uses.)\nThe difference here between linking and evaluation errors \nis due to how evaluation must be only performed once, as it can cause \nside effects; it is thus important to remember whether evaluation has \nalready been performed, even if unsuccessfully. (In the error case, it \nmakes sense to also remember the exception because otherwise subsequent \nEvaluate() calls would have to synthesize a new one.) Linking, on the \nother hand, is side-effect-free, and thus even if it fails, it can be \nretried at a later time with no issues.\nNow consider a different type of error condition:\nFigure 3: A module graph with an unresolvable module\n\n\nIn this scenario, module A declares a dependency on some other module, but no Module Record exists for that module, i.e. HostResolveImportedModule\n throws an exception when asked for it. This could occur for a variety \nof reasons, such as the corresponding resource not existing, or the \nresource existing but ParseModule throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from HostResolveImportedModule. In any case, this exception causes a linking failure, which as before results in A's [[Status]] remaining unlinked.\nNow, consider a module graph with a cycle:\nFigure 4: A cyclic module graph\n\n\nHere we assume that the entry point is module A, so that the host proceeds by calling A.Link(), which performs InnerModuleLinking on A. This in turn calls InnerModuleLinking on B. Because of the cycle, this again triggers InnerModuleLinking on A, but at this point it is a no-op since A.[[Status]] is already linking. B.[[Status]] itself remains linking when control gets back to A and InnerModuleLinking is triggered on C. After this returns with C.[[Status]] being linked, both A and B transition from linking to linked together; this is by design, since they form a strongly connected component.\nAn analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.\nNow consider a case where A has an linking error; for example, it tries to import a binding from C that does not exist. In that case, the above steps still occur, including the early return from the second call to InnerModuleLinking on A. However, once we unwind back to the original InnerModuleLinking on A, it fails during InitializeEnvironment, namely right after C.ResolveExport(). The thrown SyntaxError exception propagates up to A.Link, which resets all modules that are currently on its stack (these are always exactly the modules that are still linking). Hence both A and B become unlinked. Note that C is left as linked.\nAlternatively, consider a case where A has an \nevaluation error; for example, its source code throws an exception. In \nthat case, the evaluation-time analog of the above steps still occurs, \nincluding the early return from the second call to InnerModuleEvaluation on A. However, once we unwind back to the original InnerModuleEvaluation on A, it fails by assumption. The exception thrown propagates up to A.Evaluate(), which records the error in all modules that are currently on its stack (i.e., the modules that are still evaluating) as well as via [[AsyncParentModules]], which form a chain for modules which contain or depend on top-level await through the whole dependency graph through the AsyncModuleExecutionRejected algorithm. Hence both A and B become evaluated and the exception is recorded in both A and B's [[EvaluationError]] fields, while C is left as evaluated with no [[EvaluationError]].\nLastly, consider a module graph with a cycle, where all modules complete asynchronously:\nFigure 5: An asynchronous cyclic module graph\n\n\nLinking happens as before, and all modules end up with [[Status]] set to linked.\nCalling A.Evaluate() calls InnerModuleEvaluation on A, B, and D, which all transition to evaluating. Then InnerModuleEvaluation is called on A again, which is a no-op because it is already evaluating. At this point, D.[[PendingAsyncDependencies]] is 0, so ExecuteAsyncModule(D) is called and we call D.ExecuteModule with a new PromiseCapability tracking the asynchronous execution of D. We unwind back to the InnerModuleEvaluation on B, setting B.[[PendingAsyncDependencies]] to 1 and B.[[AsyncEvaluation]] to true. We unwind back to the original InnerModuleEvaluation on A, setting A.[[PendingAsyncDependencies]] to 1. In the next iteration of the loop over A's dependencies, we call InnerModuleEvaluation on C and thus on D (again a no-op) and E. As E has no dependencies and is not part of a cycle, we call ExecuteAsyncModule(E) in the same manner as D and E is immediately removed from the stack. We unwind once more to the original InnerModuleEvaluation on A, setting C.[[AsyncEvaluation]] to true. Now we finish the loop over A's dependencies, set A.[[AsyncEvaluation]] to true, and remove the entire strongly connected component from the stack, transitioning all of the modules to evaluating-async at once. At this point, the fields of the modules are as given in Table 48.\nTable 48: Module fields after the initial Evaluate() call\n\n\n\nModule\n[[DFSIndex]]\n[[DFSAncestorIndex]]\n[[Status]]\n[[AsyncEvaluation]]\n[[AsyncParentModules]]\n[[PendingAsyncDependencies]]\n\n\n\nA\n0\n0\nevaluating-async\ntrue\n\u00ab \u00bb\n2 (B and C)\n\n\nB\n1\n0\nevaluating-async\ntrue\n\u00ab A \u00bb\n1 (D)\n\n\nC\n2\n0\nevaluating-async\ntrue\n\u00ab A \u00bb\n2 (D and E)\n\n\nD\n3\n0\nevaluating-async\ntrue\n\u00ab B, C \u00bb\n0\n\n\nE\n4\n4\nevaluating-async\ntrue\n\u00ab C \u00bb\n0\n\n\n\nLet us assume that E finishes executing first. When that happens, AsyncModuleExecutionFulfilled is called, E.[[Status]] is set to evaluated and C.[[PendingAsyncDependencies]] is decremented to become 1. The fields of the updated modules are as given in Table 49.\nTable 49: Module fields after module E finishes executing\n\n\n\nModule\n[[DFSIndex]]\n[[DFSAncestorIndex]]\n[[Status]]\n[[AsyncEvaluation]]\n[[AsyncParentModules]]\n[[PendingAsyncDependencies]]\n\n\n\nC\n2\n0\nevaluating-async\ntrue\n\u00ab A \u00bb\n1 (D)\n\n\nE\n4\n4\nevaluated\ntrue\n\u00ab C \u00bb\n0\n\n\n\nD is next to finish (as it was the only module that was still executing). When that happens, AsyncModuleExecutionFulfilled is called again and D.[[Status]] is set to evaluated. Then B.[[PendingAsyncDependencies]] is decremented to become 0, ExecuteAsyncModule is called on B, and it starts executing. C.[[PendingAsyncDependencies]] is also decremented to become 0, and C starts executing (potentially in parallel to B if B contains an await). The fields of the updated modules are as given in Table 50.\nTable 50: Module fields after module D finishes executing\n\n\n\nModule\n[[DFSIndex]]\n[[DFSAncestorIndex]]\n[[Status]]\n[[AsyncEvaluation]]\n[[AsyncParentModules]]\n[[PendingAsyncDependencies]]\n\n\n\nB\n1\n0\nevaluating-async\ntrue\n\u00ab A \u00bb\n0\n\n\nC\n2\n0\nevaluating-async\ntrue\n\u00ab A \u00bb\n0\n\n\nD\n3\n0\nevaluated\ntrue\n\u00ab B, C \u00bb\n0\n\n\n\nLet us assume that C finishes executing next. When that happens, AsyncModuleExecutionFulfilled is called again, C.[[Status]] is set to evaluated and A.[[PendingAsyncDependencies]] is decremented to become 1. The fields of the updated modules are as given in Table 51.\nTable 51: Module fields after module C finishes executing\n\n\n\nModule\n[[DFSIndex]]\n[[DFSAncestorIndex]]\n[[Status]]\n[[AsyncEvaluation]]\n[[AsyncParentModules]]\n[[PendingAsyncDependencies]]\n\n\n\nA\n0\n0\nevaluating-async\ntrue\n\u00ab \u00bb\n1 (B)\n\n\nC\n2\n0\nevaluated\ntrue\n\u00ab A \u00bb\n0\n\n\n\nThen, B finishes executing. When that happens, AsyncModuleExecutionFulfilled is called again and B.[[Status]] is set to evaluated. A.[[PendingAsyncDependencies]] is decremented to become 0, so ExecuteAsyncModule is called and it starts executing. The fields of the updated modules are as given in Table 52.\nTable 52: Module fields after module B finishes executing\n\n\n\nModule\n[[DFSIndex]]\n[[DFSAncestorIndex]]\n[[Status]]\n[[AsyncEvaluation]]\n[[AsyncParentModules]]\n[[PendingAsyncDependencies]]\n\n\n\nA\n0\n0\nevaluating-async\ntrue\n\u00ab \u00bb\n0\n\n\nB\n1\n0\nevaluated\ntrue\n\u00ab A \u00bb\n0\n\n\n\nFinally, A finishes executing. When that happens, AsyncModuleExecutionFulfilled is called again and A.[[Status]] is set to evaluated. At this point, the Promise in A.[[TopLevelCapability]] (which was returned from A.Evaluate())\n is resolved, and this concludes the handling of this module graph. The \nfields of the updated module are as given in Table 53.\nTable 53: Module fields after module A finishes executing\n\n\n\nModule\n[[DFSIndex]]\n[[DFSAncestorIndex]]\n[[Status]]\n[[AsyncEvaluation]]\n[[AsyncParentModules]]\n[[PendingAsyncDependencies]]\n\n\n\nA\n0\n0\nevaluated\ntrue\n\u00ab \u00bb\n0\n\n\n\nAlternatively, consider a failure case where C fails execution and returns an error before B has finished executing. When that happens, AsyncModuleExecutionRejected is called, which sets C.[[Status]] to evaluated and C.[[EvaluationError]] to the error. It then propagates this error to all of the AsyncParentModules by performing AsyncModuleExecutionRejected on each of them. The fields of the updated modules are as given in Table 54.\nTable 54: Module fields after module C finishes with an error\n\n\n\nModule\n[[DFSIndex]]\n[[DFSAncestorIndex]]\n[[Status]]\n[[AsyncEvaluation]]\n[[AsyncParentModules]]\n[[PendingAsyncDependencies]]\n[[EvaluationError]]\n\n\n\nA\n0\n0\nevaluated\ntrue\n\u00ab \u00bb\n1 (B)\nempty\n\n\nC\n2\n1\nevaluated\ntrue\n\u00ab A \u00bb\n0\nC's evaluation error\n\n\n\nA will be rejected with the same error as C since C will call AsyncModuleExecutionRejected on A with C's error. A.[[Status]] is set to evaluated. At this point the Promise in A.[[TopLevelCapability]] (which was returned from A.Evaluate()) is rejected. The fields of the updated module are as given in Table 55.\nTable 55: Module fields after module A is rejected\n\n\n\nModule\n[[DFSIndex]]\n[[DFSAncestorIndex]]\n[[Status]]\n[[AsyncEvaluation]]\n[[AsyncParentModules]]\n[[PendingAsyncDependencies]]\n[[EvaluationError]]\n\n\n\nA\n0\n0\nevaluated\ntrue\n\u00ab \u00bb\n0\nC's Evaluation Error\n\n\n\nThen, B finishes executing without an error. When that happens, AsyncModuleExecutionFulfilled is called again and B.[[Status]] is set to evaluated. GatherAvailableAncestors is called on B. However, A.[[CycleRoot]] is A which has an evaluation error, so it will not be added to the returned sortedExecList and AsyncModuleExecutionFulfilled will return without further processing. Any future importer of B will resolve the rejection of B.[[CycleRoot]].[[EvaluationError]] from the evaluation error from C that was set on the cycle root A. The fields of the updated modules are as given in Table 56.\nTable 56: Module fields after module B finishes executing in an erroring graph\n\n\n\nModule\n[[DFSIndex]]\n[[DFSAncestorIndex]]\n[[Status]]\n[[AsyncEvaluation]]\n[[AsyncParentModules]]\n[[PendingAsyncDependencies]]\n[[EvaluationError]]\n\n\n\nA\n0\n0\nevaluated\ntrue\n\u00ab \u00bb\n0\nC's Evaluation Error\n\n\nB\n1\n0\nevaluated\ntrue\n\u00ab A \u00bb\n0\nempty\n\n\n\n\n\n\n16.2.1.6 Source Text Module Records\nA Source Text Module Record is used to represent information about a module that was defined from ECMAScript source text (11) that was parsed using the goal symbol Module.\n Its fields contain digested information about the names that are \nimported by the module and its concrete methods use this digest to link,\n link, and evaluate the module.\nA Source Text Module Record can exist in a module graph with other subclasses of the abstract Module Record type, and can participate in cycles with other subclasses of the Cyclic Module Record type.\nIn addition to the fields defined in Table 46, Source Text Module Records have the additional fields listed in Table 57. Each of these fields is initially set in ParseModule.\nTable 57: Additional Fields of Source Text Module Records\n\n\n\n                Field Name\n              \n\n                Value Type\n              \n\n                Meaning\n              \n\n\n\n                [[ECMAScriptCode]]\n              \n\n                a Parse Node\n\n\n                The result of parsing the source text of this module using Module as the goal symbol.\n              \n\n\n\n                [[Context]]\n              \n\n                an ECMAScript execution context\n\n\n                The execution context associated with this module.\n              \n\n\n\n                [[ImportMeta]]\n              \n\n                an Object\n              \n\n                An object exposed through the import.meta meta property. It is empty until it is accessed by ECMAScript code.\n              \n\n\n\n                [[ImportEntries]]\n              \n\n                a List of ImportEntry Records\n\n\n                A List of ImportEntry records derived from the code of this module.\n              \n\n\n\n                [[LocalExportEntries]]\n              \n\n                a List of ExportEntry Records\n\n\n                A List of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.\n              \n\n\n\n                [[IndirectExportEntries]]\n              \n\n                a List of ExportEntry Records\n\n\n                A List\n of ExportEntry records derived from the code of this module that \ncorrespond to reexported imports that occur within the module or exports\n from export * as namespace declarations.\n              \n\n\n\n                [[StarExportEntries]]\n              \n\n                a List of ExportEntry Records\n\n\n                A List of ExportEntry records derived from the code of this module that correspond to export * declarations that occur within the module, not including export * as namespace declarations.\n              \n\n\n\nAn ImportEntry Record is a Record that digests information about a single declarative import. Each ImportEntry Record has the fields defined in Table 58:\nTable 58: ImportEntry Record Fields\n\n\n\n                Field Name\n              \n\n                Value Type\n              \n\n                Meaning\n              \n\n\n\n                [[ModuleRequest]]\n              \n\n                a String\n              \n\n                String value of the ModuleSpecifier of the ImportDeclaration.\n              \n\n\n\n                [[ImportName]]\n              \n\n                a String or namespace-object\n\n\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value namespace-object indicates that the import request is for the target module's namespace object.\n              \n\n\n\n                [[LocalName]]\n              \n\n                a String\n              \n\n                The name that is used to locally access the imported value from within the importing module.\n              \n\n\n\nNote 1\nTable 59 gives examples of ImportEntry records fields used to represent the syntactic import forms:\nTable 59 (Informative): Import Forms Mappings to ImportEntry Records\n\n\n\n                  Import Statement Form\n                \n\n                  [[ModuleRequest]]\n                \n\n                  [[ImportName]]\n                \n\n                  [[LocalName]]\n                \n\n\n\nimport v from \"mod\";\n\n\n\"mod\"\n\n\n\"default\"\n\n\n\"v\"\n\n\n\n\nimport * as ns from \"mod\";\n\n\n\"mod\"\n\n\nnamespace-object\n\n\n\"ns\"\n\n\n\n\nimport {x} from \"mod\";\n\n\n\"mod\"\n\n\n\"x\"\n\n\n\"x\"\n\n\n\n\nimport {x as v} from \"mod\";\n\n\n\"mod\"\n\n\n\"x\"\n\n\n\"v\"\n\n\n\n\nimport \"mod\";\n\n\n                  An ImportEntry Record is not created.\n                \n\n\n\n\nAn ExportEntry Record is a Record that digests information about a single declarative export. Each ExportEntry Record has the fields defined in Table 60:\nTable 60: ExportEntry Record Fields\n\n\n\n                Field Name\n              \n\n                Value Type\n              \n\n                Meaning\n              \n\n\n\n                [[ExportName]]\n              \n\n                a String or null\n\n\n                The name used to export this binding by this module.\n              \n\n\n\n                [[ModuleRequest]]\n              \n\n                a String or null\n\n\n                The String value of the ModuleSpecifier of the ExportDeclaration. null if the ExportDeclaration does not have a ModuleSpecifier.\n              \n\n\n\n                [[ImportName]]\n              \n\n                a String, null, all, or all-but-default\n\n\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. null if the ExportDeclaration does not have a ModuleSpecifier. all is used for export * as ns from \"mod\" declarations. all-but-default is used for export * from \"mod\" declarations.\n              \n\n\n\n                [[LocalName]]\n              \n\n                a String or null\n\n\n                The name that is used to locally access the exported value from within the importing module. null if the exported value is not locally accessible from within the module.\n              \n\n\n\nNote 2\nTable 61 gives examples of the ExportEntry record fields used to represent the syntactic export forms:\nTable 61 (Informative): Export Forms Mappings to ExportEntry Records\n\n\n\n                  Export Statement Form\n                \n\n                  [[ExportName]]\n                \n\n                  [[ModuleRequest]]\n                \n\n                  [[ImportName]]\n                \n\n                  [[LocalName]]\n                \n\n\n\nexport var v;\n\n\n\"v\"\n\n\nnull\n\n\nnull\n\n\n\"v\"\n\n\n\n\nexport default function f() {}\n\n\n\"default\"\n\n\nnull\n\n\nnull\n\n\n\"f\"\n\n\n\n\nexport default function () {}\n\n\n\"default\"\n\n\nnull\n\n\nnull\n\n\n\"*default*\"\n\n\n\n\nexport default 42;\n\n\n\"default\"\n\n\nnull\n\n\nnull\n\n\n\"*default*\"\n\n\n\n\nexport {x};\n\n\n\"x\"\n\n\nnull\n\n\nnull\n\n\n\"x\"\n\n\n\n\nexport {v as x};\n\n\n\"x\"\n\n\nnull\n\n\nnull\n\n\n\"v\"\n\n\n\n\nexport {x} from \"mod\";\n\n\n\"x\"\n\n\n\"mod\"\n\n\n\"x\"\n\n\nnull\n\n\n\n\nexport {v as x} from \"mod\";\n\n\n\"x\"\n\n\n\"mod\"\n\n\n\"v\"\n\n\nnull\n\n\n\n\nexport * from \"mod\";\n\n\nnull\n\n\n\"mod\"\n\n\nall-but-default\n\n\nnull\n\n\n\n\nexport * as ns from \"mod\";\n\n\n\"ns\"\n\n\n\"mod\"\n\n\nall\n\n\nnull\n\n\n\n\n\nThe following definitions specify the required concrete methods and other abstract operations for Source Text Module Records\n\n16.2.1.6.1 ParseModule ( sourceText, realm, hostDefined )\nThe abstract operation ParseModule takes arguments sourceText (ECMAScript source text), realm, and hostDefined and returns a Source Text Module Record or a non-empty List of SyntaxError objects. It creates a Source Text Module Record based upon the result of parsing sourceText as a Module. It performs the following steps when called:\n1. Let body be ParseText(sourceText, Module).2. If body is a List of errors, return body.3. Let requestedModules be the ModuleRequests of body.4. Let importEntries be ImportEntries of body.5. Let importedBoundNames be ImportedLocalNames(importEntries).6. Let indirectExportEntries be a new empty List.7. Let localExportEntries be a new empty List.8. Let starExportEntries be a new empty List.9. Let exportEntries be ExportEntries of body.10. For each ExportEntry Record ee of exportEntries, doa. If ee.[[ModuleRequest]] is null, theni. If ee.[[LocalName]] is not an element of importedBoundNames, then1. Append ee to localExportEntries.ii. Else,1. Let ie be the element of importEntries whose [[LocalName]] is the same as ee.[[LocalName]].2. If ie.[[ImportName]] is namespace-object, thena. NOTE: This is a re-export of an imported module namespace object.b. Append ee to localExportEntries.3. Else,a. NOTE: This is a re-export of a single name.b. Append the ExportEntry Record { [[ModuleRequest]]: ie.[[ModuleRequest]], [[ImportName]]: ie.[[ImportName]], [[LocalName]]: null, [[ExportName]]: ee.[[ExportName]] } to indirectExportEntries.b. Else if ee.[[ImportName]] is all-but-default, theni. Assert: ee.[[ExportName]] is null.ii. Append ee to starExportEntries.c. Else,i. Append ee to indirectExportEntries.11. Let async be body Contains await.12. Return Source Text Module Record { [[Realm]]: realm, [[Environment]]: empty, [[Namespace]]: empty, [[CycleRoot]]: empty, [[HasTLA]]: async, [[AsyncEvaluation]]: false, [[TopLevelCapability]]: empty, [[AsyncParentModules]]: \u00ab \u00bb, [[PendingAsyncDependencies]]: empty, [[Status]]: unlinked, [[EvaluationError]]: empty, [[HostDefined]]: hostDefined, [[ECMAScriptCode]]: body, [[Context]]: empty, [[ImportMeta]]: empty, [[RequestedModules]]: requestedModules, [[ImportEntries]]: importEntries, [[LocalExportEntries]]: localExportEntries, [[IndirectExportEntries]]: indirectExportEntries, [[StarExportEntries]]: starExportEntries, [[DFSIndex]]: empty, [[DFSAncestorIndex]]: empty }.\nNote\nAn implementation may parse module source text and \nanalyse it for Early Error conditions prior to the evaluation of \nParseModule for that module source text. However, the reporting of any \nerrors must be deferred until the point where this specification \nactually performs ParseModule upon that source text.\n\n\n\n16.2.1.6.2 GetExportedNames ( [ exportStarSet ] )\nThe GetExportedNames concrete method of a Source Text Module Record module takes optional argument exportStarSet (a List of Source Text Module Records) and returns either a normal completion containing a List of either Strings or null, or an abrupt completion. It performs the following steps when called:\n1. If exportStarSet is not present, set exportStarSet to a new empty List.2. If exportStarSet contains module, thena. Assert: We've reached the starting point of an export * circularity.b. Return a new empty List.3. Append module to exportStarSet.4. Let exportedNames be a new empty List.5. For each ExportEntry Record e of module.[[LocalExportEntries]], doa. Assert: module provides the direct binding for this export.b. Append e.[[ExportName]] to exportedNames.6. For each ExportEntry Record e of module.[[IndirectExportEntries]], doa. Assert: module imports a specific binding for this export.b. Append e.[[ExportName]] to exportedNames.7. For each ExportEntry Record e of module.[[StarExportEntries]], doa. Let requestedModule be ?\u00a0HostResolveImportedModule(module, e.[[ModuleRequest]]).b. Let starNames be ?\u00a0requestedModule.GetExportedNames(exportStarSet).c. For each element n of starNames, doi. If SameValue(n, \"default\") is false, then1. If n is not an element of exportedNames, thena. Append n to exportedNames.8. Return exportedNames.\nNote\nGetExportedNames does not filter out or throw an exception for names that have ambiguous star export bindings.\n\n\n\n16.2.1.6.3 ResolveExport ( exportName [ , resolveSet ] )\nThe ResolveExport concrete method of a Source Text Module Record module takes argument exportName (a String) and optional argument resolveSet (a List of Records that have [[Module]] and [[ExportName]] fields) and returns either a normal completion containing either a ResolvedBinding Record, null, or ambiguous, or an abrupt completion.\nResolveExport attempts to resolve an imported binding \nto the actual defining module and local binding name. The defining \nmodule may be the module represented by the Module Record this method was invoked on or some other module that is imported by that module. The parameter resolveSet is used to detect unresolved circular import/export paths. If a pair consisting of specific Module Record and exportName is reached that is already in resolveSet, an import circularity has been encountered. Before recursively calling ResolveExport, a pair consisting of module and exportName is added to resolveSet.\nIf a defining module is found, a ResolvedBinding Record\n { [[Module]], [[BindingName]] } is returned. This record identifies the\n resolved binding of the originally requested export, unless this is the\n export of a namespace with no local binding. In this case, \n[[BindingName]] will be set to namespace. If no definition was found or the request is found to be circular, null is returned. If the request is found to be ambiguous, ambiguous is returned.\nIt performs the following steps when called:\n1. If resolveSet is not present, set resolveSet to a new empty List.2. For each Record { [[Module]], [[ExportName]] } r of resolveSet, doa. If module and r.[[Module]] are the same Module Record and SameValue(exportName, r.[[ExportName]]) is true, theni. Assert: This is a circular import request.ii. Return null.3. Append the Record { [[Module]]: module, [[ExportName]]: exportName } to resolveSet.4. For each ExportEntry Record e of module.[[LocalExportEntries]], doa. If SameValue(exportName, e.[[ExportName]]) is true, theni. Assert: module provides the direct binding for this export.ii. Return ResolvedBinding Record { [[Module]]: module, [[BindingName]]: e.[[LocalName]] }.5. For each ExportEntry Record e of module.[[IndirectExportEntries]], doa. If SameValue(exportName, e.[[ExportName]]) is true, theni. Let importedModule be ?\u00a0HostResolveImportedModule(module, e.[[ModuleRequest]]).ii. If e.[[ImportName]] is all, then1. Assert: module does not provide the direct binding for this export.2. Return ResolvedBinding Record { [[Module]]: importedModule, [[BindingName]]: namespace }.iii. Else,1. Assert: module imports a specific binding for this export.2. Return ?\u00a0importedModule.ResolveExport(e.[[ImportName]], resolveSet).6. If SameValue(exportName, \"default\") is true, thena. Assert: A default export was not explicitly defined by this module.b. Return null.c. NOTE: A default export cannot be provided by an export * from \"mod\" declaration.7. Let starResolution be null.8. For each ExportEntry Record e of module.[[StarExportEntries]], doa. Let importedModule be ?\u00a0HostResolveImportedModule(module, e.[[ModuleRequest]]).b. Let resolution be ?\u00a0importedModule.ResolveExport(exportName, resolveSet).c. If resolution is ambiguous, return ambiguous.d. If resolution is not null, theni. Assert: resolution is a ResolvedBinding Record.ii. If starResolution is null, set starResolution to resolution.iii. Else,1. Assert: There is more than one * import that includes the requested name.2. If resolution.[[Module]] and starResolution.[[Module]] are not the same Module Record, return ambiguous.3. If resolution.[[BindingName]] is namespace and starResolution.[[BindingName]] is not namespace, or if resolution.[[BindingName]] is not namespace and starResolution.[[BindingName]] is namespace, return ambiguous.4. If resolution.[[BindingName]] is a String, starResolution.[[BindingName]] is a String, and SameValue(resolution.[[BindingName]], starResolution.[[BindingName]]) is false, return ambiguous.9. Return starResolution.\n\n\n16.2.1.6.4 InitializeEnvironment ( )\nThe InitializeEnvironment concrete method of a Source Text Module Record module takes no arguments and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. For each ExportEntry Record e of module.[[IndirectExportEntries]], doa. Let resolution be ?\u00a0module.ResolveExport(e.[[ExportName]]).b. If resolution is null or ambiguous, throw a SyntaxError exception.c. Assert: resolution is a ResolvedBinding Record.2. Assert: All named exports from module are resolvable.3. Let realm be module.[[Realm]].4. Assert: realm is not undefined.5. Let env be NewModuleEnvironment(realm.[[GlobalEnv]]).6. Set module.[[Environment]] to env.7. For each ImportEntry Record in of module.[[ImportEntries]], doa. Let importedModule be !\u00a0HostResolveImportedModule(module, in.[[ModuleRequest]]).b. NOTE: The above call cannot fail because imported module requests are a subset of module.[[RequestedModules]], and these have been resolved earlier in this algorithm.c. If in.[[ImportName]] is namespace-object, theni. Let namespace be ?\u00a0GetModuleNamespace(importedModule).ii. Perform !\u00a0env.CreateImmutableBinding(in.[[LocalName]], true).iii. Perform !\u00a0env.InitializeBinding(in.[[LocalName]], namespace).d. Else,i. Let resolution be ?\u00a0importedModule.ResolveExport(in.[[ImportName]]).ii. If resolution is null or ambiguous, throw a SyntaxError exception.iii. If resolution.[[BindingName]] is namespace, then1. Let namespace be ?\u00a0GetModuleNamespace(resolution.[[Module]]).2. Perform !\u00a0env.CreateImmutableBinding(in.[[LocalName]], true).3. Perform !\u00a0env.InitializeBinding(in.[[LocalName]], namespace).iv. Else,1. Perform env.CreateImportBinding(in.[[LocalName]], resolution.[[Module]], resolution.[[BindingName]]).8. Let moduleContext be a new ECMAScript code execution context.9. Set the Function of moduleContext to null.10. Assert: module.[[Realm]] is not undefined.11. Set the Realm of moduleContext to module.[[Realm]].12. Set the ScriptOrModule of moduleContext to module.13. Set the VariableEnvironment of moduleContext to module.[[Environment]].14. Set the LexicalEnvironment of moduleContext to module.[[Environment]].15. Set the PrivateEnvironment of moduleContext to null.16. Set module.[[Context]] to moduleContext.17. Push moduleContext onto the execution context stack; moduleContext is now the running execution context.18. Let code be module.[[ECMAScriptCode]].19. Let varDeclarations be the VarScopedDeclarations of code.20. Let declaredVarNames be a new empty List.21. For each element d of varDeclarations, doa. For each element dn of the BoundNames of d, doi. If dn is not an element of declaredVarNames, then1. Perform !\u00a0env.CreateMutableBinding(dn, false).2. Perform !\u00a0env.InitializeBinding(dn, undefined).3. Append dn to declaredVarNames.22. Let lexDeclarations be the LexicallyScopedDeclarations of code.23. Let privateEnv be null.24. For each element d of lexDeclarations, doa. For each element dn of the BoundNames of d, doi. If IsConstantDeclaration of d is true, then1. Perform !\u00a0env.CreateImmutableBinding(dn, true).ii. Else,1. Perform !\u00a0env.CreateMutableBinding(dn, false).iii. If d is a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration, then1. Let fo be InstantiateFunctionObject of d with arguments env and privateEnv.2. Perform !\u00a0env.InitializeBinding(dn, fo).25. Remove moduleContext from the execution context stack.26. Return unused.\n\n\n16.2.1.6.5 ExecuteModule ( [ capability ] )\nThe ExecuteModule concrete method of a Source Text Module Record module takes optional argument capability and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let moduleContext be a new ECMAScript code execution context.2. Set the Function of moduleContext to null.3. Set the Realm of moduleContext to module.[[Realm]].4. Set the ScriptOrModule of moduleContext to module.5. Assert: module has been linked and declarations in its module environment have been instantiated.6. Set the VariableEnvironment of moduleContext to module.[[Environment]].7. Set the LexicalEnvironment of moduleContext to module.[[Environment]].8. Suspend the currently running execution context.9. If module.[[HasTLA]] is false, thena. Assert: capability is not present.b. Push moduleContext onto the execution context stack; moduleContext is now the running execution context.c. Let result be the result of evaluating module.[[ECMAScriptCode]].d. Suspend moduleContext and remove it from the execution context stack.e. Resume the context that is now on the top of the execution context stack as the running execution context.f. If result is an abrupt completion, theni. Return ?\u00a0result.10. Else,a. Assert: capability is a PromiseCapability Record.b. Perform AsyncBlockStart(capability, module.[[ECMAScriptCode]], moduleContext).11. Return unused.\n\n\n\n16.2.1.7 HostResolveImportedModule ( referencingScriptOrModule, specifier )\nThe host-defined abstract operation HostResolveImportedModule takes arguments referencingScriptOrModule (a Script Record, a Module Record, or null) and specifier (a ModuleSpecifier String) and returns either a normal completion containing a Module Record or an abrupt completion. It provides the concrete Module Record subclass instance that corresponds to specifier occurring within the context of the script or module represented by referencingScriptOrModule. referencingScriptOrModule may be null if the resolution is being performed in the context of an import() expression and there is no active script or module at that time.\nNote\nAn example of when referencingScriptOrModule can be null is in a web browser host. There, if a user clicks on a control given by\n<button type=\"button\" onclick=\"import('./foo.mjs')\">Click me</button>\nthere will be no active script or module at the time the import() expression runs. More generally, this can happen in any situation where the host pushes execution contexts with null ScriptOrModule components onto the execution context stack.\n\nAn implementation of HostResolveImportedModule must conform to the following requirements:\n\n\n            If the returned Completion Record is a normal completion, it must be a normal completion containing an instance of a concrete subclass of Module Record.\n          \n\n            If a Module Record corresponding to the pair referencingScriptOrModule, specifier does not exist or cannot be created, an exception must be thrown.\n          \n\n            Each time this operation is called with a specific referencingScriptOrModule, specifier pair as arguments it must return the same Module Record instance if it completes normally.\n          \n\nMultiple different referencingScriptOrModule, specifier pairs may map to the same Module Record instance. The actual mapping semantic is host-defined but typically a normalization process is applied to specifier\n as part of the mapping process. A typical normalization process would \ninclude actions such as alphabetic case folding and expansion of \nrelative and abbreviated path specifiers.\n\n\n16.2.1.8 HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )\nThe host-defined abstract operation HostImportModuleDynamically takes arguments referencingScriptOrModule (a Script Record, a Module Record, or null), specifier (a ModuleSpecifier String), and promiseCapability (a PromiseCapability Record) and returns unused. It performs any necessary setup work in order to make available the module corresponding to specifier occurring within the context of the script or module represented by referencingScriptOrModule. referencingScriptOrModule may be null if there is no active script or module when the import() expression occurs. It then performs FinishDynamicImport to finish the dynamic import process.\nAn implementation of HostImportModuleDynamically must conform to the following requirements:\n\n\n            It must return unused. Success or failure must instead be signaled as discussed below.\n          \n\n            The host environment must conform to one of the two following sets of requirements:\n            \nSuccess path\n\n\nAt some future time, the host environment must perform FinishDynamicImport(referencingScriptOrModule, specifier, promiseCapability, promise), where promise is a Promise resolved with undefined.\nAny subsequent call to HostResolveImportedModule after FinishDynamicImport has completed, given the arguments referencingScriptOrModule and specifier, must return a normal completion containing a module which has already been evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion.\n\n\nFailure path\n\n\nAt some future time, the host environment must perform FinishDynamicImport(referencingScriptOrModule, specifier, promiseCapability, promise), where promise is a Promise rejected with an error representing the cause of failure.\n\n\n\n\n\n            If the host environment takes the success path once for a given referencingScriptOrModule, specifier pair, it must always do so for subsequent calls.\n          \n\n            The operation must not call promiseCapability.[[Resolve]] or promiseCapability.[[Reject]], but instead must treat promiseCapability as an opaque identifying value to be passed through to FinishDynamicImport.\n          \n\nThe actual process performed is host-defined, but typically consists of performing whatever I/O operations are necessary to allow HostResolveImportedModule to synchronously retrieve the appropriate Module Record, and then calling its Evaluate concrete method. This might require performing similar normalization as HostResolveImportedModule does.\n\n\n16.2.1.9 FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, innerPromise )\nThe abstract operation FinishDynamicImport takes arguments referencingScriptOrModule, specifier, promiseCapability (a PromiseCapability Record), and innerPromise and returns unused. FinishDynamicImport completes the process of a dynamic import originally started by an import() call, resolving or rejecting the promise returned by that call as appropriate according to innerPromise's resolution. It is performed by host environments as part of HostImportModuleDynamically. It performs the following steps when called:\n1. Let fulfilledClosure be a new Abstract Closure with parameters (result) that captures referencingScriptOrModule, specifier, and promiseCapability and performs the following steps when called:a. Assert: result is undefined.b. Let moduleRecord be !\u00a0HostResolveImportedModule(referencingScriptOrModule, specifier).c. Assert: Evaluate has already been invoked on moduleRecord and successfully completed.d. Let namespace be Completion(GetModuleNamespace(moduleRecord)).e. If namespace is an abrupt completion, theni. Perform !\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab namespace.[[Value]] \u00bb).f. Else,i. Perform !\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab namespace.[[Value]] \u00bb).g. Return unused.2. Let onFulfilled be CreateBuiltinFunction(fulfilledClosure, 0, \"\", \u00ab \u00bb).3. Let rejectedClosure be a new Abstract Closure with parameters (error) that captures promiseCapability and performs the following steps when called:a. Perform !\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab error \u00bb).b. Return unused.4. Let onRejected be CreateBuiltinFunction(rejectedClosure, 0, \"\", \u00ab \u00bb).5. Perform PerformPromiseThen(innerPromise, onFulfilled, onRejected).6. Return unused.\n\n\n16.2.1.10 GetModuleNamespace ( module )\nThe abstract operation GetModuleNamespace takes argument module (an instance of a concrete subclass of Module Record) and returns either a normal completion containing either a Module Namespace Object or empty, or an abrupt completion. It retrieves the Module Namespace Object representing module's exports, lazily creating it the first time it was requested, and storing it in module.[[Namespace]] for future retrieval. It performs the following steps when called:\n1. Assert: If module is a Cyclic Module Record, then module.[[Status]] is not unlinked.2. Let namespace be module.[[Namespace]].3. If namespace is empty, thena. Let exportedNames be ?\u00a0module.GetExportedNames().b. Let unambiguousNames be a new empty List.c. For each element name of exportedNames, doi. Let resolution be ?\u00a0module.ResolveExport(name).ii. If resolution is a ResolvedBinding Record, append name to unambiguousNames.d. Set namespace to ModuleNamespaceCreate(module, unambiguousNames).4. Return namespace.\nNote\nThe only way GetModuleNamespace can throw is via one of the triggered HostResolveImportedModule\n calls. Unresolvable names are simply excluded from the namespace at \nthis point. They will lead to a real linking error later unless they are\n all ambiguous star exports that are not explicitly requested anywhere.\n\n\n\n16.2.1.11 Runtime Semantics: Evaluation\n\nModule : [empty]\n\n\n1. Return undefined.\n\nModuleBody : ModuleItemList\n\n\n1. Let result be the result of evaluating ModuleItemList.2. If result.[[Type]] is normal and result.[[Value]] is empty, thena. Return undefined.3. Return ?\u00a0result.\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let sl be the result of evaluating ModuleItemList.2. ReturnIfAbrupt(sl).3. Let s be the result of evaluating ModuleItem.4. Return ?\u00a0UpdateEmpty(s, sl).\nNote\nThe value of a ModuleItemList is the value of the last value-producing item in the ModuleItemList.\n\n\nModuleItem : ImportDeclaration\n\n\n1. Return empty.\n\n\n\n16.2.2 Imports\nSyntax\n\nImportDeclaration : \nimport\nImportClause\nFromClause\n;\n\n\nimport\nModuleSpecifier\n;\n\n\n\nImportClause : \nImportedDefaultBinding\n\n\nNameSpaceImport\n\n\nNamedImports\n\n\nImportedDefaultBinding\n,\nNameSpaceImport\n\n\nImportedDefaultBinding\n,\nNamedImports\n\n\n\nImportedDefaultBinding : \nImportedBinding\n\n\n\nNameSpaceImport : \n*\nas\nImportedBinding\n\n\n\nNamedImports : \n{\n}\n\n\n{\nImportsList\n}\n\n\n{\nImportsList\n,\n}\n\n\n\nFromClause : \nfrom\nModuleSpecifier\n\n\n\nImportsList : \nImportSpecifier\n\n\nImportsList\n,\nImportSpecifier\n\n\n\nImportSpecifier : \nImportedBinding\n\n\nModuleExportName\nas\nImportedBinding\n\n\n\nModuleSpecifier : \nStringLiteral\n\n\n\nImportedBinding : \nBindingIdentifier[~Yield, +Await]\n\n\n\n\n16.2.2.1 Static Semantics: Early Errors\n\nModuleItem : ImportDeclaration\n\n\n\n\n            It is a Syntax Error if the BoundNames of ImportDeclaration contains any duplicate entries.\n          \n\n\n\n16.2.2.2 Static Semantics: ImportEntries\nThe syntax-directed operation ImportEntries takes no arguments and returns a List of ImportEntry Records. It is defined piecewise over the following productions:\n\nModule : [empty]\n\n\n1. Return a new empty List.\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let entries1 be ImportEntries of ModuleItemList.2. Let entries2 be ImportEntries of ModuleItem.3. Return the list-concatenation of entries1 and entries2.\n\nModuleItem : \nExportDeclaration\n\n\nStatementListItem\n\n\n\n1. Return a new empty List.\n\nImportDeclaration : \nimport\nImportClause\nFromClause\n;\n\n\n\n1. Let module be the sole element of ModuleRequests of FromClause.2. Return ImportEntriesForModule of ImportClause with argument module.\n\nImportDeclaration : \nimport\nModuleSpecifier\n;\n\n\n\n1. Return a new empty List.\n\n\n16.2.2.3 Static Semantics: ImportEntriesForModule\nThe syntax-directed operation ImportEntriesForModule takes argument module and returns a List of ImportEntry Records. It is defined piecewise over the following productions:\n\nImportClause : \nImportedDefaultBinding\n,\nNameSpaceImport\n\n\n\n1. Let entries1 be ImportEntriesForModule of ImportedDefaultBinding with argument module.2. Let entries2 be ImportEntriesForModule of NameSpaceImport with argument module.3. Return the list-concatenation of entries1 and entries2.\n\nImportClause : \nImportedDefaultBinding\n,\nNamedImports\n\n\n\n1. Let entries1 be ImportEntriesForModule of ImportedDefaultBinding with argument module.2. Let entries2 be ImportEntriesForModule of NamedImports with argument module.3. Return the list-concatenation of entries1 and entries2.\n\nImportedDefaultBinding : ImportedBinding\n\n\n1. Let localName be the sole element of BoundNames of ImportedBinding.2. Let defaultEntry be the ImportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: \"default\", [[LocalName]]: localName }.3. Return \u00ab defaultEntry \u00bb.\n\nNameSpaceImport : \n*\nas\nImportedBinding\n\n\n\n1. Let localName be the StringValue of ImportedBinding.2. Let entry be the ImportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: namespace-object, [[LocalName]]: localName }.3. Return \u00ab entry \u00bb.\n\nNamedImports : \n{\n}\n\n\n\n1. Return a new empty List.\n\nImportsList : \nImportsList\n,\nImportSpecifier\n\n\n\n1. Let specs1 be the ImportEntriesForModule of ImportsList with argument module.2. Let specs2 be the ImportEntriesForModule of ImportSpecifier with argument module.3. Return the list-concatenation of specs1 and specs2.\n\nImportSpecifier : ImportedBinding\n\n\n1. Let localName be the sole element of BoundNames of ImportedBinding.2. Let entry be the ImportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: localName, [[LocalName]]: localName }.3. Return \u00ab entry \u00bb.\n\nImportSpecifier : \nModuleExportName\nas\nImportedBinding\n\n\n\n1. Let importName be the StringValue of ModuleExportName.2. Let localName be the StringValue of ImportedBinding.3. Let entry be the ImportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: importName, [[LocalName]]: localName }.4. Return \u00ab entry \u00bb.\n\n\n\n16.2.3 Exports\nSyntax\n\nExportDeclaration : \nexport\nExportFromClause\nFromClause\n;\n\n\nexport\nNamedExports\n;\n\n\nexport\nVariableStatement[~Yield, +Await]\n\n\nexport\nDeclaration[~Yield, +Await]\n\n\nexport\ndefault\nHoistableDeclaration[~Yield, +Await, +Default]\n\n\nexport\ndefault\nClassDeclaration[~Yield, +Await, +Default]\n\n\nexport\ndefault\n[lookahead \u2209 { function, async\n[no LineTerminator here]\nfunction, class }]\nAssignmentExpression[+In, ~Yield, +Await]\n;\n\n\n\nExportFromClause : \n*\n\n\n*\nas\nModuleExportName\n\n\nNamedExports\n\n\n\nNamedExports : \n{\n}\n\n\n{\nExportsList\n}\n\n\n{\nExportsList\n,\n}\n\n\n\nExportsList : \nExportSpecifier\n\n\nExportsList\n,\nExportSpecifier\n\n\n\nExportSpecifier : \nModuleExportName\n\n\nModuleExportName\nas\nModuleExportName\n\n\n\n\n16.2.3.1 Static Semantics: Early Errors\n\nExportDeclaration : \nexport\nNamedExports\n;\n\n\n\n\n\n            It is a Syntax Error if ReferencedBindings of NamedExports contains any StringLiterals.\n          \n\n            For each IdentifierName n in ReferencedBindings of NamedExports: It is a Syntax Error if StringValue of n is a ReservedWord or if the StringValue of n is one of: \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", or \"static\".\n          \n\nNote\nThe above rule means that each ReferencedBindings of NamedExports is treated as an IdentifierReference.\n\n\n\n16.2.3.2 Static Semantics: ExportedBindings\nThe syntax-directed operation ExportedBindings takes no arguments and returns a List of Strings.\nNote\nExportedBindings are the locally bound names that are explicitly associated with a Module's ExportedNames.\n\nIt is defined piecewise over the following productions:\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let names1 be ExportedBindings of ModuleItemList.2. Let names2 be ExportedBindings of ModuleItem.3. Return the list-concatenation of names1 and names2.\n\nModuleItem : \nImportDeclaration\n\n\nStatementListItem\n\n\n\n1. Return a new empty List.\n\nExportDeclaration : \nexport\nExportFromClause\nFromClause\n;\n\n\n\n1. Return a new empty List.\n\nExportDeclaration : \nexport\nNamedExports\n;\n\n\n\n1. Return the ExportedBindings of NamedExports.\n\nExportDeclaration : \nexport\nVariableStatement\n\n\n\n1. Return the BoundNames of VariableStatement.\n\nExportDeclaration : \nexport\nDeclaration\n\n\n\n1. Return the BoundNames of Declaration.\n\nExportDeclaration : \nexport\ndefault\nHoistableDeclaration\n\n\nexport\ndefault\nClassDeclaration\n\n\nexport\ndefault\nAssignmentExpression\n;\n\n\n\n1. Return the BoundNames of this ExportDeclaration.\n\nNamedExports : \n{\n}\n\n\n\n1. Return a new empty List.\n\nExportsList : \nExportsList\n,\nExportSpecifier\n\n\n\n1. Let names1 be the ExportedBindings of ExportsList.2. Let names2 be the ExportedBindings of ExportSpecifier.3. Return the list-concatenation of names1 and names2.\n\nExportSpecifier : ModuleExportName\n\n\n1. Return a List whose sole element is the StringValue of ModuleExportName.\n\nExportSpecifier : \nModuleExportName\nas\nModuleExportName\n\n\n\n1. Return a List whose sole element is the StringValue of the first ModuleExportName.\n\n\n16.2.3.3 Static Semantics: ExportedNames\nThe syntax-directed operation ExportedNames takes no arguments and returns a List of Strings.\nNote\nExportedNames are the externally visible names that a Module explicitly maps to one of its local name bindings.\n\nIt is defined piecewise over the following productions:\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let names1 be ExportedNames of ModuleItemList.2. Let names2 be ExportedNames of ModuleItem.3. Return the list-concatenation of names1 and names2.\n\nModuleItem : ExportDeclaration\n\n\n1. Return the ExportedNames of ExportDeclaration.\n\nModuleItem : \nImportDeclaration\n\n\nStatementListItem\n\n\n\n1. Return a new empty List.\n\nExportDeclaration : \nexport\nExportFromClause\nFromClause\n;\n\n\n\n1. Return the ExportedNames of ExportFromClause.\n\nExportFromClause : *\n\n\n1. Return a new empty List.\n\nExportFromClause : \n*\nas\nModuleExportName\n\n\n\n1. Return a List whose sole element is the StringValue of ModuleExportName.\n\nExportFromClause : NamedExports\n\n\n1. Return the ExportedNames of NamedExports.\n\nExportDeclaration : \nexport\nVariableStatement\n\n\n\n1. Return the BoundNames of VariableStatement.\n\nExportDeclaration : \nexport\nDeclaration\n\n\n\n1. Return the BoundNames of Declaration.\n\nExportDeclaration : \nexport\ndefault\nHoistableDeclaration\n\n\nexport\ndefault\nClassDeclaration\n\n\nexport\ndefault\nAssignmentExpression\n;\n\n\n\n1. Return \u00ab \"default\" \u00bb.\n\nNamedExports : \n{\n}\n\n\n\n1. Return a new empty List.\n\nExportsList : \nExportsList\n,\nExportSpecifier\n\n\n\n1. Let names1 be the ExportedNames of ExportsList.2. Let names2 be the ExportedNames of ExportSpecifier.3. Return the list-concatenation of names1 and names2.\n\nExportSpecifier : ModuleExportName\n\n\n1. Return a List whose sole element is the StringValue of ModuleExportName.\n\nExportSpecifier : \nModuleExportName\nas\nModuleExportName\n\n\n\n1. Return a List whose sole element is the StringValue of the second ModuleExportName.\n\n\n16.2.3.4 Static Semantics: ExportEntries\nThe syntax-directed operation ExportEntries takes no arguments and returns a List of ExportEntry Records. It is defined piecewise over the following productions:\n\nModule : [empty]\n\n\n1. Return a new empty List.\n\nModuleItemList : \nModuleItemList\nModuleItem\n\n\n\n1. Let entries1 be ExportEntries of ModuleItemList.2. Let entries2 be ExportEntries of ModuleItem.3. Return the list-concatenation of entries1 and entries2.\n\nModuleItem : \nImportDeclaration\n\n\nStatementListItem\n\n\n\n1. Return a new empty List.\n\nExportDeclaration : \nexport\nExportFromClause\nFromClause\n;\n\n\n\n1. Let module be the sole element of ModuleRequests of FromClause.2. Return ExportEntriesForModule of ExportFromClause with argument module.\n\nExportDeclaration : \nexport\nNamedExports\n;\n\n\n\n1. Return ExportEntriesForModule of NamedExports with argument null.\n\nExportDeclaration : \nexport\nVariableStatement\n\n\n\n1. Let entries be a new empty List.2. Let names be the BoundNames of VariableStatement.3. For each element name of names, doa. Append the ExportEntry Record { [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]: name, [[ExportName]]: name } to entries.4. Return entries.\n\nExportDeclaration : \nexport\nDeclaration\n\n\n\n1. Let entries be a new empty List.2. Let names be the BoundNames of Declaration.3. For each element name of names, doa. Append the ExportEntry Record { [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]: name, [[ExportName]]: name } to entries.4. Return entries.\n\nExportDeclaration : \nexport\ndefault\nHoistableDeclaration\n\n\n\n1. Let names be BoundNames of HoistableDeclaration.2. Let localName be the sole element of names.3. Return a List whose sole element is the ExportEntry Record { [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]: localName, [[ExportName]]: \"default\" }.\n\nExportDeclaration : \nexport\ndefault\nClassDeclaration\n\n\n\n1. Let names be BoundNames of ClassDeclaration.2. Let localName be the sole element of names.3. Return a List whose sole element is the ExportEntry Record { [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]: localName, [[ExportName]]: \"default\" }.\n\nExportDeclaration : \nexport\ndefault\nAssignmentExpression\n;\n\n\n\n1. Let entry be the ExportEntry Record { [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]: \"*default*\", [[ExportName]]: \"default\" }.2. Return \u00ab entry \u00bb.\nNote\n\"*default*\" is used within this specification as a synthetic name for anonymous default export values. See this note for more details.\n\n\n\n16.2.3.5 Static Semantics: ExportEntriesForModule\nThe syntax-directed operation ExportEntriesForModule takes argument module and returns a List of ExportEntry Records. It is defined piecewise over the following productions:\n\nExportFromClause : *\n\n\n1. Let entry be the ExportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: all-but-default, [[LocalName]]: null, [[ExportName]]: null }.2. Return \u00ab entry \u00bb.\n\nExportFromClause : \n*\nas\nModuleExportName\n\n\n\n1. Let exportName be the StringValue of ModuleExportName.2. Let entry be the ExportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: all, [[LocalName]]: null, [[ExportName]]: exportName }.3. Return \u00ab entry \u00bb.\n\nNamedExports : \n{\n}\n\n\n\n1. Return a new empty List.\n\nExportsList : \nExportsList\n,\nExportSpecifier\n\n\n\n1. Let specs1 be the ExportEntriesForModule of ExportsList with argument module.2. Let specs2 be the ExportEntriesForModule of ExportSpecifier with argument module.3. Return the list-concatenation of specs1 and specs2.\n\nExportSpecifier : ModuleExportName\n\n\n1. Let sourceName be the StringValue of ModuleExportName.2. If module is null, thena. Let localName be sourceName.b. Let importName be null.3. Else,a. Let localName be null.b. Let importName be sourceName.4. Return a List whose sole element is the ExportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: importName, [[LocalName]]: localName, [[ExportName]]: sourceName }.\n\nExportSpecifier : \nModuleExportName\nas\nModuleExportName\n\n\n\n1. Let sourceName be the StringValue of the first ModuleExportName.2. Let exportName be the StringValue of the second ModuleExportName.3. If module is null, thena. Let localName be sourceName.b. Let importName be null.4. Else,a. Let localName be null.b. Let importName be sourceName.5. Return a List whose sole element is the ExportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: importName, [[LocalName]]: localName, [[ExportName]]: exportName }.\n\n\n16.2.3.6 Static Semantics: ReferencedBindings\nThe syntax-directed operation ReferencedBindings takes no arguments and returns a List of Parse Nodes. It is defined piecewise over the following productions:\n\nNamedExports : \n{\n}\n\n\n\n1. Return a new empty List.\n\nExportsList : \nExportsList\n,\nExportSpecifier\n\n\n\n1. Let names1 be the ReferencedBindings of ExportsList.2. Let names2 be the ReferencedBindings of ExportSpecifier.3. Return the list-concatenation of names1 and names2.\n\nExportSpecifier : \nModuleExportName\nas\nModuleExportName\n\n\n\n1. Return the ReferencedBindings of the first ModuleExportName.\n\nModuleExportName : IdentifierName\n\n\n1. Return a List whose sole element is the IdentifierName.\n\nModuleExportName : StringLiteral\n\n\n1. Return a List whose sole element is the StringLiteral.\n\n\n16.2.3.7 Runtime Semantics: Evaluation\n\nExportDeclaration : \nexport\nExportFromClause\nFromClause\n;\n\n\nexport\nNamedExports\n;\n\n\n\n1. Return empty.\n\nExportDeclaration : \nexport\nVariableStatement\n\n\n\n1. Return the result of evaluating VariableStatement.\n\nExportDeclaration : \nexport\nDeclaration\n\n\n\n1. Return the result of evaluating Declaration.\n\nExportDeclaration : \nexport\ndefault\nHoistableDeclaration\n\n\n\n1. Return the result of evaluating HoistableDeclaration.\n\nExportDeclaration : \nexport\ndefault\nClassDeclaration\n\n\n\n1. Let value be ?\u00a0BindingClassDeclarationEvaluation of ClassDeclaration.2. Let className be the sole element of BoundNames of ClassDeclaration.3. If className is \"*default*\", thena. Let env be the running execution context's LexicalEnvironment.b. Perform ?\u00a0InitializeBoundName(\"*default*\", value, env).4. Return empty.\n\nExportDeclaration : \nexport\ndefault\nAssignmentExpression\n;\n\n\n\n1. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, thena. Let value be ?\u00a0NamedEvaluation of AssignmentExpression with argument \"default\".2. Else,a. Let rhs be the result of evaluating AssignmentExpression.b. Let value be ?\u00a0GetValue(rhs).3. Let env be the running execution context's LexicalEnvironment.4. Perform ?\u00a0InitializeBoundName(\"*default*\", value, env).5. Return empty.\n\n\n\n\n\n17 Error Handling and Language Extensions\nAn implementation must report most errors at the time the relevant ECMAScript language construct is evaluated. An early error is an error that can be detected and reported prior to the evaluation of any construct in the Script containing the error. The presence of an early error prevents the evaluation of the construct. An implementation must report early errors in a Script as part of parsing that Script in ParseScript. Early errors in a Module are reported at the point when the Module would be evaluated and the Module is never initialized. Early errors in eval code are reported at the time eval is called and prevent evaluation of the eval code. All errors that are not early errors are runtime errors.\nAn implementation must report as an early error any occurrence of a condition that is listed in a \u201cStatic Semantics: Early Errors\u201d subclause of this specification.\nAn implementation shall not treat other kinds of errors as early errors\n even if the compiler can prove that a construct cannot execute without \nerror under any circumstances. An implementation may issue an early \nwarning in such a case, but it should not report the error until the \nrelevant construct is actually executed.\nAn implementation shall report all errors as specified, except for the following:\n\n\n      Except as restricted in 17.1, a host or implementation may extend Script syntax, Module syntax, and regular expression pattern or flag syntax. To permit this, all operations (such as calling eval, using a regular expression literal, or using the Function or RegExp constructor) that are allowed to throw SyntaxError are permitted to exhibit host-defined behaviour instead of throwing SyntaxError when they encounter a host-defined extension to the script syntax or regular expression pattern or flag syntax.\n    \n\n      Except as restricted in 17.1, a host\n or implementation may provide additional types, values, objects, \nproperties, and functions beyond those described in this specification. \nThis may cause constructs (such as looking up a variable in the global \nscope) to have host-defined behaviour instead of throwing an error (such as ReferenceError).\n    \n\n\n17.1 Forbidden Extensions\nAn implementation must not extend this specification in the following ways:\n\n\n        ECMAScript function objects defined using syntactic constructors in strict mode code must not be created with own properties named \"caller\" or \"arguments\". Such own properties also must not be created for function objects defined using an ArrowFunction, MethodDefinition, GeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression, ClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or AsyncArrowFunction regardless of whether the definition is contained in strict mode code. Built-in functions, strict functions created using the Function constructor, generator functions created using the Generator constructor, async functions created using the AsyncFunction constructor, and functions created using the bind method also must not be created with such own properties.\n      \n\n        If an implementation extends any function object with an own property named \"caller\" the value of that property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function object. If it is an accessor property, the function that is the value of the property's [[Get]] attribute must never return a strict function when called.\n      \n\n        Neither mapped nor unmapped arguments objects may be created with an own property named \"caller\".\n      \n\n        The behaviour of built-in methods which are specified in ECMA-402, such as those named toLocaleString, must not be extended except as specified in ECMA-402.\n      \n\n        The RegExp pattern grammars in 22.2.1 and B.1.2 must not be extended to recognize any of the source characters A-Z or a-z as IdentityEscape[+UnicodeMode] when the [UnicodeMode] grammar parameter is present.\n      \n\n        The Syntactic Grammar must not be extended in any manner that allows the token : to immediately follow source text that is matched by the BindingIdentifier nonterminal symbol.\n      \n\n        When processing strict mode code, an implementation must not relax the early error rules of 12.8.3.1.\n      \n\nTemplateEscapeSequence must not be extended to include LegacyOctalEscapeSequence or NonOctalDecimalEscapeSequence as defined in 12.8.4.\n      \n\n        When processing strict mode code, the extensions defined in B.3.1, B.3.2, B.3.3, and B.3.5 must not be supported.\n      \n\n        When parsing for the Module goal symbol, the lexical grammar extensions defined in B.1.1 must not be supported.\n      \n\n\nImportCall must not be extended.\n      \n\n\n\n\n18 ECMAScript Standard Built-in Objects\nThere are certain built-in objects available whenever an ECMAScript Script or Module begins execution. One, the global object, is part of the global environment of the executing program. Others are accessible as initial properties of the global object or indirectly as properties of accessible built-in objects.\nUnless specified otherwise, a built-in object that is callable as a function is a built-in function object with the characteristics described in 10.3. Unless specified otherwise, the [[Extensible]] internal slot of a built-in object initially has the value true. Every built-in function object has a [[Realm]] internal slot whose value is the Realm Record of the realm for which the object was initially created.\nMany built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are functions intended for use with the new\n operator. For each built-in function, this specification describes the \narguments required by that function and the properties of that function object. For each built-in constructor, this specification furthermore describes properties of the prototype object of that constructor and properties of specific object instances returned by a new expression that invokes that constructor.\nUnless otherwise specified in the description of a particular function, if a built-in function or constructor is given fewer arguments than the function is specified to require, the function or constructor shall behave exactly as if it had been given sufficient additional arguments, each such argument being the undefined\n value. Such missing arguments are considered to be \u201cnot present\u201d and \nmay be identified in that manner by specification algorithms. In the \ndescription of a particular function, the terms \u201cthis value\u201d and \u201cNewTarget\u201d have the meanings given in 10.3.\nUnless otherwise specified in the description of a particular function, if a built-in function or constructor\n described is given more arguments than the function is specified to \nallow, the extra arguments are evaluated by the call and then ignored by\n the function. However, an implementation may define implementation \nspecific behaviour relating to such arguments as long as the behaviour \nis not the throwing of a TypeError exception that is predicated simply on the presence of an extra argument.\nNote 1\nImplementations that add additional capabilities to the set of \nbuilt-in functions are encouraged to do so by adding new functions \nrather than adding new parameters to existing functions.\n\nUnless otherwise specified every built-in function and every built-in constructor has the Function prototype object, which is the initial value of the expression Function.prototype (20.2.3), as the value of its [[Prototype]] internal slot.\nUnless otherwise specified every built-in prototype object has the Object prototype object, which is the initial value of the expression Object.prototype (20.1.3), as the value of its [[Prototype]] internal slot, except the Object prototype object itself.\nBuilt-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function.\nEach built-in function defined in this specification is created by calling the CreateBuiltinFunction abstract operation (10.3.3). The values of the length and name parameters are the initial values of the \"length\" and \"name\" properties as discussed below. The values of the prefix parameter are similarly discussed below.\nEvery built-in function object, including constructors, has a \"length\" property whose value is a non-negative integral Number.\n Unless otherwise specified, this value is equal to the number of \nrequired parameters shown in the subclause heading for the function \ndescription. Optional parameters and rest parameters are not included in\n the parameter count.\nNote 2\nFor example, the function object that is the initial value of the \"map\" property of the Array prototype object\n is described under the subclause heading \u00abArray.prototype.map \n(callbackFn [ , thisArg])\u00bb which shows the two named arguments \ncallbackFn and thisArg, the latter being optional; therefore the value \nof the \"length\" property of that function object is 1\ud835\udd3d.\n\nUnless otherwise specified, the \"length\" property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\nEvery built-in function object, including constructors, has a \"name\"\n property whose value is a String. Unless otherwise specified, this \nvalue is the name that is given to the function in this specification. \nFunctions that are identified as anonymous functions use the empty \nString as the value of the \"name\" property. For functions that are specified as properties of objects, the name value is the property name string used to access the function. Functions that are specified as get or set accessor functions of built-in properties have \"get\" or \"set\" (respectively) passed to the prefix parameter when calling CreateBuiltinFunction.\nThe value of the \"name\" property is explicitly specified for each built-in functions whose property key is a Symbol value. If such an explicitly specified value starts with the prefix \"get \" or \"set \"\n and the function for which it is specified is a get or set accessor \nfunction of a built-in property, the value without the prefix is passed \nto the name parameter, and the value \"get\" or \"set\" (respectively) is passed to the prefix parameter when calling CreateBuiltinFunction.\nUnless otherwise specified, the \"name\" property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\nEvery other data property described in clauses 19 through 28 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\nEvery accessor property described in clauses 19 through 28 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined. If only a set accessor is described the get accessor is the default value, undefined.\n\n\n19 The Global Object\nThe global object:\n\nis created before control enters any execution context.\ndoes not have a [[Construct]] internal method; it cannot be used as a constructor with the new operator.\ndoes not have a [[Call]] internal method; it cannot be invoked as a function.\nhas a [[Prototype]] internal slot whose value is host-defined.\nmay have host-defined\n properties in addition to the properties defined in this specification.\n This may include a property whose value is the global object itself.\n\n\n19.1 Value Properties of the Global Object\n\n19.1.1 globalThis\nThe initial value of the \"globalThis\" property of the global object in a Realm Record realm is realm.[[GlobalEnv]].[[GlobalThisValue]].\nThis property has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n19.1.2 Infinity\nThe value of Infinity is +\u221e\ud835\udd3d (see 6.1.6.1). This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n19.1.3 NaN\nThe value of NaN is NaN (see 6.1.6.1). This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n19.1.4 undefined\nThe value of undefined is undefined (see 6.1.1). This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n19.2 Function Properties of the Global Object\n\n19.2.1 eval ( x )\nThe eval function is the %eval% intrinsic object. When the eval function is called with one argument x, the following steps are taken:\n1. Assert: The execution context stack has at least two elements.2. Let callerContext be the second to top element of the execution context stack.3. Let callerRealm be callerContext's Realm.4. Return ?\u00a0PerformEval(x, callerRealm, false, false).\n\n19.2.1.1 PerformEval ( x, callerRealm, strictCaller, direct )\nThe abstract operation PerformEval takes arguments x, callerRealm, strictCaller, and direct and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Assert: If direct is false, then strictCaller is also false.2. If Type(x) is not String, return x.3. Let evalRealm be the current Realm Record.4. Perform ?\u00a0HostEnsureCanCompileStrings(callerRealm, evalRealm).5. Let inFunction be false.6. Let inMethod be false.7. Let inDerivedConstructor be false.8. Let inClassFieldInitializer be false.9. If direct is true, thena. Let thisEnvRec be GetThisEnvironment().b. If thisEnvRec is a function Environment Record, theni. Let F be thisEnvRec.[[FunctionObject]].ii. Set inFunction to true.iii. Set inMethod to thisEnvRec.HasSuperBinding().iv. If F.[[ConstructorKind]] is derived, set inDerivedConstructor to true.v. Let classFieldIntializerName be F.[[ClassFieldInitializerName]].vi. If classFieldIntializerName is not empty, set inClassFieldInitializer to true.10. Perform the following substeps in an implementation-defined order, possibly interleaving parsing and error detection:a. Let script be ParseText(StringToCodePoints(x), Script).b. If script is a List of errors, throw a SyntaxError exception.c. If script Contains ScriptBody is false, return undefined.d. Let body be the ScriptBody of script.e. If inFunction is false, and body Contains NewTarget, throw a SyntaxError exception.f. If inMethod is false, and body Contains SuperProperty, throw a SyntaxError exception.g. If inDerivedConstructor is false, and body Contains SuperCall, throw a SyntaxError exception.h. If inClassFieldInitializer is true, and ContainsArguments of body is true, throw a SyntaxError exception.11. If strictCaller is true, let strictEval be true.12. Else, let strictEval be IsStrict of script.13. Let runningContext be the running execution context.14. NOTE: If direct is true, runningContext will be the execution context that performed the direct eval. If direct is false, runningContext will be the execution context for the invocation of the eval function.15. If direct is true, thena. Let lexEnv be NewDeclarativeEnvironment(runningContext's LexicalEnvironment).b. Let varEnv be runningContext's VariableEnvironment.c. Let privateEnv be runningContext's PrivateEnvironment.16. Else,a. Let lexEnv be NewDeclarativeEnvironment(evalRealm.[[GlobalEnv]]).b. Let varEnv be evalRealm.[[GlobalEnv]].c. Let privateEnv be null.17. If strictEval is true, set varEnv to lexEnv.18. If runningContext is not already suspended, suspend runningContext.19. Let evalContext be a new ECMAScript code execution context.20. Set evalContext's Function to null.21. Set evalContext's Realm to evalRealm.22. Set evalContext's ScriptOrModule to runningContext's ScriptOrModule.23. Set evalContext's VariableEnvironment to varEnv.24. Set evalContext's LexicalEnvironment to lexEnv.25. Set evalContext's PrivateEnvironment to privateEnv.26. Push evalContext onto the execution context stack; evalContext is now the running execution context.27. Let result be Completion(EvalDeclarationInstantiation(body, varEnv, lexEnv, privateEnv, strictEval)).28. If result.[[Type]] is normal, thena. Set result to the result of evaluating body.29. If result.[[Type]] is normal and result.[[Value]] is empty, thena. Set result to NormalCompletion(undefined).30. Suspend evalContext and remove it from the execution context stack.31. Resume the context that is now on the top of the execution context stack as the running execution context.32. Return ?\u00a0result.\nNote\nThe eval code cannot instantiate variable or function \nbindings in the variable environment of the calling context that invoked\n the eval if either the code of the calling context or the eval code is strict mode code.\n Instead such bindings are instantiated in a new VariableEnvironment \nthat is only accessible to the eval code. Bindings introduced by let, const, or class declarations are always instantiated in a new LexicalEnvironment.\n\n\n\n19.2.1.2 HostEnsureCanCompileStrings ( callerRealm, calleeRealm )\nThe host-defined abstract operation HostEnsureCanCompileStrings takes arguments callerRealm (a Realm Record) and calleeRealm (a Realm Record) and returns either a normal completion containing unused or an abrupt completion. It allows host environments to block certain ECMAScript functions which allow developers to compile strings into ECMAScript code.\nAn implementation of HostEnsureCanCompileStrings must conform to the following requirements:\n\nIf the returned Completion Record is a normal completion, it must be a normal completion containing unused.\n\nThe default implementation of HostEnsureCanCompileStrings is to return NormalCompletion(unused).\n\n\n19.2.1.3 EvalDeclarationInstantiation ( body, varEnv, lexEnv, privateEnv, strict )\nThe abstract operation EvalDeclarationInstantiation takes arguments body, varEnv, lexEnv, privateEnv, and strict and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n\n1. Let varNames be the VarDeclaredNames of body.2. Let varDeclarations be the VarScopedDeclarations of body.3. If strict is false, thena. If varEnv is a global Environment Record, theni. For each element name of varNames, do1. If varEnv.HasLexicalDeclaration(name) is true, throw a SyntaxError exception.2. NOTE: eval will not create a global var declaration that would be shadowed by a global lexical declaration.b. Let thisEnv be lexEnv.c. Assert: The following loop will terminate.d. Repeat, while thisEnv is not the same as varEnv,i. If thisEnv is not an object Environment Record, then1. NOTE:\n The environment of with statements cannot contain any lexical \ndeclaration so it doesn't need to be checked for var/let hoisting \nconflicts.2. For each element name of varNames, doa. If !\u00a0thisEnv.HasBinding(name) is true, theni. Throw a SyntaxError exception.ii. NOTE: Annex B.3.4 defines alternate semantics for the above step.b. NOTE: A direct eval will not hoist var declaration over a like-named lexical declaration.ii. Set thisEnv to thisEnv.[[OuterEnv]].4. Let privateIdentifiers be a new empty List.5. Let pointer be privateEnv.6. Repeat, while pointer is not null,a. For each Private Name binding of pointer.[[Names]], doi. If privateIdentifiers does not contain binding.[[Description]], append binding.[[Description]] to privateIdentifiers.b. Set pointer to pointer.[[OuterPrivateEnvironment]].7. If AllPrivateIdentifiersValid of body with argument privateIdentifiers is false, throw a SyntaxError exception.8. Let functionsToInitialize be a new empty List.9. Let declaredFunctionNames be a new empty List.10. For each element d of varDeclarations, in reverse List order, doa. If d is neither a VariableDeclaration nor a ForBinding nor a BindingIdentifier, theni. Assert: d is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration.ii. NOTE: If there are multiple function declarations for the same name, the last declaration is used.iii. Let fn be the sole element of the BoundNames of d.iv. If fn is not an element of declaredFunctionNames, then1. If varEnv is a global Environment Record, thena. Let fnDefinable be ?\u00a0varEnv.CanDeclareGlobalFunction(fn).b. If fnDefinable is false, throw a TypeError exception.2. Append fn to declaredFunctionNames.3. Insert d as the first element of functionsToInitialize.11. NOTE: Annex B.3.2.3 adds additional steps at this point.12. Let declaredVarNames be a new empty List.13. For each element d of varDeclarations, doa. If d is a VariableDeclaration, a ForBinding, or a BindingIdentifier, theni. For each String vn of the BoundNames of d, do1. If vn is not an element of declaredFunctionNames, thena. If varEnv is a global Environment Record, theni. Let vnDefinable be ?\u00a0varEnv.CanDeclareGlobalVar(vn).ii. If vnDefinable is false, throw a TypeError exception.b. If vn is not an element of declaredVarNames, theni. Append vn to declaredVarNames.14. NOTE: No abnormal terminations occur after this algorithm step unless varEnv is a global Environment Record and the global object is a Proxy exotic object.15. Let lexDeclarations be the LexicallyScopedDeclarations of body.16. For each element d of lexDeclarations, doa. NOTE: Lexically declared names are only instantiated here but not initialized.b. For each element dn of the BoundNames of d, doi. If IsConstantDeclaration of d is true, then1. Perform ?\u00a0lexEnv.CreateImmutableBinding(dn, true).ii. Else,1. Perform ?\u00a0lexEnv.CreateMutableBinding(dn, false).17. For each Parse Node f of functionsToInitialize, doa. Let fn be the sole element of the BoundNames of f.b. Let fo be InstantiateFunctionObject of f with arguments lexEnv and privateEnv.c. If varEnv is a global Environment Record, theni. Perform ?\u00a0varEnv.CreateGlobalFunctionBinding(fn, fo, true).d. Else,i. Let bindingExists be !\u00a0varEnv.HasBinding(fn).ii. If bindingExists is false, then1. NOTE: The following invocation cannot return an abrupt completion because of the validation preceding step 14.2. Perform !\u00a0varEnv.CreateMutableBinding(fn, true).3. Perform !\u00a0varEnv.InitializeBinding(fn, fo).iii. Else,1. Perform !\u00a0varEnv.SetMutableBinding(fn, fo, false).18. For each String vn of declaredVarNames, doa. If varEnv is a global Environment Record, theni. Perform ?\u00a0varEnv.CreateGlobalVarBinding(vn, true).b. Else,i. Let bindingExists be !\u00a0varEnv.HasBinding(vn).ii. If bindingExists is false, then1. NOTE: The following invocation cannot return an abrupt completion because of the validation preceding step 14.2. Perform !\u00a0varEnv.CreateMutableBinding(vn, true).3. Perform !\u00a0varEnv.InitializeBinding(vn, undefined).19. Return unused.\nNote\nAn alternative version of this algorithm is described in B.3.4.\n\n\n\n\n19.2.2 isFinite ( number )\nThe isFinite function is the %isFinite% intrinsic object. When the isFinite function is called with one argument number, the following steps are taken:\n1. Let num be ?\u00a0ToNumber(number).2. If num is NaN, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return false.3. Otherwise, return true.\n\n\n19.2.3 isNaN ( number )\nThe isNaN function is the %isNaN% intrinsic object. When the isNaN function is called with one argument number, the following steps are taken:\n1. Let num be ?\u00a0ToNumber(number).2. If num is NaN, return true.3. Otherwise, return false.\nNote\nA reliable way for ECMAScript code to test if a value X is a NaN is an expression of the form X !== X. The result will be true if and only if X is a NaN.\n\n\n\n19.2.4 parseFloat ( string )\nThe parseFloat function produces a Number value dictated by interpretation of the contents of the string argument as a decimal literal.\nThe parseFloat function is the %parseFloat% intrinsic object. When the parseFloat function is called with one argument string, the following steps are taken:\n1. Let inputString be ?\u00a0ToString(string).2. Let trimmedString be !\u00a0TrimString(inputString, start).3. If neither trimmedString nor any prefix of trimmedString satisfies the syntax of a StrDecimalLiteral (see 7.1.4.1), return NaN.4. Let numberString be the longest prefix of trimmedString, which might be trimmedString itself, that satisfies the syntax of a StrDecimalLiteral.5. Let parsedNumber be ParseText(StringToCodePoints(numberString), StrDecimalLiteral).6. Assert: parsedNumber is a Parse Node.7. Return StringNumericValue of parsedNumber.\nNote\nparseFloat may interpret only a leading portion of string as a Number value;\n it ignores any code units that cannot be interpreted as part of the \nnotation of a decimal literal, and no indication is given that any such \ncode units were ignored.\n\n\n\n19.2.5 parseInt ( string, radix )\nThe parseInt function produces an integral Number dictated by interpretation of the contents of the string argument according to the specified radix. Leading white space in string is ignored. If radix is undefined or 0, it is assumed to be 10 except when the number begins with the code unit pairs 0x or 0X, in which case a radix of 16 is assumed. If radix is 16, the number may also optionally begin with the code unit pairs 0x or 0X.\nThe parseInt function is the %parseInt% intrinsic object. When the parseInt function is called, the following steps are taken:\n1. Let inputString be ?\u00a0ToString(string).2. Let S be !\u00a0TrimString(inputString, start).3. Let sign be 1.4. If S is not empty and the first code unit of S is the code unit 0x002D (HYPHEN-MINUS), set sign to -1.5. If S is not empty and the first code unit of S is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from S.6. Let R be \u211d(? ToInt32(radix)).7. Let stripPrefix be true.8. If R \u2260 0, thena. If R < 2 or R > 36, return NaN.b. If R \u2260 16, set stripPrefix to false.9. Else,a. Set R to 10.10. If stripPrefix is true, thena. If the length of S is at least 2 and the first two code units of S are either \"0x\" or \"0X\", theni. Remove the first two code units from S.ii. Set R to 16.11. If S contains a code unit that is not a radix-R digit, let end be the index within S of the first such code unit; otherwise, let end be the length of S.12. Let Z be the substring of S from 0 to end.13. If Z is empty, return NaN.14. Let mathInt be the integer value that is represented by Z in radix-R notation, using the letters A-Z and a-z for digits with values 10 through 35. (However, if R is 10 and Z\n contains more than 20 significant digits, every significant digit after\n the 20th may be replaced by a 0 digit, at the option of the \nimplementation; and if R is not 2, 4, 8, 10, 16, or 32, then mathInt may be an implementation-approximated integer representing the integer value denoted by Z in radix-R notation.)15. If mathInt = 0, thena. If sign = -1, return -0\ud835\udd3d.b. Return +0\ud835\udd3d.16. Return \ud835\udd3d(sign \u00d7 mathInt).\nNote\nparseInt may interpret only a leading portion of string as an integer value; it ignores any code units that cannot be interpreted as part of the notation of an integer, and no indication is given that any such code units were ignored.\n\n\n\n19.2.6 URI Handling Functions\nUniform Resource Identifiers, or URIs, are Strings that \nidentify resources (e.g. web pages or files) and transport protocols by \nwhich to access them (e.g. HTTP or FTP) on the Internet. The ECMAScript \nlanguage itself does not provide any support for using URIs except for \nfunctions that encode and decode URIs as described in 19.2.6.2, 19.2.6.3, 19.2.6.4 and 19.2.6.5\nNote\nMany implementations of ECMAScript provide additional \nfunctions and methods that manipulate web pages; these functions are \nbeyond the scope of this standard.\n\n\n19.2.6.1 URI Syntax and Semantics\nA URI is composed of a sequence of components separated by component separators. The general form is:\n\nScheme : First / Second ; Third ? Fourth\n\nwhere the italicized names represent components and \u201c:\u201d, \u201c/\u201d, \u201c;\u201d and \u201c?\u201d are reserved for use as separators. The encodeURI and decodeURI\n functions are intended to work with complete URIs; they assume that any\n reserved code units in the URI are intended to have special meaning and\n so are not encoded. The encodeURIComponent and decodeURIComponent\n functions are intended to work with the individual component parts of a\n URI; they assume that any reserved code units represent text and so \nmust be encoded so that they are not interpreted as reserved code units \nwhen the component is part of a complete URI.\nThe following lexical grammar specifies the form of encoded URIs.\nSyntax\n\nuri ::: \nuriCharactersopt\n\n\n\nuriCharacters ::: \nuriCharacter\nuriCharactersopt\n\n\n\nuriCharacter ::: \nuriReserved\n\n\nuriUnescaped\n\n\nuriEscaped\n\n\n\nuriReserved ::: one of ; / ? : @ & = + $ ,\n\n\nuriUnescaped ::: \nuriAlpha\n\n\nDecimalDigit\n\n\nuriMark\n\n\n\nuriEscaped ::: \n%\nHexDigit\nHexDigit\n\n\n\nuriAlpha ::: one of a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\nuriMark ::: one of - _ . ! ~ * ' ( )\n\n\nNote\nThe above syntax is based upon RFC 2396 and does not reflect changes introduced by the more recent RFC 3986.\n\nRuntime Semantics\nWhen a code unit to be included in a URI is not listed above \nor is not intended to have the special meaning sometimes given to the \nreserved code units, that code unit must be encoded. The code unit is \ntransformed into its UTF-8 encoding, with surrogate pairs\n first converted from UTF-16 to the corresponding code point value. \n(Note that for code units in the range [0, 127] this results in a single\n octet with the same value.) The resulting sequence of octets is then \ntransformed into a String with each octet represented by an escape \nsequence of the form \"%xx\".\n\n19.2.6.1.1 Encode ( string, unescapedSet )\nThe abstract operation Encode takes arguments string (a String) and unescapedSet (a String) and returns either a normal completion containing a String or an abrupt completion. It performs URI encoding and escaping. It performs the following steps when called:\n1. Let strLen be the number of code units in string.2. Let R be the empty String.3. Let k be 0.4. Repeat,a. If k = strLen, return R.b. Let C be the code unit at index k within string.c. If C is in unescapedSet, theni. Set k to k + 1.ii. Set R to the string-concatenation of R and C.d. Else,i. Let cp be CodePointAt(string, k).ii. If cp.[[IsUnpairedSurrogate]] is true, throw a URIError exception.iii. Set k to k + cp.[[CodeUnitCount]].iv. Let Octets be the List of octets resulting by applying the UTF-8 transformation to cp.[[CodePoint]].v. For each element octet of Octets, do1. Set R to the string-concatenation of:R\"%\"the String representation of octet, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessary\n\n\n19.2.6.1.2 Decode ( string, reservedSet )\nThe abstract operation Decode takes arguments string (a String) and reservedSet (a String) and returns either a normal completion containing a String or an abrupt completion. It performs URI unescaping and decoding. It performs the following steps when called:\n1. Let strLen be the length of string.2. Let R be the empty String.3. Let k be 0.4. Repeat,a. If k = strLen, return R.b. Let C be the code unit at index k within string.c. If C is not the code unit 0x0025 (PERCENT SIGN), theni. Let S be the String value containing only the code unit C.d. Else,i. Let start be k.ii. If k + 2 \u2265 strLen, throw a URIError exception.iii. If the code units at index (k + 1) and (k + 2) within string do not represent hexadecimal digits, throw a URIError exception.iv. Let B be the 8-bit value represented by the two hexadecimal digits at index (k + 1) and (k + 2).v. Set k to k + 2.vi. Let n be the number of leading 1 bits in B.vii. If n = 0, then1. Let C be the code unit whose value is B.2. If C is not in reservedSet, thena. Let S be the String value containing only the code unit C.3. Else,a. Let S be the substring of string from start to k + 1.viii. Else,1. If n = 1 or n > 4, throw a URIError exception.2. If k + (3 \u00d7 (n - 1)) \u2265 strLen, throw a URIError exception.3. Let Octets be \u00ab B \u00bb.4. Let j be 1.5. Repeat, while j < n,a. Set k to k + 1.b. If the code unit at index k within string is not the code unit 0x0025 (PERCENT SIGN), throw a URIError exception.c. If the code units at index (k + 1) and (k + 2) within string do not represent hexadecimal digits, throw a URIError exception.d. Let B be the 8-bit value represented by the two hexadecimal digits at index (k + 1) and (k + 2).e. Set k to k + 2.f. Append B to Octets.g. Set j to j + 1.6. Assert: The length of Octets is n.7. If Octets does not contain a valid UTF-8 encoding of a Unicode code point, throw a URIError exception.8. Let V be the code point obtained by applying the UTF-8 transformation to Octets, that is, from a List of octets into a 21-bit value.9. Let S be UTF16EncodeCodePoint(V).e. Set R to the string-concatenation of R and S.f. Set k to k + 1.\nNote\nThis syntax of Uniform Resource Identifiers is based upon\n RFC 2396 and does not reflect the more recent RFC 3986 which replaces \nRFC 2396. A formal description and implementation of UTF-8 is given in \nRFC 3629.\nRFC 3629 prohibits the decoding of invalid UTF-8 octet \nsequences. For example, the invalid sequence C0 80 must not decode into \nthe code unit 0x0000. Implementations of the Decode algorithm are \nrequired to throw a URIError when encountering such invalid sequences.\n\n\n\n\n19.2.6.2 decodeURI ( encodedURI )\nThe decodeURI function computes a new version of\n a URI in which each escape sequence and UTF-8 encoding of the sort that\n might be introduced by the encodeURI function is replaced \nwith the UTF-16 encoding of the code points that it represents. Escape \nsequences that could not have been introduced by encodeURI are not replaced.\nThe decodeURI function is the %decodeURI% intrinsic object. When the decodeURI function is called with one argument encodedURI, the following steps are taken:\n1. Let uriString be ?\u00a0ToString(encodedURI).2. Let reservedURISet be a String containing one instance of each code unit valid in uriReserved plus \"#\".3. Return ?\u00a0Decode(uriString, reservedURISet).\nNote\nThe code point # is not decoded from escape sequences even though it is not a reserved URI code point.\n\n\n\n19.2.6.3 decodeURIComponent ( encodedURIComponent )\nThe decodeURIComponent function computes a new \nversion of a URI in which each escape sequence and UTF-8 encoding of the\n sort that might be introduced by the encodeURIComponent function is replaced with the UTF-16 encoding of the code points that it represents.\nThe decodeURIComponent function is the %decodeURIComponent% intrinsic object. When the decodeURIComponent function is called with one argument encodedURIComponent, the following steps are taken:\n1. Let componentString be ?\u00a0ToString(encodedURIComponent).2. Let reservedURIComponentSet be the empty String.3. Return ?\u00a0Decode(componentString, reservedURIComponentSet).\n\n\n19.2.6.4 encodeURI ( uri )\nThe encodeURI function computes a new version of a UTF-16 encoded (6.1.4)\n URI in which each instance of certain code points is replaced by one, \ntwo, three, or four escape sequences representing the UTF-8 encoding of \nthe code points.\nThe encodeURI function is the %encodeURI% intrinsic object. When the encodeURI function is called with one argument uri, the following steps are taken:\n1. Let uriString be ?\u00a0ToString(uri).2. Let unescapedURISet be a String containing one instance of each code unit valid in uriReserved and uriUnescaped plus \"#\".3. Return ?\u00a0Encode(uriString, unescapedURISet).\nNote\nThe code point # is not encoded to an escape sequence even though it is not a reserved or unescaped URI code point.\n\n\n\n19.2.6.5 encodeURIComponent ( uriComponent )\nThe encodeURIComponent function computes a new version of a UTF-16 encoded (6.1.4)\n URI in which each instance of certain code points is replaced by one, \ntwo, three, or four escape sequences representing the UTF-8 encoding of \nthe code point.\nThe encodeURIComponent function is the %encodeURIComponent% intrinsic object. When the encodeURIComponent function is called with one argument uriComponent, the following steps are taken:\n1. Let componentString be ?\u00a0ToString(uriComponent).2. Let unescapedURIComponentSet be a String containing one instance of each code unit valid in uriUnescaped.3. Return ?\u00a0Encode(componentString, unescapedURIComponentSet).\n\n\n\n\n19.3 Constructor Properties of the Global Object\n\n19.3.1 AggregateError ( . . . )\nSee 20.5.7.1.\n\n\n19.3.2 Array ( . . . )\nSee 23.1.1.\n\n\n19.3.3 ArrayBuffer ( . . . )\nSee 25.1.3.\n\n\n19.3.4 BigInt ( . . . )\nSee 21.2.1.\n\n\n19.3.5 BigInt64Array ( . . . )\nSee 23.2.5.\n\n\n19.3.6 BigUint64Array ( . . . )\nSee 23.2.5.\n\n\n19.3.7 Boolean ( . . . )\nSee 20.3.1.\n\n\n19.3.8 DataView ( . . . )\nSee 25.3.2.\n\n\n19.3.9 Date ( . . . )\nSee 21.4.2.\n\n\n19.3.10 Error ( . . . )\nSee 20.5.1.\n\n\n19.3.11 EvalError ( . . . )\nSee 20.5.5.1.\n\n\n19.3.12 FinalizationRegistry ( . . . )\nSee 26.2.1.\n\n\n19.3.13 Float32Array ( . . . )\nSee 23.2.5.\n\n\n19.3.14 Float64Array ( . . . )\nSee 23.2.5.\n\n\n19.3.15 Function ( . . . )\nSee 20.2.1.\n\n\n19.3.16 Int8Array ( . . . )\nSee 23.2.5.\n\n\n19.3.17 Int16Array ( . . . )\nSee 23.2.5.\n\n\n19.3.18 Int32Array ( . . . )\nSee 23.2.5.\n\n\n19.3.19 Map ( . . . )\nSee 24.1.1.\n\n\n19.3.20 Number ( . . . )\nSee 21.1.1.\n\n\n19.3.21 Object ( . . . )\nSee 20.1.1.\n\n\n19.3.22 Promise ( . . . )\nSee 27.2.3.\n\n\n19.3.23 Proxy ( . . . )\nSee 28.2.1.\n\n\n19.3.24 RangeError ( . . . )\nSee 20.5.5.2.\n\n\n19.3.25 ReferenceError ( . . . )\nSee 20.5.5.3.\n\n\n19.3.26 RegExp ( . . . )\nSee 22.2.3.\n\n\n19.3.27 Set ( . . . )\nSee 24.2.1.\n\n\n19.3.28 SharedArrayBuffer ( . . . )\nSee 25.2.2.\n\n\n19.3.29 String ( . . . )\nSee 22.1.1.\n\n\n19.3.30 Symbol ( . . . )\nSee 20.4.1.\n\n\n19.3.31 SyntaxError ( . . . )\nSee 20.5.5.4.\n\n\n19.3.32 TypeError ( . . . )\nSee 20.5.5.5.\n\n\n19.3.33 Uint8Array ( . . . )\nSee 23.2.5.\n\n\n19.3.34 Uint8ClampedArray ( . . . )\nSee 23.2.5.\n\n\n19.3.35 Uint16Array ( . . . )\nSee 23.2.5.\n\n\n19.3.36 Uint32Array ( . . . )\nSee 23.2.5.\n\n\n19.3.37 URIError ( . . . )\nSee 20.5.5.6.\n\n\n19.3.38 WeakMap ( . . . )\nSee 24.3.1.\n\n\n19.3.39 WeakRef ( . . . )\nSee 26.1.1.\n\n\n19.3.40 WeakSet ( . . . )\nSee 24.4.\n\n\n\n19.4 Other Properties of the Global Object\n\n19.4.1 Atomics\nSee 25.4.\n\n\n19.4.2 JSON\nSee 25.5.\n\n\n19.4.3 Math\nSee 21.3.\n\n\n19.4.4 Reflect\nSee 28.1.\n\n\n\n\n20 Fundamental Objects\n\n20.1 Object Objects\n\n20.1.1 The Object Constructor\nThe Object constructor:\n\nis %Object%.\nis the initial value of the \"Object\" property of the global object.\ncreates a new ordinary object when called as a constructor.\nperforms a type conversion when called as a function rather than as a constructor.\nmay be used as the value of an extends clause of a class definition.\n\n\n20.1.1.1 Object ( [ value ] )\nWhen the Object function is called with optional argument value, the following steps are taken:\n1. If NewTarget is neither undefined nor the active function, thena. Return ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%Object.prototype%\").2. If value is undefined or null, return OrdinaryObjectCreate(%Object.prototype%).3. Return !\u00a0ToObject(value).\nThe \"length\" property of the Object function is 1\ud835\udd3d.\n\n\n\n20.1.2 Properties of the Object Constructor\nThe Object constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas a \"length\" property.\nhas the following additional properties:\n\n\n20.1.2.1 Object.assign ( target, ...sources )\nThe assign function is used to copy the values of all of the enumerable own properties from one or more source objects to a target object. When the assign function is called, the following steps are taken:\n1. Let to be ?\u00a0ToObject(target).2. If only one argument was passed, return to.3. For each element nextSource of sources, doa. If nextSource is neither undefined nor null, theni. Let from be !\u00a0ToObject(nextSource).ii. Let keys be ?\u00a0from.[[OwnPropertyKeys]]().iii. For each element nextKey of keys, do1. Let desc be ?\u00a0from.[[GetOwnProperty]](nextKey).2. If desc is not undefined and desc.[[Enumerable]] is true, thena. Let propValue be ?\u00a0Get(from, nextKey).b. Perform ?\u00a0Set(to, nextKey, propValue, true).4. Return to.\nThe \"length\" property of the assign function is 2\ud835\udd3d.\n\n\n20.1.2.2 Object.create ( O, Properties )\nThe create function creates a new object with a specified prototype. When the create function is called, the following steps are taken:\n1. If Type(O) is neither Object nor Null, throw a TypeError exception.2. Let obj be OrdinaryObjectCreate(O).3. If Properties is not undefined, thena. Return ?\u00a0ObjectDefineProperties(obj, Properties).4. Return obj.\n\n\n20.1.2.3 Object.defineProperties ( O, Properties )\nThe defineProperties function is used to add own properties and/or update the attributes of existing own properties of an object. When the defineProperties function is called, the following steps are taken:\n1. If Type(O) is not Object, throw a TypeError exception.2. Return ?\u00a0ObjectDefineProperties(O, Properties).\n\n20.1.2.3.1 ObjectDefineProperties ( O, Properties )\nThe abstract operation ObjectDefineProperties takes arguments O (an Object) and Properties and returns either a normal completion containing an Object or an abrupt completion. It performs the following steps when called:\n1. Let props be ?\u00a0ToObject(Properties).2. Let keys be ?\u00a0props.[[OwnPropertyKeys]]().3. Let descriptors be a new empty List.4. For each element nextKey of keys, doa. Let propDesc be ?\u00a0props.[[GetOwnProperty]](nextKey).b. If propDesc is not undefined and propDesc.[[Enumerable]] is true, theni. Let descObj be ?\u00a0Get(props, nextKey).ii. Let desc be ?\u00a0ToPropertyDescriptor(descObj).iii. Append the pair (a two element List) consisting of nextKey and desc to the end of descriptors.5. For each element pair of descriptors, doa. Let P be the first element of pair.b. Let desc be the second element of pair.c. Perform ?\u00a0DefinePropertyOrThrow(O, P, desc).6. Return O.\n\n\n\n20.1.2.4 Object.defineProperty ( O, P, Attributes )\nThe defineProperty function is used to add an own property and/or update the attributes of an existing own property of an object. When the defineProperty function is called, the following steps are taken:\n1. If Type(O) is not Object, throw a TypeError exception.2. Let key be ?\u00a0ToPropertyKey(P).3. Let desc be ?\u00a0ToPropertyDescriptor(Attributes).4. Perform ?\u00a0DefinePropertyOrThrow(O, key, desc).5. Return O.\n\n\n20.1.2.5 Object.entries ( O )\nWhen the entries function is called with argument O, the following steps are taken:\n1. Let obj be ?\u00a0ToObject(O).2. Let nameList be ?\u00a0EnumerableOwnPropertyNames(obj, key+value).3. Return CreateArrayFromList(nameList).\n\n\n20.1.2.6 Object.freeze ( O )\nWhen the freeze function is called, the following steps are taken:\n1. If Type(O) is not Object, return O.2. Let status be ?\u00a0SetIntegrityLevel(O, frozen).3. If status is false, throw a TypeError exception.4. Return O.\n\n\n20.1.2.7 Object.fromEntries ( iterable )\nWhen the fromEntries method is called with argument iterable, the following steps are taken:\n1. Perform ?\u00a0RequireObjectCoercible(iterable).2. Let obj be OrdinaryObjectCreate(%Object.prototype%).3. Assert: obj is an extensible ordinary object with no own properties.4. Let closure be a new Abstract Closure with parameters (key, value) that captures obj and performs the following steps when called:a. Let propertyKey be ?\u00a0ToPropertyKey(key).b. Perform !\u00a0CreateDataPropertyOrThrow(obj, propertyKey, value).c. Return undefined.5. Let adder be CreateBuiltinFunction(closure, 2, \"\", \u00ab \u00bb).6. Return ?\u00a0AddEntriesFromIterable(obj, iterable, adder).\nNote\n          The function created for adder is never directly accessible to ECMAScript code.\n        \n\n\n20.1.2.8 Object.getOwnPropertyDescriptor ( O, P )\nWhen the getOwnPropertyDescriptor function is called, the following steps are taken:\n1. Let obj be ?\u00a0ToObject(O).2. Let key be ?\u00a0ToPropertyKey(P).3. Let desc be ?\u00a0obj.[[GetOwnProperty]](key).4. Return FromPropertyDescriptor(desc).\n\n\n20.1.2.9 Object.getOwnPropertyDescriptors ( O )\nWhen the getOwnPropertyDescriptors function is called, the following steps are taken:\n1. Let obj be ?\u00a0ToObject(O).2. Let ownKeys be ?\u00a0obj.[[OwnPropertyKeys]]().3. Let descriptors be OrdinaryObjectCreate(%Object.prototype%).4. For each element key of ownKeys, doa. Let desc be ?\u00a0obj.[[GetOwnProperty]](key).b. Let descriptor be FromPropertyDescriptor(desc).c. If descriptor is not undefined, perform !\u00a0CreateDataPropertyOrThrow(descriptors, key, descriptor).5. Return descriptors.\n\n\n20.1.2.10 Object.getOwnPropertyNames ( O )\nWhen the getOwnPropertyNames function is called, the following steps are taken:\n1. Return CreateArrayFromList(? GetOwnPropertyKeys(O, string)).\n\n\n20.1.2.11 Object.getOwnPropertySymbols ( O )\nWhen the getOwnPropertySymbols function is called with argument O, the following steps are taken:\n1. Return CreateArrayFromList(? GetOwnPropertyKeys(O, symbol)).\n\n20.1.2.11.1 GetOwnPropertyKeys ( O, type )\nThe abstract operation GetOwnPropertyKeys takes arguments O and type (string or symbol) and returns either a normal completion containing a List of property keys or an abrupt completion. It performs the following steps when called:\n1. Let obj be ?\u00a0ToObject(O).2. Let keys be ?\u00a0obj.[[OwnPropertyKeys]]().3. Let nameList be a new empty List.4. For each element nextKey of keys, doa. If Type(nextKey) is Symbol and type is symbol or Type(nextKey) is String and type is string, theni. Append nextKey as the last element of nameList.5. Return nameList.\n\n\n\n20.1.2.12 Object.getPrototypeOf ( O )\nWhen the getPrototypeOf function is called with argument O, the following steps are taken:\n1. Let obj be ?\u00a0ToObject(O).2. Return ?\u00a0obj.[[GetPrototypeOf]]().\n\n\n20.1.2.13 Object.hasOwn ( O, P )\nWhen the hasOwn method is called, the following steps are taken:\n1. Let obj be ?\u00a0ToObject(O).2. Let key be ?\u00a0ToPropertyKey(P).3. Return ?\u00a0HasOwnProperty(obj, key).\n\n\n20.1.2.14 Object.is ( value1, value2 )\nWhen the is function is called with arguments value1 and value2, the following steps are taken:\n1. Return SameValue(value1, value2).\n\n\n20.1.2.15 Object.isExtensible ( O )\nWhen the isExtensible function is called with argument O, the following steps are taken:\n1. If Type(O) is not Object, return false.2. Return ?\u00a0IsExtensible(O).\n\n\n20.1.2.16 Object.isFrozen ( O )\nWhen the isFrozen function is called with argument O, the following steps are taken:\n1. If Type(O) is not Object, return true.2. Return ?\u00a0TestIntegrityLevel(O, frozen).\n\n\n20.1.2.17 Object.isSealed ( O )\nWhen the isSealed function is called with argument O, the following steps are taken:\n1. If Type(O) is not Object, return true.2. Return ?\u00a0TestIntegrityLevel(O, sealed).\n\n\n20.1.2.18 Object.keys ( O )\nWhen the keys function is called with argument O, the following steps are taken:\n1. Let obj be ?\u00a0ToObject(O).2. Let nameList be ?\u00a0EnumerableOwnPropertyNames(obj, key).3. Return CreateArrayFromList(nameList).\n\n\n20.1.2.19 Object.preventExtensions ( O )\nWhen the preventExtensions function is called, the following steps are taken:\n1. If Type(O) is not Object, return O.2. Let status be ?\u00a0O.[[PreventExtensions]]().3. If status is false, throw a TypeError exception.4. Return O.\n\n\n20.1.2.20 Object.prototype\nThe initial value of Object.prototype is the Object prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.1.2.21 Object.seal ( O )\nWhen the seal function is called, the following steps are taken:\n1. If Type(O) is not Object, return O.2. Let status be ?\u00a0SetIntegrityLevel(O, sealed).3. If status is false, throw a TypeError exception.4. Return O.\n\n\n20.1.2.22 Object.setPrototypeOf ( O, proto )\nWhen the setPrototypeOf function is called with arguments O and proto, the following steps are taken:\n1. Set O to ?\u00a0RequireObjectCoercible(O).2. If Type(proto) is neither Object nor Null, throw a TypeError exception.3. If Type(O) is not Object, return O.4. Let status be ?\u00a0O.[[SetPrototypeOf]](proto).5. If status is false, throw a TypeError exception.6. Return O.\n\n\n20.1.2.23 Object.values ( O )\nWhen the values function is called with argument O, the following steps are taken:\n1. Let obj be ?\u00a0ToObject(O).2. Let nameList be ?\u00a0EnumerableOwnPropertyNames(obj, value).3. Return CreateArrayFromList(nameList).\n\n\n\n20.1.3 Properties of the Object Prototype Object\nThe Object prototype object:\n\nis %Object.prototype%.\nhas an [[Extensible]] internal slot whose value is true.\nhas the internal methods defined for ordinary objects, except for the [[SetPrototypeOf]] method, which is as defined in 10.4.7.1. (Thus, it is an immutable prototype exotic object.)\nhas a [[Prototype]] internal slot whose value is null.\n\n\n20.1.3.1 Object.prototype.constructor\nThe initial value of Object.prototype.constructor is %Object%.\n\n\n20.1.3.2 Object.prototype.hasOwnProperty ( V )\nWhen the hasOwnProperty method is called with argument V, the following steps are taken:\n1. Let P be ?\u00a0ToPropertyKey(V).2. Let O be ?\u00a0ToObject(this value).3. Return ?\u00a0HasOwnProperty(O, P).\nNote\nThe ordering of steps 1 and 2 is chosen to ensure that any exception that would have been thrown by step 1 in previous editions of this specification will continue to be thrown even if the this value is undefined or null.\n\n\n\n20.1.3.3 Object.prototype.isPrototypeOf ( V )\nWhen the isPrototypeOf method is called with argument V, the following steps are taken:\n1. If Type(V) is not Object, return false.2. Let O be ?\u00a0ToObject(this value).3. Repeat,a. Set V to ?\u00a0V.[[GetPrototypeOf]]().b. If V is null, return false.c. If SameValue(O, V) is true, return true.\nNote\nThe ordering of steps 1 and 2 preserves the behaviour specified by previous editions of this specification for the case where V is not an object and the this value is undefined or null.\n\n\n\n20.1.3.4 Object.prototype.propertyIsEnumerable ( V )\nWhen the propertyIsEnumerable method is called with argument V, the following steps are taken:\n1. Let P be ?\u00a0ToPropertyKey(V).2. Let O be ?\u00a0ToObject(this value).3. Let desc be ?\u00a0O.[[GetOwnProperty]](P).4. If desc is undefined, return false.5. Return desc.[[Enumerable]].\nNote 1\nThis method does not consider objects in the prototype chain.\n\nNote 2\nThe ordering of steps 1 and 2 is chosen to ensure that any exception that would have been thrown by step 1 in previous editions of this specification will continue to be thrown even if the this value is undefined or null.\n\n\n\n20.1.3.5 Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\nWhen the toLocaleString method is called, the following steps are taken:\n1. Let O be the this value.2. Return ?\u00a0Invoke(O, \"toString\").\nThe optional parameters to this function are not used but are intended to correspond to the parameter pattern used by ECMA-402 toLocaleString functions. Implementations that do not include ECMA-402 support must not use those parameter positions for other purposes.\nNote 1\nThis function provides a generic toLocaleString implementation for objects that have no locale-sensitive toString behaviour. Array, Number, Date, and %TypedArray% provide their own locale-sensitive toLocaleString methods.\n\nNote 2\nECMA-402 intentionally does not provide an alternative to this default implementation.\n\n\n\n20.1.3.6 Object.prototype.toString ( )\nWhen the toString method is called, the following steps are taken:\n1. If the this value is undefined, return \"[object Undefined]\".2. If the this value is null, return \"[object Null]\".3. Let O be !\u00a0ToObject(this value).4. Let isArray be ?\u00a0IsArray(O).5. If isArray is true, let builtinTag be \"Array\".6. Else if O has a [[ParameterMap]] internal slot, let builtinTag be \"Arguments\".7. Else if O has a [[Call]] internal method, let builtinTag be \"Function\".8. Else if O has an [[ErrorData]] internal slot, let builtinTag be \"Error\".9. Else if O has a [[BooleanData]] internal slot, let builtinTag be \"Boolean\".10. Else if O has a [[NumberData]] internal slot, let builtinTag be \"Number\".11. Else if O has a [[StringData]] internal slot, let builtinTag be \"String\".12. Else if O has a [[DateValue]] internal slot, let builtinTag be \"Date\".13. Else if O has a [[RegExpMatcher]] internal slot, let builtinTag be \"RegExp\".14. Else, let builtinTag be \"Object\".15. Let tag be ?\u00a0Get(O, @@toStringTag).16. If Type(tag) is not String, set tag to builtinTag.17. Return the string-concatenation of \"[object \", tag, and \"]\".\nNote\nHistorically, this function was occasionally used to access\n the String value of the [[Class]] internal slot that was used in \nprevious editions of this specification as a nominal type tag for \nvarious built-in objects. The above definition of toString preserves compatibility for legacy code that uses toString\n as a test for those specific kinds of built-in objects. It does not \nprovide a reliable type testing mechanism for other kinds of built-in or\n program defined objects. In addition, programs can use @@toStringTag in ways that will invalidate the reliability of such legacy type tests.\n\n\n\n20.1.3.7 Object.prototype.valueOf ( )\nWhen the valueOf method is called, the following steps are taken:\n1. Return ?\u00a0ToObject(this value).\n\nNormative Optional, Legacy\n20.1.3.8 Object.prototype.__proto__\nObject.prototype.__proto__ is an accessor property with attributes { [[Enumerable]]: false, [[Configurable]]: true }. The [[Get]] and [[Set]] attributes are defined as follows:\n\n20.1.3.8.1 get Object.prototype.__proto__\nThe value of the [[Get]] attribute is a built-in function \nthat requires no arguments. It performs the following steps when called:\n1. Let O be ?\u00a0ToObject(this value).2. Return ?\u00a0O.[[GetPrototypeOf]]().\n\n\n20.1.3.8.2 set Object.prototype.__proto__\nThe value of the [[Set]] attribute is a built-in function that takes an argument proto. It performs the following steps when called:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. If Type(proto) is neither Object nor Null, return undefined.3. If Type(O) is not Object, return undefined.4. Let status be ?\u00a0O.[[SetPrototypeOf]](proto).5. If status is false, throw a TypeError exception.6. Return undefined.\n\n\nNormative Optional, Legacy\n20.1.3.9 Legacy Object.prototype Accessor Methods\n\n20.1.3.9.1 Object.prototype.__defineGetter__ ( P, getter )\nWhen the __defineGetter__ method is called with arguments P and getter, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. If IsCallable(getter) is false, throw a TypeError exception.3. Let desc be PropertyDescriptor { [[Get]]: getter, [[Enumerable]]: true, [[Configurable]]: true }.4. Let key be ?\u00a0ToPropertyKey(P).5. Perform ?\u00a0DefinePropertyOrThrow(O, key, desc).6. Return undefined.\n\n\n20.1.3.9.2 Object.prototype.__defineSetter__ ( P, setter )\nWhen the __defineSetter__ method is called with arguments P and setter, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. If IsCallable(setter) is false, throw a TypeError exception.3. Let desc be PropertyDescriptor { [[Set]]: setter, [[Enumerable]]: true, [[Configurable]]: true }.4. Let key be ?\u00a0ToPropertyKey(P).5. Perform ?\u00a0DefinePropertyOrThrow(O, key, desc).6. Return undefined.\n\n\n20.1.3.9.3 Object.prototype.__lookupGetter__ ( P )\nWhen the __lookupGetter__ method is called with argument P, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let key be ?\u00a0ToPropertyKey(P).3. Repeat,a. Let desc be ?\u00a0O.[[GetOwnProperty]](key).b. If desc is not undefined, theni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].ii. Return undefined.c. Set O to ?\u00a0O.[[GetPrototypeOf]]().d. If O is null, return undefined.\n\n\n20.1.3.9.4 Object.prototype.__lookupSetter__ ( P )\nWhen the __lookupSetter__ method is called with argument P, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let key be ?\u00a0ToPropertyKey(P).3. Repeat,a. Let desc be ?\u00a0O.[[GetOwnProperty]](key).b. If desc is not undefined, theni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].ii. Return undefined.c. Set O to ?\u00a0O.[[GetPrototypeOf]]().d. If O is null, return undefined.\n\n\n\n\n20.1.4 Properties of Object Instances\nObject instances have no special properties beyond those inherited from the Object prototype object.\n\n\n\n20.2 Function Objects\n\n20.2.1 The Function Constructor\nThe Function constructor:\n\nis %Function%.\nis the initial value of the \"Function\" property of the global object.\ncreates and initializes a new function object when called as a function rather than as a constructor. Thus the function call Function(\u2026) is equivalent to the object creation expression new Function(\u2026) with the same arguments.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified Function behaviour must include a super call to the Function constructor\n to create and initialize a subclass instance with the internal slots \nnecessary for built-in function behaviour. All ECMAScript syntactic \nforms for defining function objects\n create instances of Function. There is no syntactic means to create \ninstances of Function subclasses except for the built-in \nGeneratorFunction, AsyncFunction, and AsyncGeneratorFunction subclasses.\n\n\n20.2.1.1 Function ( p1, p2, \u2026 , pn, body )\nThe last argument specifies the body (executable code) of a function; any preceding arguments specify formal parameters.\nWhen the Function function is called with some arguments p1, p2, \u2026 , pn, body (where n might be 0, that is, there are no \u201c p \u201d arguments, and where body might also not be provided), the following steps are taken:\n1. Let C be the active function object.2. Let args be the argumentsList that was passed to this function by [[Call]] or [[Construct]].3. Return ?\u00a0CreateDynamicFunction(C, NewTarget, normal, args).\nNote\nIt is permissible but not necessary to have one argument \nfor each formal parameter to be specified. For example, all three of the\n following expressions produce the same result:\nnew Function(\"a\", \"b\", \"c\", \"return a+b+c\")\nnew Function(\"a, b, c\", \"return a+b+c\")\nnew Function(\"a,b\", \"c\", \"return a+b+c\")\n\n\n20.2.1.1.1 CreateDynamicFunction ( constructor, newTarget, kind, args )\nThe abstract operation CreateDynamicFunction takes arguments constructor (a constructor), newTarget (a constructor), kind (normal, generator, async, or asyncGenerator), and args (a List of ECMAScript language values) and returns either a normal completion containing a function object or an abrupt completion. constructor is the constructor function that is performing this action. newTarget is the constructor that new was initially applied to. args is the argument values that were passed to constructor. It performs the following steps when called:\n1. Assert: The execution context stack has at least two elements.2. Let callerContext be the second to top element of the execution context stack.3. Let callerRealm be callerContext's Realm.4. Let calleeRealm be the current Realm Record.5. Perform ?\u00a0HostEnsureCanCompileStrings(callerRealm, calleeRealm).6. If newTarget is undefined, set newTarget to constructor.7. If kind is normal, thena. Let prefix be \"function\".b. Let exprSym be the grammar symbol FunctionExpression.c. Let bodySym be the grammar symbol FunctionBody[~Yield, ~Await].d. Let parameterSym be the grammar symbol FormalParameters[~Yield, ~Await].e. Let fallbackProto be \"%Function.prototype%\".8. Else if kind is generator, thena. Let prefix be \"function*\".b. Let exprSym be the grammar symbol GeneratorExpression.c. Let bodySym be the grammar symbol GeneratorBody.d. Let parameterSym be the grammar symbol FormalParameters[+Yield, ~Await].e. Let fallbackProto be \"%GeneratorFunction.prototype%\".9. Else if kind is async, thena. Let prefix be \"async function\".b. Let exprSym be the grammar symbol AsyncFunctionExpression.c. Let bodySym be the grammar symbol AsyncFunctionBody.d. Let parameterSym be the grammar symbol FormalParameters[~Yield, +Await].e. Let fallbackProto be \"%AsyncFunction.prototype%\".10. Else,a. Assert: kind is asyncGenerator.b. Let prefix be \"async function*\".c. Let exprSym be the grammar symbol AsyncGeneratorExpression.d. Let bodySym be the grammar symbol AsyncGeneratorBody.e. Let parameterSym be the grammar symbol FormalParameters[+Yield, +Await].f. Let fallbackProto be \"%AsyncGeneratorFunction.prototype%\".11. Let argCount be the number of elements in args.12. Let P be the empty String.13. If argCount = 0, let bodyArg be the empty String.14. Else if argCount = 1, let bodyArg be args[0].15. Else,a. Assert: argCount > 1.b. Let firstArg be args[0].c. Set P to ?\u00a0ToString(firstArg).d. Let k be 1.e. Repeat, while k < argCount - 1,i. Let nextArg be args[k].ii. Let nextArgString be ?\u00a0ToString(nextArg).iii. Set P to the string-concatenation of P, \",\" (a comma), and nextArgString.iv. Set k to k + 1.f. Let bodyArg be args[k].16. Let bodyString be the string-concatenation of 0x000A (LINE FEED), ?\u00a0ToString(bodyArg), and 0x000A (LINE FEED).17. Let sourceString be the string-concatenation of prefix, \" anonymous(\", P, 0x000A (LINE FEED), \") {\", bodyString, and \"}\".18. Let sourceText be StringToCodePoints(sourceString).19. Let parameters be ParseText(StringToCodePoints(P), parameterSym).20. If parameters is a List of errors, throw a SyntaxError exception.21. Let body be ParseText(StringToCodePoints(bodyString), bodySym).22. If body is a List of errors, throw a SyntaxError exception.23. NOTE: The parameters and body are parsed separately to ensure that each is valid alone. For example, new Function(\"/*\", \"*/ ) {\") is not legal.24. NOTE: If this step is reached, sourceText must have the syntax of exprSym\n (although the reverse implication does not hold). The purpose of the \nnext two steps is to enforce any Early Error rules which apply to exprSym directly.25. Let expr be ParseText(sourceText, exprSym).26. If expr is a List of errors, throw a SyntaxError exception.27. Let proto be ?\u00a0GetPrototypeFromConstructor(newTarget, fallbackProto).28. Let realmF be the current Realm Record.29. Let env be realmF.[[GlobalEnv]].30. Let privateEnv be null.31. Let F be OrdinaryFunctionCreate(proto, sourceText, parameters, body, non-lexical-this, env, privateEnv).32. Perform SetFunctionName(F, \"anonymous\").33. If kind is generator, thena. Let prototype be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).b. Perform !\u00a0DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).34. Else if kind is asyncGenerator, thena. Let prototype be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).b. Perform !\u00a0DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).35. Else if kind is normal, perform MakeConstructor(F).36. NOTE: Functions whose kind is async are not constructible and do not have a [[Construct]] internal method or a \"prototype\" property.37. Return F.\nNote\nCreateDynamicFunction defines a \"prototype\" property on any function it creates whose kind is not async to provide for the possibility that the function will be used as a constructor.\n\n\n\n\n\n20.2.2 Properties of the Function Constructor\nThe Function constructor:\n\nis itself a built-in function object.\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n20.2.2.1 Function.length\nThis is a data property with a value of 1. This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n20.2.2.2 Function.prototype\nThe value of Function.prototype is the Function prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n20.2.3 Properties of the Function Prototype Object\nThe Function prototype object:\n\nis %Function.prototype%.\nis itself a built-in function object.\naccepts any arguments and returns undefined when invoked.\ndoes not have a [[Construct]] internal method; it cannot be used as a constructor with the new operator.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\ndoes not have a \"prototype\" property.\nhas a \"length\" property whose value is +0\ud835\udd3d.\nhas a \"name\" property whose value is the empty String.\n\nNote\nThe Function prototype object is specified to be a function object to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.\n\n\n20.2.3.1 Function.prototype.apply ( thisArg, argArray )\nWhen the apply method is called with arguments thisArg and argArray, the following steps are taken:\n1. Let func be the this value.2. If IsCallable(func) is false, throw a TypeError exception.3. If argArray is undefined or null, thena. Perform PrepareForTailCall().b. Return ?\u00a0Call(func, thisArg).4. Let argList be ?\u00a0CreateListFromArrayLike(argArray).5. Perform PrepareForTailCall().6. Return ?\u00a0Call(func, thisArg, argList).\nNote 1\nThe thisArg value is passed without modification as the this value. This is a change from Edition 3, where an undefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is passed as the this value. Even though the thisArg is passed without modification, non-strict functions still perform these transformations upon entry to the function.\n\nNote 2\nIf func is an arrow function or a bound function exotic object then the thisArg will be ignored by the function [[Call]] in step 6.\n\n\n\n20.2.3.2 Function.prototype.bind ( thisArg, ...args )\nWhen the bind method is called with argument thisArg and zero or more args, it performs the following steps:\n1. Let Target be the this value.2. If IsCallable(Target) is false, throw a TypeError exception.3. Let F be ?\u00a0BoundFunctionCreate(Target, thisArg, args).4. Let L be 0.5. Let targetHasLength be ?\u00a0HasOwnProperty(Target, \"length\").6. If targetHasLength is true, thena. Let targetLen be ?\u00a0Get(Target, \"length\").b. If Type(targetLen) is Number, theni. If targetLen is +\u221e\ud835\udd3d, set L to +\u221e.ii. Else if targetLen is -\u221e\ud835\udd3d, set L to 0.iii. Else,1. Let targetLenAsInt be !\u00a0ToIntegerOrInfinity(targetLen).2. Assert: targetLenAsInt is finite.3. Let argCount be the number of elements in args.4. Set L to max(targetLenAsInt - argCount, 0).7. Perform SetFunctionLength(F, L).8. Let targetName be ?\u00a0Get(Target, \"name\").9. If Type(targetName) is not String, set targetName to the empty String.10. Perform SetFunctionName(F, targetName, \"bound\").11. Return F.\nNote 1\nFunction objects created using Function.prototype.bind are exotic objects. They also do not have a \"prototype\" property.\n\nNote 2\nIf Target is an arrow function or a bound function exotic object then the thisArg passed to this method will not be used by subsequent calls to F.\n\n\n\n20.2.3.3 Function.prototype.call ( thisArg, ...args )\nWhen the call method is called with argument thisArg and zero or more args, the following steps are taken:\n1. Let func be the this value.2. If IsCallable(func) is false, throw a TypeError exception.3. Perform PrepareForTailCall().4. Return ?\u00a0Call(func, thisArg, args).\nNote 1\nThe thisArg value is passed without modification as the this value. This is a change from Edition 3, where an undefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is passed as the this value. Even though the thisArg is passed without modification, non-strict functions still perform these transformations upon entry to the function.\n\nNote 2\nIf func is an arrow function or a bound function exotic object then the thisArg will be ignored by the function [[Call]] in step 4.\n\n\n\n20.2.3.4 Function.prototype.constructor\nThe initial value of Function.prototype.constructor is %Function%.\n\n\n20.2.3.5 Function.prototype.toString ( )\nWhen the toString method is called, the following steps are taken:\n1. Let func be the this value.2. If Type(func) is Object and func has a [[SourceText]] internal slot and func.[[SourceText]] is a sequence of Unicode code points and HostHasSourceTextAvailable(func) is true, thena. Return CodePointsToString(func.[[SourceText]]).3. If func is a built-in function object, return an implementation-defined String source code representation of func. The representation must have the syntax of a NativeFunction. Additionally, if func has an [[InitialName]] internal slot and func.[[InitialName]] is a String, the portion of the returned String that would be matched by NativeFunctionAccessoropt PropertyName must be the value of func.[[InitialName]].4. If Type(func) is Object and IsCallable(func) is true, return an implementation-defined String source code representation of func. The representation must have the syntax of a NativeFunction.5. Throw a TypeError exception.\n\nNativeFunction : \nfunction\nNativeFunctionAccessoropt\nPropertyName[~Yield, ~Await]opt\n(\nFormalParameters[~Yield, ~Await]\n)\n{\n[\nnative\ncode\n]\n}\n\n\n\nNativeFunctionAccessor : \nget\n\n\nset\n\n\n\n\n\n20.2.3.6 Function.prototype [ @@hasInstance ] ( V )\nWhen the @@hasInstance method of an object F is called with value V, the following steps are taken:\n1. Let F be the this value.2. Return ?\u00a0OrdinaryHasInstance(F, V).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\nNote\nThis is the default implementation of @@hasInstance that most functions inherit. @@hasInstance is called by the instanceof operator to determine whether a value is an instance of a specific constructor. An expression such as\nv instanceof F\nevaluates as\nF[@@hasInstance](v)\nA constructor function can control which objects are recognized as its instances by instanceof by exposing a different @@hasInstance method on the function.\n\nThis property is non-writable and non-configurable to prevent\n tampering that could be used to globally expose the target function of a\n bound function.\nThe value of the \"name\" property of this function is \"[Symbol.hasInstance]\".\n\n\n\n20.2.4 Function Instances\nEvery Function instance is an ECMAScript function object and has the internal slots listed in Table 33. Function objects created using the Function.prototype.bind method (20.2.3.2) have the internal slots listed in Table 34.\nFunction instances have the following properties:\n\n20.2.4.1 length\nThe value of the \"length\" property is an integral Number\n that indicates the typical number of arguments expected by the \nfunction. However, the language permits the function to be invoked with \nsome other number of arguments. The behaviour of a function when invoked\n on a number of arguments other than the number specified by its \"length\" property depends on the function. This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n20.2.4.2 name\nThe value of the \"name\" property is a String that is descriptive of the function. The name has no semantic significance but is typically a variable or property name\n that is used to refer to the function at its point of definition in \nECMAScript code. This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\nAnonymous functions objects that do not have a contextual \nname associated with them by this specification use the empty String as \nthe value of the \"name\" property.\n\n\n20.2.4.3 prototype\nFunction instances that can be used as a constructor have a \"prototype\" property. Whenever such a Function instance is created another ordinary object is also created and is the initial value of the function's \"prototype\" property. Unless otherwise specified, the value of the \"prototype\" property is used to initialize the [[Prototype]] internal slot of the object created when that function is invoked as a constructor.\nThis property has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }.\nNote\nFunction objects created using Function.prototype.bind, or by evaluating a MethodDefinition (that is not a GeneratorMethod or AsyncGeneratorMethod) or an ArrowFunction do not have a \"prototype\" property.\n\n\n\n\n20.2.5 HostHasSourceTextAvailable ( func )\nThe host-defined abstract operation HostHasSourceTextAvailable takes argument func (a function object) and returns a Boolean. It allows host environments to prevent the source text from being provided for func.\nAn implementation of HostHasSourceTextAvailable must conform to the following requirements:\n\nIt must be deterministic with respect to its parameters. Each time it is called with a specific func as its argument, it must return the same result.\n\nThe default implementation of HostHasSourceTextAvailable is to return true.\n\n\n\n20.3 Boolean Objects\n\n20.3.1 The Boolean Constructor\nThe Boolean constructor:\n\nis %Boolean%.\nis the initial value of the \"Boolean\" property of the global object.\ncreates and initializes a new Boolean object when called as a constructor.\nperforms a type conversion when called as a function rather than as a constructor.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified Boolean behaviour must include a super call to the Boolean constructor to create and initialize the subclass instance with a [[BooleanData]] internal slot.\n\n\n20.3.1.1 Boolean ( value )\nWhen Boolean is called with argument value, the following steps are taken:\n1. Let b be ToBoolean(value).2. If NewTarget is undefined, return b.3. Let O be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%Boolean.prototype%\", \u00ab [[BooleanData]] \u00bb).4. Set O.[[BooleanData]] to b.5. Return O.\n\n\n\n20.3.2 Properties of the Boolean Constructor\nThe Boolean constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n20.3.2.1 Boolean.prototype\nThe initial value of Boolean.prototype is the Boolean prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n20.3.3 Properties of the Boolean Prototype Object\nThe Boolean prototype object:\n\nis %Boolean.prototype%.\nis an ordinary object.\nis itself a Boolean object; it has a [[BooleanData]] internal slot with the value false.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\n\nThe abstract operation thisBooleanValue takes argument value. It performs the following steps when called:\n1. If Type(value) is Boolean, return value.2. If Type(value) is Object and value has a [[BooleanData]] internal slot, thena. Let b be value.[[BooleanData]].b. Assert: Type(b) is Boolean.c. Return b.3. Throw a TypeError exception.\n\n20.3.3.1 Boolean.prototype.constructor\nThe initial value of Boolean.prototype.constructor is %Boolean%.\n\n\n20.3.3.2 Boolean.prototype.toString ( )\nThe following steps are taken:\n1. Let b be ?\u00a0thisBooleanValue(this value).2. If b is true, return \"true\"; else return \"false\".\n\n\n20.3.3.3 Boolean.prototype.valueOf ( )\nThe following steps are taken:\n1. Return ?\u00a0thisBooleanValue(this value).\n\n\n\n20.3.4 Properties of Boolean Instances\nBoolean instances are ordinary objects that inherit properties from the Boolean prototype object.\n Boolean instances have a [[BooleanData]] internal slot. The \n[[BooleanData]] internal slot is the Boolean value represented by this \nBoolean object.\n\n\n\n20.4 Symbol Objects\n\n20.4.1 The Symbol Constructor\nThe Symbol constructor:\n\nis %Symbol%.\nis the initial value of the \"Symbol\" property of the global object.\nreturns a new Symbol value when called as a function.\nis not intended to be used with the new operator.\nis not intended to be subclassed.\nmay be used as the value of an extends clause of a class definition but a super call to it will cause an exception.\n\n\n20.4.1.1 Symbol ( [ description ] )\nWhen Symbol is called with optional argument description, the following steps are taken:\n1. If NewTarget is not undefined, throw a TypeError exception.2. If description is undefined, let descString be undefined.3. Else, let descString be ?\u00a0ToString(description).4. Return a new unique Symbol value whose [[Description]] value is descString.\n\n\n\n20.4.2 Properties of the Symbol Constructor\nThe Symbol constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n20.4.2.1 Symbol.asyncIterator\nThe initial value of Symbol.asyncIterator is the well known symbol @@asyncIterator (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.2 Symbol.for ( key )\nWhen Symbol.for is called with argument key it performs the following steps:\n1. Let stringKey be ?\u00a0ToString(key).2. For each element e of the GlobalSymbolRegistry List, doa. If SameValue(e.[[Key]], stringKey) is true, return e.[[Symbol]].3. Assert: GlobalSymbolRegistry does not currently contain an entry for stringKey.4. Let newSymbol be a new unique Symbol value whose [[Description]] value is stringKey.5. Append the Record { [[Key]]: stringKey, [[Symbol]]: newSymbol } to the GlobalSymbolRegistry List.6. Return newSymbol.\nThe GlobalSymbolRegistry is a List that is globally available. It is shared by all realms. Prior to the evaluation of any ECMAScript code it is initialized as a new empty List. Elements of the GlobalSymbolRegistry are Records with the structure defined in Table 62.\nTable 62: GlobalSymbolRegistry Record Fields\n\n\n\n                Field Name\n              \n\n                Value\n              \n\n                Usage\n              \n\n\n\n                [[Key]]\n              \n\n                a String\n              \n\n                A string key used to globally identify a Symbol.\n              \n\n\n\n                [[Symbol]]\n              \n\n                a Symbol\n              \n\n                A symbol that can be retrieved from any realm.\n              \n\n\n\n\n\n20.4.2.3 Symbol.hasInstance\nThe initial value of Symbol.hasInstance is the well-known symbol @@hasInstance (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.4 Symbol.isConcatSpreadable\nThe initial value of Symbol.isConcatSpreadable is the well-known symbol @@isConcatSpreadable (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.5 Symbol.iterator\nThe initial value of Symbol.iterator is the well-known symbol @@iterator (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.6 Symbol.keyFor ( sym )\nWhen Symbol.keyFor is called with argument sym it performs the following steps:\n1. If Type(sym) is not Symbol, throw a TypeError exception.2. For each element e of the GlobalSymbolRegistry List (see 20.4.2.2), doa. If SameValue(e.[[Symbol]], sym) is true, return e.[[Key]].3. Assert: GlobalSymbolRegistry does not currently contain an entry for sym.4. Return undefined.\n\n\n20.4.2.7 Symbol.match\nThe initial value of Symbol.match is the well-known symbol @@match (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.8 Symbol.matchAll\nThe initial value of Symbol.matchAll is the well-known symbol @@matchAll (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.9 Symbol.prototype\nThe initial value of Symbol.prototype is the Symbol prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.10 Symbol.replace\nThe initial value of Symbol.replace is the well-known symbol @@replace (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.11 Symbol.search\nThe initial value of Symbol.search is the well-known symbol @@search (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.12 Symbol.species\nThe initial value of Symbol.species is the well-known symbol @@species (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.13 Symbol.split\nThe initial value of Symbol.split is the well-known symbol @@split (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.14 Symbol.toPrimitive\nThe initial value of Symbol.toPrimitive is the well-known symbol @@toPrimitive (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.15 Symbol.toStringTag\nThe initial value of Symbol.toStringTag is the well-known symbol @@toStringTag (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n20.4.2.16 Symbol.unscopables\nThe initial value of Symbol.unscopables is the well-known symbol @@unscopables (Table 1).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n20.4.3 Properties of the Symbol Prototype Object\nThe Symbol prototype object:\n\nis %Symbol.prototype%.\nis an ordinary object.\nis not a Symbol instance and does not have a [[SymbolData]] internal slot.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\n\nThe abstract operation thisSymbolValue takes argument value. It performs the following steps when called:\n1. If Type(value) is Symbol, return value.2. If Type(value) is Object and value has a [[SymbolData]] internal slot, thena. Let s be value.[[SymbolData]].b. Assert: Type(s) is Symbol.c. Return s.3. Throw a TypeError exception.\n\n20.4.3.1 Symbol.prototype.constructor\nThe initial value of Symbol.prototype.constructor is %Symbol%.\n\n\n20.4.3.2 get Symbol.prototype.description\nSymbol.prototype.description is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let s be the this value.2. Let sym be ?\u00a0thisSymbolValue(s).3. Return sym.[[Description]].\n\n\n20.4.3.3 Symbol.prototype.toString ( )\nThe following steps are taken:\n1. Let sym be ?\u00a0thisSymbolValue(this value).2. Return SymbolDescriptiveString(sym).\n\n20.4.3.3.1 SymbolDescriptiveString ( sym )\nThe abstract operation SymbolDescriptiveString takes argument sym (a Symbol) and returns a String. It performs the following steps when called:\n1. Let desc be sym's [[Description]] value.2. If desc is undefined, set desc to the empty String.3. Assert: Type(desc) is String.4. Return the string-concatenation of \"Symbol(\", desc, and \")\".\n\n\n\n20.4.3.4 Symbol.prototype.valueOf ( )\nThe following steps are taken:\n1. Return ?\u00a0thisSymbolValue(this value).\n\n\n20.4.3.5 Symbol.prototype [ @@toPrimitive ] ( hint )\nThis function is called by ECMAScript language operators to convert a Symbol object to a primitive value.\nWhen the @@toPrimitive method is called with argument hint, the following steps are taken:\n1. Return ?\u00a0thisSymbolValue(this value).\nNote\nThe argument is ignored.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\nThe value of the \"name\" property of this function is \"[Symbol.toPrimitive]\".\n\n\n20.4.3.6 Symbol.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Symbol\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n20.4.4 Properties of Symbol Instances\nSymbol instances are ordinary objects that inherit properties from the Symbol prototype object.\n Symbol instances have a [[SymbolData]] internal slot. The \n[[SymbolData]] internal slot is the Symbol value represented by this \nSymbol object.\n\n\n\n20.5 Error Objects\nInstances of Error objects are thrown as exceptions when runtime \nerrors occur. The Error objects may also serve as base objects for \nuser-defined exception classes.\nWhen an ECMAScript implementation detects a runtime error, it throws a new instance of one of the NativeError objects defined in 20.5.5 or a new instance of AggregateError object defined in 20.5.7. Each of these objects has the structure described below, differing only in the name used as the constructor name instead of NativeError, in the name property of the prototype object, in the implementation-defined message property of the prototype object, and in the presence of the %AggregateError%-specific errors property.\n\n20.5.1 The Error Constructor\nThe Error constructor:\n\nis %Error%.\nis the initial value of the \"Error\" property of the global object.\ncreates and initializes a new Error object when called as a function rather than as a constructor. Thus the function call Error(\u2026) is equivalent to the object creation expression new Error(\u2026) with the same arguments.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified Error behaviour must include a super call to the Error constructor to create and initialize subclass instances with an [[ErrorData]] internal slot.\n\n\n20.5.1.1 Error ( message [ , options ] )\nWhen the Error function is called with argument message and optional argument options, the following steps are taken:\n1. If NewTarget is undefined, let newTarget be the active function object; else let newTarget be NewTarget.2. Let O be ?\u00a0OrdinaryCreateFromConstructor(newTarget, \"%Error.prototype%\", \u00ab [[ErrorData]] \u00bb).3. If message is not undefined, thena. Let msg be ?\u00a0ToString(message).b. Perform CreateNonEnumerableDataPropertyOrThrow(O, \"message\", msg).4. Perform ?\u00a0InstallErrorCause(O, options).5. Return O.\n\n\n\n20.5.2 Properties of the Error Constructor\nThe Error constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n20.5.2.1 Error.prototype\nThe initial value of Error.prototype is the Error prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n20.5.3 Properties of the Error Prototype Object\nThe Error prototype object:\n\nis %Error.prototype%.\nis an ordinary object.\nis not an Error instance and does not have an [[ErrorData]] internal slot.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\n\n\n20.5.3.1 Error.prototype.constructor\nThe initial value of Error.prototype.constructor is %Error%.\n\n\n20.5.3.2 Error.prototype.message\nThe initial value of Error.prototype.message is the empty String.\n\n\n20.5.3.3 Error.prototype.name\nThe initial value of Error.prototype.name is \"Error\".\n\n\n20.5.3.4 Error.prototype.toString ( )\nThe following steps are taken:\n1. Let O be the this value.2. If Type(O) is not Object, throw a TypeError exception.3. Let name be ?\u00a0Get(O, \"name\").4. If name is undefined, set name to \"Error\"; otherwise set name to ?\u00a0ToString(name).5. Let msg be ?\u00a0Get(O, \"message\").6. If msg is undefined, set msg to the empty String; otherwise set msg to ?\u00a0ToString(msg).7. If name is the empty String, return msg.8. If msg is the empty String, return name.9. Return the string-concatenation of name, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and msg.\n\n\n\n20.5.4 Properties of Error Instances\nError instances are ordinary objects that inherit properties from the Error prototype object and have an [[ErrorData]] internal slot whose value is undefined. The only specified uses of [[ErrorData]] is to identify Error, AggregateError, and NativeError instances as Error objects within Object.prototype.toString.\n\n\n20.5.5 Native Error Types Used in This Standard\nA new instance of one of the NativeError objects below or of the AggregateError object is thrown when a runtime error is detected. All NativeError objects share the same structure, as described in 20.5.6.\n\n20.5.5.1 EvalError\nThe EvalError constructor is %EvalError%.\nThis exception is not currently used within this \nspecification. This object remains for compatibility with previous \neditions of this specification.\n\n\n20.5.5.2 RangeError\nThe RangeError constructor is %RangeError%.\nIndicates a value that is not in the set or range of allowable values.\n\n\n20.5.5.3 ReferenceError\nThe ReferenceError constructor is %ReferenceError%.\nIndicate that an invalid reference has been detected.\n\n\n20.5.5.4 SyntaxError\nThe SyntaxError constructor is %SyntaxError%.\nIndicates that a parsing error has occurred.\n\n\n20.5.5.5 TypeError\nThe TypeError constructor is %TypeError%.\nTypeError is used to indicate an unsuccessful operation when none of the other NativeError objects are an appropriate indication of the failure cause.\n\n\n20.5.5.6 URIError\nThe URIError constructor is %URIError%.\nIndicates that one of the global URI handling functions was used in a way that is incompatible with its definition.\n\n\n\n20.5.6 NativeError Object Structure\nWhen an ECMAScript implementation detects a runtime error, it throws a new instance of one of the NativeError objects defined in 20.5.5. Each of these objects has the structure described below, differing only in the name used as the constructor name instead of NativeError, in the \"name\" property of the prototype object, and in the implementation-defined \"message\" property of the prototype object.\nFor each error object, references to NativeError in the definition should be replaced with the appropriate error object name from 20.5.5.\n\n20.5.6.1 The NativeError Constructors\nEach NativeError constructor:\n\ncreates and initializes a new NativeError object when called as a function rather than as a constructor. A call of the object as a function is equivalent to calling it as a constructor with the same arguments. Thus the function call NativeError(\u2026) is equivalent to the object creation expression new NativeError(\u2026) with the same arguments.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified NativeError behaviour must include a super call to the NativeError constructor to create and initialize subclass instances with an [[ErrorData]] internal slot.\n\n\n20.5.6.1.1 NativeError ( message [ , options ] )\nWhen a NativeError function is called with argument message and optional argument options, the following steps are taken:\n1. If NewTarget is undefined, let newTarget be the active function object; else let newTarget be NewTarget.2. Let O be ?\u00a0OrdinaryCreateFromConstructor(newTarget, \"%NativeError.prototype%\", \u00ab [[ErrorData]] \u00bb).3. If message is not undefined, thena. Let msg be ?\u00a0ToString(message).b. Perform CreateNonEnumerableDataPropertyOrThrow(O, \"message\", msg).4. Perform ?\u00a0InstallErrorCause(O, options).5. Return O.\nThe actual value of the string passed in step 2 is either \"%EvalError.prototype%\", \"%RangeError.prototype%\", \"%ReferenceError.prototype%\", \"%SyntaxError.prototype%\", \"%TypeError.prototype%\", or \"%URIError.prototype%\" corresponding to which NativeError constructor is being defined.\n\n\n\n20.5.6.2 Properties of the NativeError Constructors\nEach NativeError constructor:\n\nhas a [[Prototype]] internal slot whose value is %Error%.\nhas a \"name\" property whose value is the String value \"NativeError\".\nhas the following properties:\n\n\n20.5.6.2.1 NativeError.prototype\nThe initial value of NativeError.prototype is a NativeError prototype object (20.5.6.3). Each NativeError constructor has a distinct prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n20.5.6.3 Properties of the NativeError Prototype Objects\nEach NativeError prototype object:\n\nis an ordinary object.\nis not an Error instance and does not have an [[ErrorData]] internal slot.\nhas a [[Prototype]] internal slot whose value is %Error.prototype%.\n\n\n20.5.6.3.1 NativeError.prototype.constructor\nThe initial value of the \"constructor\" property of the prototype for a given NativeError constructor is the corresponding intrinsic object %NativeError% (20.5.6.1).\n\n\n20.5.6.3.2 NativeError.prototype.message\nThe initial value of the \"message\" property of the prototype for a given NativeError constructor is the empty String.\n\n\n20.5.6.3.3 NativeError.prototype.name\nThe initial value of the \"name\" property of the prototype for a given NativeError constructor is the String value consisting of the name of the constructor (the name used instead of NativeError).\n\n\n\n20.5.6.4 Properties of NativeError Instances\nNativeError instances are ordinary objects that inherit properties from their NativeError prototype object and have an [[ErrorData]] internal slot whose value is undefined. The only specified use of [[ErrorData]] is by Object.prototype.toString (20.1.3.6) to identify Error, AggregateError, or NativeError instances.\n\n\n\n20.5.7 AggregateError Objects\n\n20.5.7.1 The AggregateError Constructor\nThe AggregateError constructor:\n\nis %AggregateError%.\nis the initial value of the \"AggregateError\" property of the global object.\ncreates and initializes a new AggregateError object when called as a function rather than as a constructor. Thus the function call AggregateError(\u2026) is equivalent to the object creation expression new AggregateError(\u2026) with the same arguments.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified AggregateError behaviour must include a super call to the AggregateError constructor to create and initialize subclass instances with an [[ErrorData]] internal slot.\n\n\n20.5.7.1.1 AggregateError ( errors, message [ , options ] )\nWhen the AggregateError function is called with arguments errors and message and optional argument options, the following steps are taken:\n1. If NewTarget is undefined, let newTarget be the active function object; else let newTarget be NewTarget.2. Let O be ?\u00a0OrdinaryCreateFromConstructor(newTarget, \"%AggregateError.prototype%\", \u00ab [[ErrorData]] \u00bb).3. If message is not undefined, thena. Let msg be ?\u00a0ToString(message).b. Perform CreateNonEnumerableDataPropertyOrThrow(O, \"message\", msg).4. Perform ?\u00a0InstallErrorCause(O, options).5. Let errorsList be ?\u00a0IterableToList(errors).6. Perform !\u00a0DefinePropertyOrThrow(O, \"errors\", PropertyDescriptor { [[Configurable]]: true, [[Enumerable]]: false, [[Writable]]: true, [[Value]]: CreateArrayFromList(errorsList) }).7. Return O.\n\n\n\n20.5.7.2 Properties of the AggregateError Constructor\nThe AggregateError constructor:\n\nhas a [[Prototype]] internal slot whose value is %Error%.\nhas the following properties:\n\n\n20.5.7.2.1 AggregateError.prototype\nThe initial value of AggregateError.prototype is %AggregateError.prototype%.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n20.5.7.3 Properties of the AggregateError Prototype Object\nThe AggregateError prototype object:\n\nis %AggregateError.prototype%.\nis an ordinary object.\nis not an Error instance or an AggregateError instance and does not have an [[ErrorData]] internal slot.\nhas a [[Prototype]] internal slot whose value is %Error.prototype%.\n\n\n20.5.7.3.1 AggregateError.prototype.constructor\nThe initial value of AggregateError.prototype.constructor is %AggregateError%.\n\n\n20.5.7.3.2 AggregateError.prototype.message\nThe initial value of AggregateError.prototype.message is the empty String.\n\n\n20.5.7.3.3 AggregateError.prototype.name\nThe initial value of AggregateError.prototype.name is \"AggregateError\".\n\n\n\n20.5.7.4 Properties of AggregateError Instances\nAggregateError instances are ordinary objects that inherit properties from their AggregateError prototype object and have an [[ErrorData]] internal slot whose value is undefined. The only specified use of [[ErrorData]] is by Object.prototype.toString (20.1.3.6) to identify Error, AggregateError, or NativeError instances.\n\n\n\n20.5.8 Abstract Operations for Error Objects\n\n20.5.8.1 InstallErrorCause ( O, options )\nThe abstract operation InstallErrorCause takes arguments O (an Object) and options (an ECMAScript language value) and returns either a normal completion containing unused or an abrupt completion. It is used to create a \"cause\" property on O when a \"cause\" property is present on options. It performs the following steps when called:\n1. If Type(options) is Object and ?\u00a0HasProperty(options, \"cause\") is true, thena. Let cause be ?\u00a0Get(options, \"cause\").b. Perform CreateNonEnumerableDataPropertyOrThrow(O, \"cause\", cause).2. Return unused.\n\n\n\n\n\n21 Numbers and Dates\n\n21.1 Number Objects\n\n21.1.1 The Number Constructor\nThe Number constructor:\n\nis %Number%.\nis the initial value of the \"Number\" property of the global object.\ncreates and initializes a new Number object when called as a constructor.\nperforms a type conversion when called as a function rather than as a constructor.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified Number behaviour must include a super call to the Number constructor to create and initialize the subclass instance with a [[NumberData]] internal slot.\n\n\n21.1.1.1 Number ( value )\nWhen Number is called with argument value, the following steps are taken:\n1. If value is present, thena. Let prim be ?\u00a0ToNumeric(value).b. If Type(prim) is BigInt, let n be \ud835\udd3d(\u211d(prim)).c. Otherwise, let n be prim.2. Else,a. Let n be +0\ud835\udd3d.3. If NewTarget is undefined, return n.4. Let O be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%Number.prototype%\", \u00ab [[NumberData]] \u00bb).5. Set O.[[NumberData]] to n.6. Return O.\n\n\n\n21.1.2 Properties of the Number Constructor\nThe Number constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n21.1.2.1 Number.EPSILON\nThe value of Number.EPSILON is the Number value for the magnitude of the difference between 1 and the smallest value greater than 1 that is representable as a Number value, which is approximately 2.2204460492503130808472633361816 \u00d7 10-16.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.1.2.2 Number.isFinite ( number )\nWhen Number.isFinite is called with one argument number, the following steps are taken:\n1. If Type(number) is not Number, return false.2. If number is NaN, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return false.3. Otherwise, return true.\n\n\n21.1.2.3 Number.isInteger ( number )\nWhen Number.isInteger is called with one argument number, the following steps are taken:\n1. Return IsIntegralNumber(number).\n\n\n21.1.2.4 Number.isNaN ( number )\nWhen Number.isNaN is called with one argument number, the following steps are taken:\n1. If Type(number) is not Number, return false.2. If number is NaN, return true.3. Otherwise, return false.\nNote\nThis function differs from the global isNaN function (19.2.3) in that it does not convert its argument to a Number before determining whether it is NaN.\n\n\n\n21.1.2.5 Number.isSafeInteger ( number )\nWhen Number.isSafeInteger is called with one argument number, the following steps are taken:\n1. If IsIntegralNumber(number) is true, thena. If abs(\u211d(number)) \u2264 253 - 1, return true.2. Return false.\n\n\n21.1.2.6 Number.MAX_SAFE_INTEGER\nNote\nThe value of Number.MAX_SAFE_INTEGER is the largest integral Number n such that \u211d(n) and \u211d(n) + 1 are both exactly representable as a Number value.\n\nThe value of Number.MAX_SAFE_INTEGER is 9007199254740991\ud835\udd3d (\ud835\udd3d(253 - 1)).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.1.2.7 Number.MAX_VALUE\nThe value of Number.MAX_VALUE is the largest positive finite value of the Number type, which is approximately 1.7976931348623157 \u00d7 10308.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.1.2.8 Number.MIN_SAFE_INTEGER\nNote\nThe value of Number.MIN_SAFE_INTEGER is the smallest integral Number n such that \u211d(n) and \u211d(n) - 1 are both exactly representable as a Number value.\n\nThe value of Number.MIN_SAFE_INTEGER is -9007199254740991\ud835\udd3d (\ud835\udd3d(-(253 - 1))).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.1.2.9 Number.MIN_VALUE\nThe value of Number.MIN_VALUE is the smallest positive value of the Number type, which is approximately 5 \u00d7 10-324.\nIn the IEEE 754-2019\n double precision binary representation, the smallest possible value is a\n denormalized number. If an implementation does not support denormalized\n values, the value of Number.MIN_VALUE must be the smallest non-zero positive value that can actually be represented by the implementation.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.1.2.10 Number.NaN\nThe value of Number.NaN is NaN.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.1.2.11 Number.NEGATIVE_INFINITY\nThe value of Number.NEGATIVE_INFINITY is -\u221e\ud835\udd3d.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.1.2.12 Number.parseFloat ( string )\nThe initial value of the \"parseFloat\" property is %parseFloat%.\n\n\n21.1.2.13 Number.parseInt ( string, radix )\nThe initial value of the \"parseInt\" property is %parseInt%.\n\n\n21.1.2.14 Number.POSITIVE_INFINITY\nThe value of Number.POSITIVE_INFINITY is +\u221e\ud835\udd3d.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.1.2.15 Number.prototype\nThe initial value of Number.prototype is the Number prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n21.1.3 Properties of the Number Prototype Object\nThe Number prototype object:\n\nis %Number.prototype%.\nis an ordinary object.\nis itself a Number object; it has a [[NumberData]] internal slot with the value +0\ud835\udd3d.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\n\nUnless explicitly stated otherwise, the methods of the Number prototype object defined below are not generic and the this value passed to them must be either a Number value or an object that has a [[NumberData]] internal slot that has been initialized to a Number value.\nThe abstract operation thisNumberValue takes argument value. It performs the following steps when called:\n1. If Type(value) is Number, return value.2. If Type(value) is Object and value has a [[NumberData]] internal slot, thena. Let n be value.[[NumberData]].b. Assert: Type(n) is Number.c. Return n.3. Throw a TypeError exception.\nThe phrase \u201cthis Number value\u201d within the specification of a method refers to the result returned by calling the abstract operation thisNumberValue with the this value of the method invocation passed as the argument.\n\n21.1.3.1 Number.prototype.constructor\nThe initial value of Number.prototype.constructor is %Number%.\n\n\n21.1.3.2 Number.prototype.toExponential ( fractionDigits )\nReturn a String containing this Number value represented in decimal exponential notation with one digit before the significand's decimal point and fractionDigits digits after the significand's decimal point. If fractionDigits is undefined, include as many significand digits as necessary to uniquely specify the Number (just like in ToString except that in this case the Number is always output in exponential notation). Specifically, perform the following steps:\n1. Let x be ?\u00a0thisNumberValue(this value).2. Let f be ?\u00a0ToIntegerOrInfinity(fractionDigits).3. Assert: If fractionDigits is undefined, then f is 0.4. If x is not finite, return Number::toString(x).5. If f < 0 or f > 100, throw a RangeError exception.6. Set x to \u211d(x).7. Let s be the empty String.8. If x < 0, thena. Set s to \"-\".b. Set x to -x.9. If x = 0, thena. Let m be the String value consisting of f + 1 occurrences of the code unit 0x0030 (DIGIT ZERO).b. Let e be 0.10. Else,a. If fractionDigits is not undefined, theni. Let e and n be integers such that 10f \u2264 n < 10f + 1 and for which n \u00d7 10e - f - x is as close to zero as possible. If there are two such sets of e and n, pick the e and n for which n \u00d7 10e - f is larger.b. Else,i. Let e, n, and f be integers such that f \u2265 0, 10f \u2264 n < 10f + 1, \ud835\udd3d(n \u00d7 10e - f) is \ud835\udd3d(x), and f is as small as possible. Note that the decimal representation of n has f + 1 digits, n is not divisible by 10, and the least significant digit of n is not necessarily uniquely determined by these criteria.c. Let m be the String value consisting of the digits of the decimal representation of n (in order, with no leading zeroes).11. If f \u2260 0, thena. Let a be the first code unit of m.b. Let b be the other f code units of m.c. Set m to the string-concatenation of a, \".\", and b.12. If e = 0, thena. Let c be \"+\".b. Let d be \"0\".13. Else,a. If e > 0, let c be \"+\".b. Else,i. Assert: e < 0.ii. Let c be \"-\".iii. Set e to -e.c. Let d be the String value consisting of the digits of the decimal representation of e (in order, with no leading zeroes).14. Set m to the string-concatenation of m, \"e\", c, and d.15. Return the string-concatenation of s and m.\nNote\nFor implementations that provide more accurate conversions \nthan required by the rules above, it is recommended that the following \nalternative version of step 10.b.i be used as a guideline:\n1. Let e, n, and f be integers such that f \u2265 0, 10f \u2264 n < 10f + 1, \ud835\udd3d(n \u00d7 10e - f) is \ud835\udd3d(x), and f is as small as possible. If there are multiple possibilities for n, choose the value of n for which \ud835\udd3d(n \u00d7 10e - f) is closest in value to \ud835\udd3d(x). If there are two such possible values of n, choose the one that is even.\n\n\n\n21.1.3.3 Number.prototype.toFixed ( fractionDigits )\nNote 1\ntoFixed returns a String containing this Number value represented in decimal fixed-point notation with fractionDigits digits after the decimal point. If fractionDigits is undefined, 0 is assumed.\n\nThe following steps are performed:\n1. Let x be ?\u00a0thisNumberValue(this value).2. Let f be ?\u00a0ToIntegerOrInfinity(fractionDigits).3. Assert: If fractionDigits is undefined, then f is 0.4. If f is not finite, throw a RangeError exception.5. If f < 0 or f > 100, throw a RangeError exception.6. If x is not finite, return Number::toString(x).7. Set x to \u211d(x).8. Let s be the empty String.9. If x < 0, thena. Set s to \"-\".b. Set x to -x.10. If x \u2265 1021, thena. Let m be !\u00a0ToString(\ud835\udd3d(x)).11. Else,a. Let n be an integer for which n / 10f - x is as close to zero as possible. If there are two such n, pick the larger n.b. If n = 0, let m be the String \"0\". Otherwise, let m be the String value consisting of the digits of the decimal representation of n (in order, with no leading zeroes).c. If f \u2260 0, theni. Let k be the length of m.ii. If k \u2264 f, then1. Let z be the String value consisting of f + 1 - k occurrences of the code unit 0x0030 (DIGIT ZERO).2. Set m to the string-concatenation of z and m.3. Set k to f + 1.iii. Let a be the first k - f code units of m.iv. Let b be the other f code units of m.v. Set m to the string-concatenation of a, \".\", and b.12. Return the string-concatenation of s and m.\nNote 2\nThe output of toFixed may be more precise than toString\n for some values because toString only prints enough significant digits \nto distinguish the number from adjacent Number values. For example,\n\n(1000000000000000128).toString() returns \"1000000000000000100\", while\n(1000000000000000128).toFixed(0) returns \"1000000000000000128\".\n          \n\n\n\n21.1.3.4 Number.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\nAn ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the Number.prototype.toLocaleString\n method as specified in the ECMA-402 specification. If an ECMAScript \nimplementation does not include the ECMA-402 API the following \nspecification of the toLocaleString method is used.\nProduces a String value that represents this Number value formatted according to the conventions of the host environment's current locale. This function is implementation-defined, and it is permissible, but not encouraged, for it to return the same thing as toString.\nThe meanings of the optional parameters to this method are \ndefined in the ECMA-402 specification; implementations that do not \ninclude ECMA-402 support must not use those parameter positions for \nanything else.\n\n\n21.1.3.5 Number.prototype.toPrecision ( precision )\nReturn a String containing this Number value represented either in decimal exponential notation with one digit before the significand's decimal point and precision - 1 digits after the significand's decimal point or in decimal fixed notation with precision significant digits. If precision is undefined, call ToString instead. Specifically, perform the following steps:\n1. Let x be ?\u00a0thisNumberValue(this value).2. If precision is undefined, return !\u00a0ToString(x).3. Let p be ?\u00a0ToIntegerOrInfinity(precision).4. If x is not finite, return Number::toString(x).5. If p < 1 or p > 100, throw a RangeError exception.6. Set x to \u211d(x).7. Let s be the empty String.8. If x < 0, thena. Set s to the code unit 0x002D (HYPHEN-MINUS).b. Set x to -x.9. If x = 0, thena. Let m be the String value consisting of p occurrences of the code unit 0x0030 (DIGIT ZERO).b. Let e be 0.10. Else,a. Let e and n be integers such that 10p - 1 \u2264 n < 10p and for which n \u00d7 10e - p + 1 - x is as close to zero as possible. If there are two such sets of e and n, pick the e and n for which n \u00d7 10e - p + 1 is larger.b. Let m be the String value consisting of the digits of the decimal representation of n (in order, with no leading zeroes).c. If e < -6 or e \u2265 p, theni. Assert: e \u2260 0.ii. If p \u2260 1, then1. Let a be the first code unit of m.2. Let b be the other p - 1 code units of m.3. Set m to the string-concatenation of a, \".\", and b.iii. If e > 0, then1. Let c be the code unit 0x002B (PLUS SIGN).iv. Else,1. Assert: e < 0.2. Let c be the code unit 0x002D (HYPHEN-MINUS).3. Set e to -e.v. Let d be the String value consisting of the digits of the decimal representation of e (in order, with no leading zeroes).vi. Return the string-concatenation of s, m, the code unit 0x0065 (LATIN SMALL LETTER E), c, and d.11. If e = p - 1, return the string-concatenation of s and m.12. If e \u2265 0, thena. Set m to the string-concatenation of the first e + 1 code units of m, the code unit 0x002E (FULL STOP), and the remaining p - (e + 1) code units of m.13. Else,a. Set m to the string-concatenation of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(e + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String m.14. Return the string-concatenation of s and m.\n\n\n21.1.3.6 Number.prototype.toString ( [ radix ] )\nNote\nThe optional radix should be an integral Number value in the inclusive range 2\ud835\udd3d to 36\ud835\udd3d. If radix is undefined then 10\ud835\udd3d is used as the value of radix.\n\nThe following steps are performed:\n1. Let x be ?\u00a0thisNumberValue(this value).2. If radix is undefined, let radixMV be 10.3. Else, let radixMV be ?\u00a0ToIntegerOrInfinity(radix).4. If radixMV < 2 or radixMV > 36, throw a RangeError exception.5. If radixMV = 10, return !\u00a0ToString(x).6. Return the String representation of this Number value using the radix specified by radixMV. Letters a-z are used for digits with values 10 through 35. The precise algorithm is implementation-defined, however the algorithm should be a generalization of that specified in 6.1.6.1.20.\nThe toString function is not generic; it throws a TypeError exception if its this value is not a Number or a Number object. Therefore, it cannot be transferred to other kinds of objects for use as a method.\nThe \"length\" property of the toString method is 1\ud835\udd3d.\n\n\n21.1.3.7 Number.prototype.valueOf ( )\n1. Return ?\u00a0thisNumberValue(this value).\n\n\n\n21.1.4 Properties of Number Instances\nNumber instances are ordinary objects that inherit properties from the Number prototype object. Number instances also have a [[NumberData]] internal slot. The [[NumberData]] internal slot is the Number value represented by this Number object.\n\n\n\n21.2 BigInt Objects\n\n21.2.1 The BigInt Constructor\nThe BigInt constructor:\n\nis %BigInt%.\nis the initial value of the \"BigInt\" property of the global object.\nperforms a type conversion when called as a function rather than as a constructor.\nis not intended to be used with the new operator or to be subclassed. It may be used as the value of an extends clause of a class definition but a super call to the BigInt constructor will cause an exception.\n\n\n21.2.1.1 BigInt ( value )\nWhen BigInt is called with argument value, the following steps are taken:\n1. If NewTarget is not undefined, throw a TypeError exception.2. Let prim be ?\u00a0ToPrimitive(value, number).3. If Type(prim) is Number, return ?\u00a0NumberToBigInt(prim).4. Otherwise, return ?\u00a0ToBigInt(value).\n\n21.2.1.1.1 NumberToBigInt ( number )\nThe abstract operation NumberToBigInt takes argument number (a Number) and returns either a normal completion containing a BigInt or an abrupt completion. It performs the following steps when called:\n1. If IsIntegralNumber(number) is false, throw a RangeError exception.2. Return the BigInt value that represents \u211d(number).\n\n\n\n\n21.2.2 Properties of the BigInt Constructor\nThe BigInt constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n21.2.2.1 BigInt.asIntN ( bits, bigint )\nWhen the BigInt.asIntN function is called with two arguments bits and bigint, the following steps are taken:\n1. Set bits to ?\u00a0ToIndex(bits).2. Set bigint to ?\u00a0ToBigInt(bigint).3. Let mod be \u211d(bigint) modulo 2bits.4. If mod \u2265 2bits - 1, return \u2124(mod - 2bits); otherwise, return \u2124(mod).\n\n\n21.2.2.2 BigInt.asUintN ( bits, bigint )\nWhen the BigInt.asUintN function is called with two arguments bits and bigint, the following steps are taken:\n1. Set bits to ?\u00a0ToIndex(bits).2. Set bigint to ?\u00a0ToBigInt(bigint).3. Return the BigInt value that represents \u211d(bigint) modulo 2bits.\n\n\n21.2.2.3 BigInt.prototype\nThe initial value of BigInt.prototype is the BigInt prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n21.2.3 Properties of the BigInt Prototype Object\nThe BigInt prototype object:\n\nis %BigInt.prototype%.\nis an ordinary object.\nis not a BigInt object; it does not have a [[BigIntData]] internal slot.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\n\nThe abstract operation thisBigIntValue takes argument value. It performs the following steps when called:\n1. If Type(value) is BigInt, return value.2. If Type(value) is Object and value has a [[BigIntData]] internal slot, thena. Assert: Type(value.[[BigIntData]]) is BigInt.b. Return value.[[BigIntData]].3. Throw a TypeError exception.\nThe phrase \u201cthis BigInt value\u201d within the specification of a \nmethod refers to the result returned by calling the abstract operation thisBigIntValue with the this value of the method invocation passed as the argument.\n\n21.2.3.1 BigInt.prototype.constructor\nThe initial value of BigInt.prototype.constructor is %BigInt%.\n\n\n21.2.3.2 BigInt.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\nAn ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the BigInt.prototype.toLocaleString\n method as specified in the ECMA-402 specification. If an ECMAScript \nimplementation does not include the ECMA-402 API the following \nspecification of the toLocaleString method is used.\nProduces a String value that represents this BigInt value formatted according to the conventions of the host environment's current locale. This function is implementation-defined, and it is permissible, but not encouraged, for it to return the same thing as toString.\nThe meanings of the optional parameters to this method are \ndefined in the ECMA-402 specification; implementations that do not \ninclude ECMA-402 support must not use those parameter positions for \nanything else.\n\n\n21.2.3.3 BigInt.prototype.toString ( [ radix ] )\nNote\nThe optional radix should be an integral Number value in the inclusive range 2\ud835\udd3d to 36\ud835\udd3d. If radix is undefined then 10\ud835\udd3d is used as the value of radix.\n\nThe following steps are performed:\n1. Let x be ?\u00a0thisBigIntValue(this value).2. If radix is undefined, let radixMV be 10.3. Else, let radixMV be ?\u00a0ToIntegerOrInfinity(radix).4. If radixMV < 2 or radixMV > 36, throw a RangeError exception.5. If radixMV = 10, return !\u00a0ToString(x).6. Return the String representation of this Number value using the radix specified by radixMV. Letters a-z are used for digits with values 10 through 35. The precise algorithm is implementation-defined, however the algorithm should be a generalization of that specified in 6.1.6.2.23.\nThe toString function is not generic; it throws a TypeError exception if its this value is not a BigInt or a BigInt object. Therefore, it cannot be transferred to other kinds of objects for use as a method.\n\n\n21.2.3.4 BigInt.prototype.valueOf ( )\n1. Return ?\u00a0thisBigIntValue(this value).\n\n\n21.2.3.5 BigInt.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"BigInt\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n\n21.3 The Math Object\nThe Math object:\n\nis %Math%.\nis the initial value of the \"Math\" property of the global object.\nis an ordinary object.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis not a function object.\ndoes not have a [[Construct]] internal method; it cannot be used as a constructor with the new operator.\ndoes not have a [[Call]] internal method; it cannot be invoked as a function.\n\nNote\nIn this specification, the phrase \u201cthe Number value for x\u201d has a technical meaning defined in 6.1.6.1.\n\n\n21.3.1 Value Properties of the Math Object\n\n21.3.1.1 Math.E\nThe Number value for e, the base of the natural logarithms, which is approximately 2.7182818284590452354.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.3.1.2 Math.LN10\nThe Number value for the natural logarithm of 10, which is approximately 2.302585092994046.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.3.1.3 Math.LN2\nThe Number value for the natural logarithm of 2, which is approximately 0.6931471805599453.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.3.1.4 Math.LOG10E\nThe Number value for the base-10 logarithm of e, the base of the natural logarithms; this value is approximately 0.4342944819032518.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\nNote\nThe value of Math.LOG10E is approximately the reciprocal of the value of Math.LN10.\n\n\n\n21.3.1.5 Math.LOG2E\nThe Number value for the base-2 logarithm of e, the base of the natural logarithms; this value is approximately 1.4426950408889634.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\nNote\nThe value of Math.LOG2E is approximately the reciprocal of the value of Math.LN2.\n\n\n\n21.3.1.6 Math.PI\nThe Number value for \u03c0, the ratio of the circumference of a circle to its diameter, which is approximately 3.1415926535897932.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.3.1.7 Math.SQRT1_2\nThe Number value for the square root of \u00bd, which is approximately 0.7071067811865476.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\nNote\nThe value of Math.SQRT1_2 is approximately the reciprocal of the value of Math.SQRT2.\n\n\n\n21.3.1.8 Math.SQRT2\nThe Number value for the square root of 2, which is approximately 1.4142135623730951.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.3.1.9 Math [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Math\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n21.3.2 Function Properties of the Math Object\nNote\nThe behaviour of the functions acos, acosh, asin, asinh, atan, atanh, atan2, cbrt, cos, cosh, exp, expm1, hypot, log, log1p, log2, log10, pow, random, sin, sinh, sqrt, tan, and tanh\n is not precisely specified here except to require specific results for \ncertain argument values that represent boundary cases of interest. For \nother argument values, these functions are intended to compute \napproximations to the results of familiar mathematical functions, but \nsome latitude is allowed in the choice of approximation algorithms. The \ngeneral intent is that an implementer should be able to use the same \nmathematical library for ECMAScript on a given hardware platform that is\n available to C programmers on that platform.\nAlthough the choice of algorithms is left to the \nimplementation, it is recommended (but not specified by this standard) \nthat implementations use the approximation algorithms for IEEE 754-2019 arithmetic contained in fdlibm, the freely distributable mathematical library from Sun Microsystems (http://www.netlib.org/fdlibm).\n\n\n21.3.2.1 Math.abs ( x )\nReturns the absolute value of x; the result has the same magnitude as x but has positive sign.\nWhen the Math.abs method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, return NaN.3. If n is -0\ud835\udd3d, return +0\ud835\udd3d.4. If n is -\u221e\ud835\udd3d, return +\u221e\ud835\udd3d.5. If n < -0\ud835\udd3d, return -n.6. Return n.\n\n\n21.3.2.2 Math.acos ( x )\nReturns the inverse cosine of x. The result is expressed in radians and ranges from +0\ud835\udd3d to \ud835\udd3d(\u03c0), inclusive.\nWhen the Math.acos method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n > 1\ud835\udd3d, or n < -1\ud835\udd3d, return NaN.3. If n is 1\ud835\udd3d, return +0\ud835\udd3d.4. Return an implementation-approximated Number value representing the result of the inverse cosine of \u211d(n).\n\n\n21.3.2.3 Math.acosh ( x )\nReturns the inverse hyperbolic cosine of x.\nWhen the Math.acosh method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN or n is +\u221e\ud835\udd3d, return n.3. If n is 1\ud835\udd3d, return +0\ud835\udd3d.4. If n < 1\ud835\udd3d, return NaN.5. Return an implementation-approximated Number value representing the result of the inverse hyperbolic cosine of \u211d(n).\n\n\n21.3.2.4 Math.asin ( x )\nReturns the inverse sine of x. The result is expressed in radians and ranges from \ud835\udd3d(-\u03c0 / 2) to \ud835\udd3d(\u03c0 / 2), inclusive.\nWhen the Math.asin method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, or n is -0\ud835\udd3d, return n.3. If n > 1\ud835\udd3d or n < -1\ud835\udd3d, return NaN.4. Return an implementation-approximated Number value representing the result of the inverse sine of \u211d(n).\n\n\n21.3.2.5 Math.asinh ( x )\nReturns the inverse hyperbolic sine of x.\nWhen the Math.asinh method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, n is -0\ud835\udd3d, n is +\u221e\ud835\udd3d, or n is -\u221e\ud835\udd3d, return n.3. Return an implementation-approximated Number value representing the result of the inverse hyperbolic sine of \u211d(n).\n\n\n21.3.2.6 Math.atan ( x )\nReturns the inverse tangent of x. The result is expressed in radians and ranges from \ud835\udd3d(-\u03c0 / 2) to \ud835\udd3d(\u03c0 / 2), inclusive.\nWhen the Math.atan method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, or n is -0\ud835\udd3d, return n.3. If n is +\u221e\ud835\udd3d, return an implementation-approximated Number value representing \u03c0 / 2.4. If n is -\u221e\ud835\udd3d, return an implementation-approximated Number value representing -\u03c0 / 2.5. Return an implementation-approximated Number value representing the result of the inverse tangent of \u211d(n).\n\n\n21.3.2.7 Math.atanh ( x )\nReturns the inverse hyperbolic tangent of x.\nWhen the Math.atanh method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, or n is -0\ud835\udd3d, return n.3. If n > 1\ud835\udd3d or n < -1\ud835\udd3d, return NaN.4. If n is 1\ud835\udd3d, return +\u221e\ud835\udd3d.5. If n is -1\ud835\udd3d, return -\u221e\ud835\udd3d.6. Return an implementation-approximated Number value representing the result of the inverse hyperbolic tangent of \u211d(n).\n\n\n21.3.2.8 Math.atan2 ( y, x )\nReturns the inverse tangent of the quotient y / x of the arguments y and x, where the signs of y and x\n are used to determine the quadrant of the result. Note that it is \nintentional and traditional for the two-argument inverse tangent \nfunction that the argument named y be first and the argument named x be second. The result is expressed in radians and ranges from -\u03c0 to +\u03c0, inclusive.\nWhen the Math.atan2 method is called with arguments y and x, the following steps are taken:\n1. Let ny be ?\u00a0ToNumber(y).2. Let nx be ?\u00a0ToNumber(x).3. If ny is NaN or nx is NaN, return NaN.4. If ny is +\u221e\ud835\udd3d, thena. If nx is +\u221e\ud835\udd3d, return an implementation-approximated Number value representing \u03c0 / 4.b. If nx is -\u221e\ud835\udd3d, return an implementation-approximated Number value representing 3\u03c0 / 4.c. Return an implementation-approximated Number value representing \u03c0 / 2.5. If ny is -\u221e\ud835\udd3d, thena. If nx is +\u221e\ud835\udd3d, return an implementation-approximated Number value representing -\u03c0 / 4.b. If nx is -\u221e\ud835\udd3d, return an implementation-approximated Number value representing -3\u03c0 / 4.c. Return an implementation-approximated Number value representing -\u03c0 / 2.6. If ny is +0\ud835\udd3d, thena. If nx > +0\ud835\udd3d or nx is +0\ud835\udd3d, return +0\ud835\udd3d.b. Return an implementation-approximated Number value representing \u03c0.7. If ny is -0\ud835\udd3d, thena. If nx > +0\ud835\udd3d or nx is +0\ud835\udd3d, return -0\ud835\udd3d.b. Return an implementation-approximated Number value representing -\u03c0.8. Assert: ny is finite and is neither +0\ud835\udd3d nor -0\ud835\udd3d.9. If ny > +0\ud835\udd3d, thena. If nx is +\u221e\ud835\udd3d, return +0\ud835\udd3d.b. If nx is -\u221e\ud835\udd3d, return an implementation-approximated Number value representing \u03c0.c. If nx is +0\ud835\udd3d or nx is -0\ud835\udd3d, return an implementation-approximated Number value representing \u03c0 / 2.10. If ny < -0\ud835\udd3d, thena. If nx is +\u221e\ud835\udd3d, return -0\ud835\udd3d.b. If nx is -\u221e\ud835\udd3d, return an implementation-approximated Number value representing -\u03c0.c. If nx is +0\ud835\udd3d or nx is -0\ud835\udd3d, return an implementation-approximated Number value representing -\u03c0 / 2.11. Assert: nx is finite and is neither +0\ud835\udd3d nor -0\ud835\udd3d.12. Return an implementation-approximated Number value representing the result of the inverse tangent of the quotient \u211d(ny) / \u211d(nx).\n\n\n21.3.2.9 Math.cbrt ( x )\nReturns the cube root of x.\nWhen the Math.cbrt method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, n is -0\ud835\udd3d, n is +\u221e\ud835\udd3d, or n is -\u221e\ud835\udd3d, return n.3. Return an implementation-approximated Number value representing the result of the cube root of \u211d(n).\n\n\n21.3.2.10 Math.ceil ( x )\nReturns the smallest (closest to -\u221e) integral Number value that is not less than x. If x is already an integral Number, the result is x.\nWhen the Math.ceil method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, n is -0\ud835\udd3d, n is +\u221e\ud835\udd3d, or n is -\u221e\ud835\udd3d, return n.3. If n < -0\ud835\udd3d and n > -1\ud835\udd3d, return -0\ud835\udd3d.4. If n is an integral Number, return n.5. Return the smallest (closest to -\u221e) integral Number value that is not less than n.\nNote\nThe value of Math.ceil(x) is the same as the value of -Math.floor(-x).\n\n\n\n21.3.2.11 Math.clz32 ( x )\nWhen the Math.clz32 method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToUint32(x).2. Let p be the number of leading zero bits in the unsigned 32-bit binary representation of n.3. Return \ud835\udd3d(p).\nNote\nIf n is +0\ud835\udd3d or n is -0\ud835\udd3d, this method returns 32\ud835\udd3d. If the most significant bit of the 32-bit binary encoding of n is 1, this method returns +0\ud835\udd3d.\n\n\n\n21.3.2.12 Math.cos ( x )\nReturns the cosine of x. The argument is expressed in radians.\nWhen the Math.cos method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +\u221e\ud835\udd3d, or n is -\u221e\ud835\udd3d, return NaN.3. If n is +0\ud835\udd3d or n is -0\ud835\udd3d, return 1\ud835\udd3d.4. Return an implementation-approximated Number value representing the result of the cosine of \u211d(n).\n\n\n21.3.2.13 Math.cosh ( x )\nReturns the hyperbolic cosine of x.\nWhen the Math.cosh method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, return NaN.3. If n is +\u221e\ud835\udd3d or n is -\u221e\ud835\udd3d, return +\u221e\ud835\udd3d.4. If n is +0\ud835\udd3d or n is -0\ud835\udd3d, return 1\ud835\udd3d.5. Return an implementation-approximated Number value representing the result of the hyperbolic cosine of \u211d(n).\nNote\nThe value of Math.cosh(x) is the same as the value of (Math.exp(x) + Math.exp(-x)) / 2.\n\n\n\n21.3.2.14 Math.exp ( x )\nReturns the exponential function of x (e raised to the power of x, where e is the base of the natural logarithms).\nWhen the Math.exp method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN or n is +\u221e\ud835\udd3d, return n.3. If n is +0\ud835\udd3d or n is -0\ud835\udd3d, return 1\ud835\udd3d.4. If n is -\u221e\ud835\udd3d, return +0\ud835\udd3d.5. Return an implementation-approximated Number value representing the result of the exponential function of \u211d(n).\n\n\n21.3.2.15 Math.expm1 ( x )\nReturns the result of subtracting 1 from the exponential function of x (e raised to the power of x, where e is the base of the natural logarithms). The result is computed in a way that is accurate even when the value of x is close to 0.\nWhen the Math.expm1 method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, n is -0\ud835\udd3d, or n is +\u221e\ud835\udd3d, return n.3. If n is -\u221e\ud835\udd3d, return -1\ud835\udd3d.4. Return an implementation-approximated Number value representing the result of subtracting 1 from the exponential function of \u211d(n).\n\n\n21.3.2.16 Math.floor ( x )\nReturns the greatest (closest to +\u221e) integral Number value that is not greater than x. If x is already an integral Number, the result is x.\nWhen the Math.floor method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, n is -0\ud835\udd3d, n is +\u221e\ud835\udd3d, or n is -\u221e\ud835\udd3d, return n.3. If n < 1\ud835\udd3d and n > +0\ud835\udd3d, return +0\ud835\udd3d.4. If n is an integral Number, return n.5. Return the greatest (closest to +\u221e) integral Number value that is not greater than n.\nNote\nThe value of Math.floor(x) is the same as the value of -Math.ceil(-x).\n\n\n\n21.3.2.17 Math.fround ( x )\nWhen the Math.fround method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, return NaN.3. If n is one of +0\ud835\udd3d, -0\ud835\udd3d, +\u221e\ud835\udd3d, or -\u221e\ud835\udd3d, return n.4. Let n32 be the result of converting n to a value in IEEE 754-2019 binary32 format using roundTiesToEven mode.5. Let n64 be the result of converting n32 to a value in IEEE 754-2019 binary64 format.6. Return the ECMAScript Number value corresponding to n64.\n\n\n21.3.2.18 Math.hypot ( ...args )\nReturns the square root of the sum of squares of its arguments.\nWhen the Math.hypot method is called with zero or more arguments which form the rest parameter ...args, the following steps are taken:\n1. Let coerced be a new empty List.2. For each element arg of args, doa. Let n be ?\u00a0ToNumber(arg).b. Append n to coerced.3. For each element number of coerced, doa. If number is +\u221e\ud835\udd3d or number is -\u221e\ud835\udd3d, return +\u221e\ud835\udd3d.4. Let onlyZero be true.5. For each element number of coerced, doa. If number is NaN, return NaN.b. If number is neither +0\ud835\udd3d nor -0\ud835\udd3d, set onlyZero to false.6. If onlyZero is true, return +0\ud835\udd3d.7. Return an implementation-approximated Number value representing the square root of the sum of squares of the mathematical values of the elements of coerced.\nThe \"length\" property of the hypot method is 2\ud835\udd3d.\nNote\nImplementations should take care to avoid the loss of \nprecision from overflows and underflows that are prone to occur in naive\n implementations when this function is called with two or more \narguments.\n\n\n\n21.3.2.19 Math.imul ( x, y )\nWhen Math.imul is called with arguments x and y, the following steps are taken:\n1. Let a be \u211d(? ToUint32(x)).2. Let b be \u211d(? ToUint32(y)).3. Let product be (a \u00d7 b) modulo 232.4. If product \u2265 231, return \ud835\udd3d(product - 232); otherwise return \ud835\udd3d(product).\n\n\n21.3.2.20 Math.log ( x )\nReturns the natural logarithm of x.\nWhen the Math.log method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN or n is +\u221e\ud835\udd3d, return n.3. If n is 1\ud835\udd3d, return +0\ud835\udd3d.4. If n is +0\ud835\udd3d or n is -0\ud835\udd3d, return -\u221e\ud835\udd3d.5. If n < -0\ud835\udd3d, return NaN.6. Return an implementation-approximated Number value representing the result of the natural logarithm of \u211d(n).\n\n\n21.3.2.21 Math.log1p ( x )\nReturns the natural logarithm of 1 + x. The result is computed in a way that is accurate even when the value of x is close to zero.\nWhen the Math.log1p method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, n is -0\ud835\udd3d, or n is +\u221e\ud835\udd3d, return n.3. If n is -1\ud835\udd3d, return -\u221e\ud835\udd3d.4. If n < -1\ud835\udd3d, return NaN.5. Return an implementation-approximated Number value representing the result of the natural logarithm of 1 + \u211d(n).\n\n\n21.3.2.22 Math.log10 ( x )\nReturns the base 10 logarithm of x.\nWhen the Math.log10 method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN or n is +\u221e\ud835\udd3d, return n.3. If n is 1\ud835\udd3d, return +0\ud835\udd3d.4. If n is +0\ud835\udd3d or n is -0\ud835\udd3d, return -\u221e\ud835\udd3d.5. If n < -0\ud835\udd3d, return NaN.6. Return an implementation-approximated Number value representing the result of the base 10 logarithm of \u211d(n).\n\n\n21.3.2.23 Math.log2 ( x )\nReturns the base 2 logarithm of x.\nWhen the Math.log2 method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN or n is +\u221e\ud835\udd3d, return n.3. If n is 1\ud835\udd3d, return +0\ud835\udd3d.4. If n is +0\ud835\udd3d or n is -0\ud835\udd3d, return -\u221e\ud835\udd3d.5. If n < -0\ud835\udd3d, return NaN.6. Return an implementation-approximated Number value representing the result of the base 2 logarithm of \u211d(n).\n\n\n21.3.2.24 Math.max ( ...args )\nGiven zero or more arguments, calls ToNumber on each of the arguments and returns the largest of the resulting values.\nWhen the Math.max method is called with zero or more arguments which form the rest parameter ...args, the following steps are taken:\n1. Let coerced be a new empty List.2. For each element arg of args, doa. Let n be ?\u00a0ToNumber(arg).b. Append n to coerced.3. Let highest be -\u221e\ud835\udd3d.4. For each element number of coerced, doa. If number is NaN, return NaN.b. If number is +0\ud835\udd3d and highest is -0\ud835\udd3d, set highest to +0\ud835\udd3d.c. If number > highest, set highest to number.5. Return highest.\nNote\nThe comparison of values to determine the largest value is done using the IsLessThan algorithm except that +0\ud835\udd3d is considered to be larger than -0\ud835\udd3d.\n\nThe \"length\" property of the max method is 2\ud835\udd3d.\n\n\n21.3.2.25 Math.min ( ...args )\nGiven zero or more arguments, calls ToNumber on each of the arguments and returns the smallest of the resulting values.\nWhen the Math.min method is called with zero or more arguments which form the rest parameter ...args, the following steps are taken:\n1. Let coerced be a new empty List.2. For each element arg of args, doa. Let n be ?\u00a0ToNumber(arg).b. Append n to coerced.3. Let lowest be +\u221e\ud835\udd3d.4. For each element number of coerced, doa. If number is NaN, return NaN.b. If number is -0\ud835\udd3d and lowest is +0\ud835\udd3d, set lowest to -0\ud835\udd3d.c. If number < lowest, set lowest to number.5. Return lowest.\nNote\nThe comparison of values to determine the largest value is done using the IsLessThan algorithm except that +0\ud835\udd3d is considered to be larger than -0\ud835\udd3d.\n\nThe \"length\" property of the min method is 2\ud835\udd3d.\n\n\n21.3.2.26 Math.pow ( base, exponent )\nWhen the Math.pow method is called with arguments base and exponent, the following steps are taken:\n1. Set base to ?\u00a0ToNumber(base).2. Set exponent to ?\u00a0ToNumber(exponent).3. Return Number::exponentiate(base, exponent).\n\n\n21.3.2.27 Math.random ( )\nReturns a Number value with positive sign, greater than or equal to +0\ud835\udd3d but strictly less than 1\ud835\udd3d, chosen randomly or pseudo randomly with approximately uniform distribution over that range, using an implementation-defined algorithm or strategy. This function takes no arguments.\nEach Math.random function created for distinct realms must produce a distinct sequence of values from successive calls.\n\n\n21.3.2.28 Math.round ( x )\nReturns the Number value that is closest to x and is integral. If two integral Numbers are equally close to x, then the result is the Number value that is closer to +\u221e. If x is already integral, the result is x.\nWhen the Math.round method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, +\u221e\ud835\udd3d, -\u221e\ud835\udd3d, or an integral Number, return n.3. If n < 0.5\ud835\udd3d and n > +0\ud835\udd3d, return +0\ud835\udd3d.4. If n < -0\ud835\udd3d and n \u2265 -0.5\ud835\udd3d, return -0\ud835\udd3d.5. Return the integral Number closest to n, preferring the Number closer to +\u221e in the case of a tie.\nNote 1\nMath.round(3.5) returns 4, but Math.round(-3.5) returns -3.\n\nNote 2\nThe value of Math.round(x) is not always the same as the value of Math.floor(x + 0.5). When x is -0\ud835\udd3d or is less than +0\ud835\udd3d but greater than or equal to -0.5\ud835\udd3d, Math.round(x) returns -0\ud835\udd3d, but Math.floor(x + 0.5) returns +0\ud835\udd3d. Math.round(x) may also differ from the value of Math.floor(x + 0.5)because of internal rounding when computing x + 0.5.\n\n\n\n21.3.2.29 Math.sign ( x )\nReturns the sign of x, indicating whether x is positive, negative, or zero.\nWhen the Math.sign method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, or n is -0\ud835\udd3d, return n.3. If n < -0\ud835\udd3d, return -1\ud835\udd3d.4. Return 1\ud835\udd3d.\n\n\n21.3.2.30 Math.sin ( x )\nReturns the sine of x. The argument is expressed in radians.\nWhen the Math.sin method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, or n is -0\ud835\udd3d, return n.3. If n is +\u221e\ud835\udd3d or n is -\u221e\ud835\udd3d, return NaN.4. Return an implementation-approximated Number value representing the result of the sine of \u211d(n).\n\n\n21.3.2.31 Math.sinh ( x )\nReturns the hyperbolic sine of x.\nWhen the Math.sinh method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, n is -0\ud835\udd3d, n is +\u221e\ud835\udd3d, or n is -\u221e\ud835\udd3d, return n.3. Return an implementation-approximated Number value representing the result of the hyperbolic sine of \u211d(n).\nNote\nThe value of Math.sinh(x) is the same as the value of (Math.exp(x) - Math.exp(-x)) / 2.\n\n\n\n21.3.2.32 Math.sqrt ( x )\nReturns the square root of x.\nWhen the Math.sqrt method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, n is -0\ud835\udd3d, or n is +\u221e\ud835\udd3d, return n.3. If n < -0\ud835\udd3d, return NaN.4. Return an implementation-approximated Number value representing the result of the square root of \u211d(n).\n\n\n21.3.2.33 Math.tan ( x )\nReturns the tangent of x. The argument is expressed in radians.\nWhen the Math.tan method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, or n is -0\ud835\udd3d, return n.3. If n is +\u221e\ud835\udd3d, or n is -\u221e\ud835\udd3d, return NaN.4. Return an implementation-approximated Number value representing the result of the tangent of \u211d(n).\n\n\n21.3.2.34 Math.tanh ( x )\nReturns the hyperbolic tangent of x.\nWhen the Math.tanh method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, or n is -0\ud835\udd3d, return n.3. If n is +\u221e\ud835\udd3d, return 1\ud835\udd3d.4. If n is -\u221e\ud835\udd3d, return -1\ud835\udd3d.5. Return an implementation-approximated Number value representing the result of the hyperbolic tangent of \u211d(n).\nNote\nThe value of Math.tanh(x) is the same as the value of (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x)).\n\n\n\n21.3.2.35 Math.trunc ( x )\nReturns the integral part of the number x, removing any fractional digits. If x is already integral, the result is x.\nWhen the Math.trunc method is called with argument x, the following steps are taken:\n1. Let n be ?\u00a0ToNumber(x).2. If n is NaN, n is +0\ud835\udd3d, n is -0\ud835\udd3d, n is +\u221e\ud835\udd3d, or n is -\u221e\ud835\udd3d, return n.3. If n < 1\ud835\udd3d and n > +0\ud835\udd3d, return +0\ud835\udd3d.4. If n < -0\ud835\udd3d and n > -1\ud835\udd3d, return -0\ud835\udd3d.5. Return the integral Number nearest n in the direction of +0\ud835\udd3d.\n\n\n\n\n21.4 Date Objects\n\n21.4.1 Overview of Date Objects and Definitions of Abstract Operations\nThe following abstract operations operate on time values (defined in 21.4.1.1). Note that, in every case, if any argument to one of these functions is NaN, the result will be NaN.\n\n21.4.1.1 Time Values and Time Range\nTime measurement in ECMAScript is analogous to time \nmeasurement in POSIX, in particular sharing definition in terms of the \nproleptic Gregorian calendar, an epoch of midnight at the beginning of 1\n January 1970 UTC, and an accounting of every day as comprising exactly \n86,400 seconds (each of which is 1000 milliseconds long).\nAn ECMAScript time value is a Number, either a finite integral Number representing an instant in time to millisecond precision or NaN representing no specific instant. A time value that is a multiple of 24 \u00d7 60 \u00d7 60 \u00d7 1000 = 86,400,000 (i.e., is equal to 86,400,000 \u00d7 d for some integer d) represents the instant at the start of the UTC day that follows the epoch by d whole UTC days (preceding the epoch for negative d). Every other finite time value t is defined relative to the greatest preceding time value s that is such a multiple, and represents the instant that occurs within the same UTC day as s but follows it by t \u2212 s milliseconds.\nTime values do not account for UTC leap seconds\u2014there are no \ntime values representing instants within positive leap seconds, and \nthere are time values representing instants removed from the UTC \ntimeline by negative leap seconds. However, the definition of time \nvalues nonetheless yields piecewise alignment with UTC, with \ndiscontinuities only at leap second boundaries and zero difference \noutside of leap seconds.\nA Number can exactly represent all integers from -9,007,199,254,740,992 to 9,007,199,254,740,992 (21.1.2.8 and 21.1.2.6).\n A time value supports a slightly smaller range of \n-8,640,000,000,000,000 to 8,640,000,000,000,000 milliseconds. This \nyields a supported time value range of exactly -100,000,000 days to \n100,000,000 days relative to midnight at the beginning of 1 January 1970\n UTC.\nThe exact moment of midnight at the beginning of 1 January 1970 UTC is represented by the time value +0\ud835\udd3d.\nNote\nThe 400 year cycle of the proleptic Gregorian calendar \ncontains 97 leap years. This yields an average of 365.2425 days per \nyear, which is 31,556,952,000 milliseconds. Therefore, the maximum range\n a Number could represent exactly with millisecond precision is \napproximately -285,426 to 285,426 years relative to 1970. The smaller \nrange supported by a time value as specified in this section is \napproximately -273,790 to 273,790 years relative to 1970.\n\n\n\n21.4.1.2 Day Number and Time within Day\nA given time value t belongs to day number\nDay(t) = \ud835\udd3d(floor(\u211d(t / msPerDay)))\nwhere the number of milliseconds per day is\nmsPerDay = 86400000\ud835\udd3d\nThe remainder is called the time within the day:\nTimeWithinDay(t) = \ud835\udd3d(\u211d(t) modulo \u211d(msPerDay))\n\n\n21.4.1.3 Year Number\nECMAScript uses a proleptic Gregorian calendar to map a day \nnumber to a year number and to determine the month and date within that \nyear. In this calendar, leap years are precisely those which are \n(divisible by 4) and ((not divisible by 100) or (divisible by 400)). The\n number of days in year number y is therefore defined by\n          DaysInYear(y)            = 365\ud835\udd3d if (\u211d(y) modulo 4) \u2260 0            = 366\ud835\udd3d if (\u211d(y) modulo 4) = 0 and (\u211d(y) modulo 100) \u2260 0            = 365\ud835\udd3d if (\u211d(y) modulo 100) = 0 and (\u211d(y) modulo 400) \u2260 0            = 366\ud835\udd3d if (\u211d(y) modulo 400) = 0\nAll non-leap years have 365 days with the usual number of \ndays per month and leap years have an extra day in February. The day \nnumber of the first day of year y is given by:\nDayFromYear(y) = \ud835\udd3d(365 \u00d7 (\u211d(y) - 1970) + floor((\u211d(y) - 1969) / 4) - floor((\u211d(y) - 1901) / 100) + floor((\u211d(y) - 1601) / 400))\nThe time value of the start of a year is:\nTimeFromYear(y) = msPerDay \u00d7 DayFromYear(y)\nA time value determines a year by:\nYearFromTime(t) = the largest integral Number y (closest to +\u221e) such that TimeFromYear(y) \u2264 t\nThe leap-year function is 1\ud835\udd3d for a time within a leap year and otherwise is +0\ud835\udd3d:\n          InLeapYear(t)            = +0\ud835\udd3d if DaysInYear(YearFromTime(t)) = 365\ud835\udd3d            = 1\ud835\udd3d if DaysInYear(YearFromTime(t)) = 366\ud835\udd3d\n\n\n21.4.1.4 Month Number\nMonths are identified by an integral Number in the range +0\ud835\udd3d to 11\ud835\udd3d, inclusive. The mapping MonthFromTime(t) from a time value t to a month number is defined by:\n          MonthFromTime(t)            = +0\ud835\udd3d if +0\ud835\udd3d \u2264 DayWithinYear(t) < 31\ud835\udd3d            = 1\ud835\udd3d if 31\ud835\udd3d \u2264 DayWithinYear(t) < 59\ud835\udd3d + InLeapYear(t)            = 2\ud835\udd3d if 59\ud835\udd3d + InLeapYear(t) \u2264 DayWithinYear(t) < 90\ud835\udd3d + InLeapYear(t)            = 3\ud835\udd3d if 90\ud835\udd3d + InLeapYear(t) \u2264 DayWithinYear(t) < 120\ud835\udd3d + InLeapYear(t)            = 4\ud835\udd3d if 120\ud835\udd3d + InLeapYear(t) \u2264 DayWithinYear(t) < 151\ud835\udd3d + InLeapYear(t)            = 5\ud835\udd3d if 151\ud835\udd3d + InLeapYear(t) \u2264 DayWithinYear(t) < 181\ud835\udd3d + InLeapYear(t)            = 6\ud835\udd3d if 181\ud835\udd3d + InLeapYear(t) \u2264 DayWithinYear(t) < 212\ud835\udd3d + InLeapYear(t)            = 7\ud835\udd3d if 212\ud835\udd3d + InLeapYear(t) \u2264 DayWithinYear(t) < 243\ud835\udd3d + InLeapYear(t)            = 8\ud835\udd3d if 243\ud835\udd3d + InLeapYear(t) \u2264 DayWithinYear(t) < 273\ud835\udd3d + InLeapYear(t)            = 9\ud835\udd3d if 273\ud835\udd3d + InLeapYear(t) \u2264 DayWithinYear(t) < 304\ud835\udd3d + InLeapYear(t)            = 10\ud835\udd3d if 304\ud835\udd3d + InLeapYear(t) \u2264 DayWithinYear(t) < 334\ud835\udd3d + InLeapYear(t)            = 11\ud835\udd3d if 334\ud835\udd3d + InLeapYear(t) \u2264 DayWithinYear(t) < 365\ud835\udd3d + InLeapYear(t)\nwhere\nDayWithinYear(t) = Day(t) - DayFromYear(YearFromTime(t))\nA month value of +0\ud835\udd3d specifies January; 1\ud835\udd3d specifies February; 2\ud835\udd3d specifies March; 3\ud835\udd3d specifies April; 4\ud835\udd3d specifies May; 5\ud835\udd3d specifies June; 6\ud835\udd3d specifies July; 7\ud835\udd3d specifies August; 8\ud835\udd3d specifies September; 9\ud835\udd3d specifies October; 10\ud835\udd3d specifies November; and 11\ud835\udd3d specifies December. Note that MonthFromTime(+0\ud835\udd3d) = +0\ud835\udd3d, corresponding to Thursday, 1 January 1970.\n\n\n21.4.1.5 Date Number\nA date number is identified by an integral Number in the range 1\ud835\udd3d through 31\ud835\udd3d, inclusive. The mapping DateFromTime(t) from a time value t to a date number is defined by:\n          DateFromTime(t)            = DayWithinYear(t) + 1\ud835\udd3d if MonthFromTime(t) = +0\ud835\udd3d            = DayWithinYear(t) - 30\ud835\udd3d if MonthFromTime(t) = 1\ud835\udd3d            = DayWithinYear(t) - 58\ud835\udd3d - InLeapYear(t) if MonthFromTime(t) = 2\ud835\udd3d            = DayWithinYear(t) - 89\ud835\udd3d - InLeapYear(t) if MonthFromTime(t) = 3\ud835\udd3d            = DayWithinYear(t) - 119\ud835\udd3d - InLeapYear(t) if MonthFromTime(t) = 4\ud835\udd3d            = DayWithinYear(t) - 150\ud835\udd3d - InLeapYear(t) if MonthFromTime(t) = 5\ud835\udd3d            = DayWithinYear(t) - 180\ud835\udd3d - InLeapYear(t) if MonthFromTime(t) = 6\ud835\udd3d            = DayWithinYear(t) - 211\ud835\udd3d - InLeapYear(t) if MonthFromTime(t) = 7\ud835\udd3d            = DayWithinYear(t) - 242\ud835\udd3d - InLeapYear(t) if MonthFromTime(t) = 8\ud835\udd3d            = DayWithinYear(t) - 272\ud835\udd3d - InLeapYear(t) if MonthFromTime(t) = 9\ud835\udd3d            = DayWithinYear(t) - 303\ud835\udd3d - InLeapYear(t) if MonthFromTime(t) = 10\ud835\udd3d            = DayWithinYear(t) - 333\ud835\udd3d - InLeapYear(t) if MonthFromTime(t) = 11\ud835\udd3d\n\n\n21.4.1.6 Week Day\nThe weekday for a particular time value t is defined as\nWeekDay(t) = \ud835\udd3d(\u211d(Day(t) + 4\ud835\udd3d) modulo 7)\nA weekday value of +0\ud835\udd3d specifies Sunday; 1\ud835\udd3d specifies Monday; 2\ud835\udd3d specifies Tuesday; 3\ud835\udd3d specifies Wednesday; 4\ud835\udd3d specifies Thursday; 5\ud835\udd3d specifies Friday; and 6\ud835\udd3d specifies Saturday. Note that WeekDay(+0\ud835\udd3d) = 4\ud835\udd3d, corresponding to Thursday, 1 January 1970.\n\n\n21.4.1.7 LocalTZA ( t, isUTC )\nThe implementation-defined abstract operation LocalTZA takes arguments t (a Number) and isUTC (a Boolean) and returns an integral Number.\n Its return value represents the local time zone adjustment, or offset, \nin milliseconds. The local political rules for standard time and \ndaylight saving time in effect at t should be used to determine the result in the way specified in this section.\nWhen isUTC is true, LocalTZA( tUTC, true ) should return the offset of the local time zone from UTC measured in milliseconds at time represented by time value tUTC. When the result is added to tUTC, it should yield the corresponding Number tlocal.\nWhen isUTC is false, LocalTZA( tlocal, false ) should return the offset of the local time zone from UTC measured in milliseconds at local time represented by Number tlocal. When the result is subtracted from tlocal, it should yield the corresponding time value tUTC.\nInput t is nominally a time value but may be any Number value. This can occur when isUTC is false and tlocal represents a time value that is already offset outside of the time value range at the range boundaries. The algorithm must not limit tlocal to the time value range, so that such inputs are supported.\nWhen tlocal\n represents local time repeating multiple times at a negative time zone \ntransition (e.g. when the daylight saving time ends or the time zone \noffset is decreased due to a time zone rule change) or skipped local \ntime at a positive time zone transitions (e.g. when the daylight saving \ntime starts or the time zone offset is increased due to a time zone rule\n change), tlocal must be interpreted using the time zone offset before the transition.\nIf an implementation does not support a conversion described above or if political rules for time t are not available within the implementation, the result must be +0\ud835\udd3d.\nNote\nIt is recommended that implementations use the time zone information of the IANA Time Zone Database https://www.iana.org/time-zones/.\n1:30 AM on 5 November 2017 in America/New_York is repeated \ntwice (fall backward), but it must be interpreted as 1:30 AM UTC-04 \ninstead of 1:30 AM UTC-05. LocalTZA(TimeClip(MakeDate(MakeDay(2017, 10, 5), MakeTime(1, 30, 0, 0))), false) is -4 \u00d7 msPerHour.\n2:30 AM on 12 March 2017 in America/New_York does not \nexist, but it must be interpreted as 2:30 AM UTC-05 (equivalent to 3:30 \nAM UTC-04). LocalTZA(TimeClip(MakeDate(MakeDay(2017, 2, 12), MakeTime(2, 30, 0, 0))), false) is -5 \u00d7 msPerHour.\nLocal time zone offset values may be positive or negative.\n\n\n\n21.4.1.8 LocalTime ( t )\nThe abstract operation LocalTime takes argument t (a time value) and returns a Number. It converts t from UTC to local time. It performs the following steps when called:\n1. Return t + LocalTZA(t, true).\nNote\nTwo different input time values tUTC are converted to the same local time tlocal\n at a negative time zone transition when there are repeated times (e.g. \nthe daylight saving time ends or the time zone adjustment is \ndecreased.).\nLocalTime(UTC(tlocal)) is not necessarily always equal to tlocal. Correspondingly, UTC(LocalTime(tUTC)) is not necessarily always equal to tUTC.\n\n\n\n21.4.1.9 UTC ( t )\nThe abstract operation UTC takes argument t (a Number) and returns a time value. It converts t from local time to a UTC time value. It performs the following steps when called:\n1. Return t - LocalTZA(t, false).\nNote\nUTC(LocalTime(tUTC)) is not necessarily always equal to tUTC. Correspondingly, LocalTime(UTC(tlocal)) is not necessarily always equal to tlocal.\n\n\n\n21.4.1.10 Hours, Minutes, Second, and Milliseconds\nThe following abstract operations are useful in decomposing time values:\nHourFromTime(t) = \ud835\udd3d(floor(\u211d(t / msPerHour)) modulo HoursPerDay)\nMinFromTime(t) = \ud835\udd3d(floor(\u211d(t / msPerMinute)) modulo MinutesPerHour)\nSecFromTime(t) = \ud835\udd3d(floor(\u211d(t / msPerSecond)) modulo SecondsPerMinute)\nmsFromTime(t) = \ud835\udd3d(\u211d(t) modulo \u211d(msPerSecond))\nwhere\nHoursPerDay = 24\nMinutesPerHour = 60\nSecondsPerMinute = 60\nmsPerSecond = 1000\ud835\udd3d\nmsPerMinute = 60000\ud835\udd3d = msPerSecond \u00d7 \ud835\udd3d(SecondsPerMinute)\nmsPerHour = 3600000\ud835\udd3d = msPerMinute \u00d7 \ud835\udd3d(MinutesPerHour)\n\n\n21.4.1.11 MakeTime ( hour, min, sec, ms )\nThe abstract operation MakeTime takes arguments hour (a Number), min (a Number), sec (a Number), and ms (a Number) and returns a Number. It calculates a number of milliseconds. It performs the following steps when called:\n1. If hour is not finite or min is not finite or sec is not finite or ms is not finite, return NaN.2. Let h be \ud835\udd3d(! ToIntegerOrInfinity(hour)).3. Let m be \ud835\udd3d(! ToIntegerOrInfinity(min)).4. Let s be \ud835\udd3d(! ToIntegerOrInfinity(sec)).5. Let milli be \ud835\udd3d(! ToIntegerOrInfinity(ms)).6. Let t be ((h * msPerHour + m * msPerMinute) + s * msPerSecond) + milli, performing the arithmetic according to IEEE 754-2019 rules (that is, as if using the ECMAScript operators * and +).7. Return t.\n\n\n21.4.1.12 MakeDay ( year, month, date )\nThe abstract operation MakeDay takes arguments year (a Number), month (a Number), and date (a Number) and returns a Number. It calculates a number of days. It performs the following steps when called:\n1. If year is not finite or month is not finite or date is not finite, return NaN.2. Let y be \ud835\udd3d(! ToIntegerOrInfinity(year)).3. Let m be \ud835\udd3d(! ToIntegerOrInfinity(month)).4. Let dt be \ud835\udd3d(! ToIntegerOrInfinity(date)).5. Let ym be y + \ud835\udd3d(floor(\u211d(m) / 12)).6. If ym is not finite, return NaN.7. Let mn be \ud835\udd3d(\u211d(m) modulo 12).8. Find a finite time value t such that YearFromTime(t) is ym and MonthFromTime(t) is mn and DateFromTime(t) is 1\ud835\udd3d; but if this is not possible (because some argument is out of range), return NaN.9. Return Day(t) + dt - 1\ud835\udd3d.\n\n\n21.4.1.13 MakeDate ( day, time )\nThe abstract operation MakeDate takes arguments day (a Number) and time (a Number) and returns a Number. It calculates a number of milliseconds. It performs the following steps when called:\n1. If day is not finite or time is not finite, return NaN.2. Let tv be day \u00d7 msPerDay + time.3. If tv is not finite, return NaN.4. Return tv.\n\n\n21.4.1.14 TimeClip ( time )\nThe abstract operation TimeClip takes argument time (a Number) and returns a Number. It calculates a number of milliseconds. It performs the following steps when called:\n1. If time is not finite, return NaN.2. If abs(\u211d(time)) > 8.64 \u00d7 1015, return NaN.3. Return \ud835\udd3d(! ToIntegerOrInfinity(time)).\n\n\n21.4.1.15 Date Time String Format\nECMAScript defines a string interchange format for date-times\n based upon a simplification of the ISO 8601 calendar date extended \nformat. The format is as follows: YYYY-MM-DDTHH:mm:ss.sssZ\nWhere the elements are as follows:\n\n\n\n\nYYYY\n\n\n                is the year in the proleptic Gregorian calendar as four decimal digits from 0000 to 9999, or as an expanded year of \"+\" or \"-\" followed by six decimal digits.\n              \n\n\n\n-\n\n\n\"-\" (hyphen) appears literally twice in the string.\n              \n\n\n\nMM\n\n\n                is the month of the year as two decimal digits from 01 (January) to 12 (December).\n              \n\n\n\nDD\n\n\n                is the day of the month as two decimal digits from 01 to 31.\n              \n\n\n\nT\n\n\n\"T\" appears literally in the string, to indicate the beginning of the time element.\n              \n\n\n\nHH\n\n\n                is the number of complete hours that have passed since midnight as two decimal digits from 00 to 24.\n              \n\n\n\n:\n\n\n\":\" (colon) appears literally twice in the string.\n              \n\n\n\nmm\n\n\n                is the number of complete minutes since the start of the hour as two decimal digits from 00 to 59.\n              \n\n\n\nss\n\n\n                is the number of complete seconds since the start of the minute as two decimal digits from 00 to 59.\n              \n\n\n\n.\n\n\n\".\" (dot) appears literally in the string.\n              \n\n\n\nsss\n\n\n                is the number of complete milliseconds since the start of the second as three decimal digits.\n              \n\n\n\nZ\n\n\n                is the UTC offset representation specified as \"Z\" (for UTC with no offset) or an offset of either \"+\" or \"-\" followed by a time expression HH:mm (indicating local time ahead of or behind UTC, respectively)\n              \n\n\n\nThis format includes date-only forms:\nYYYY\nYYYY-MM\nYYYY-MM-DD\n        \nIt also includes \u201cdate-time\u201d forms that consist of one of the\n above date-only forms immediately followed by one of the following time\n forms with an optional UTC offset representation appended:\nTHH:mm\nTHH:mm:ss\nTHH:mm:ss.sss\n        \nA string containing out-of-bounds or nonconforming elements is not a valid instance of this format.\nNote 1\nAs every day both starts and ends with midnight, the two notations 00:00 and 24:00\n are available to distinguish the two midnights that can be associated \nwith one date. This means that the following two notations refer to \nexactly the same point in time: 1995-02-04T24:00 and 1995-02-05T00:00.\n This interpretation of the latter form as \"end of a calendar day\" is \nconsistent with ISO 8601, even though that specification reserves it for\n describing time intervals and does not permit it within representations\n of single points in time.\n\nNote 2\nThere exists no international standard that specifies \nabbreviations for civil time zones like CET, EST, etc. and sometimes the\n same abbreviation is even used for two very different time zones. For \nthis reason, both ISO 8601 and this format specify numeric \nrepresentations of time zone offsets.\n\n\n21.4.1.15.1 Expanded Years\nCovering the full time value range of approximately 273,790 years forward or backward from 1 January 1970 (21.4.1.1)\n requires representing years before 0 or after 9999. ISO 8601 permits \nexpansion of the year representation, but only by mutual agreement of \nthe partners in information interchange. In the simplified ECMAScript \nformat, such an expanded year representation shall have 6 digits and is \nalways prefixed with a + or - sign. The year 0 is considered positive \nand hence prefixed with a + sign. Strings matching the Date Time String Format with expanded years representing instants in time outside the range of a time value are treated as unrecognizable by Date.parse and cause that function to return NaN without falling back to implementation-specific behaviour or heuristics.\nNote\nExamples of date-time values with expanded years:\n\n\n\n-271821-04-20T00:00:00Z\n271822 B.C.\n\n\n-000001-01-01T00:00:00Z\n2 B.C.\n\n\n+000000-01-01T00:00:00Z\n1 B.C.\n\n\n+000001-01-01T00:00:00Z\n1 A.D.\n\n\n+001970-01-01T00:00:00Z\n1970 A.D.\n\n\n+002009-12-15T00:00:00Z\n2009 A.D.\n\n\n+275760-09-13T00:00:00Z\n275760 A.D.\n\n\n\n\n\n\n\n\n21.4.2 The Date Constructor\nThe Date constructor:\n\nis %Date%.\nis the initial value of the \"Date\" property of the global object.\ncreates and initializes a new Date when called as a constructor.\nreturns a String representing the current time (UTC) when called as a function rather than as a constructor.\nis a function whose behaviour differs based upon the number and types of its arguments.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified Date behaviour must include a super call to the Date constructor to create and initialize the subclass instance with a [[DateValue]] internal slot.\nhas a \"length\" property whose value is 7\ud835\udd3d.\n\n\n21.4.2.1 Date ( ...values )\nWhen the Date function is called, the following steps are taken:\n1. If NewTarget is undefined, thena. Let now be the time value (UTC) identifying the current time.b. Return ToDateString(now).2. Let numberOfArgs be the number of elements in values.3. If numberOfArgs = 0, thena. Let dv be the time value (UTC) identifying the current time.4. Else if numberOfArgs = 1, thena. Let value be values[0].b. If Type(value) is Object and value has a [[DateValue]] internal slot, theni. Let tv be !\u00a0thisTimeValue(value).c. Else,i. Let v be ?\u00a0ToPrimitive(value).ii. If Type(v) is String, then1. Assert: The next step never returns an abrupt completion because Type(v) is String.2. Let tv be the result of parsing v as a date, in exactly the same manner as for the parse method (21.4.3.2).iii. Else,1. Let tv be ?\u00a0ToNumber(v).d. Let dv be TimeClip(tv).5. Else,a. Assert: numberOfArgs \u2265 2.b. Let y be ?\u00a0ToNumber(values[0]).c. Let m be ?\u00a0ToNumber(values[1]).d. If numberOfArgs > 2, let dt be ?\u00a0ToNumber(values[2]); else let dt be 1\ud835\udd3d.e. If numberOfArgs > 3, let h be ?\u00a0ToNumber(values[3]); else let h be +0\ud835\udd3d.f. If numberOfArgs > 4, let min be ?\u00a0ToNumber(values[4]); else let min be +0\ud835\udd3d.g. If numberOfArgs > 5, let s be ?\u00a0ToNumber(values[5]); else let s be +0\ud835\udd3d.h. If numberOfArgs > 6, let milli be ?\u00a0ToNumber(values[6]); else let milli be +0\ud835\udd3d.i. If y is NaN, let yr be NaN.j. Else,i. Let yi be !\u00a0ToIntegerOrInfinity(y).ii. If 0 \u2264 yi \u2264 99, let yr be 1900\ud835\udd3d + \ud835\udd3d(yi); otherwise, let yr be y.k. Let finalDate be MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)).l. Let dv be TimeClip(UTC(finalDate)).6. Let O be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%Date.prototype%\", \u00ab [[DateValue]] \u00bb).7. Set O.[[DateValue]] to dv.8. Return O.\n\n\n\n21.4.3 Properties of the Date Constructor\nThe Date constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n21.4.3.1 Date.now ( )\nThe now function returns the time value designating the UTC date and time of the occurrence of the call to now.\n\n\n21.4.3.2 Date.parse ( string )\nThe parse function applies the ToString operator to its argument. If ToString results in an abrupt completion the Completion Record is immediately returned. Otherwise, parse interprets the resulting String as a date and time; it returns a Number, the UTC time value\n corresponding to the date and time. The String may be interpreted as a \nlocal time, a UTC time, or a time in some other time zone, depending on \nthe contents of the String. The function first attempts to parse the \nString according to the format described in Date Time String Format (21.4.1.15),\n including expanded years. If the String does not conform to that format\n the function may fall back to any implementation-specific heuristics or\n implementation-specific date formats. Strings that are unrecognizable \nor contain out-of-bounds format element values shall cause Date.parse to return NaN.\nIf the String conforms to the Date Time String Format, substitute values take the place of absent format elements. When the MM or DD elements are absent, \"01\" is used. When the HH, mm, or ss elements are absent, \"00\" is used. When the sss element is absent, \"000\"\n is used. When the UTC offset representation is absent, date-only forms \nare interpreted as a UTC time and date-time forms are interpreted as a \nlocal time.\nIf x is any Date whose milliseconds amount is \nzero within a particular implementation of ECMAScript, then all of the \nfollowing expressions should produce the same numeric value in that \nimplementation, if all the properties referenced have their initial \nvalues:\nx.valueOf()\nDate.parse(x.toString())\nDate.parse(x.toUTCString())\nDate.parse(x.toISOString())\nHowever, the expression\nDate.parse(x.toLocaleString())\nis not required to produce the same Number value as the preceding three expressions and, in general, the value produced by Date.parse is implementation-defined when given any String value that does not conform to the Date Time String Format (21.4.1.15) and that could not be produced in that implementation by the toString or toUTCString method.\n\n\n21.4.3.3 Date.prototype\nThe initial value of Date.prototype is the Date prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n21.4.3.4 Date.UTC ( year [ , month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] ] )\nWhen the UTC function is called, the following steps are taken:\n1. Let y be ?\u00a0ToNumber(year).2. If month is present, let m be ?\u00a0ToNumber(month); else let m be +0\ud835\udd3d.3. If date is present, let dt be ?\u00a0ToNumber(date); else let dt be 1\ud835\udd3d.4. If hours is present, let h be ?\u00a0ToNumber(hours); else let h be +0\ud835\udd3d.5. If minutes is present, let min be ?\u00a0ToNumber(minutes); else let min be +0\ud835\udd3d.6. If seconds is present, let s be ?\u00a0ToNumber(seconds); else let s be +0\ud835\udd3d.7. If ms is present, let milli be ?\u00a0ToNumber(ms); else let milli be +0\ud835\udd3d.8. If y is NaN, let yr be NaN.9. Else,a. Let yi be !\u00a0ToIntegerOrInfinity(y).b. If 0 \u2264 yi \u2264 99, let yr be 1900\ud835\udd3d + \ud835\udd3d(yi); otherwise, let yr be y.10. Return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))).\nThe \"length\" property of the UTC function is 7\ud835\udd3d.\nNote\nThe UTC function differs from the Date constructor in two ways: it returns a time value as a Number, rather than creating a Date, and it interprets the arguments in UTC rather than as local time.\n\n\n\n\n21.4.4 Properties of the Date Prototype Object\nThe Date prototype object:\n\nis %Date.prototype%.\nis itself an ordinary object.\nis not a Date instance and does not have a [[DateValue]] internal slot.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\n\nUnless explicitly defined otherwise, the methods of the Date prototype object defined below are not generic and the this value passed to them must be an object that has a [[DateValue]] internal slot that has been initialized to a time value.\nThe abstract operation thisTimeValue takes argument value. It performs the following steps when called:\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, thena. Return value.[[DateValue]].2. Throw a TypeError exception.\nIn following descriptions of functions that are properties of the Date prototype object, the phrase \u201cthis Date object\u201d refers to the object that is the this value for the invocation of the function. If the Type of the this value is not Object, a TypeError exception is thrown. The phrase \u201cthis time value\u201d within the specification of a method refers to the result returned by calling the abstract operation thisTimeValue with the this value of the method invocation passed as the argument.\n\n21.4.4.1 Date.prototype.constructor\nThe initial value of Date.prototype.constructor is %Date%.\n\n\n21.4.4.2 Date.prototype.getDate ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return DateFromTime(LocalTime(t)).\n\n\n21.4.4.3 Date.prototype.getDay ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return WeekDay(LocalTime(t)).\n\n\n21.4.4.4 Date.prototype.getFullYear ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return YearFromTime(LocalTime(t)).\n\n\n21.4.4.5 Date.prototype.getHours ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return HourFromTime(LocalTime(t)).\n\n\n21.4.4.6 Date.prototype.getMilliseconds ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return msFromTime(LocalTime(t)).\n\n\n21.4.4.7 Date.prototype.getMinutes ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return MinFromTime(LocalTime(t)).\n\n\n21.4.4.8 Date.prototype.getMonth ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return MonthFromTime(LocalTime(t)).\n\n\n21.4.4.9 Date.prototype.getSeconds ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return SecFromTime(LocalTime(t)).\n\n\n21.4.4.10 Date.prototype.getTime ( )\nThe following steps are performed:\n1. Return ?\u00a0thisTimeValue(this value).\n\n\n21.4.4.11 Date.prototype.getTimezoneOffset ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return (t - LocalTime(t)) / msPerMinute.\n\n\n21.4.4.12 Date.prototype.getUTCDate ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return DateFromTime(t).\n\n\n21.4.4.13 Date.prototype.getUTCDay ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return WeekDay(t).\n\n\n21.4.4.14 Date.prototype.getUTCFullYear ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return YearFromTime(t).\n\n\n21.4.4.15 Date.prototype.getUTCHours ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return HourFromTime(t).\n\n\n21.4.4.16 Date.prototype.getUTCMilliseconds ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return msFromTime(t).\n\n\n21.4.4.17 Date.prototype.getUTCMinutes ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return MinFromTime(t).\n\n\n21.4.4.18 Date.prototype.getUTCMonth ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return MonthFromTime(t).\n\n\n21.4.4.19 Date.prototype.getUTCSeconds ( )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return SecFromTime(t).\n\n\n21.4.4.20 Date.prototype.setDate ( date )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let dt be ?\u00a0ToNumber(date).3. If t is NaN, return NaN.4. Set t to LocalTime(t).5. Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)).6. Let u be TimeClip(UTC(newDate)).7. Set the [[DateValue]] internal slot of this Date object to u.8. Return u.\n\n\n21.4.4.21 Date.prototype.setFullYear ( year [ , month [ , date ] ] )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let y be ?\u00a0ToNumber(year).3. If t is NaN, set t to +0\ud835\udd3d; otherwise, set t to LocalTime(t).4. If month is not present, let m be MonthFromTime(t); otherwise, let m be ?\u00a0ToNumber(month).5. If date is not present, let dt be DateFromTime(t); otherwise, let dt be ?\u00a0ToNumber(date).6. Let newDate be MakeDate(MakeDay(y, m, dt), TimeWithinDay(t)).7. Let u be TimeClip(UTC(newDate)).8. Set the [[DateValue]] internal slot of this Date object to u.9. Return u.\nThe \"length\" property of the setFullYear method is 3\ud835\udd3d.\nNote\nIf month is not present, this method behaves as if month was present with the value getMonth(). If date is not present, it behaves as if date was present with the value getDate().\n\n\n\n21.4.4.22 Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let h be ?\u00a0ToNumber(hour).3. If min is present, let m be ?\u00a0ToNumber(min).4. If sec is present, let s be ?\u00a0ToNumber(sec).5. If ms is present, let milli be ?\u00a0ToNumber(ms).6. If t is NaN, return NaN.7. Set t to LocalTime(t).8. If min is not present, let m be MinFromTime(t).9. If sec is not present, let s be SecFromTime(t).10. If ms is not present, let milli be msFromTime(t).11. Let date be MakeDate(Day(t), MakeTime(h, m, s, milli)).12. Let u be TimeClip(UTC(date)).13. Set the [[DateValue]] internal slot of this Date object to u.14. Return u.\nThe \"length\" property of the setHours method is 4\ud835\udd3d.\nNote\nIf min is not present, this method behaves as if min was present with the value getMinutes(). If sec is not present, it behaves as if sec was present with the value getSeconds(). If ms is not present, it behaves as if ms was present with the value getMilliseconds().\n\n\n\n21.4.4.23 Date.prototype.setMilliseconds ( ms )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Set ms to ?\u00a0ToNumber(ms).3. If t is NaN, return NaN.4. Set t to LocalTime(t).5. Let time be MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), ms).6. Let u be TimeClip(UTC(MakeDate(Day(t), time))).7. Set the [[DateValue]] internal slot of this Date object to u.8. Return u.\n\n\n21.4.4.24 Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let m be ?\u00a0ToNumber(min).3. If sec is present, let s be ?\u00a0ToNumber(sec).4. If ms is present, let milli be ?\u00a0ToNumber(ms).5. If t is NaN, return NaN.6. Set t to LocalTime(t).7. If sec is not present, let s be SecFromTime(t).8. If ms is not present, let milli be msFromTime(t).9. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).10. Let u be TimeClip(UTC(date)).11. Set the [[DateValue]] internal slot of this Date object to u.12. Return u.\nThe \"length\" property of the setMinutes method is 3\ud835\udd3d.\nNote\nIf sec is not present, this method behaves as if sec was present with the value getSeconds(). If ms is not present, this behaves as if ms was present with the value getMilliseconds().\n\n\n\n21.4.4.25 Date.prototype.setMonth ( month [ , date ] )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let m be ?\u00a0ToNumber(month).3. If date is present, let dt be ?\u00a0ToNumber(date).4. If t is NaN, return NaN.5. Set t to LocalTime(t).6. If date is not present, let dt be DateFromTime(t).7. Let newDate be MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t)).8. Let u be TimeClip(UTC(newDate)).9. Set the [[DateValue]] internal slot of this Date object to u.10. Return u.\nThe \"length\" property of the setMonth method is 2\ud835\udd3d.\nNote\nIf date is not present, this method behaves as if date was present with the value getDate().\n\n\n\n21.4.4.26 Date.prototype.setSeconds ( sec [ , ms ] )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let s be ?\u00a0ToNumber(sec).3. If ms is present, let milli be ?\u00a0ToNumber(ms).4. If t is NaN, return NaN.5. Set t to LocalTime(t).6. If ms is not present, let milli be msFromTime(t).7. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli)).8. Let u be TimeClip(UTC(date)).9. Set the [[DateValue]] internal slot of this Date object to u.10. Return u.\nThe \"length\" property of the setSeconds method is 2\ud835\udd3d.\nNote\nIf ms is not present, this method behaves as if ms was present with the value getMilliseconds().\n\n\n\n21.4.4.27 Date.prototype.setTime ( time )\nThe following steps are performed:\n1. Perform ?\u00a0thisTimeValue(this value).2. Let t be ?\u00a0ToNumber(time).3. Let v be TimeClip(t).4. Set the [[DateValue]] internal slot of this Date object to v.5. Return v.\n\n\n21.4.4.28 Date.prototype.setUTCDate ( date )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let dt be ?\u00a0ToNumber(date).3. If t is NaN, return NaN.4. Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)).5. Let v be TimeClip(newDate).6. Set the [[DateValue]] internal slot of this Date object to v.7. Return v.\n\n\n21.4.4.29 Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, set t to +0\ud835\udd3d.3. Let y be ?\u00a0ToNumber(year).4. If month is not present, let m be MonthFromTime(t); otherwise, let m be ?\u00a0ToNumber(month).5. If date is not present, let dt be DateFromTime(t); otherwise, let dt be ?\u00a0ToNumber(date).6. Let newDate be MakeDate(MakeDay(y, m, dt), TimeWithinDay(t)).7. Let v be TimeClip(newDate).8. Set the [[DateValue]] internal slot of this Date object to v.9. Return v.\nThe \"length\" property of the setUTCFullYear method is 3\ud835\udd3d.\nNote\nIf month is not present, this method behaves as if month was present with the value getUTCMonth(). If date is not present, it behaves as if date was present with the value getUTCDate().\n\n\n\n21.4.4.30 Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let h be ?\u00a0ToNumber(hour).3. If min is present, let m be ?\u00a0ToNumber(min).4. If sec is present, let s be ?\u00a0ToNumber(sec).5. If ms is present, let milli be ?\u00a0ToNumber(ms).6. If t is NaN, return NaN.7. If min is not present, let m be MinFromTime(t).8. If sec is not present, let s be SecFromTime(t).9. If ms is not present, let milli be msFromTime(t).10. Let date be MakeDate(Day(t), MakeTime(h, m, s, milli)).11. Let v be TimeClip(date).12. Set the [[DateValue]] internal slot of this Date object to v.13. Return v.\nThe \"length\" property of the setUTCHours method is 4\ud835\udd3d.\nNote\nIf min is not present, this method behaves as if min was present with the value getUTCMinutes(). If sec is not present, it behaves as if sec was present with the value getUTCSeconds(). If ms is not present, it behaves as if ms was present with the value getUTCMilliseconds().\n\n\n\n21.4.4.31 Date.prototype.setUTCMilliseconds ( ms )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Set ms to ?\u00a0ToNumber(ms).3. If t is NaN, return NaN.4. Let time be MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), ms).5. Let v be TimeClip(MakeDate(Day(t), time)).6. Set the [[DateValue]] internal slot of this Date object to v.7. Return v.\n\n\n21.4.4.32 Date.prototype.setUTCMinutes ( min [ , sec [ , ms ] ] )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let m be ?\u00a0ToNumber(min).3. If sec is present, let s be ?\u00a0ToNumber(sec).4. If ms is present, let milli be ?\u00a0ToNumber(ms).5. If t is NaN, return NaN.6. If sec is not present, let s be SecFromTime(t).7. If ms is not present, let milli be msFromTime(t).8. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).9. Let v be TimeClip(date).10. Set the [[DateValue]] internal slot of this Date object to v.11. Return v.\nThe \"length\" property of the setUTCMinutes method is 3\ud835\udd3d.\nNote\nIf sec is not present, this method behaves as if sec was present with the value getUTCSeconds(). If ms is not present, it function behaves as if ms was present with the value return by getUTCMilliseconds().\n\n\n\n21.4.4.33 Date.prototype.setUTCMonth ( month [ , date ] )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let m be ?\u00a0ToNumber(month).3. If date is present, let dt be ?\u00a0ToNumber(date).4. If t is NaN, return NaN.5. If date is not present, let dt be DateFromTime(t).6. Let newDate be MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t)).7. Let v be TimeClip(newDate).8. Set the [[DateValue]] internal slot of this Date object to v.9. Return v.\nThe \"length\" property of the setUTCMonth method is 2\ud835\udd3d.\nNote\nIf date is not present, this method behaves as if date was present with the value getUTCDate().\n\n\n\n21.4.4.34 Date.prototype.setUTCSeconds ( sec [ , ms ] )\nThe following steps are performed:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let s be ?\u00a0ToNumber(sec).3. If ms is present, let milli be ?\u00a0ToNumber(ms).4. If t is NaN, return NaN.5. If ms is not present, let milli be msFromTime(t).6. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli)).7. Let v be TimeClip(date).8. Set the [[DateValue]] internal slot of this Date object to v.9. Return v.\nThe \"length\" property of the setUTCSeconds method is 2\ud835\udd3d.\nNote\nIf ms is not present, this method behaves as if ms was present with the value getUTCMilliseconds().\n\n\n\n21.4.4.35 Date.prototype.toDateString ( )\nThe following steps are performed:\n1. Let O be this Date object.2. Let tv be ?\u00a0thisTimeValue(O).3. If tv is NaN, return \"Invalid Date\".4. Let t be LocalTime(tv).5. Return DateString(t).\n\n\n21.4.4.36 Date.prototype.toISOString ( )\nIf this time value is not a finite Number or if it corresponds with a year that cannot be represented in the Date Time String Format, this function throws a RangeError exception. Otherwise, it returns a String representation of this time value in that format on the UTC time scale, including all format elements and the UTC offset representation \"Z\".\n\n\n21.4.4.37 Date.prototype.toJSON ( key )\nThis function provides a String representation of a Date for use by JSON.stringify (25.5.2).\nWhen the toJSON method is called with argument key, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let tv be ?\u00a0ToPrimitive(O, number).3. If Type(tv) is Number and tv is not finite, return null.4. Return ?\u00a0Invoke(O, \"toISOString\").\nNote 1\nThe argument is ignored.\n\nNote 2\nThe toJSON function is intentionally generic; it does not require that its this\n value be a Date. Therefore, it can be transferred to other kinds of \nobjects for use as a method. However, it does require that any such \nobject have a toISOString method.\n\n\n\n21.4.4.38 Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )\nAn ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the Date.prototype.toLocaleDateString\n method as specified in the ECMA-402 specification. If an ECMAScript \nimplementation does not include the ECMA-402 API the following \nspecification of the toLocaleDateString method is used.\nThis function returns a String value. The contents of the String are implementation-defined,\n but are intended to represent the \u201cdate\u201d portion of the Date in the \ncurrent time zone in a convenient, human-readable form that corresponds \nto the conventions of the host environment's current locale.\nThe meaning of the optional parameters to this method are \ndefined in the ECMA-402 specification; implementations that do not \ninclude ECMA-402 support must not use those parameter positions for \nanything else.\n\n\n21.4.4.39 Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\nAn ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the Date.prototype.toLocaleString\n method as specified in the ECMA-402 specification. If an ECMAScript \nimplementation does not include the ECMA-402 API the following \nspecification of the toLocaleString method is used.\nThis function returns a String value. The contents of the String are implementation-defined,\n but are intended to represent the Date in the current time zone in a \nconvenient, human-readable form that corresponds to the conventions of \nthe host environment's current locale.\nThe meaning of the optional parameters to this method are \ndefined in the ECMA-402 specification; implementations that do not \ninclude ECMA-402 support must not use those parameter positions for \nanything else.\n\n\n21.4.4.40 Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )\nAn ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the Date.prototype.toLocaleTimeString\n method as specified in the ECMA-402 specification. If an ECMAScript \nimplementation does not include the ECMA-402 API the following \nspecification of the toLocaleTimeString method is used.\nThis function returns a String value. The contents of the String are implementation-defined,\n but are intended to represent the \u201ctime\u201d portion of the Date in the \ncurrent time zone in a convenient, human-readable form that corresponds \nto the conventions of the host environment's current locale.\nThe meaning of the optional parameters to this method are \ndefined in the ECMA-402 specification; implementations that do not \ninclude ECMA-402 support must not use those parameter positions for \nanything else.\n\n\n21.4.4.41 Date.prototype.toString ( )\nThe following steps are performed:\n1. Let tv be ?\u00a0thisTimeValue(this value).2. Return ToDateString(tv).\nNote 1\nFor any Date d such that d.[[DateValue]] is evenly divisible by 1000, the result of Date.parse(d.toString()) = d.valueOf(). See 21.4.3.2.\n\nNote 2\nThe toString function is not generic; it throws a TypeError exception if its this value is not a Date. Therefore, it cannot be transferred to other kinds of objects for use as a method.\n\n\n21.4.4.41.1 TimeString ( tv )\nThe abstract operation TimeString takes argument tv (a Number, but not NaN) and returns a String. It performs the following steps when called:\n1. Let hour be ToZeroPaddedDecimalString(\u211d(HourFromTime(tv)), 2).2. Let minute be ToZeroPaddedDecimalString(\u211d(MinFromTime(tv)), 2).3. Let second be ToZeroPaddedDecimalString(\u211d(SecFromTime(tv)), 2).4. Return the string-concatenation of hour, \":\", minute, \":\", second, the code unit 0x0020 (SPACE), and \"GMT\".\n\n\n21.4.4.41.2 DateString ( tv )\nThe abstract operation DateString takes argument tv (a Number, but not NaN) and returns a String. It performs the following steps when called:\n1. Let weekday be the Name of the entry in Table 63 with the Number WeekDay(tv).2. Let month be the Name of the entry in Table 64 with the Number MonthFromTime(tv).3. Let day be ToZeroPaddedDecimalString(\u211d(DateFromTime(tv)), 2).4. Let yv be YearFromTime(tv).5. If yv is +0\ud835\udd3d or yv > +0\ud835\udd3d, let yearSign be the empty String; otherwise, let yearSign be \"-\".6. Let paddedYear be ToZeroPaddedDecimalString(abs(\u211d(yv)), 4).7. Return the string-concatenation of weekday, the code unit 0x0020 (SPACE), month, the code unit 0x0020 (SPACE), day, the code unit 0x0020 (SPACE), yearSign, and paddedYear.\nTable 63: Names of days of the week\n\n\n\n                  Number\n                \n\n                  Name\n                \n\n\n\n+0\ud835\udd3d\n\n\n\"Sun\"\n\n\n\n\n1\ud835\udd3d\n\n\n\"Mon\"\n\n\n\n\n2\ud835\udd3d\n\n\n\"Tue\"\n\n\n\n\n3\ud835\udd3d\n\n\n\"Wed\"\n\n\n\n\n4\ud835\udd3d\n\n\n\"Thu\"\n\n\n\n\n5\ud835\udd3d\n\n\n\"Fri\"\n\n\n\n\n6\ud835\udd3d\n\n\n\"Sat\"\n\n\n\n\nTable 64: Names of months of the year\n\n\n\n                  Number\n                \n\n                  Name\n                \n\n\n\n+0\ud835\udd3d\n\n\n\"Jan\"\n\n\n\n\n1\ud835\udd3d\n\n\n\"Feb\"\n\n\n\n\n2\ud835\udd3d\n\n\n\"Mar\"\n\n\n\n\n3\ud835\udd3d\n\n\n\"Apr\"\n\n\n\n\n4\ud835\udd3d\n\n\n\"May\"\n\n\n\n\n5\ud835\udd3d\n\n\n\"Jun\"\n\n\n\n\n6\ud835\udd3d\n\n\n\"Jul\"\n\n\n\n\n7\ud835\udd3d\n\n\n\"Aug\"\n\n\n\n\n8\ud835\udd3d\n\n\n\"Sep\"\n\n\n\n\n9\ud835\udd3d\n\n\n\"Oct\"\n\n\n\n\n10\ud835\udd3d\n\n\n\"Nov\"\n\n\n\n\n11\ud835\udd3d\n\n\n\"Dec\"\n\n\n\n\n\n\n21.4.4.41.3 TimeZoneString ( tv )\nThe abstract operation TimeZoneString takes argument tv (a Number, but not NaN) and returns a String. It performs the following steps when called:\n1. Let offset be LocalTZA(tv, true).2. If offset is +0\ud835\udd3d or offset > +0\ud835\udd3d, thena. Let offsetSign be \"+\".b. Let absOffset be offset.3. Else,a. Let offsetSign be \"-\".b. Let absOffset be -offset.4. Let offsetMin be ToZeroPaddedDecimalString(\u211d(MinFromTime(absOffset)), 2).5. Let offsetHour be ToZeroPaddedDecimalString(\u211d(HourFromTime(absOffset)), 2).6. Let tzName be an implementation-defined string that is either the empty String or the string-concatenation of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT PARENTHESIS), an implementation-defined timezone name, and the code unit 0x0029 (RIGHT PARENTHESIS).7. Return the string-concatenation of offsetSign, offsetHour, offsetMin, and tzName.\n\n\n21.4.4.41.4 ToDateString ( tv )\nThe abstract operation ToDateString takes argument tv (a Number) and returns a String. It performs the following steps when called:\n1. If tv is NaN, return \"Invalid Date\".2. Let t be LocalTime(tv).3. Return the string-concatenation of DateString(t), the code unit 0x0020 (SPACE), TimeString(t), and TimeZoneString(tv).\n\n\n\n21.4.4.42 Date.prototype.toTimeString ( )\nThe following steps are performed:\n1. Let O be this Date object.2. Let tv be ?\u00a0thisTimeValue(O).3. If tv is NaN, return \"Invalid Date\".4. Let t be LocalTime(tv).5. Return the string-concatenation of TimeString(t) and TimeZoneString(tv).\n\n\n21.4.4.43 Date.prototype.toUTCString ( )\nThe toUTCString method returns a String value representing the instance in time corresponding to this time value.\n The format of the String is based upon \"HTTP-date\" from RFC 7231, \ngeneralized to support the full range of times supported by ECMAScript \nDates. It performs the following steps when called:\n1. Let O be this Date object.2. Let tv be ?\u00a0thisTimeValue(O).3. If tv is NaN, return \"Invalid Date\".4. Let weekday be the Name of the entry in Table 63 with the Number WeekDay(tv).5. Let month be the Name of the entry in Table 64 with the Number MonthFromTime(tv).6. Let day be ToZeroPaddedDecimalString(\u211d(DateFromTime(tv)), 2).7. Let yv be YearFromTime(tv).8. If yv is +0\ud835\udd3d or yv > +0\ud835\udd3d, let yearSign be the empty String; otherwise, let yearSign be \"-\".9. Let paddedYear be ToZeroPaddedDecimalString(abs(\u211d(yv)), 4).10. Return the string-concatenation of weekday, \",\", the code unit 0x0020 (SPACE), day, the code unit 0x0020 (SPACE), month, the code unit 0x0020 (SPACE), yearSign, paddedYear, the code unit 0x0020 (SPACE), and TimeString(tv).\n\n\n21.4.4.44 Date.prototype.valueOf ( )\nThe following steps are performed:\n1. Return ?\u00a0thisTimeValue(this value).\n\n\n21.4.4.45 Date.prototype [ @@toPrimitive ] ( hint )\nThis function is called by ECMAScript language operators to convert a Date to a primitive value. The allowed values for hint are \"default\", \"number\", and \"string\". Dates are unique among built-in ECMAScript object in that they treat \"default\" as being equivalent to \"string\", All other built-in ECMAScript objects treat \"default\" as being equivalent to \"number\".\nWhen the @@toPrimitive method is called with argument hint, the following steps are taken:\n1. Let O be the this value.2. If Type(O) is not Object, throw a TypeError exception.3. If hint is \"string\" or \"default\", thena. Let tryFirst be string.4. Else if hint is \"number\", thena. Let tryFirst be number.5. Else, throw a TypeError exception.6. Return ?\u00a0OrdinaryToPrimitive(O, tryFirst).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\nThe value of the \"name\" property of this function is \"[Symbol.toPrimitive]\".\n\n\n\n21.4.5 Properties of Date Instances\nDate instances are ordinary objects that inherit properties from the Date prototype object. Date instances also have a [[DateValue]] internal slot. The [[DateValue]] internal slot is the time value represented by this Date.\n\n\n\n\n22 Text Processing\n\n22.1 String Objects\n\n22.1.1 The String Constructor\nThe String constructor:\n\nis %String%.\nis the initial value of the \"String\" property of the global object.\ncreates and initializes a new String object when called as a constructor.\nperforms a type conversion when called as a function rather than as a constructor.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified String behaviour must include a super call to the String constructor to create and initialize the subclass instance with a [[StringData]] internal slot.\n\n\n22.1.1.1 String ( value )\nWhen String is called with argument value, the following steps are taken:\n1. If value is not present, let s be the empty String.2. Else,a. If NewTarget is undefined and Type(value) is Symbol, return SymbolDescriptiveString(value).b. Let s be ?\u00a0ToString(value).3. If NewTarget is undefined, return s.4. Return StringCreate(s, ?\u00a0GetPrototypeFromConstructor(NewTarget, \"%String.prototype%\")).\n\n\n\n22.1.2 Properties of the String Constructor\nThe String constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n22.1.2.1 String.fromCharCode ( ...codeUnits )\nThe String.fromCharCode function may be called with any number of arguments which form the rest parameter codeUnits. The following steps are taken:\n1. Let length be the number of elements in codeUnits.2. Let elements be a new empty List.3. For each element next of codeUnits, doa. Let nextCU be \u211d(? ToUint16(next)).b. Append nextCU to the end of elements.4. Return the String value whose code units are the elements in the List elements. If codeUnits is empty, the empty String is returned.\nThe \"length\" property of the fromCharCode function is 1\ud835\udd3d.\n\n\n22.1.2.2 String.fromCodePoint ( ...codePoints )\nThe String.fromCodePoint function may be called with any number of arguments which form the rest parameter codePoints. The following steps are taken:\n1. Let result be the empty String.2. For each element next of codePoints, doa. Let nextCP be ?\u00a0ToNumber(next).b. If IsIntegralNumber(nextCP) is false, throw a RangeError exception.c. If \u211d(nextCP) < 0 or \u211d(nextCP) > 0x10FFFF, throw a RangeError exception.d. Set result to the string-concatenation of result and UTF16EncodeCodePoint(\u211d(nextCP)).3. Assert: If codePoints is empty, then result is the empty String.4. Return result.\nThe \"length\" property of the fromCodePoint function is 1\ud835\udd3d.\n\n\n22.1.2.3 String.prototype\nThe initial value of String.prototype is the String prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n22.1.2.4 String.raw ( template, ...substitutions )\nThe String.raw function may be called with a variable number of arguments. The first argument is template and the remainder of the arguments form the List substitutions. The following steps are taken:\n1. Let numberOfSubstitutions be the number of elements in substitutions.2. Let cooked be ?\u00a0ToObject(template).3. Let raw be ?\u00a0ToObject(? Get(cooked, \"raw\")).4. Let literalSegments be ?\u00a0LengthOfArrayLike(raw).5. If literalSegments \u2264 0, return the empty String.6. Let stringElements be a new empty List.7. Let nextIndex be 0.8. Repeat,a. Let nextKey be !\u00a0ToString(\ud835\udd3d(nextIndex)).b. Let nextSeg be ?\u00a0ToString(? Get(raw, nextKey)).c. Append the code unit elements of nextSeg to the end of stringElements.d. If nextIndex + 1 = literalSegments, theni. Return the String value whose code units are the elements in the List stringElements. If stringElements has no elements, the empty String is returned.e. If nextIndex < numberOfSubstitutions, let next be substitutions[nextIndex].f. Else, let next be the empty String.g. Let nextSub be ?\u00a0ToString(next).h. Append the code unit elements of nextSub to the end of stringElements.i. Set nextIndex to nextIndex + 1.\nNote\nThe raw function is intended for use as a tag function of a Tagged Template (13.3.11).\n When called as such, the first argument will be a well formed template \nobject and the rest parameter will contain the substitution values.\n\n\n\n\n22.1.3 Properties of the String Prototype Object\nThe String prototype object:\n\nis %String.prototype%.\nis a String exotic object and has the internal methods specified for such objects.\nhas a [[StringData]] internal slot whose value is the empty String.\nhas a \"length\" property whose initial value is +0\ud835\udd3d and whose attributes are { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\n\nUnless explicitly stated otherwise, the methods of the String prototype object defined below are not generic and the this\n value passed to them must be either a String value or an object that \nhas a [[StringData]] internal slot that has been initialized to a String\n value.\nThe abstract operation thisStringValue takes argument value. It performs the following steps when called:\n1. If Type(value) is String, return value.2. If Type(value) is Object and value has a [[StringData]] internal slot, thena. Let s be value.[[StringData]].b. Assert: Type(s) is String.c. Return s.3. Throw a TypeError exception.\n\n22.1.3.1 String.prototype.at ( index )\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let len be the length of S.4. Let relativeIndex be ?\u00a0ToIntegerOrInfinity(index).5. If relativeIndex \u2265 0, thena. Let k be relativeIndex.6. Else,a. Let k be len + relativeIndex.7. If k < 0 or k \u2265 len, return undefined.8. Return the substring of S from k to k + 1.\n\n\n22.1.3.2 String.prototype.charAt ( pos )\nNote 1\nReturns a single element String containing the code unit at index pos\n within the String value resulting from converting this object to a \nString. If there is no element at that index, the result is the empty \nString. The result is a String value, not a String object.\nIf pos is an integral Number, then the result of x.charAt(pos) is equivalent to the result of x.substring(pos, pos + 1).\n\nWhen the charAt method is called with one argument pos, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let position be ?\u00a0ToIntegerOrInfinity(pos).4. Let size be the length of S.5. If position < 0 or position \u2265 size, return the empty String.6. Return the substring of S from position to position + 1.\nNote 2\nThe charAt function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.3 String.prototype.charCodeAt ( pos )\nNote 1\nReturns a Number (a non-negative integral Number less than 216) that is the numeric value of the code unit at index pos within the String resulting from converting this object to a String. If there is no element at that index, the result is NaN.\n\nWhen the charCodeAt method is called with one argument pos, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let position be ?\u00a0ToIntegerOrInfinity(pos).4. Let size be the length of S.5. If position < 0 or position \u2265 size, return NaN.6. Return the Number value for the numeric value of the code unit at index position within the String S.\nNote 2\nThe charCodeAt function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.4 String.prototype.codePointAt ( pos )\nNote 1\nReturns a non-negative integral Number less than or equal to 0x10FFFF\ud835\udd3d that is the numeric value of the UTF-16 encoded code point (6.1.4) starting at the string element at index pos within the String resulting from converting this object to a String. If there is no element at that index, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\n\nWhen the codePointAt method is called with one argument pos, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let position be ?\u00a0ToIntegerOrInfinity(pos).4. Let size be the length of S.5. If position < 0 or position \u2265 size, return undefined.6. Let cp be CodePointAt(S, position).7. Return \ud835\udd3d(cp.[[CodePoint]]).\nNote 2\nThe codePointAt function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.5 String.prototype.concat ( ...args )\nNote 1\nWhen the concat method is called it returns the String value consisting of the code units of the this\n value (converted to a String) followed by the code units of each of the\n arguments converted to a String. The result is a String value, not a \nString object.\n\nWhen the concat method is called with zero or more arguments, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let R be S.4. For each element next of args, doa. Let nextString be ?\u00a0ToString(next).b. Set R to the string-concatenation of R and nextString.5. Return R.\nThe \"length\" property of the concat method is 1\ud835\udd3d.\nNote 2\nThe concat function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.6 String.prototype.constructor\nThe initial value of String.prototype.constructor is %String%.\n\n\n22.1.3.7 String.prototype.endsWith ( searchString [ , endPosition ] )\nThe following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let isRegExp be ?\u00a0IsRegExp(searchString).4. If isRegExp is true, throw a TypeError exception.5. Let searchStr be ?\u00a0ToString(searchString).6. Let len be the length of S.7. If endPosition is undefined, let pos be len; else let pos be ?\u00a0ToIntegerOrInfinity(endPosition).8. Let end be the result of clamping pos between 0 and len.9. Let searchLength be the length of searchStr.10. If searchLength = 0, return true.11. Let start be end - searchLength.12. If start < 0, return false.13. Let substring be the substring of S from start to end.14. Return SameValueNonNumeric(substring, searchStr).\nNote 1\nReturns true if the sequence of code units of searchString converted to a String is the same as the corresponding code units of this object (converted to a String) starting at endPosition - length(this). Otherwise returns false.\n\nNote 2\nThrowing an exception if the first argument is a RegExp is \nspecified in order to allow future editions to define extensions that \nallow such argument values.\n\nNote 3\nThe endsWith function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.8 String.prototype.includes ( searchString [ , position ] )\nThe includes method takes two arguments, searchString and position, and performs the following steps:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let isRegExp be ?\u00a0IsRegExp(searchString).4. If isRegExp is true, throw a TypeError exception.5. Let searchStr be ?\u00a0ToString(searchString).6. Let pos be ?\u00a0ToIntegerOrInfinity(position).7. Assert: If position is undefined, then pos is 0.8. Let len be the length of S.9. Let start be the result of clamping pos between 0 and len.10. Let index be StringIndexOf(S, searchStr, start).11. If index is not -1, return true.12. Return false.\nNote 1\nIf searchString appears as a substring of the result of converting this object to a String, at one or more indices that are greater than or equal to position, return true; otherwise, returns false. If position is undefined, 0 is assumed, so as to search all of the String.\n\nNote 2\nThrowing an exception if the first argument is a RegExp is \nspecified in order to allow future editions to define extensions that \nallow such argument values.\n\nNote 3\nThe includes function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.9 String.prototype.indexOf ( searchString [ , position ] )\nNote 1\nIf searchString appears as a substring of the result of converting this object to a String, at one or more indices that are greater than or equal to position, then the smallest such index is returned; otherwise, -1\ud835\udd3d is returned. If position is undefined, +0\ud835\udd3d is assumed, so as to search all of the String.\n\nThe indexOf method takes two arguments, searchString and position, and performs the following steps:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let searchStr be ?\u00a0ToString(searchString).4. Let pos be ?\u00a0ToIntegerOrInfinity(position).5. Assert: If position is undefined, then pos is 0.6. Let len be the length of S.7. Let start be the result of clamping pos between 0 and len.8. Return \ud835\udd3d(StringIndexOf(S, searchStr, start)).\nNote 2\nThe indexOf function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.10 String.prototype.lastIndexOf ( searchString [ , position ] )\nNote 1\nIf searchString appears as a substring of the result of converting this object to a String at one or more indices that are smaller than or equal to position, then the greatest such index is returned; otherwise, -1\ud835\udd3d is returned. If position is undefined, the length of the String value is assumed, so as to search all of the String.\n\nThe lastIndexOf method takes two arguments, searchString and position, and performs the following steps:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let searchStr be ?\u00a0ToString(searchString).4. Let numPos be ?\u00a0ToNumber(position).5. Assert: If position is undefined, then numPos is NaN.6. If numPos is NaN, let pos be +\u221e; otherwise, let pos be !\u00a0ToIntegerOrInfinity(numPos).7. Let len be the length of S.8. Let start be the result of clamping pos between 0 and len.9. If searchStr is the empty String, return \ud835\udd3d(start).10. Let searchLen be the length of searchStr.11. For each non-negative integer i starting with start such that i \u2264 len - searchLen, in descending order, doa. Let candidate be the substring of S from i to i + searchLen.b. If candidate is the same sequence of code units as searchStr, return \ud835\udd3d(i).12. Return -1\ud835\udd3d.\nNote 2\nThe lastIndexOf function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.11 String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )\nAn ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the localeCompare\n method as specified in the ECMA-402 specification. If an ECMAScript \nimplementation does not include the ECMA-402 API the following \nspecification of the localeCompare method is used.\nWhen the localeCompare method is called with argument that, it returns a Number other than NaN representing the result of an implementation-defined locale-sensitive String comparison of the this value (converted to a String S) with that (converted to a String thatValue). The result is intended to correspond with a sort order of String values according to conventions of the host environment's current locale, and will be negative when S is ordered before thatValue, positive when S is ordered after thatValue, and zero in all other cases (representing no relative ordering between S and thatValue).\nBefore performing the comparisons, the following steps are performed to prepare the Strings:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let thatValue be ?\u00a0ToString(that).\nThe meaning of the optional second and third parameters to \nthis method are defined in the ECMA-402 specification; implementations \nthat do not include ECMA-402 support must not assign any other \ninterpretation to those parameter positions.\nThe actual return values are implementation-defined\n to permit encoding additional information in them, but this method, \nwhen considered as a function of two arguments, is required to be a consistent comparator\n defining a total ordering on the set of all Strings. This method is \nalso required to recognize and honour canonical equivalence according to\n the Unicode Standard, including returning 0 when comparing distinguishable Strings that are canonically equivalent.\nNote 1\nThe localeCompare method itself is not directly suitable as an argument to Array.prototype.sort because the latter requires a function of two arguments.\n\nNote 2\nThis method may rely on whatever language- and/or \nlocale-sensitive comparison functionality is available to the ECMAScript\n environment from the host environment, and is intended to compare according to the conventions of the host environment's\n current locale. However, regardless of comparison capabilities, this \nmethod must recognize and honour canonical equivalence according to the \nUnicode Standard\u2014for example, the following comparisons must all return 0:\n// \u212b ANGSTROM SIGN vs.\n// A\u030a LATIN CAPITAL LETTER A + COMBINING RING ABOVE\n\"\\u212B\".localeCompare(\"A\\u030A\")\n\n// \u2126 OHM SIGN vs.\n// \u03a9 GREEK CAPITAL LETTER OMEGA\n\"\\u2126\".localeCompare(\"\\u03A9\")\n\n// \u1e69 LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE vs.\n// s\u0307\u0323 LATIN SMALL LETTER S + COMBINING DOT ABOVE + COMBINING DOT BELOW\n\"\\u1E69\".localeCompare(\"s\\u0307\\u0323\")\n\n// \u1e0b\u0323 LATIN SMALL LETTER D WITH DOT ABOVE + COMBINING DOT BELOW vs.\n// \u1e0d\u0307 LATIN SMALL LETTER D WITH DOT BELOW + COMBINING DOT ABOVE\n\"\\u1E0B\\u0323\".localeCompare(\"\\u1E0D\\u0307\")\n\n// \u1100\u1161 HANGUL CHOSEONG KIYEOK + HANGUL JUNGSEONG A\n// \uac00 HANGUL SYLLABLE GA\n\"\\u1100\\u1161\".localeCompare(\"\\uAC00\")\nFor a definition and discussion of canonical equivalence see the Unicode Standard, chapters 2 and 3, as well as Unicode Standard Annex #15, Unicode Normalization Forms and Unicode Technical Note #5, Canonical Equivalence in Applications. Also see Unicode Technical Standard #10, Unicode Collation Algorithm.\nIt is recommended that this method should not honour \nUnicode compatibility equivalents or compatibility decompositions as \ndefined in the Unicode Standard, chapter 3, section 3.7.\n\nNote 3\nThe localeCompare function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.12 String.prototype.match ( regexp )\nWhen the match method is called with argument regexp, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. If regexp is neither undefined nor null, thena. Let matcher be ?\u00a0GetMethod(regexp, @@match).b. If matcher is not undefined, theni. Return ?\u00a0Call(matcher, regexp, \u00ab O \u00bb).3. Let S be ?\u00a0ToString(O).4. Let rx be ?\u00a0RegExpCreate(regexp, undefined).5. Return ?\u00a0Invoke(rx, @@match, \u00ab S \u00bb).\nNote\nThe match function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.13 String.prototype.matchAll ( regexp )\nPerforms a regular expression match of the String representing the this value against regexp and returns an iterator. Each iteration result's value is an Array containing the results of the match, or null if the String did not match.\nWhen the matchAll method is called, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. If regexp is neither undefined nor null, thena. Let isRegExp be ?\u00a0IsRegExp(regexp).b. If isRegExp is true, theni. Let flags be ?\u00a0Get(regexp, \"flags\").ii. Perform ?\u00a0RequireObjectCoercible(flags).iii. If ?\u00a0ToString(flags) does not contain \"g\", throw a TypeError exception.c. Let matcher be ?\u00a0GetMethod(regexp, @@matchAll).d. If matcher is not undefined, theni. Return ?\u00a0Call(matcher, regexp, \u00ab O \u00bb).3. Let S be ?\u00a0ToString(O).4. Let rx be ?\u00a0RegExpCreate(regexp, \"g\").5. Return ?\u00a0Invoke(rx, @@matchAll, \u00ab S \u00bb).\nNote 1The matchAll function is intentionally generic, it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\nNote 2Similarly to String.prototype.split, String.prototype.matchAll is designed to typically act without mutating its inputs.\n\n\n22.1.3.14 String.prototype.normalize ( [ form ] )\nWhen the normalize method is called with one argument form, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. If form is undefined, let f be \"NFC\".4. Else, let f be ?\u00a0ToString(form).5. If f is not one of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", throw a RangeError exception.6. Let ns be the String value that is the result of normalizing S into the normalization form named by f as specified in https://unicode.org/reports/tr15/.7. Return ns.\nNote\nThe normalize function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.15 String.prototype.padEnd ( maxLength [ , fillString ] )\nWhen the padEnd method is called, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Return ?\u00a0StringPad(O, maxLength, fillString, end).\n\n\n22.1.3.16 String.prototype.padStart ( maxLength [ , fillString ] )\nWhen the padStart method is called, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Return ?\u00a0StringPad(O, maxLength, fillString, start).\n\n22.1.3.16.1 StringPad ( O, maxLength, fillString, placement )\nThe abstract operation StringPad takes arguments O (an ECMAScript language value), maxLength (an ECMAScript language value), fillString (an ECMAScript language value), and placement (start or end) and returns either a normal completion containing a String or an abrupt completion. It performs the following steps when called:\n1. Let S be ?\u00a0ToString(O).2. Let intMaxLength be \u211d(? ToLength(maxLength)).3. Let stringLength be the length of S.4. If intMaxLength \u2264 stringLength, return S.5. If fillString is undefined, let filler be the String value consisting solely of the code unit 0x0020 (SPACE).6. Else, let filler be ?\u00a0ToString(fillString).7. If filler is the empty String, return S.8. Let fillLen be intMaxLength - stringLength.9. Let truncatedStringFiller be the String value consisting of repeated concatenations of filler truncated to length fillLen.10. If placement is start, return the string-concatenation of truncatedStringFiller and S.11. Else, return the string-concatenation of S and truncatedStringFiller.\nNote 1\nThe argument maxLength will be clamped such that it can be no smaller than the length of S.\n\nNote 2\nThe argument fillString defaults to \" \" (the String value consisting of the code unit 0x0020 SPACE).\n\n\n\n22.1.3.16.2 ToZeroPaddedDecimalString ( n, minLength )\nThe abstract operation ToZeroPaddedDecimalString takes arguments n (a non-negative integer) and minLength (a non-negative integer) and returns a String. It performs the following steps when called:\n1. Let S be the String representation of n, formatted as a decimal number.2. Return !\u00a0StringPad(S, \ud835\udd3d(minLength), \"0\", start).\n\n\n\n22.1.3.17 String.prototype.repeat ( count )\nThe following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let n be ?\u00a0ToIntegerOrInfinity(count).4. If n < 0 or n is +\u221e, throw a RangeError exception.5. If n is 0, return the empty String.6. Return the String value that is made from n copies of S appended together.\nNote 1\nThis method creates the String value consisting of the code units of the this value (converted to String) repeated count times.\n\nNote 2\nThe repeat function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.18 String.prototype.replace ( searchValue, replaceValue )\nWhen the replace method is called with arguments searchValue and replaceValue, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. If searchValue is neither undefined nor null, thena. Let replacer be ?\u00a0GetMethod(searchValue, @@replace).b. If replacer is not undefined, theni. Return ?\u00a0Call(replacer, searchValue, \u00ab O, replaceValue \u00bb).3. Let string be ?\u00a0ToString(O).4. Let searchString be ?\u00a0ToString(searchValue).5. Let functionalReplace be IsCallable(replaceValue).6. If functionalReplace is false, thena. Set replaceValue to ?\u00a0ToString(replaceValue).7. Let searchLength be the length of searchString.8. Let position be StringIndexOf(string, searchString, 0).9. If position is -1, return string.10. Let preceding be the substring of string from 0 to position.11. Let following be the substring of string from position + searchLength.12. If functionalReplace is true, thena. Let replacement be ?\u00a0ToString(? Call(replaceValue, undefined, \u00ab searchString, \ud835\udd3d(position), string \u00bb)).13. Else,a. Assert: Type(replaceValue) is String.b. Let captures be a new empty List.c. Let replacement be !\u00a0GetSubstitution(searchString, string, position, captures, undefined, replaceValue).14. Return the string-concatenation of preceding, replacement, and following.\nNote\nThe replace function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n22.1.3.18.1 GetSubstitution ( matched, str, position, captures, namedCaptures, replacementTemplate )\nThe abstract operation GetSubstitution takes arguments matched (a String), str (a String), position (a non-negative integer), captures (a possibly empty List, each of whose elements is a String or undefined), namedCaptures (an Object or undefined), and replacementTemplate (a String) and returns either a normal completion containing a String or an abrupt completion. For the purposes of this abstract operation, a decimal digit is a code unit in the range 0x0030 (DIGIT ZERO) to 0x0039 (DIGIT NINE) inclusive. It performs the following steps when called:\n1. Let stringLength be the number of code units in str.2. Assert: position \u2264 stringLength.3. Let templateRemainder be replacementTemplate.4. Let result be the empty String.5. Repeat, while templateRemainder is not the empty String,a. NOTE: The following steps isolate ref (a prefix of templateRemainder), determine refReplacement (its replacement), and then append that replacement to result.b. If templateRemainder starts with \"$$\", theni. Let ref be \"$$\".ii. Let refReplacement be \"$\".c. Else if templateRemainder starts with \"$`\", theni. Let ref be \"$`\".ii. Let refReplacement be the substring of str from 0 to position.d. Else if templateRemainder starts with \"$&\", theni. Let ref be \"$&\".ii. Let refReplacement be matched.e. Else if templateRemainder starts with \"$'\" (0x0024 (DOLLAR SIGN) followed by 0x0027 (APOSTROPHE)), theni. Let ref be \"$'\".ii. Let matchLength be the number of code units in matched.iii. Let tailPos be position + matchLength.iv. Let refReplacement be the substring of str from min(tailPos, stringLength).v. NOTE: tailPos can exceed stringLength only if this abstract operation was invoked by a call to the intrinsic @@replace method of %RegExp.prototype% on an object whose \"exec\" property is not the intrinsic %RegExp.prototype.exec%.f. Else if templateRemainder starts with \"$\" followed by 1 or more decimal digits, theni. Let found be false.ii. For each integer d of \u00ab 2, 1 \u00bb, do1. If found is false and templateRemainder starts with \"$\" followed by d or more decimal digits, thena. Set found to true.b. Let ref be the substring of templateRemainder from 0 to 1 + d.c. Let digits be the substring of templateRemainder from 1 to 1 + d.d. Let index be \u211d(StringToNumber(digits)).e. Assert: 0 \u2264 index \u2264 99.f. If index = 0, theni. Let refReplacement be ref.g. Else if index \u2264 the number of elements in captures, theni. Let capture be captures[index - 1].ii. If capture is undefined, theni. Let refReplacement be the empty String.iii. Else,i. Let refReplacement be capture.h. Else,i. Let refReplacement be ref.g. Else if templateRemainder starts with \"$<\", theni. Let gtPos be StringIndexOf(templateRemainder, \">\", 0).ii. If gtPos = -1 or namedCaptures is undefined, then1. Let ref be \"$<\".2. Let refReplacement be ref.iii. Else,1. Let ref be the substring of templateRemainder from 0 to gtPos + 1.2. Let groupName be the substring of templateRemainder from 2 to gtPos.3. Assert: Type(namedCaptures) is Object.4. Let capture be ?\u00a0Get(namedCaptures, groupName).5. If capture is undefined, thena. Let refReplacement be the empty String.6. Else,a. Let refReplacement be ?\u00a0ToString(capture).h. Else,i. Let ref be the substring of templateRemainder from 0 to 1.ii. Let refReplacement be ref.i. Let refLength be the number of code units in ref.j. Set templateRemainder to the substring of templateRemainder from refLength.k. Set result to the string-concatenation of result and refReplacement.6. Return result.\n\n\n\n22.1.3.19 String.prototype.replaceAll ( searchValue, replaceValue )\nWhen the replaceAll method is called with arguments searchValue and replaceValue, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. If searchValue is neither undefined nor null, thena. Let isRegExp be ?\u00a0IsRegExp(searchValue).b. If isRegExp is true, theni. Let flags be ?\u00a0Get(searchValue, \"flags\").ii. Perform ?\u00a0RequireObjectCoercible(flags).iii. If ?\u00a0ToString(flags) does not contain \"g\", throw a TypeError exception.c. Let replacer be ?\u00a0GetMethod(searchValue, @@replace).d. If replacer is not undefined, theni. Return ?\u00a0Call(replacer, searchValue, \u00ab O, replaceValue \u00bb).3. Let string be ?\u00a0ToString(O).4. Let searchString be ?\u00a0ToString(searchValue).5. Let functionalReplace be IsCallable(replaceValue).6. If functionalReplace is false, thena. Set replaceValue to ?\u00a0ToString(replaceValue).7. Let searchLength be the length of searchString.8. Let advanceBy be max(1, searchLength).9. Let matchPositions be a new empty List.10. Let position be StringIndexOf(string, searchString, 0).11. Repeat, while position is not -1,a. Append position to the end of matchPositions.b. Set position to StringIndexOf(string, searchString, position + advanceBy).12. Let endOfLastMatch be 0.13. Let result be the empty String.14. For each element p of matchPositions, doa. Let preserved be the substring of string from endOfLastMatch to p.b. If functionalReplace is true, theni. Let replacement be ?\u00a0ToString(? Call(replaceValue, undefined, \u00ab searchString, \ud835\udd3d(p), string \u00bb)).c. Else,i. Assert: Type(replaceValue) is String.ii. Let captures be a new empty List.iii. Let replacement be !\u00a0GetSubstitution(searchString, string, p, captures, undefined, replaceValue).d. Set result to the string-concatenation of result, preserved, and replacement.e. Set endOfLastMatch to p + searchLength.15. If endOfLastMatch < the length of string, thena. Set result to the string-concatenation of result and the substring of string from endOfLastMatch.16. Return result.\n\n\n22.1.3.20 String.prototype.search ( regexp )\nWhen the search method is called with argument regexp, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. If regexp is neither undefined nor null, thena. Let searcher be ?\u00a0GetMethod(regexp, @@search).b. If searcher is not undefined, theni. Return ?\u00a0Call(searcher, regexp, \u00ab O \u00bb).3. Let string be ?\u00a0ToString(O).4. Let rx be ?\u00a0RegExpCreate(regexp, undefined).5. Return ?\u00a0Invoke(rx, @@search, \u00ab string \u00bb).\nNote\nThe search function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.21 String.prototype.slice ( start, end )\nThe slice method takes two arguments, start and end, and returns a substring of the result of converting this object to a String, starting from index start and running to, but not including, index end (or through the end of the String if end is undefined). If start is negative, it is treated as sourceLength + start where sourceLength is the length of the String. If end is negative, it is treated as sourceLength + end where sourceLength is the length of the String. The result is a String value, not a String object. The following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let len be the length of S.4. Let intStart be ?\u00a0ToIntegerOrInfinity(start).5. If intStart is -\u221e, let from be 0.6. Else if intStart < 0, let from be max(len + intStart, 0).7. Else, let from be min(intStart, len).8. If end is undefined, let intEnd be len; else let intEnd be ?\u00a0ToIntegerOrInfinity(end).9. If intEnd is -\u221e, let to be 0.10. Else if intEnd < 0, let to be max(len + intEnd, 0).11. Else, let to be min(intEnd, len).12. If from \u2265 to, return the empty String.13. Return the substring of S from from to to.\nNote\nThe slice function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.22 String.prototype.split ( separator, limit )\nReturns an Array into which substrings of the result of \nconverting this object to a String have been stored. The substrings are \ndetermined by searching from left to right for occurrences of separator; these occurrences are not part of any String in the returned array, but serve to divide up the String value. The value of separator may be a String of any length or it may be an object, such as a RegExp, that has a @@split method.\nWhen the split method is called, the following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. If separator is neither undefined nor null, thena. Let splitter be ?\u00a0GetMethod(separator, @@split).b. If splitter is not undefined, theni. Return ?\u00a0Call(splitter, separator, \u00ab O, limit \u00bb).3. Let S be ?\u00a0ToString(O).4. If limit is undefined, let lim be 232 - 1; else let lim be \u211d(? ToUint32(limit)).5. Let R be ?\u00a0ToString(separator).6. If lim = 0, thena. Return CreateArrayFromList(\u00ab \u00bb).7. If separator is undefined, thena. Return CreateArrayFromList(\u00ab S \u00bb).8. Let separatorLength be the length of R.9. If separatorLength is 0, thena. Let head be the substring of S from 0 to lim.b. Let codeUnits be a List consisting of the sequence of code units that are the elements of head.c. Return CreateArrayFromList(codeUnits).10. If S is the empty String, return CreateArrayFromList(\u00ab S \u00bb).11. Let substrings be a new empty List.12. Let i be 0.13. Let j be StringIndexOf(S, R, 0).14. Repeat, while j is not -1,a. Let T be the substring of S from i to j.b. Append T as the last element of substrings.c. If the number of elements of substrings is lim, return CreateArrayFromList(substrings).d. Set i to j + separatorLength.e. Set j to StringIndexOf(S, R, i).15. Let T be the substring of S from i.16. Append T to substrings.17. Return CreateArrayFromList(substrings).\nNote 1\nThe value of separator may be an empty String. In this case, separator does not match the empty substring at the beginning or end of the input String, nor does it match the empty substring at the end of the previous separator match. If separator\n is the empty String, the String is split up into individual code unit \nelements; the length of the result array equals the length of the \nString, and each substring contains one code unit.\nIf the this value is (or converts to) the empty String, the result depends on whether separator\n can match the empty String. If it can, the result array contains no \nelements. Otherwise, the result array contains one element, which is the\n empty String.\nIf separator is undefined, then the result array contains just one String, which is the this value (converted to a String). If limit is not undefined, then the output array is truncated so that it contains no more than limit elements.\n\nNote 2\nThe split function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.23 String.prototype.startsWith ( searchString [ , position ] )\nThe following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let isRegExp be ?\u00a0IsRegExp(searchString).4. If isRegExp is true, throw a TypeError exception.5. Let searchStr be ?\u00a0ToString(searchString).6. Let len be the length of S.7. If position is undefined, let pos be 0; else let pos be ?\u00a0ToIntegerOrInfinity(position).8. Let start be the result of clamping pos between 0 and len.9. Let searchLength be the length of searchStr.10. If searchLength = 0, return true.11. Let end be start + searchLength.12. If end > len, return false.13. Let substring be the substring of S from start to end.14. Return SameValueNonNumeric(substring, searchStr).\nNote 1\nThis method returns true if the sequence of code units of searchString converted to a String is the same as the corresponding code units of this object (converted to a String) starting at index position. Otherwise returns false.\n\nNote 2\nThrowing an exception if the first argument is a RegExp is \nspecified in order to allow future editions to define extensions that \nallow such argument values.\n\nNote 3\nThe startsWith function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.24 String.prototype.substring ( start, end )\nThe substring method takes two arguments, start and end, and returns a substring of the result of converting this object to a String, starting from index start and running to, but not including, index end of the String (or through the end of the String if end is undefined). The result is a String value, not a String object.\nIf either argument is NaN or negative, it \nis replaced with zero; if either argument is larger than the length of \nthe String, it is replaced with the length of the String.\nIf start is larger than end, they are swapped.\nThe following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let len be the length of S.4. Let intStart be ?\u00a0ToIntegerOrInfinity(start).5. If end is undefined, let intEnd be len; else let intEnd be ?\u00a0ToIntegerOrInfinity(end).6. Let finalStart be the result of clamping intStart between 0 and len.7. Let finalEnd be the result of clamping intEnd between 0 and len.8. Let from be min(finalStart, finalEnd).9. Let to be max(finalStart, finalEnd).10. Return the substring of S from from to to.\nNote\nThe substring function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.25 String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )\nAn ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the toLocaleLowerCase\n method as specified in the ECMA-402 specification. If an ECMAScript \nimplementation does not include the ECMA-402 API the following \nspecification of the toLocaleLowerCase method is used.\nThis function interprets a String value as a sequence of UTF-16 encoded code points, as described in 6.1.4.\nThis function works exactly the same as toLowerCase except that it is intended to yield a locale-sensitive result corresponding with conventions of the host environment's\n current locale. There will only be a difference in the few cases (such \nas Turkish) where the rules for that language conflict with the regular \nUnicode case mappings.\nThe meaning of the optional parameters to this method are \ndefined in the ECMA-402 specification; implementations that do not \ninclude ECMA-402 support must not use those parameter positions for \nanything else.\nNote\nThe toLocaleLowerCase function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.26 String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )\nAn ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the toLocaleUpperCase\n method as specified in the ECMA-402 specification. If an ECMAScript \nimplementation does not include the ECMA-402 API the following \nspecification of the toLocaleUpperCase method is used.\nThis function interprets a String value as a sequence of UTF-16 encoded code points, as described in 6.1.4.\nThis function works exactly the same as toUpperCase except that it is intended to yield a locale-sensitive result corresponding with conventions of the host environment's\n current locale. There will only be a difference in the few cases (such \nas Turkish) where the rules for that language conflict with the regular \nUnicode case mappings.\nThe meaning of the optional parameters to this method are \ndefined in the ECMA-402 specification; implementations that do not \ninclude ECMA-402 support must not use those parameter positions for \nanything else.\nNote\nThe toLocaleUpperCase function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.27 String.prototype.toLowerCase ( )\nThis function interprets a String value as a sequence of UTF-16 encoded code points, as described in 6.1.4. The following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let sText be StringToCodePoints(S).4. Let lowerText be the result of toLowercase(sText), according to the Unicode Default Case Conversion algorithm.5. Let L be CodePointsToString(lowerText).6. Return L.\nThe result must be derived according to the \nlocale-insensitive case mappings in the Unicode Character Database (this\n explicitly includes not only the file UnicodeData.txt, but also all locale-insensitive mappings in the file SpecialCasing.txt that accompanies it).\nNote 1\nThe case mapping of some code points may produce multiple \ncode points. In this case the result String may not be the same length \nas the source String. Because both toUpperCase and toLowerCase have context-sensitive behaviour, the functions are not symmetrical. In other words, s.toUpperCase().toLowerCase() is not necessarily equal to s.toLowerCase().\n\nNote 2\nThe toLowerCase function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.28 String.prototype.toString ( )\nWhen the toString method is called, the following steps are taken:\n1. Return ?\u00a0thisStringValue(this value).\nNote\nFor a String object, the toString method happens to return the same thing as the valueOf method.\n\n\n\n22.1.3.29 String.prototype.toUpperCase ( )\nThis function interprets a String value as a sequence of UTF-16 encoded code points, as described in 6.1.4.\nThis function behaves in exactly the same way as String.prototype.toLowerCase, except that the String is mapped using the toUppercase algorithm of the Unicode Default Case Conversion.\nNote\nThe toUpperCase function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.30 String.prototype.trim ( )\nThis function interprets a String value as a sequence of UTF-16 encoded code points, as described in 6.1.4.\nThe following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0TrimString(S, start+end).\nNote\nThe trim function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n22.1.3.30.1 TrimString ( string, where )\nThe abstract operation TrimString takes arguments string (an ECMAScript language value) and where (start, end, or start+end) and returns either a normal completion containing a String or an abrupt completion. It interprets string as a sequence of UTF-16 encoded code points, as described in 6.1.4. It performs the following steps when called:\n1. Let str be ?\u00a0RequireObjectCoercible(string).2. Let S be ?\u00a0ToString(str).3. If where is start, let T be the String value that is a copy of S with leading white space removed.4. Else if where is end, let T be the String value that is a copy of S with trailing white space removed.5. Else,a. Assert: where is start+end.b. Let T be the String value that is a copy of S with both leading and trailing white space removed.6. Return T.\nThe definition of white space is the union of WhiteSpace and LineTerminator.\n When determining whether a Unicode code point is in Unicode general \ncategory \u201cSpace_Separator\u201d (\u201cZs\u201d), code unit sequences are interpreted \nas UTF-16 encoded code point sequences as specified in 6.1.4.\n\n\n\n22.1.3.31 String.prototype.trimEnd ( )\nThis function interprets a String value as a sequence of UTF-16 encoded code points, as described in 6.1.4.\nThe following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0TrimString(S, end).\nNote\nThe trimEnd function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.32 String.prototype.trimStart ( )\nThis function interprets a String value as a sequence of UTF-16 encoded code points, as described in 6.1.4.\nThe following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0TrimString(S, start).\nNote\nThe trimStart function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n22.1.3.33 String.prototype.valueOf ( )\nWhen the valueOf method is called, the following steps are taken:\n1. Return ?\u00a0thisStringValue(this value).\n\n\n22.1.3.34 String.prototype [ @@iterator ] ( )\nWhen the @@iterator method is called it returns an Iterator object (27.1.1.2)\n that iterates over the code points of a String value, returning each \ncode point as a String value. The following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let s be ?\u00a0ToString(O).3. Let closure be a new Abstract Closure with no parameters that captures s and performs the following steps when called:a. Let position be 0.b. Let len be the length of s.c. Repeat, while position < len,i. Let cp be CodePointAt(s, position).ii. Let nextIndex be position + cp.[[CodeUnitCount]].iii. Let resultString be the substring of s from position to nextIndex.iv. Set position to nextIndex.v. Perform ?\u00a0GeneratorYield(CreateIterResultObject(resultString, false)).d. Return undefined.4. Return CreateIteratorFromClosure(closure, \"%StringIteratorPrototype%\", %StringIteratorPrototype%).\nThe value of the \"name\" property of this function is \"[Symbol.iterator]\".\n\n\n\n22.1.4 Properties of String Instances\nString instances are String exotic objects and have the internal methods specified for such objects. String instances inherit properties from the String prototype object. String instances also have a [[StringData]] internal slot.\nString instances have a \"length\" property, and a set of enumerable properties with integer-indexed names.\n\n22.1.4.1 length\nThe number of elements in the String value represented by this String object.\nOnce a String object is initialized, this property is unchanging. It has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n22.1.5 String Iterator Objects\nA String Iterator is an object, that represents a specific \niteration over some specific String instance object. There is not a \nnamed constructor\n for String Iterator objects. Instead, String iterator objects are \ncreated by calling certain methods of String instance objects.\n\n22.1.5.1 The %StringIteratorPrototype% Object\nThe %StringIteratorPrototype% object:\n\nhas properties that are inherited by all String Iterator Objects.\nis an ordinary object.\nhas a [[Prototype]] internal slot whose value is %IteratorPrototype%.\nhas the following properties:\n\n\n22.1.5.1.1 %StringIteratorPrototype%.next ( )\n1. Return ?\u00a0GeneratorResume(this value, empty, \"%StringIteratorPrototype%\").\n\n\n22.1.5.1.2 %StringIteratorPrototype% [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"String Iterator\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n\n\n22.2 RegExp (Regular Expression) Objects\nA RegExp object contains a regular expression and the associated flags.\nNote\nThe form and functionality of regular expressions is modelled \nafter the regular expression facility in the Perl 5 programming \nlanguage.\n\n\n22.2.1 Patterns\nThe RegExp constructor\n applies the following grammar to the input pattern String. An error \noccurs if the grammar cannot interpret the String as an expansion of Pattern.\nSyntax\n\nPattern[UnicodeMode, N] :: \nDisjunction[?UnicodeMode, ?N]\n\n\n\nDisjunction[UnicodeMode, N] :: \nAlternative[?UnicodeMode, ?N]\n\n\nAlternative[?UnicodeMode, ?N]\n|\nDisjunction[?UnicodeMode, ?N]\n\n\n\nAlternative[UnicodeMode, N] :: \n[empty]\n\n\nAlternative[?UnicodeMode, ?N]\nTerm[?UnicodeMode, ?N]\n\n\n\nTerm[UnicodeMode, N] :: \nAssertion[?UnicodeMode, ?N]\n\n\nAtom[?UnicodeMode, ?N]\n\n\nAtom[?UnicodeMode, ?N]\nQuantifier\n\n\n\nAssertion[UnicodeMode, N] :: \n^\n\n\n$\n\n\n\\\nb\n\n\n\\\nB\n\n\n(\n?\n=\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n(\n?\n!\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n(\n?\n<=\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n(\n?\n<!\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n\nQuantifier :: \nQuantifierPrefix\n\n\nQuantifierPrefix\n?\n\n\n\nQuantifierPrefix :: \n*\n\n\n+\n\n\n?\n\n\n{\nDecimalDigits[~Sep]\n}\n\n\n{\nDecimalDigits[~Sep]\n,\n}\n\n\n{\nDecimalDigits[~Sep]\n,\nDecimalDigits[~Sep]\n}\n\n\n\nAtom[UnicodeMode, N] :: \nPatternCharacter\n\n\n.\n\n\n\\\nAtomEscape[?UnicodeMode, ?N]\n\n\nCharacterClass[?UnicodeMode]\n\n\n(\nGroupSpecifier[?UnicodeMode]\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n(\n?\n:\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n\nSyntaxCharacter :: one of ^ $ \\ . * + ? ( ) [ ] { } |\n\n\nPatternCharacter :: \nSourceCharacter but not SyntaxCharacter\n\n\n\nAtomEscape[UnicodeMode, N] :: \nDecimalEscape\n\n\nCharacterClassEscape[?UnicodeMode]\n\n\nCharacterEscape[?UnicodeMode]\n\n[+N]\nk\nGroupName[?UnicodeMode]\n\n\n\nCharacterEscape[UnicodeMode] :: \nControlEscape\n\n\nc\nControlLetter\n\n\n0\n[lookahead \u2209 DecimalDigit]\n\n\nHexEscapeSequence\n\n\nRegExpUnicodeEscapeSequence[?UnicodeMode]\n\n\nIdentityEscape[?UnicodeMode]\n\n\n\nControlEscape :: one of f n r t v\n\n\nControlLetter :: one of a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\nGroupSpecifier[UnicodeMode] :: \n[empty]\n\n\n?\nGroupName[?UnicodeMode]\n\n\n\nGroupName[UnicodeMode] :: \n<\nRegExpIdentifierName[?UnicodeMode]\n>\n\n\n\nRegExpIdentifierName[UnicodeMode] :: \nRegExpIdentifierStart[?UnicodeMode]\n\n\nRegExpIdentifierName[?UnicodeMode]\nRegExpIdentifierPart[?UnicodeMode]\n\n\n\nRegExpIdentifierStart[UnicodeMode] :: \nIdentifierStartChar\n\n\n\\\nRegExpUnicodeEscapeSequence[+UnicodeMode]\n\n[~UnicodeMode]\nUnicodeLeadSurrogate\nUnicodeTrailSurrogate\n\n\n\nRegExpIdentifierPart[UnicodeMode] :: \nIdentifierPartChar\n\n\n\\\nRegExpUnicodeEscapeSequence[+UnicodeMode]\n\n[~UnicodeMode]\nUnicodeLeadSurrogate\nUnicodeTrailSurrogate\n\n\n\nRegExpUnicodeEscapeSequence[UnicodeMode] :: [+UnicodeMode]\nu\nHexLeadSurrogate\n\\u\nHexTrailSurrogate\n\n[+UnicodeMode]\nu\nHexLeadSurrogate\n\n[+UnicodeMode]\nu\nHexTrailSurrogate\n\n[+UnicodeMode]\nu\nHexNonSurrogate\n\n[~UnicodeMode]\nu\nHex4Digits\n\n[+UnicodeMode]\nu{\nCodePoint\n}\n\n\n\nUnicodeLeadSurrogate :: \nany Unicode code point in the inclusive range 0xD800 to 0xDBFF\n\n\n\nUnicodeTrailSurrogate :: \nany Unicode code point in the inclusive range 0xDC00 to 0xDFFF\n\n\n\nEach \\u HexTrailSurrogate for which the choice of associated u HexLeadSurrogate is ambiguous shall be associated with the nearest possible u HexLeadSurrogate that would otherwise have no corresponding \\u HexTrailSurrogate.\n\nHexLeadSurrogate :: \nHex4Digits\nbut only if the MV of Hex4Digits is in the inclusive range 0xD800 to 0xDBFF\n\n\n\nHexTrailSurrogate :: \nHex4Digits\nbut only if the MV of Hex4Digits is in the inclusive range 0xDC00 to 0xDFFF\n\n\n\nHexNonSurrogate :: \nHex4Digits\nbut only if the MV of Hex4Digits is not in the inclusive range 0xD800 to 0xDFFF\n\n\n\nIdentityEscape[UnicodeMode] :: [+UnicodeMode]\nSyntaxCharacter\n\n[+UnicodeMode]\n/\n\n[~UnicodeMode]\nSourceCharacter but not UnicodeIDContinue\n\n\n\nDecimalEscape :: \nNonZeroDigit\nDecimalDigits[~Sep]opt\n[lookahead \u2209 DecimalDigit]\n\n\n\nCharacterClassEscape[UnicodeMode] :: \nd\n\n\nD\n\n\ns\n\n\nS\n\n\nw\n\n\nW\n\n[+UnicodeMode]\np{\nUnicodePropertyValueExpression\n}\n\n[+UnicodeMode]\nP{\nUnicodePropertyValueExpression\n}\n\n\n\nUnicodePropertyValueExpression :: \nUnicodePropertyName\n=\nUnicodePropertyValue\n\n\nLoneUnicodePropertyNameOrValue\n\n\n\nUnicodePropertyName :: \nUnicodePropertyNameCharacters\n\n\n\nUnicodePropertyNameCharacters :: \nUnicodePropertyNameCharacter\nUnicodePropertyNameCharactersopt\n\n\n\nUnicodePropertyValue :: \nUnicodePropertyValueCharacters\n\n\n\nLoneUnicodePropertyNameOrValue :: \nUnicodePropertyValueCharacters\n\n\n\nUnicodePropertyValueCharacters :: \nUnicodePropertyValueCharacter\nUnicodePropertyValueCharactersopt\n\n\n\nUnicodePropertyValueCharacter :: \nUnicodePropertyNameCharacter\n\n\nDecimalDigit\n\n\n\nUnicodePropertyNameCharacter :: \nControlLetter\n\n\n_\n\n\n\nCharacterClass[UnicodeMode] :: \n[\n[lookahead \u2260 ^]\nClassRanges[?UnicodeMode]\n]\n\n\n[\n^\nClassRanges[?UnicodeMode]\n]\n\n\n\nClassRanges[UnicodeMode] :: \n[empty]\n\n\nNonemptyClassRanges[?UnicodeMode]\n\n\n\nNonemptyClassRanges[UnicodeMode] :: \nClassAtom[?UnicodeMode]\n\n\nClassAtom[?UnicodeMode]\nNonemptyClassRangesNoDash[?UnicodeMode]\n\n\nClassAtom[?UnicodeMode]\n-\nClassAtom[?UnicodeMode]\nClassRanges[?UnicodeMode]\n\n\n\nNonemptyClassRangesNoDash[UnicodeMode] :: \nClassAtom[?UnicodeMode]\n\n\nClassAtomNoDash[?UnicodeMode]\nNonemptyClassRangesNoDash[?UnicodeMode]\n\n\nClassAtomNoDash[?UnicodeMode]\n-\nClassAtom[?UnicodeMode]\nClassRanges[?UnicodeMode]\n\n\n\nClassAtom[UnicodeMode] :: \n-\n\n\nClassAtomNoDash[?UnicodeMode]\n\n\n\nClassAtomNoDash[UnicodeMode] :: \nSourceCharacter but not one of \\ or ] or -\n\n\n\\\nClassEscape[?UnicodeMode]\n\n\n\nClassEscape[UnicodeMode] :: \nb\n\n[+UnicodeMode]\n-\n\n\nCharacterClassEscape[?UnicodeMode]\n\n\nCharacterEscape[?UnicodeMode]\n\n\n\nNote\nA number of productions in this section are given alternative definitions in section B.1.2.\n\n\n22.2.1.1 Static Semantics: Early Errors\nNote\nThis section is amended in B.1.2.1.\n\n\nPattern :: Disjunction\n\n\n\n\n            It is a Syntax Error if NcapturingParens \u2265 232 - 1.\n          \n\n            It is a Syntax Error if Pattern contains multiple GroupSpecifiers whose enclosed RegExpIdentifierNames have the same CapturingGroupName.\n          \n\n\nQuantifierPrefix :: \n{\nDecimalDigits\n,\nDecimalDigits\n}\n\n\n\n\n\n            It is a Syntax Error if the MV of the first DecimalDigits is larger than the MV of the second DecimalDigits.\n          \n\n\nAtomEscape :: \nk\nGroupName\n\n\n\n\n\n            It is a Syntax Error if the enclosing Pattern does not contain a GroupSpecifier with an enclosed RegExpIdentifierName whose CapturingGroupName equals the CapturingGroupName of the RegExpIdentifierName of this production's GroupName.\n          \n\n\nAtomEscape :: DecimalEscape\n\n\n\n\n            It is a Syntax Error if the CapturingGroupNumber of DecimalEscape is larger than NcapturingParens (22.2.2.1).\n          \n\n\nNonemptyClassRanges :: \nClassAtom\n-\nClassAtom\nClassRanges\n\n\n\n\n\n            It is a Syntax Error if IsCharacterClass of the first ClassAtom is true or IsCharacterClass of the second ClassAtom is true.\n          \n\n            It is a Syntax Error if IsCharacterClass of the first ClassAtom is false and IsCharacterClass of the second ClassAtom is false and the CharacterValue of the first ClassAtom is larger than the CharacterValue of the second ClassAtom.\n          \n\n\nNonemptyClassRangesNoDash :: \nClassAtomNoDash\n-\nClassAtom\nClassRanges\n\n\n\n\n\n            It is a Syntax Error if IsCharacterClass of ClassAtomNoDash is true or IsCharacterClass of ClassAtom is true.\n          \n\n            It is a Syntax Error if IsCharacterClass of ClassAtomNoDash is false and IsCharacterClass of ClassAtom is false and the CharacterValue of ClassAtomNoDash is larger than the CharacterValue of ClassAtom.\n          \n\n\nRegExpIdentifierStart :: \n\\\nRegExpUnicodeEscapeSequence\n\n\n\n\n\n            It is a Syntax Error if the CharacterValue of RegExpUnicodeEscapeSequence is not the numeric value of some code point matched by the IdentifierStartChar lexical grammar production.\n          \n\n\nRegExpIdentifierStart :: \nUnicodeLeadSurrogate\nUnicodeTrailSurrogate\n\n\n\n\n\n            It is a Syntax Error if RegExpIdentifierCodePoint of RegExpIdentifierStart is not matched by the UnicodeIDStart lexical grammar production.\n          \n\n\nRegExpIdentifierPart :: \n\\\nRegExpUnicodeEscapeSequence\n\n\n\n\n\n            It is a Syntax Error if the CharacterValue of RegExpUnicodeEscapeSequence is not the numeric value of some code point matched by the IdentifierPartChar lexical grammar production.\n          \n\n\nRegExpIdentifierPart :: \nUnicodeLeadSurrogate\nUnicodeTrailSurrogate\n\n\n\n\n\n            It is a Syntax Error if RegExpIdentifierCodePoint of RegExpIdentifierPart is not matched by the UnicodeIDContinue lexical grammar production.\n          \n\n\nUnicodePropertyValueExpression :: \nUnicodePropertyName\n=\nUnicodePropertyValue\n\n\n\n\n\n            It is a Syntax Error if the List of Unicode code points that is SourceText of UnicodePropertyName is not identical to a List of Unicode code points that is a Unicode property name or property alias listed in the \u201cProperty name and aliases\u201d column of Table 66.\n          \n\n            It is a Syntax Error if the List of Unicode code points that is SourceText of UnicodePropertyValue is not identical to a List of Unicode code points that is a value or value alias for the Unicode property or property alias given by SourceText of UnicodePropertyName listed in the \u201cProperty value and aliases\u201d column of the corresponding tables Table 68 or Table 69.\n          \n\n\nUnicodePropertyValueExpression :: LoneUnicodePropertyNameOrValue\n\n\n\n\n            It is a Syntax Error if the List of Unicode code points that is SourceText of LoneUnicodePropertyNameOrValue is not identical to a List\n of Unicode code points that is a Unicode general category or general \ncategory alias listed in the \u201cProperty value and aliases\u201d column of Table 68, nor a binary property or binary property alias listed in the \u201cProperty name and aliases\u201d column of Table 67.\n          \n\n\n\n22.2.1.2 Static Semantics: CapturingGroupNumber\nThe syntax-directed operation CapturingGroupNumber takes no arguments and returns a positive integer.\nNote\nThis section is amended in B.1.2.1.\n\nIt is defined piecewise over the following productions:\n\nDecimalEscape :: NonZeroDigit\n\n\n1. Return the MV of NonZeroDigit.\n\nDecimalEscape :: \nNonZeroDigit\nDecimalDigits\n\n\n\n1. Let n be the number of code points in DecimalDigits.2. Return (the MV of NonZeroDigit \u00d7 10n plus the MV of DecimalDigits).\nThe definitions of \u201cthe MV of NonZeroDigit\u201d and \u201cthe MV of DecimalDigits\u201d are in 12.8.3.\n\n\n22.2.1.3 Static Semantics: IsCharacterClass\nThe syntax-directed operation IsCharacterClass takes no arguments and returns a Boolean.\nNote\nThis section is amended in B.1.2.2.\n\nIt is defined piecewise over the following productions:\n\nClassAtom :: \n-\n\n\n\nClassAtomNoDash :: \nSourceCharacter but not one of \\ or ] or -\n\n\n\nClassEscape :: \nb\n\n\n-\n\n\nCharacterEscape\n\n\n\n1. Return false.\n\nClassEscape :: CharacterClassEscape\n\n\n1. Return true.\n\n\n22.2.1.4 Static Semantics: CharacterValue\nThe syntax-directed operation CharacterValue takes no arguments and returns a non-negative integer.\nNote 1\nThis section is amended in B.1.2.3.\n\nIt is defined piecewise over the following productions:\n\nClassAtom :: -\n\n\n1. Return the numeric value of U+002D (HYPHEN-MINUS).\n\nClassAtomNoDash :: SourceCharacter but not one of \\ or ] or -\n\n\n1. Let ch be the code point matched by SourceCharacter.2. Return the numeric value of ch.\n\nClassEscape :: b\n\n\n1. Return the numeric value of U+0008 (BACKSPACE).\n\nClassEscape :: -\n\n\n1. Return the numeric value of U+002D (HYPHEN-MINUS).\n\nCharacterEscape :: ControlEscape\n\n\n1. Return the numeric value according to Table 65.\nTable 65: ControlEscape Code Point Values\n\n\n\n                ControlEscape\n              \n\n                Numeric Value\n              \n\n                Code Point\n              \n\n                Unicode Name\n              \n\n                Symbol\n              \n\n\n\nt\n\n\n                9\n              \n\nU+0009\n\n\n                CHARACTER TABULATION\n              \n\n                <HT>\n              \n\n\n\nn\n\n\n                10\n              \n\nU+000A\n\n\n                LINE FEED (LF)\n              \n\n                <LF>\n              \n\n\n\nv\n\n\n                11\n              \n\nU+000B\n\n\n                LINE TABULATION\n              \n\n                <VT>\n              \n\n\n\nf\n\n\n                12\n              \n\nU+000C\n\n\n                FORM FEED (FF)\n              \n\n                <FF>\n              \n\n\n\nr\n\n\n                13\n              \n\nU+000D\n\n\n                CARRIAGE RETURN (CR)\n              \n\n                <CR>\n              \n\n\n\n\nCharacterEscape :: \nc\nControlLetter\n\n\n\n1. Let ch be the code point matched by ControlLetter.2. Let i be the numeric value of ch.3. Return the remainder of dividing i by 32.\n\nCharacterEscape :: \n0\n[lookahead \u2209 DecimalDigit]\n\n\n\n1. Return the numeric value of U+0000 (NULL).\nNote 2\n\\0 represents the <NUL> character and cannot be followed by a decimal digit.\n\n\nCharacterEscape :: HexEscapeSequence\n\n\n1. Return the MV of HexEscapeSequence.\n\nRegExpUnicodeEscapeSequence :: \nu\nHexLeadSurrogate\n\\u\nHexTrailSurrogate\n\n\n\n1. Let lead be the CharacterValue of HexLeadSurrogate.2. Let trail be the CharacterValue of HexTrailSurrogate.3. Let cp be UTF16SurrogatePairToCodePoint(lead, trail).4. Return the numeric value of cp.\n\nRegExpUnicodeEscapeSequence :: \nu\nHex4Digits\n\n\n\n1. Return the MV of Hex4Digits.\n\nRegExpUnicodeEscapeSequence :: \nu{\nCodePoint\n}\n\n\n\n1. Return the MV of CodePoint.\n\nHexLeadSurrogate :: Hex4Digits\n\n\nHexTrailSurrogate :: Hex4Digits\n\n\nHexNonSurrogate :: Hex4Digits\n\n\n1. Return the MV of HexDigits.\n\nCharacterEscape :: IdentityEscape\n\n\n1. Let ch be the code point matched by IdentityEscape.2. Return the numeric value of ch.\n\n\n22.2.1.5 Static Semantics: SourceText\nThe syntax-directed operation SourceText takes no arguments and returns a List of code points. It is defined piecewise over the following productions:\n\nUnicodePropertyNameCharacters :: \nUnicodePropertyNameCharacter\nUnicodePropertyNameCharactersopt\n\n\n\nUnicodePropertyValueCharacters :: \nUnicodePropertyValueCharacter\nUnicodePropertyValueCharactersopt\n\n\n\n1. Return the List, in source text order, of Unicode code points in the source text matched by this production.\n\n\n22.2.1.6 Static Semantics: CapturingGroupName\nThe syntax-directed operation CapturingGroupName takes no \narguments and returns a String. It is defined piecewise over the \nfollowing productions:\n\nRegExpIdentifierName :: \nRegExpIdentifierStart\n\n\nRegExpIdentifierName\nRegExpIdentifierPart\n\n\n\n1. Let idTextUnescaped be RegExpIdentifierCodePoints of RegExpIdentifierName.2. Return CodePointsToString(idTextUnescaped).\n\n\n22.2.1.7 Static Semantics: RegExpIdentifierCodePoints\nThe syntax-directed operation RegExpIdentifierCodePoints takes no arguments and returns a List of code points. It is defined piecewise over the following productions:\n\nRegExpIdentifierName :: RegExpIdentifierStart\n\n\n1. Let cp be RegExpIdentifierCodePoint of RegExpIdentifierStart.2. Return \u00ab cp \u00bb.\n\nRegExpIdentifierName :: \nRegExpIdentifierName\nRegExpIdentifierPart\n\n\n\n1. Let cps be RegExpIdentifierCodePoints of the derived RegExpIdentifierName.2. Let cp be RegExpIdentifierCodePoint of RegExpIdentifierPart.3. Return the list-concatenation of cps and \u00ab cp \u00bb.\n\n\n22.2.1.8 Static Semantics: RegExpIdentifierCodePoint\nThe syntax-directed operation RegExpIdentifierCodePoint takes\n no arguments and returns a code point. It is defined piecewise over the\n following productions:\n\nRegExpIdentifierStart :: IdentifierStartChar\n\n\n1. Return the code point matched by IdentifierStartChar.\n\nRegExpIdentifierPart :: IdentifierPartChar\n\n\n1. Return the code point matched by IdentifierPartChar.\n\nRegExpIdentifierStart :: \n\\\nRegExpUnicodeEscapeSequence\n\n\n\nRegExpIdentifierPart :: \n\\\nRegExpUnicodeEscapeSequence\n\n\n\n1. Return the code point whose numeric value is the CharacterValue of RegExpUnicodeEscapeSequence.\n\nRegExpIdentifierStart :: \nUnicodeLeadSurrogate\nUnicodeTrailSurrogate\n\n\n\nRegExpIdentifierPart :: \nUnicodeLeadSurrogate\nUnicodeTrailSurrogate\n\n\n\n1. Let lead be the code unit whose numeric value is that of the code point matched by UnicodeLeadSurrogate.2. Let trail be the code unit whose numeric value is that of the code point matched by UnicodeTrailSurrogate.3. Return UTF16SurrogatePairToCodePoint(lead, trail).\n\n\n\n22.2.2 Pattern Semantics\nA regular expression pattern is converted into an Abstract Closure\n using the process described below. An implementation is encouraged to \nuse more efficient algorithms than the ones listed below, as long as the\n results are the same. The Abstract Closure is used as the value of a RegExp object's [[RegExpMatcher]] internal slot.\nA Pattern is either a BMP pattern or a Unicode pattern depending upon whether or not its associated flags contain a u.\n A BMP pattern matches against a String interpreted as consisting of a \nsequence of 16-bit values that are Unicode code points in the range of \nthe Basic Multilingual Plane. A Unicode pattern matches against a String\n interpreted as consisting of Unicode code points encoded using UTF-16. \nIn the context of describing the behaviour of a BMP pattern \u201ccharacter\u201d \nmeans a single 16-bit Unicode BMP code point. In the context of \ndescribing the behaviour of a Unicode pattern \u201ccharacter\u201d means a UTF-16\n encoded code point (6.1.4). In either context, \u201ccharacter value\u201d means the numeric value of the corresponding non-encoded code point.\nThe syntax and semantics of Pattern is defined as if the source text for the Pattern was a List of SourceCharacter values where each SourceCharacter corresponds to a Unicode code point. If a BMP pattern contains a non-BMP SourceCharacter the entire pattern is encoded using UTF-16 and the individual code units of that encoding are used as the elements of the List.\nNote\nFor example, consider a pattern expressed in source text as \nthe single non-BMP character U+1D11E (MUSICAL SYMBOL G CLEF). \nInterpreted as a Unicode pattern, it would be a single element \n(character) List\n consisting of the single code point 0x1D11E. However, interpreted as a \nBMP pattern, it is first UTF-16 encoded to produce a two element List consisting of the code units 0xD834 and 0xDD1E.\nPatterns are passed to the RegExp constructor\n as ECMAScript String values in which non-BMP characters are UTF-16 \nencoded. For example, the single character MUSICAL SYMBOL G CLEF \npattern, expressed as a String value, is a String of length 2 whose \nelements were the code units 0xD834 and 0xDD1E. So no further \ntranslation of the string would be necessary to process it as a BMP \npattern consisting of two pattern characters. However, to process it as a\n Unicode pattern UTF16SurrogatePairToCodePoint must be used in producing a List whose sole element is a single pattern character, the code point U+1D11E.\nAn implementation may not actually perform such translations \nto or from UTF-16, but the semantics of this specification requires that\n the result of pattern matching be as if such translations were \nperformed.\n\n\n22.2.2.1 Notation\nThe descriptions below use the following aliases:\n\n\nInput is a List\n whose elements are the characters of the String being matched by the \nregular expression pattern. Each character is either a code unit or a \ncode point, depending upon the kind of pattern involved. The notation Input[n] means the nth character of Input, where n can range between 0 (inclusive) and InputLength (exclusive).\n          \n\nInputLength is the number of characters in Input.\n          \n\nNcapturingParens is the total number of left-capturing parentheses (i.e. the total number of \nAtom :: \n(\nGroupSpecifier\nDisjunction\n)\n\n\n Parse Nodes) in the pattern. A left-capturing parenthesis is any ( pattern character that is matched by the ( terminal of the \nAtom :: \n(\nGroupSpecifier\nDisjunction\n)\n\n\n production.\n          \n\nDotAll is true if the RegExp object's [[OriginalFlags]] internal slot contains \"s\" and otherwise is false.\n          \n\nIgnoreCase is true if the RegExp object's [[OriginalFlags]] internal slot contains \"i\" and otherwise is false.\n          \n\nMultiline is true if the RegExp object's [[OriginalFlags]] internal slot contains \"m\" and otherwise is false.\n          \n\nUnicode is true if the RegExp object's [[OriginalFlags]] internal slot contains \"u\" and otherwise is false.\n          \n\nWordCharacters is the mathematical set that is the union of all sixty-three characters in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\" (letters, numbers, and U+005F (LOW LINE) in the Unicode Basic Latin block) and all characters c for which c is not in that set but Canonicalize(c) is. WordCharacters cannot contain more than sixty-three characters unless Unicode and IgnoreCase are both true.\n          \n\nFurthermore, the descriptions below use the following internal data structures:\n\n\n            A CharSet is a mathematical set of characters. When the Unicode flag is true,\n \u201call characters\u201d means the CharSet containing all code point values; \notherwise \u201call characters\u201d means the CharSet containing all code unit \nvalues.\n          \n\n            A Range is an ordered pair (startIndex, endIndex) that represents the range of characters included in a capture, where startIndex is an integer representing the start index (inclusive) of the range within Input, and endIndex is an integer representing the end index (exclusive) of the range within Input. For any Range, these indices must satisfy the invariant that startIndex \u2264 endIndex.\n          \n\n            A State is an ordered pair (endIndex, captures) where endIndex is an integer and captures is a List of NcapturingParens values. States are used to represent partial match states in the regular expression matching algorithms. The endIndex is one plus the index of the last input character matched so far by the pattern, while captures holds the results of capturing parentheses. The nth element of captures is either a Range representing the range of characters captured by the nth set of capturing parentheses, or undefined if the nth\n set of capturing parentheses hasn't been reached yet. Due to \nbacktracking, many States may be in use at any time during the matching \nprocess.\n          \n\n            A MatchResult is either a State or the special token failure that indicates that the match failed.\n          \n\n            A Continuation is an Abstract Closure\n that takes one State argument and returns a MatchResult result. The \nContinuation attempts to match the remaining portion (specified by the \nclosure's captured values) of the pattern against Input, \nstarting at the intermediate state given by its State argument. If the \nmatch succeeds, the Continuation returns the final State that it \nreached; if the match fails, the Continuation returns failure.\n          \n\n            A Matcher is an Abstract Closure\n that takes two arguments\u2014a State and a Continuation\u2014and returns a \nMatchResult result. A Matcher attempts to match a middle subpattern \n(specified by the closure's captured values) of the pattern against Input,\n starting at the intermediate state given by its State argument. The \nContinuation argument should be a closure that matches the rest of the \npattern. After matching the subpattern of a pattern to obtain a new \nState, the Matcher then calls Continuation on that new State to test if \nthe rest of the pattern can match as well. If it can, the Matcher \nreturns the State returned by Continuation; if not, the Matcher may try \ndifferent choices at its choice points, repeatedly calling Continuation \nuntil it either succeeds or all possibilities have been exhausted.\n          \n\n\n\n22.2.2.2 Runtime Semantics: CompilePattern\nThe syntax-directed operation CompilePattern takes no arguments and returns an Abstract Closure that takes a List of characters and a non-negative integer and returns a MatchResult. It is defined piecewise over the following productions:\n\nPattern :: Disjunction\n\n\n1. Let m be CompileSubpattern of Disjunction with argument forward.2. Return a new Abstract Closure with parameters (inputChars, index) that captures m and performs the following steps when called:a. Assert: inputChars is a List of characters.b. Assert: index is a non-negative integer which is \u2264 the number of characters in inputChars.c. Let Input be inputChars. This alias will be used throughout the algorithms in 22.2.2.d. Let InputLength be the number of characters contained in Input. This alias will be used throughout the algorithms in 22.2.2.e. Let c be a new Continuation with parameters (y) that captures nothing and performs the following steps when called:i. Assert: y is a State.ii. Return y.f. Let cap be a List of NcapturingParens undefined values, indexed 1 through NcapturingParens.g. Let x be the State (index, cap).h. Return m(x, c).\nNote\nA Pattern compiles to an Abstract Closure value. RegExpBuiltinExec can then apply this procedure to a List of characters and an offset within that List to determine whether the pattern would match starting at exactly that offset within the List, and, if it does match, what the values of the capturing parentheses would be. The algorithms in 22.2.2 are designed so that compiling a pattern may throw a SyntaxError exception; on the other hand, once the pattern is successfully compiled, applying the resulting Abstract Closure to find a match in a List of characters cannot throw an exception (except for any implementation-defined exceptions that can occur anywhere such as out-of-memory).\n\n\n\n22.2.2.3 Runtime Semantics: CompileSubpattern\nThe syntax-directed operation CompileSubpattern takes argument direction (forward or backward) and returns a Matcher.\nNote 1\nThis section is amended in B.1.2.4.\n\n\nIt is defined piecewise over the following productions:\n\nDisjunction :: \nAlternative\n|\nDisjunction\n\n\n\n1. Let m1 be CompileSubpattern of Alternative with argument direction.2. Let m2 be CompileSubpattern of Disjunction with argument direction.3. Return a new Matcher with parameters (x, c) that captures m1 and m2 and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let r be m1(x, c).d. If r is not failure, return r.e. Return m2(x, c).\nNote 2\nThe | regular expression operator separates two alternatives. The pattern first tries to match the left Alternative (followed by the sequel of the regular expression); if it fails, it tries to match the right Disjunction (followed by the sequel of the regular expression). If the left Alternative, the right Disjunction, and the sequel all have choice points, all choices in the sequel are tried before moving on to the next choice in the left Alternative. If choices in the left Alternative are exhausted, the right Disjunction is tried instead of the left Alternative. Any capturing parentheses inside a portion of the pattern skipped by | produce undefined values instead of Strings. Thus, for example,\n/a|ab/.exec(\"abc\")\nreturns the result \"a\" and not \"ab\". Moreover,\n/((a)|(ab))((c)|(bc))/.exec(\"abc\")\nreturns the array\n[\"abc\", \"a\", \"a\", undefined, \"bc\", undefined, \"bc\"]\nand not\n[\"abc\", \"ab\", undefined, \"ab\", \"c\", \"c\", undefined]\nThe order in which the two alternatives are tried is independent of the value of direction.\n\n\n\nAlternative :: [empty]\n\n\n1. Return a new Matcher with parameters (x, c) that captures nothing and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Return c(x).\n\nAlternative :: \nAlternative\nTerm\n\n\n\n1. Let m1 be CompileSubpattern of Alternative with argument direction.2. Let m2 be CompileSubpattern of Term with argument direction.3. If direction is forward, thena. Return a new Matcher with parameters (x, c) that captures m1 and m2 and performs the following steps when called:i. Assert: x is a State.ii. Assert: c is a Continuation.iii. Let d be a new Continuation with parameters (y) that captures c and m2 and performs the following steps when called:1. Assert: y is a State.2. Return m2(y, c).iv. Return m1(x, d).4. Else,a. Assert: direction is backward.b. Return a new Matcher with parameters (x, c) that captures m1 and m2 and performs the following steps when called:i. Assert: x is a State.ii. Assert: c is a Continuation.iii. Let d be a new Continuation with parameters (y) that captures c and m1 and performs the following steps when called:1. Assert: y is a State.2. Return m1(y, c).iv. Return m2(x, d).\nNote 3\nConsecutive Terms try to simultaneously match consecutive portions of Input. When direction is forward, if the left Alternative, the right Term,\n and the sequel of the regular expression all have choice points, all \nchoices in the sequel are tried before moving on to the next choice in \nthe right Term, and all choices in the right Term are tried before moving on to the next choice in the left Alternative. When direction is backward, the evaluation order of Alternative and Term are reversed.\n\n\n\nTerm :: Assertion\n\n\n1. Return CompileAssertion of Assertion.\nNote 4\nThe resulting Matcher is independent of direction.\n\n\nTerm :: Atom\n\n\n1. Return CompileAtom of Atom with argument direction.\n\nTerm :: \nAtom\nQuantifier\n\n\n\n1. Let m be CompileAtom of Atom with argument direction.2. Let q be CompileQuantifier of Quantifier.3. Assert: q.[[Min]] \u2264 q.[[Max]].4. Let parenIndex be the number of left-capturing parentheses in the entire regular expression that occur to the left of this Term. This is the total number of \nAtom :: \n(\nGroupSpecifier\nDisjunction\n)\n\n\n Parse Nodes prior to or enclosing this Term.5. Let parenCount be the number of left-capturing parentheses in Atom. This is the total number of \nAtom :: \n(\nGroupSpecifier\nDisjunction\n)\n\n\n Parse Nodes enclosed by Atom.6. Return a new Matcher with parameters (x, c) that captures m, q, parenIndex, and parenCount and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Return RepeatMatcher(m, q.[[Min]], q.[[Max]], q.[[Greedy]], x, c, parenIndex, parenCount).\n\n22.2.2.3.1 RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )\nThe abstract operation RepeatMatcher takes arguments m (a Matcher), min (a non-negative integer), max (a non-negative integer or +\u221e), greedy (a Boolean), x (a State), c (a Continuation), parenIndex (a non-negative integer), and parenCount (a non-negative integer) and returns a MatchResult. It performs the following steps when called:\n1. If max = 0, return c(x).2. Let d be a new Continuation with parameters (y) that captures m, min, max, greedy, x, c, parenIndex, and parenCount and performs the following steps when called:a. Assert: y is a State.b. If min = 0 and y's endIndex = x's endIndex, return failure.c. If min = 0, let min2 be 0; otherwise let min2 be min - 1.d. If max is +\u221e, let max2 be +\u221e; otherwise let max2 be max - 1.e. Return RepeatMatcher(m, min2, max2, greedy, y, c, parenIndex, parenCount).3. Let cap be a copy of x's captures List.4. For each integer k such that parenIndex < k and k \u2264 parenIndex + parenCount, set cap[k] to undefined.5. Let e be x's endIndex.6. Let xr be the State (e, cap).7. If min \u2260 0, return m(xr, d).8. If greedy is false, thena. Let z be c(x).b. If z is not failure, return z.c. Return m(xr, d).9. Let z be m(xr, d).10. If z is not failure, return z.11. Return c(x).\nNote 1\nAn Atom followed by a Quantifier is repeated the number of times specified by the Quantifier. A Quantifier can be non-greedy, in which case the Atom pattern is repeated as few times as possible while still matching the sequel, or it can be greedy, in which case the Atom pattern is repeated as many times as possible while still matching the sequel. The Atom pattern is repeated rather than the input character sequence that it matches, so different repetitions of the Atom can match different input substrings.\n\nNote 2\nIf the Atom and the sequel of the regular expression all have choice points, the Atom\n is first matched as many (or as few, if non-greedy) times as possible. \nAll choices in the sequel are tried before moving on to the next choice \nin the last repetition of Atom. All choices in the last (nth) repetition of Atom are tried before moving on to the next choice in the next-to-last (n - 1)st repetition of Atom; at which point it may turn out that more or fewer repetitions of Atom\n are now possible; these are exhausted (again, starting with either as \nfew or as many as possible) before moving on to the next choice in the \n(n - 1)st repetition of Atom and so on.\nCompare\n/a[a-z]{2,4}/.exec(\"abcdefghi\")\nwhich returns \"abcde\" with\n/a[a-z]{2,4}?/.exec(\"abcdefghi\")\nwhich returns \"abc\".\nConsider also\n/(aa|aabaac|ba|b|c)*/.exec(\"aabaac\")\nwhich, by the choice point ordering above, returns the array\n[\"aaba\", \"ba\"]\nand not any of:\n[\"aabaac\", \"aabaac\"]\n[\"aabaac\", \"c\"]\nThe above ordering of choice points can be used to write a\n regular expression that calculates the greatest common divisor of two \nnumbers (represented in unary notation). The following example \ncalculates the gcd of 10 and 15:\n\"aaaaaaaaaa,aaaaaaaaaaaaaaa\".replace(/^(a+)\\1*,\\1+$/, \"$1\")\nwhich returns the gcd in unary notation \"aaaaa\".\n\nNote 3\nStep 4 of the RepeatMatcher clears Atom's captures each time Atom is repeated. We can see its behaviour in the regular expression\n/(z)((a+)?(b+)?(c))*/.exec(\"zaacbbbcac\")\nwhich returns the array\n[\"zaacbbbcac\", \"z\", \"ac\", \"a\", undefined, \"c\"]\nand not\n[\"zaacbbbcac\", \"z\", \"ac\", \"a\", \"bbb\", \"c\"]\nbecause each iteration of the outermost * clears all captured Strings contained in the quantified Atom, which in this case includes capture Strings numbered 2, 3, 4, and 5.\n\nNote 4\nStep 2.b of the RepeatMatcher states that once the minimum number of repetitions has been satisfied, any more expansions of Atom\n that match the empty character sequence are not considered for further \nrepetitions. This prevents the regular expression engine from falling \ninto an infinite loop on patterns such as:\n/(a*)*/.exec(\"b\")\nor the slightly more complicated:\n/(a*)b\\1+/.exec(\"baaaac\")\nwhich returns the array\n[\"b\", \"\"]\n\n\n\n\n22.2.2.4 Runtime Semantics: CompileAssertion\nThe syntax-directed operation CompileAssertion takes no arguments and returns a Matcher.\nNote 1\nThis section is amended in B.1.2.5.\n\nIt is defined piecewise over the following productions:\n\nAssertion :: ^\n\n\n1. Return a new Matcher with parameters (x, c) that captures nothing and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let e be x's endIndex.d. If e = 0, or if Multiline is true and the character Input[e - 1] is one of LineTerminator, theni. Return c(x).e. Return failure.\nNote 2\nEven when the y flag is used with a pattern, ^ always matches only at the beginning of Input, or (if Multiline is true) at the beginning of a line.\n\n\nAssertion :: $\n\n\n1. Return a new Matcher with parameters (x, c) that captures nothing and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let e be x's endIndex.d. If e = InputLength, or if Multiline is true and the character Input[e] is one of LineTerminator, theni. Return c(x).e. Return failure.\n\nAssertion :: \n\\\nb\n\n\n\n1. Return a new Matcher with parameters (x, c) that captures nothing and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let e be x's endIndex.d. Let a be IsWordChar(e - 1).e. Let b be IsWordChar(e).f. If a is true and b is false, or if a is false and b is true, return c(x).g. Return failure.\n\nAssertion :: \n\\\nB\n\n\n\n1. Return a new Matcher with parameters (x, c) that captures nothing and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let e be x's endIndex.d. Let a be IsWordChar(e - 1).e. Let b be IsWordChar(e).f. If a is true and b is true, or if a is false and b is false, return c(x).g. Return failure.\n\nAssertion :: \n(\n?\n=\nDisjunction\n)\n\n\n\n1. Let m be CompileSubpattern of Disjunction with argument forward.2. Return a new Matcher with parameters (x, c) that captures m and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let d be a new Continuation with parameters (y) that captures nothing and performs the following steps when called:i. Assert: y is a State.ii. Return y.d. Let r be m(x, d).e. If r is failure, return failure.f. Let y be r's State.g. Let cap be y's captures List.h. Let xe be x's endIndex.i. Let z be the State (xe, cap).j. Return c(z).\n\nAssertion :: \n(\n?\n!\nDisjunction\n)\n\n\n\n1. Let m be CompileSubpattern of Disjunction with argument forward.2. Return a new Matcher with parameters (x, c) that captures m and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let d be a new Continuation with parameters (y) that captures nothing and performs the following steps when called:i. Assert: y is a State.ii. Return y.d. Let r be m(x, d).e. If r is not failure, return failure.f. Return c(x).\n\nAssertion :: \n(\n?\n<=\nDisjunction\n)\n\n\n\n1. Let m be CompileSubpattern of Disjunction with argument backward.2. Return a new Matcher with parameters (x, c) that captures m and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let d be a new Continuation with parameters (y) that captures nothing and performs the following steps when called:i. Assert: y is a State.ii. Return y.d. Let r be m(x, d).e. If r is failure, return failure.f. Let y be r's State.g. Let cap be y's captures List.h. Let xe be x's endIndex.i. Let z be the State (xe, cap).j. Return c(z).\n\nAssertion :: \n(\n?\n<!\nDisjunction\n)\n\n\n\n1. Let m be CompileSubpattern of Disjunction with argument backward.2. Return a new Matcher with parameters (x, c) that captures m and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let d be a new Continuation with parameters (y) that captures nothing and performs the following steps when called:i. Assert: y is a State.ii. Return y.d. Let r be m(x, d).e. If r is not failure, return failure.f. Return c(x).\n\n22.2.2.4.1 IsWordChar ( e )\nThe abstract operation IsWordChar takes argument e (an integer) and returns a Boolean. It performs the following steps when called:\n1. If e = -1 or e is InputLength, return false.2. Let c be the character Input[e].3. If c is in WordCharacters, return true.4. Return false.\n\n\n\n22.2.2.5 Runtime Semantics: CompileQuantifier\nThe syntax-directed operation CompileQuantifier takes no arguments and returns a Record with fields [[Min]] (a non-negative integer), [[Max]] (a non-negative integer or +\u221e), and [[Greedy]] (a Boolean). It is defined piecewise over the following productions:\n\nQuantifier :: QuantifierPrefix\n\n\n1. Let qp be CompileQuantifierPrefix of QuantifierPrefix.2. Return the Record { [[Min]]: qp.[[Min]], [[Max]]: qp.[[Max]], [[Greedy]]: true }.\n\nQuantifier :: \nQuantifierPrefix\n?\n\n\n\n1. Let qp be CompileQuantifierPrefix of QuantifierPrefix.2. Return the Record { [[Min]]: qp.[[Min]], [[Max]]: qp.[[Max]], [[Greedy]]: false }.\n\n\n22.2.2.6 Runtime Semantics: CompileQuantifierPrefix\nThe syntax-directed operation CompileQuantifierPrefix takes no arguments and returns a Record with fields [[Min]] (a non-negative integer) and [[Max]] (a non-negative integer or +\u221e). It is defined piecewise over the following productions:\n\nQuantifierPrefix :: *\n\n\n1. Return the Record { [[Min]]: 0, [[Max]]: +\u221e }.\n\nQuantifierPrefix :: +\n\n\n1. Return the Record { [[Min]]: 1, [[Max]]: +\u221e }.\n\nQuantifierPrefix :: ?\n\n\n1. Return the Record { [[Min]]: 0, [[Max]]: 1 }.\n\nQuantifierPrefix :: \n{\nDecimalDigits\n}\n\n\n\n1. Let i be the MV of DecimalDigits (see 12.8.3).2. Return the Record { [[Min]]: i, [[Max]]: i }.\n\nQuantifierPrefix :: \n{\nDecimalDigits\n,\n}\n\n\n\n1. Let i be the MV of DecimalDigits.2. Return the Record { [[Min]]: i, [[Max]]: +\u221e }.\n\nQuantifierPrefix :: \n{\nDecimalDigits\n,\nDecimalDigits\n}\n\n\n\n1. Let i be the MV of the first DecimalDigits.2. Let j be the MV of the second DecimalDigits.3. Return the Record { [[Min]]: i, [[Max]]: j }.\n\n\n22.2.2.7 Runtime Semantics: CompileAtom\nThe syntax-directed operation CompileAtom takes argument direction (forward or backward) and returns a Matcher.\nNote 1\nThis section is amended in B.1.2.6.\n\n\nIt is defined piecewise over the following productions:\n\nAtom :: PatternCharacter\n\n\n1. Let ch be the character matched by PatternCharacter.2. Let A be a one-element CharSet containing the character ch.3. Return CharacterSetMatcher(A, false, direction).\n\nAtom :: .\n\n\n1. Let A be the CharSet of all characters.2. If DotAll is not true, thena. Remove from A all characters corresponding to a code point on the right-hand side of the LineTerminator production.3. Return CharacterSetMatcher(A, false, direction).\n\nAtom :: CharacterClass\n\n\n1. Let cc be CompileCharacterClass of CharacterClass.2. Return CharacterSetMatcher(cc.[[CharSet]], cc.[[Invert]], direction).\n\nAtom :: \n(\nGroupSpecifier\nDisjunction\n)\n\n\n\n1. Let m be CompileSubpattern of Disjunction with argument direction.2. Let parenIndex be the number of left-capturing parentheses in the entire regular expression that occur to the left of this Atom. This is the total number of \nAtom :: \n(\nGroupSpecifier\nDisjunction\n)\n\n\n Parse Nodes prior to or enclosing this Atom.3. Return a new Matcher with parameters (x, c) that captures direction, m, and parenIndex and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let d be a new Continuation with parameters (y) that captures x, c, direction, and parenIndex and performs the following steps when called:i. Assert: y is a State.ii. Let cap be a copy of y's captures List.iii. Let xe be x's endIndex.iv. Let ye be y's endIndex.v. If direction is forward, then1. Assert: xe \u2264 ye.2. Let r be the Range (xe, ye).vi. Else,1. Assert: direction is backward.2. Assert: ye \u2264 xe.3. Let r be the Range (ye, xe).vii. Set cap[parenIndex + 1] to r.viii. Let z be the State (ye, cap).ix. Return c(z).d. Return m(x, d).\n\nAtom :: \n(\n?\n:\nDisjunction\n)\n\n\n\n1. Return CompileSubpattern of Disjunction with argument direction.\n\n\nAtomEscape :: DecimalEscape\n\n\n1. Let n be the CapturingGroupNumber of DecimalEscape.2. Assert: n \u2264 NcapturingParens.3. Return BackreferenceMatcher(n, direction).\nNote 2\nAn escape sequence of the form \\ followed by a non-zero decimal number n matches the result of the nth set of capturing parentheses (22.2.2.1). It is an error if the regular expression has fewer than n capturing parentheses. If the regular expression has n or more capturing parentheses but the nth one is undefined because it has not captured anything, then the backreference always succeeds.\n\n\nAtomEscape :: CharacterEscape\n\n\n1. Let cv be the CharacterValue of CharacterEscape.2. Let ch be the character whose character value is cv.3. Let A be a one-element CharSet containing the character ch.4. Return CharacterSetMatcher(A, false, direction).\n\nAtomEscape :: CharacterClassEscape\n\n\n1. Let A be CompileToCharSet of CharacterClassEscape.2. Return CharacterSetMatcher(A, false, direction).\n\nAtomEscape :: \nk\nGroupName\n\n\n\n1. Search the enclosing Pattern for an instance of a GroupSpecifier containing a RegExpIdentifierName which has a CapturingGroupName equal to the CapturingGroupName of the RegExpIdentifierName contained in GroupName.2. Assert: A unique such GroupSpecifier is found.3. Let parenIndex be the number of left-capturing parentheses in the entire regular expression that occur to the left of the located GroupSpecifier. This is the total number of \nAtom :: \n(\nGroupSpecifier\nDisjunction\n)\n\n\n Parse Nodes prior to or enclosing the located GroupSpecifier, including its immediately enclosing Atom.4. Return BackreferenceMatcher(parenIndex, direction).\n\n22.2.2.7.1 CharacterSetMatcher ( A, invert, direction )\nThe abstract operation CharacterSetMatcher takes arguments A (a CharSet), invert (a Boolean), and direction (forward or backward) and returns a Matcher. It performs the following steps when called:\n1. Return a new Matcher with parameters (x, c) that captures A, invert, and direction and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let e be x's endIndex.d. If direction is forward, let f be e + 1.e. Else, let f be e - 1.f. If f < 0 or f > InputLength, return failure.g. Let index be min(e, f).h. Let ch be the character Input[index].i. Let cc be Canonicalize(ch).j. If there exists a member a of A such that Canonicalize(a) is cc, let found be true. Otherwise, let found be false.k. If invert is false and found is false, return failure.l. If invert is true and found is true, return failure.m. Let cap be x's captures List.n. Let y be the State (f, cap).o. Return c(y).\n\n\n22.2.2.7.2 BackreferenceMatcher ( n, direction )\nThe abstract operation BackreferenceMatcher takes arguments n (a positive integer) and direction (forward or backward) and returns a Matcher. It performs the following steps when called:\n1. Assert: n \u2265 1.2. Return a new Matcher with parameters (x, c) that captures n and direction and performs the following steps when called:a. Assert: x is a State.b. Assert: c is a Continuation.c. Let cap be x's captures List.d. Let r be cap[n].e. If r is undefined, return c(x).f. Let e be x's endIndex.g. Let rs be r's startIndex.h. Let re be r's endIndex.i. Let len be re - rs.j. If direction is forward, let f be e + len.k. Else, let f be e - len.l. If f < 0 or f > InputLength, return failure.m. Let g be min(e, f).n. If there exists an integer i between 0 (inclusive) and len (exclusive) such that Canonicalize(Input[rs + i]) is not the same character value as Canonicalize(Input[g + i]), return failure.o. Let y be the State (f, cap).p. Return c(y).\n\n\n22.2.2.7.3 Canonicalize ( ch )\nThe abstract operation Canonicalize takes argument ch (a character) and returns a character. It performs the following steps when called:\n1. If Unicode is true and IgnoreCase is true, thena. If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for ch, return the result of applying that mapping to ch.b. Return ch.2. If IgnoreCase is false, return ch.3. Assert: ch is a UTF-16 code unit.4. Let cp be the code point whose numeric value is that of ch.5. Let u be the result of toUppercase(\u00ab cp \u00bb), according to the Unicode Default Case Conversion algorithm.6. Let uStr be CodePointsToString(u).7. If uStr does not consist of a single code unit, return ch.8. Let cu be uStr's single code unit element.9. If the numeric value of ch \u2265 128 and the numeric value of cu < 128, return ch.10. Return cu.\nNote 1\nParentheses of the form ( Disjunction ) serve both to group the components of the Disjunction pattern together and to save the result of the match. The result can be used either in a backreference (\\\n followed by a non-zero decimal number), referenced in a replace String,\n or returned as part of an array from the regular expression matching Abstract Closure. To inhibit the capturing behaviour of parentheses, use the form (?: Disjunction ) instead.\n\nNote 2\nThe form (?= Disjunction ) specifies a zero-width positive lookahead. In order for it to succeed, the pattern inside Disjunction must match at the current position, but the current position is not advanced before matching the sequel. If Disjunction\n can match at the current position in several ways, only the first one \nis tried. Unlike other regular expression operators, there is no \nbacktracking into a (?= form (this unusual behaviour is inherited from Perl). This only matters when the Disjunction contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.\nFor example,\n/(?=(a+))/.exec(\"baaabac\")\nmatches the empty String immediately after the first b and therefore returns the array:\n[\"\", \"aaa\"]\nTo illustrate the lack of backtracking into the lookahead, consider:\n/(?=(a+))a*b\\1/.exec(\"baaabac\")\nThis expression returns\n[\"aba\", \"a\"]\nand not:\n[\"aaaba\", \"a\"]\n\nNote 3\nThe form (?! Disjunction ) specifies a zero-width negative lookahead. In order for it to succeed, the pattern inside Disjunction must fail to match at the current position. The current position is not advanced before matching the sequel. Disjunction can contain capturing parentheses, but backreferences to them only make sense from within Disjunction itself. Backreferences to these capturing parentheses from elsewhere in the pattern always return undefined because the negative lookahead must fail for the pattern to succeed. For example,\n/(.*?)a(?!(a+)b\\2c)\\2(.*)/.exec(\"baaabaac\")\nlooks for an a not immediately followed by some positive number n of a's, a b, another n a's (specified by the first \\2) and a c. The second \\2 is outside the negative lookahead, so it matches against undefined and therefore always succeeds. The whole expression returns the array:\n[\"baaabaac\", \"ba\", undefined, \"abaac\"]\n\nNote 4\nIn case-insignificant matches when Unicode is true,\n all characters are implicitly case-folded using the simple mapping \nprovided by the Unicode Standard immediately before they are compared. \nThe simple mapping always maps to a single code point, so it does not \nmap, for example, \u00df (U+00DF) to SS. It may however map a code point outside the Basic Latin range to a character within, for example, \u017f (U+017F) to s. Such characters are not mapped if Unicode is false. This prevents Unicode code points such as U+017F and U+212A from matching regular expressions such as /[a-z]/i, but they will match /[a-z]/ui.\n\n\n\n\n22.2.2.8 Runtime Semantics: CompileCharacterClass\nThe syntax-directed operation CompileCharacterClass takes no arguments and returns a Record with fields [[CharSet]] (a CharSet) and [[Invert]] (a Boolean). It is defined piecewise over the following productions:\n\nCharacterClass :: \n[\nClassRanges\n]\n\n\n\n1. Let A be CompileToCharSet of ClassRanges.2. Return the Record { [[CharSet]]: A, [[Invert]]: false }.\n\nCharacterClass :: \n[\n^\nClassRanges\n]\n\n\n\n1. Let A be CompileToCharSet of ClassRanges.2. Return the Record { [[CharSet]]: A, [[Invert]]: true }.\n\n\n22.2.2.9 Runtime Semantics: CompileToCharSet\nThe syntax-directed operation CompileToCharSet takes no arguments and returns a CharSet.\nNote 1\nThis section is amended in B.1.2.7.\n\n\nIt is defined piecewise over the following productions:\n\nClassRanges :: [empty]\n\n\n1. Return the empty CharSet.\n\n\nNonemptyClassRanges :: \nClassAtom\nNonemptyClassRangesNoDash\n\n\n\n1. Let A be CompileToCharSet of ClassAtom.2. Let B be CompileToCharSet of NonemptyClassRangesNoDash.3. Return the union of CharSets A and B.\n\nNonemptyClassRanges :: \nClassAtom\n-\nClassAtom\nClassRanges\n\n\n\n1. Let A be CompileToCharSet of the first ClassAtom.2. Let B be CompileToCharSet of the second ClassAtom.3. Let C be CompileToCharSet of ClassRanges.4. Let D be CharacterRange(A, B).5. Return the union of D and C.\n\n\nNonemptyClassRangesNoDash :: \nClassAtomNoDash\nNonemptyClassRangesNoDash\n\n\n\n1. Let A be CompileToCharSet of ClassAtomNoDash.2. Let B be CompileToCharSet of NonemptyClassRangesNoDash.3. Return the union of CharSets A and B.\n\nNonemptyClassRangesNoDash :: \nClassAtomNoDash\n-\nClassAtom\nClassRanges\n\n\n\n1. Let A be CompileToCharSet of ClassAtomNoDash.2. Let B be CompileToCharSet of ClassAtom.3. Let C be CompileToCharSet of ClassRanges.4. Let D be CharacterRange(A, B).5. Return the union of D and C.\nNote 2\nClassRanges can expand into a single ClassAtom and/or ranges of two ClassAtom separated by dashes. In the latter case the ClassRanges includes all characters between the first ClassAtom and the second ClassAtom, inclusive; an error occurs if either ClassAtom does not represent a single character (for example, if one is \\w) or if the first ClassAtom's character value is greater than the second ClassAtom's character value.\n\nNote 3\nEven if the pattern ignores case, the case of the two ends \nof a range is significant in determining which characters belong to the \nrange. Thus, for example, the pattern /[E-F]/i matches only the letters E, F, e, and f, while the pattern /[E-f]/i matches all uppercase and lowercase letters in the Unicode Basic Latin block as well as the symbols [, \\, ], ^, _, and `.\n\nNote 4\nA - character can be treated literally or it can denote a range. It is treated literally if it is the first or last character of ClassRanges, the beginning or end limit of a range specification, or immediately follows a range specification.\n\n\n\nClassAtom :: -\n\n\n1. Return the CharSet containing the single character - U+002D (HYPHEN-MINUS).\n\n\nClassAtomNoDash :: SourceCharacter but not one of \\ or ] or -\n\n\n1. Return the CharSet containing the character matched by SourceCharacter.\n\n\nClassEscape :: \nb\n\n\n-\n\n\nCharacterEscape\n\n\n\n1. Let cv be the CharacterValue of this ClassEscape.2. Let c be the character whose character value is cv.3. Return the CharSet containing the single character c.\nNote 5\nA ClassAtom can use any of the escape sequences that are allowed in the rest of the regular expression except for \\b, \\B, and backreferences. Inside a CharacterClass, \\b means the backspace character, while \\B and backreferences raise errors. Using a backreference inside a ClassAtom causes an error.\n\n\n\nCharacterClassEscape :: d\n\n\n1. Return the ten-element CharSet containing the characters 0 through 9 inclusive.\n\nCharacterClassEscape :: D\n\n\n1. Return the CharSet containing all characters not in the CharSet returned by \nCharacterClassEscape :: d\n\n .\n\nCharacterClassEscape :: s\n\n\n1. Return the CharSet containing all characters corresponding to a code point on the right-hand side of the WhiteSpace or LineTerminator productions.\n\nCharacterClassEscape :: S\n\n\n1. Return the CharSet containing all characters not in the CharSet returned by \nCharacterClassEscape :: s\n\n .\n\nCharacterClassEscape :: w\n\n\n1. Return WordCharacters.\n\nCharacterClassEscape :: W\n\n\n1. Return the CharSet containing all characters not in the CharSet returned by \nCharacterClassEscape :: w\n\n .\n\nCharacterClassEscape :: \np{\nUnicodePropertyValueExpression\n}\n\n\n\n1. Return the CharSet containing all Unicode code points included in CompileToCharSet of UnicodePropertyValueExpression.\n\nCharacterClassEscape :: \nP{\nUnicodePropertyValueExpression\n}\n\n\n\n1. Return the CharSet containing all Unicode code points not included in CompileToCharSet of UnicodePropertyValueExpression.\n\nUnicodePropertyValueExpression :: \nUnicodePropertyName\n=\nUnicodePropertyValue\n\n\n\n1. Let ps be SourceText of UnicodePropertyName.2. Let p be UnicodeMatchProperty(ps).3. Assert: p is a Unicode property name or property alias listed in the \u201cProperty name and aliases\u201d column of Table 66.4. Let vs be SourceText of UnicodePropertyValue.5. Let v be UnicodeMatchPropertyValue(p, vs).6. Return the CharSet containing all Unicode code points whose character database definition includes the property p with value v.\n\nUnicodePropertyValueExpression :: LoneUnicodePropertyNameOrValue\n\n\n1. Let s be SourceText of LoneUnicodePropertyNameOrValue.2. If UnicodeMatchPropertyValue(General_Category, s) is identical to a List\n of Unicode code points that is the name of a Unicode general category \nor general category alias listed in the \u201cProperty value and aliases\u201d \ncolumn of Table 68, thena. Return\n the CharSet containing all Unicode code points whose character database\n definition includes the property \u201cGeneral_Category\u201d with value s.3. Let p be UnicodeMatchProperty(s).4. Assert: p is a binary Unicode property or binary property alias listed in the \u201cProperty name and aliases\u201d column of Table 67.5. Return the CharSet containing all Unicode code points whose character database definition includes the property p with value \u201cTrue\u201d.\n\n22.2.2.9.1 CharacterRange ( A, B )\nThe abstract operation CharacterRange takes arguments A (a CharSet) and B (a CharSet) and returns a CharSet. It performs the following steps when called:\n1. Assert: A and B each contain exactly one character.2. Let a be the one character in CharSet A.3. Let b be the one character in CharSet B.4. Let i be the character value of character a.5. Let j be the character value of character b.6. Assert: i \u2264 j.7. Return the CharSet containing all characters with a character value greater than or equal to i and less than or equal to j.\n\n\n22.2.2.9.2 UnicodeMatchProperty ( p )\nThe abstract operation UnicodeMatchProperty takes argument p (a List of Unicode code points) and returns a Unicode property name. It performs the following steps when called:\n1. Assert: p is a Unicode property name or property alias listed in the \u201cProperty name and aliases\u201d column of Table 66 or Table 67.2. Let c be the canonical property name of p as given in the \u201cCanonical property name\u201d column of the corresponding row.3. Return the List of Unicode code points c.\nImplementations must support the Unicode property names and aliases listed in Table 66 and Table 67. To ensure interoperability, implementations must not support any other property names or aliases.\nNote 1\nFor example, Script_Extensions (property name) and scx (property alias) are valid, but script_extensions or Scx aren't.\n\nNote 2\nThe listed properties form a superset of what UTS18 RL1.2 requires.\n\nTable 66: Non-binary Unicode property aliases and their canonical property names\n\n\n\nProperty name and aliases\nCanonical property name\n\n\n\nGeneral_Category\nGeneral_Category\n\n\ngc\n\n\nScript\nScript\n\n\nsc\n\n\nScript_Extensions\nScript_Extensions\n\n\nscx\n\n\n\nTable 67: Binary Unicode property aliases and their canonical property names\n\n\n\nProperty name and aliases\nCanonical property name\n\n\n\nASCII\nASCII\n\n\nASCII_Hex_Digit\nASCII_Hex_Digit\n\n\nAHex\n\n\nAlphabetic\nAlphabetic\n\n\nAlpha\n\n\nAny\nAny\n\n\nAssigned\nAssigned\n\n\nBidi_Control\nBidi_Control\n\n\nBidi_C\n\n\nBidi_Mirrored\nBidi_Mirrored\n\n\nBidi_M\n\n\nCase_Ignorable\nCase_Ignorable\n\n\nCI\n\n\nCased\nCased\n\n\nChanges_When_Casefolded\nChanges_When_Casefolded\n\n\nCWCF\n\n\nChanges_When_Casemapped\nChanges_When_Casemapped\n\n\nCWCM\n\n\nChanges_When_Lowercased\nChanges_When_Lowercased\n\n\nCWL\n\n\nChanges_When_NFKC_Casefolded\nChanges_When_NFKC_Casefolded\n\n\nCWKCF\n\n\nChanges_When_Titlecased\nChanges_When_Titlecased\n\n\nCWT\n\n\nChanges_When_Uppercased\nChanges_When_Uppercased\n\n\nCWU\n\n\nDash\nDash\n\n\nDefault_Ignorable_Code_Point\nDefault_Ignorable_Code_Point\n\n\nDI\n\n\nDeprecated\nDeprecated\n\n\nDep\n\n\nDiacritic\nDiacritic\n\n\nDia\n\n\nEmoji\nEmoji\n\n\nEmoji_Component\nEmoji_Component\n\n\nEComp\n\n\nEmoji_Modifier\nEmoji_Modifier\n\n\nEMod\n\n\nEmoji_Modifier_Base\nEmoji_Modifier_Base\n\n\nEBase\n\n\nEmoji_Presentation\nEmoji_Presentation\n\n\nEPres\n\n\nExtended_Pictographic\nExtended_Pictographic\n\n\nExtPict\n\n\nExtender\nExtender\n\n\nExt\n\n\nGrapheme_Base\nGrapheme_Base\n\n\nGr_Base\n\n\nGrapheme_Extend\nGrapheme_Extend\n\n\nGr_Ext\n\n\nHex_Digit\nHex_Digit\n\n\nHex\n\n\nIDS_Binary_Operator\nIDS_Binary_Operator\n\n\nIDSB\n\n\nIDS_Trinary_Operator\nIDS_Trinary_Operator\n\n\nIDST\n\n\nID_Continue\nID_Continue\n\n\nIDC\n\n\nID_Start\nID_Start\n\n\nIDS\n\n\nIdeographic\nIdeographic\n\n\nIdeo\n\n\nJoin_Control\nJoin_Control\n\n\nJoin_C\n\n\nLogical_Order_Exception\nLogical_Order_Exception\n\n\nLOE\n\n\nLowercase\nLowercase\n\n\nLower\n\n\nMath\nMath\n\n\nNoncharacter_Code_Point\nNoncharacter_Code_Point\n\n\nNChar\n\n\nPattern_Syntax\nPattern_Syntax\n\n\nPat_Syn\n\n\nPattern_White_Space\nPattern_White_Space\n\n\nPat_WS\n\n\nQuotation_Mark\nQuotation_Mark\n\n\nQMark\n\n\nRadical\nRadical\n\n\nRegional_Indicator\nRegional_Indicator\n\n\nRI\n\n\nSentence_Terminal\nSentence_Terminal\n\n\nSTerm\n\n\nSoft_Dotted\nSoft_Dotted\n\n\nSD\n\n\nTerminal_Punctuation\nTerminal_Punctuation\n\n\nTerm\n\n\nUnified_Ideograph\nUnified_Ideograph\n\n\nUIdeo\n\n\nUppercase\nUppercase\n\n\nUpper\n\n\nVariation_Selector\nVariation_Selector\n\n\nVS\n\n\nWhite_Space\nWhite_Space\n\n\nspace\n\n\nXID_Continue\nXID_Continue\n\n\nXIDC\n\n\nXID_Start\nXID_Start\n\n\nXIDS\n\n\n\n\n\n22.2.2.9.3 UnicodeMatchPropertyValue ( p, v )\nThe abstract operation UnicodeMatchPropertyValue takes arguments p (a List of Unicode code points) and v (a List of Unicode code points) and returns a Unicode property value. It performs the following steps when called:\n1. Assert: p is a canonical, unaliased Unicode property name listed in the \u201cCanonical property name\u201d column of Table 66.2. Assert: v is a property value or property value alias for Unicode property p listed in the \u201cProperty value and aliases\u201d column of Table 68 or Table 69.3. Let value be the canonical property value of v as given in the \u201cCanonical property value\u201d column of the corresponding row.4. Return the List of Unicode code points value.\nImplementations must support the Unicode property value names and aliases listed in Table 68 and Table 69. To ensure interoperability, implementations must not support any other property value names or aliases.\nNote 1\nFor example, Xpeo and Old_Persian are valid Script_Extensions values, but xpeo and Old Persian aren't.\n\nNote 2\nThis algorithm differs from the matching rules for symbolic values listed in UAX44: case, white space, U+002D (HYPHEN-MINUS), and U+005F (LOW LINE) are not ignored, and the Is prefix is not supported.\n\nNote 3\nThe spellings of entries in these tables (including \ncasing) were chosen to match the first occurrence of each property in \nthe files PropertyAliases.txt and PropertyValueAliases.txt\n in the Unicode Character Database at the time each entry was added to \nthis specification. However, because the precise spellings in those \nfiles are not guaranteed to be stable, implementations are required to \nfollow this table rather than those files.\n\nTable 68: Value aliases and canonical values for the Unicode property General_Category\n\n\n\nProperty value and aliases\nCanonical property value\n\n\n\nCased_Letter\nCased_Letter\n\n\nLC\n\n\nClose_Punctuation\nClose_Punctuation\n\n\nPe\n\n\nConnector_Punctuation\nConnector_Punctuation\n\n\nPc\n\n\nControl\nControl\n\n\nCc\n\n\ncntrl\n\n\nCurrency_Symbol\nCurrency_Symbol\n\n\nSc\n\n\nDash_Punctuation\nDash_Punctuation\n\n\nPd\n\n\nDecimal_Number\nDecimal_Number\n\n\nNd\n\n\ndigit\n\n\nEnclosing_Mark\nEnclosing_Mark\n\n\nMe\n\n\nFinal_Punctuation\nFinal_Punctuation\n\n\nPf\n\n\nFormat\nFormat\n\n\nCf\n\n\nInitial_Punctuation\nInitial_Punctuation\n\n\nPi\n\n\nLetter\nLetter\n\n\nL\n\n\nLetter_Number\nLetter_Number\n\n\nNl\n\n\nLine_Separator\nLine_Separator\n\n\nZl\n\n\nLowercase_Letter\nLowercase_Letter\n\n\nLl\n\n\nMark\nMark\n\n\nM\n\n\nCombining_Mark\n\n\nMath_Symbol\nMath_Symbol\n\n\nSm\n\n\nModifier_Letter\nModifier_Letter\n\n\nLm\n\n\nModifier_Symbol\nModifier_Symbol\n\n\nSk\n\n\nNonspacing_Mark\nNonspacing_Mark\n\n\nMn\n\n\nNumber\nNumber\n\n\nN\n\n\nOpen_Punctuation\nOpen_Punctuation\n\n\nPs\n\n\nOther\nOther\n\n\nC\n\n\nOther_Letter\nOther_Letter\n\n\nLo\n\n\nOther_Number\nOther_Number\n\n\nNo\n\n\nOther_Punctuation\nOther_Punctuation\n\n\nPo\n\n\nOther_Symbol\nOther_Symbol\n\n\nSo\n\n\nParagraph_Separator\nParagraph_Separator\n\n\nZp\n\n\nPrivate_Use\nPrivate_Use\n\n\nCo\n\n\nPunctuation\nPunctuation\n\n\nP\n\n\npunct\n\n\nSeparator\nSeparator\n\n\nZ\n\n\nSpace_Separator\nSpace_Separator\n\n\nZs\n\n\nSpacing_Mark\nSpacing_Mark\n\n\nMc\n\n\nSurrogate\nSurrogate\n\n\nCs\n\n\nSymbol\nSymbol\n\n\nS\n\n\nTitlecase_Letter\nTitlecase_Letter\n\n\nLt\n\n\nUnassigned\nUnassigned\n\n\nCn\n\n\nUppercase_Letter\nUppercase_Letter\n\n\nLu\n\n\n\nTable 69: Value aliases and canonical values for the Unicode properties Script and Script_Extensions\n\n\n\nProperty value and aliases\nCanonical property value\n\n\n\nAdlam\nAdlam\n\n\nAdlm\n\n\nAhom\nAhom\n\n\nAnatolian_Hieroglyphs\nAnatolian_Hieroglyphs\n\n\nHluw\n\n\nArabic\nArabic\n\n\nArab\n\n\nArmenian\nArmenian\n\n\nArmn\n\n\nAvestan\nAvestan\n\n\nAvst\n\n\nBalinese\nBalinese\n\n\nBali\n\n\nBamum\nBamum\n\n\nBamu\n\n\nBassa_Vah\nBassa_Vah\n\n\nBass\n\n\nBatak\nBatak\n\n\nBatk\n\n\nBengali\nBengali\n\n\nBeng\n\n\nBhaiksuki\nBhaiksuki\n\n\nBhks\n\n\nBopomofo\nBopomofo\n\n\nBopo\n\n\nBrahmi\nBrahmi\n\n\nBrah\n\n\nBraille\nBraille\n\n\nBrai\n\n\nBuginese\nBuginese\n\n\nBugi\n\n\nBuhid\nBuhid\n\n\nBuhd\n\n\nCanadian_Aboriginal\nCanadian_Aboriginal\n\n\nCans\n\n\nCarian\nCarian\n\n\nCari\n\n\nCaucasian_Albanian\nCaucasian_Albanian\n\n\nAghb\n\n\nChakma\nChakma\n\n\nCakm\n\n\nCham\nCham\n\n\nChorasmian\nChorasmian\n\n\nChrs\n\n\nCherokee\nCherokee\n\n\nCher\n\n\nCommon\nCommon\n\n\nZyyy\n\n\nCoptic\nCoptic\n\n\nCopt\n\n\nQaac\n\n\nCuneiform\nCuneiform\n\n\nXsux\n\n\nCypriot\nCypriot\n\n\nCprt\n\n\nCypro_Minoan\nCypro_Minoan\n\n\nCpmn\n\n\nCyrillic\nCyrillic\n\n\nCyrl\n\n\nDeseret\nDeseret\n\n\nDsrt\n\n\nDevanagari\nDevanagari\n\n\nDeva\n\n\nDives_Akuru\nDives_Akuru\n\n\nDiak\n\n\nDogra\nDogra\n\n\nDogr\n\n\nDuployan\nDuployan\n\n\nDupl\n\n\nEgyptian_Hieroglyphs\nEgyptian_Hieroglyphs\n\n\nEgyp\n\n\nElbasan\nElbasan\n\n\nElba\n\n\nElymaic\nElymaic\n\n\nElym\n\n\nEthiopic\nEthiopic\n\n\nEthi\n\n\nGeorgian\nGeorgian\n\n\nGeor\n\n\nGlagolitic\nGlagolitic\n\n\nGlag\n\n\nGothic\nGothic\n\n\nGoth\n\n\nGrantha\nGrantha\n\n\nGran\n\n\nGreek\nGreek\n\n\nGrek\n\n\nGujarati\nGujarati\n\n\nGujr\n\n\nGunjala_Gondi\nGunjala_Gondi\n\n\nGong\n\n\nGurmukhi\nGurmukhi\n\n\nGuru\n\n\nHan\nHan\n\n\nHani\n\n\nHangul\nHangul\n\n\nHang\n\n\nHanifi_Rohingya\nHanifi_Rohingya\n\n\nRohg\n\n\nHanunoo\nHanunoo\n\n\nHano\n\n\nHatran\nHatran\n\n\nHatr\n\n\nHebrew\nHebrew\n\n\nHebr\n\n\nHiragana\nHiragana\n\n\nHira\n\n\nImperial_Aramaic\nImperial_Aramaic\n\n\nArmi\n\n\nInherited\nInherited\n\n\nZinh\n\n\nQaai\n\n\nInscriptional_Pahlavi\nInscriptional_Pahlavi\n\n\nPhli\n\n\nInscriptional_Parthian\nInscriptional_Parthian\n\n\nPrti\n\n\nJavanese\nJavanese\n\n\nJava\n\n\nKaithi\nKaithi\n\n\nKthi\n\n\nKannada\nKannada\n\n\nKnda\n\n\nKatakana\nKatakana\n\n\nKana\n\n\nKayah_Li\nKayah_Li\n\n\nKali\n\n\nKharoshthi\nKharoshthi\n\n\nKhar\n\n\nKhitan_Small_Script\nKhitan_Small_Script\n\n\nKits\n\n\nKhmer\nKhmer\n\n\nKhmr\n\n\nKhojki\nKhojki\n\n\nKhoj\n\n\nKhudawadi\nKhudawadi\n\n\nSind\n\n\nLao\nLao\n\n\nLaoo\n\n\nLatin\nLatin\n\n\nLatn\n\n\nLepcha\nLepcha\n\n\nLepc\n\n\nLimbu\nLimbu\n\n\nLimb\n\n\nLinear_A\nLinear_A\n\n\nLina\n\n\nLinear_B\nLinear_B\n\n\nLinb\n\n\nLisu\nLisu\n\n\nLycian\nLycian\n\n\nLyci\n\n\nLydian\nLydian\n\n\nLydi\n\n\nMahajani\nMahajani\n\n\nMahj\n\n\nMakasar\nMakasar\n\n\nMaka\n\n\nMalayalam\nMalayalam\n\n\nMlym\n\n\nMandaic\nMandaic\n\n\nMand\n\n\nManichaean\nManichaean\n\n\nMani\n\n\nMarchen\nMarchen\n\n\nMarc\n\n\nMedefaidrin\nMedefaidrin\n\n\nMedf\n\n\nMasaram_Gondi\nMasaram_Gondi\n\n\nGonm\n\n\nMeetei_Mayek\nMeetei_Mayek\n\n\nMtei\n\n\nMende_Kikakui\nMende_Kikakui\n\n\nMend\n\n\nMeroitic_Cursive\nMeroitic_Cursive\n\n\nMerc\n\n\nMeroitic_Hieroglyphs\nMeroitic_Hieroglyphs\n\n\nMero\n\n\nMiao\nMiao\n\n\nPlrd\n\n\nModi\nModi\n\n\nMongolian\nMongolian\n\n\nMong\n\n\nMro\nMro\n\n\nMroo\n\n\nMultani\nMultani\n\n\nMult\n\n\nMyanmar\nMyanmar\n\n\nMymr\n\n\nNabataean\nNabataean\n\n\nNbat\n\n\nNandinagari\nNandinagari\n\n\nNand\n\n\nNew_Tai_Lue\nNew_Tai_Lue\n\n\nTalu\n\n\nNewa\nNewa\n\n\nNko\nNko\n\n\nNkoo\n\n\nNushu\nNushu\n\n\nNshu\n\n\nNyiakeng_Puachue_Hmong\nNyiakeng_Puachue_Hmong\n\n\nHmnp\n\n\nOgham\nOgham\n\n\nOgam\n\n\nOl_Chiki\nOl_Chiki\n\n\nOlck\n\n\nOld_Hungarian\nOld_Hungarian\n\n\nHung\n\n\nOld_Italic\nOld_Italic\n\n\nItal\n\n\nOld_North_Arabian\nOld_North_Arabian\n\n\nNarb\n\n\nOld_Permic\nOld_Permic\n\n\nPerm\n\n\nOld_Persian\nOld_Persian\n\n\nXpeo\n\n\nOld_Sogdian\nOld_Sogdian\n\n\nSogo\n\n\nOld_South_Arabian\nOld_South_Arabian\n\n\nSarb\n\n\nOld_Turkic\nOld_Turkic\n\n\nOrkh\n\n\nOld_Uyghur\nOld_Uyghur\n\n\nOugr\n\n\nOriya\nOriya\n\n\nOrya\n\n\nOsage\nOsage\n\n\nOsge\n\n\nOsmanya\nOsmanya\n\n\nOsma\n\n\nPahawh_Hmong\nPahawh_Hmong\n\n\nHmng\n\n\nPalmyrene\nPalmyrene\n\n\nPalm\n\n\nPau_Cin_Hau\nPau_Cin_Hau\n\n\nPauc\n\n\nPhags_Pa\nPhags_Pa\n\n\nPhag\n\n\nPhoenician\nPhoenician\n\n\nPhnx\n\n\nPsalter_Pahlavi\nPsalter_Pahlavi\n\n\nPhlp\n\n\nRejang\nRejang\n\n\nRjng\n\n\nRunic\nRunic\n\n\nRunr\n\n\nSamaritan\nSamaritan\n\n\nSamr\n\n\nSaurashtra\nSaurashtra\n\n\nSaur\n\n\nSharada\nSharada\n\n\nShrd\n\n\nShavian\nShavian\n\n\nShaw\n\n\nSiddham\nSiddham\n\n\nSidd\n\n\nSignWriting\nSignWriting\n\n\nSgnw\n\n\nSinhala\nSinhala\n\n\nSinh\n\n\nSogdian\nSogdian\n\n\nSogd\n\n\nSora_Sompeng\nSora_Sompeng\n\n\nSora\n\n\nSoyombo\nSoyombo\n\n\nSoyo\n\n\nSundanese\nSundanese\n\n\nSund\n\n\nSyloti_Nagri\nSyloti_Nagri\n\n\nSylo\n\n\nSyriac\nSyriac\n\n\nSyrc\n\n\nTagalog\nTagalog\n\n\nTglg\n\n\nTagbanwa\nTagbanwa\n\n\nTagb\n\n\nTai_Le\nTai_Le\n\n\nTale\n\n\nTai_Tham\nTai_Tham\n\n\nLana\n\n\nTai_Viet\nTai_Viet\n\n\nTavt\n\n\nTakri\nTakri\n\n\nTakr\n\n\nTamil\nTamil\n\n\nTaml\n\n\nTangsa\nTangsa\n\n\nTnsa\n\n\nTangut\nTangut\n\n\nTang\n\n\nTelugu\nTelugu\n\n\nTelu\n\n\nThaana\nThaana\n\n\nThaa\n\n\nThai\nThai\n\n\nTibetan\nTibetan\n\n\nTibt\n\n\nTifinagh\nTifinagh\n\n\nTfng\n\n\nTirhuta\nTirhuta\n\n\nTirh\n\n\nToto\nToto\n\n\nUgaritic\nUgaritic\n\n\nUgar\n\n\nVai\nVai\n\n\nVaii\n\n\nVithkuqi\nVithkuqi\n\n\nVith\n\n\nWancho\nWancho\n\n\nWcho\n\n\nWarang_Citi\nWarang_Citi\n\n\nWara\n\n\nYezidi\nYezidi\n\n\nYezi\n\n\nYi\nYi\n\n\nYiii\n\n\nZanabazar_Square\nZanabazar_Square\n\n\nZanb\n\n\n\n\n\n\n\n22.2.3 The RegExp Constructor\nThe RegExp constructor:\n\nis %RegExp%.\nis the initial value of the \"RegExp\" property of the global object.\ncreates and initializes a new RegExp object when called as a function rather than as a constructor. Thus the function call RegExp(\u2026) is equivalent to the object creation expression new RegExp(\u2026) with the same arguments.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified RegExp behaviour must include a super call to the RegExp constructor to create and initialize subclass instances with the necessary internal slots.\n\n\n22.2.3.1 RegExp ( pattern, flags )\nThe following steps are taken:\n1. Let patternIsRegExp be ?\u00a0IsRegExp(pattern).2. If NewTarget is undefined, thena. Let newTarget be the active function object.b. If patternIsRegExp is true and flags is undefined, theni. Let patternConstructor be ?\u00a0Get(pattern, \"constructor\").ii. If SameValue(newTarget, patternConstructor) is true, return pattern.3. Else, let newTarget be NewTarget.4. If Type(pattern) is Object and pattern has a [[RegExpMatcher]] internal slot, thena. Let P be pattern.[[OriginalSource]].b. If flags is undefined, let F be pattern.[[OriginalFlags]].c. Else, let F be flags.5. Else if patternIsRegExp is true, thena. Let P be ?\u00a0Get(pattern, \"source\").b. If flags is undefined, theni. Let F be ?\u00a0Get(pattern, \"flags\").c. Else, let F be flags.6. Else,a. Let P be pattern.b. Let F be flags.7. Let O be ?\u00a0RegExpAlloc(newTarget).8. Return ?\u00a0RegExpInitialize(O, P, F).\nNote\nIf pattern is supplied using a StringLiteral,\n the usual escape sequence substitutions are performed before the String\n is processed by RegExp. If pattern must contain an escape sequence to \nbe recognized by RegExp, any U+005C (REVERSE SOLIDUS) code points must \nbe escaped within the StringLiteral to prevent them being removed when the contents of the StringLiteral are formed.\n\n\n\n22.2.3.2 Abstract Operations for the RegExp Constructor\n\n22.2.3.2.1 RegExpAlloc ( newTarget )\nThe abstract operation RegExpAlloc takes argument newTarget and returns either a normal completion containing an Object or an abrupt completion. It performs the following steps when called:\n1. Let obj be ?\u00a0OrdinaryCreateFromConstructor(newTarget, \"%RegExp.prototype%\", \u00ab [[RegExpMatcher]], [[OriginalSource]], [[OriginalFlags]] \u00bb).2. Perform !\u00a0DefinePropertyOrThrow(obj, \"lastIndex\", PropertyDescriptor { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).3. Return obj.\n\n\n22.2.3.2.2 RegExpInitialize ( obj, pattern, flags )\nThe abstract operation RegExpInitialize takes arguments obj (an Object), pattern (an ECMAScript language value), and flags (an ECMAScript language value) and returns either a normal completion containing an Object or an abrupt completion. It performs the following steps when called:\n1. If pattern is undefined, let P be the empty String.2. Else, let P be ?\u00a0ToString(pattern).3. If flags is undefined, let F be the empty String.4. Else, let F be ?\u00a0ToString(flags).5. If F contains any code unit other than \"d\", \"g\", \"i\", \"m\", \"s\", \"u\", or \"y\" or if it contains the same code unit more than once, throw a SyntaxError exception.6. If F contains \"u\", let u be true; else let u be false.7. If u is true, thena. Let patternText be StringToCodePoints(P).8. Else,a. Let patternText be the result of interpreting each of P's 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.9. Let parseResult be ParsePattern(patternText, u).10. If parseResult is a non-empty List of SyntaxError objects, throw a SyntaxError exception.11. Assert: parseResult is a Pattern Parse Node.12. Set obj.[[OriginalSource]] to P.13. Set obj.[[OriginalFlags]] to F.14. NOTE: The definitions of DotAll, IgnoreCase, Multiline, and Unicode in 22.2.2.1 refer to this value of obj.[[OriginalFlags]].15. Set obj.[[RegExpMatcher]] to CompilePattern of parseResult.16. Perform ?\u00a0Set(obj, \"lastIndex\", +0\ud835\udd3d, true).17. Return obj.\n\n\n22.2.3.2.3 Static Semantics: ParsePattern ( patternText, u )\nThe abstract operation ParsePattern takes arguments patternText (a sequence of Unicode code points) and u (a Boolean) and returns a Parse Node or a non-empty List of SyntaxError objects. It performs the following steps when called:\n1. If u is true, thena. Let parseResult be ParseText(patternText, Pattern[+UnicodeMode, +N]).2. Else,a. Let parseResult be ParseText(patternText, Pattern[~UnicodeMode, ~N]).b. If parseResult is a Parse Node and parseResult contains a GroupName, theni. Set parseResult to ParseText(patternText, Pattern[~UnicodeMode, +N]).3. Return parseResult.\n\n\n22.2.3.2.4 RegExpCreate ( P, F )\nThe abstract operation RegExpCreate takes arguments P and F and returns either a normal completion containing an Object or an abrupt completion. It performs the following steps when called:\n1. Let obj be !\u00a0RegExpAlloc(%RegExp%).2. Return ?\u00a0RegExpInitialize(obj, P, F).\n\n\n22.2.3.2.5 EscapeRegExpPattern ( P, F )\nThe abstract operation EscapeRegExpPattern takes arguments P and F and returns a String. It performs the following steps when called:\n1. Let S be a String in the form of a Pattern[~UnicodeMode] (Pattern[+UnicodeMode] if F contains \"u\") equivalent to P interpreted as UTF-16 encoded Unicode code points (6.1.4), in which certain code points are escaped as described below. S may or may not be identical to P; however, the Abstract Closure that would result from evaluating S as a Pattern[~UnicodeMode] (Pattern[+UnicodeMode] if F contains \"u\") must behave identically to the Abstract Closure\n given by the constructed object's [[RegExpMatcher]] internal slot. \nMultiple calls to this abstract operation using the same values for P and F must produce identical results.2. The code points / or any LineTerminator occurring in the pattern shall be escaped in S as necessary to ensure that the string-concatenation of \"/\", S, \"/\", and F can be parsed (in an appropriate lexical context) as a RegularExpressionLiteral that behaves identically to the constructed regular expression. For example, if P is \"/\", then S could be \"\\/\" or \"\\u002F\", among other possibilities, but not \"/\", because /// followed by F would be parsed as a SingleLineComment rather than a RegularExpressionLiteral. If P is the empty String, this specification can be met by letting S be \"(?:)\".3. Return S.\n\n\n\n\n22.2.4 Properties of the RegExp Constructor\nThe RegExp constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n22.2.4.1 RegExp.prototype\nThe initial value of RegExp.prototype is the RegExp prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n22.2.4.2 get RegExp [ @@species ]\nRegExp[@@species] is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Return the this value.\nThe value of the \"name\" property of this function is \"get [Symbol.species]\".\nNote\nRegExp prototype methods normally use their this value's constructor to create a derived object. However, a subclass constructor may over-ride that default behaviour by redefining its @@species property.\n\n\n\n\n22.2.5 Properties of the RegExp Prototype Object\nThe RegExp prototype object:\n\nis %RegExp.prototype%.\nis an ordinary object.\nis not a RegExp instance and does not have a \n[[RegExpMatcher]] internal slot or any of the other internal slots of \nRegExp instance objects.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\n\nNote\nThe RegExp prototype object does not have a \"valueOf\" property of its own; however, it inherits the \"valueOf\" property from the Object prototype object.\n\n\n22.2.5.1 RegExp.prototype.constructor\nThe initial value of RegExp.prototype.constructor is %RegExp%.\n\n\n22.2.5.2 RegExp.prototype.exec ( string )\nPerforms a regular expression match of string against the regular expression and returns an Array containing the results of the match, or null if string did not match.\nThe String ToString(string) is searched for an occurrence of the regular expression pattern as follows:\n1. Let R be the this value.2. Perform ?\u00a0RequireInternalSlot(R, [[RegExpMatcher]]).3. Let S be ?\u00a0ToString(string).4. Return ?\u00a0RegExpBuiltinExec(R, S).\n\n22.2.5.2.1 RegExpExec ( R, S )\nThe abstract operation RegExpExec takes arguments R (an Object) and S (a String) and returns either a normal completion containing either an Object or null, or an abrupt completion. It performs the following steps when called:\n1. Let exec be ?\u00a0Get(R, \"exec\").2. If IsCallable(exec) is true, thena. Let result be ?\u00a0Call(exec, R, \u00ab S \u00bb).b. If Type(result) is neither Object nor Null, throw a TypeError exception.c. Return result.3. Perform ?\u00a0RequireInternalSlot(R, [[RegExpMatcher]]).4. Return ?\u00a0RegExpBuiltinExec(R, S).\nNote\nIf a callable \"exec\" property is not \nfound this algorithm falls back to attempting to use the built-in RegExp\n matching algorithm. This provides compatible behaviour for code written\n for prior editions where most built-in algorithms that use regular \nexpressions did not perform a dynamic property lookup of \"exec\".\n\n\n\n22.2.5.2.2 RegExpBuiltinExec ( R, S )\nThe abstract operation RegExpBuiltinExec takes arguments R (an initialized RegExp instance) and S (a String) and returns either a normal completion containing either an Array exotic object or null, or an abrupt completion. It performs the following steps when called:\n1. Let length be the number of code units in S.2. Let lastIndex be \u211d(? ToLength(? Get(R, \"lastIndex\"))).3. Let flags be R.[[OriginalFlags]].4. If flags contains \"g\", let global be true; else let global be false.5. If flags contains \"y\", let sticky be true; else let sticky be false.6. If flags contains \"d\", let hasIndices be true; else let hasIndices be false.7. If global is false and sticky is false, set lastIndex to 0.8. Let matcher be R.[[RegExpMatcher]].9. If flags contains \"u\", let fullUnicode be true; else let fullUnicode be false.10. Let matchSucceeded be false.11. If fullUnicode is true, let input be StringToCodePoints(S). Otherwise, let input be a List whose elements are the code units that are the elements of S.12. NOTE: Each element of input is considered to be a character.13. Repeat, while matchSucceeded is false,a. If lastIndex > length, theni. If global is true or sticky is true, then1. Perform ?\u00a0Set(R, \"lastIndex\", +0\ud835\udd3d, true).ii. Return null.b. Let inputIndex be the index into input of the character that was obtained from element lastIndex of S.c. Let r be matcher(input, inputIndex).d. If r is failure, theni. If sticky is true, then1. Perform ?\u00a0Set(R, \"lastIndex\", +0\ud835\udd3d, true).2. Return null.ii. Set lastIndex to AdvanceStringIndex(S, lastIndex, fullUnicode).e. Else,i. Assert: r is a State.ii. Set matchSucceeded to true.14. Let e be r's endIndex value.15. If fullUnicode is true, set e to GetStringIndex(S, e).16. If global is true or sticky is true, thena. Perform ?\u00a0Set(R, \"lastIndex\", \ud835\udd3d(e), true).17. Let n be the number of elements in r's captures List. (This is the same value as 22.2.2.1's NcapturingParens.)18. Assert: n < 232 - 1.19. Let A be !\u00a0ArrayCreate(n + 1).20. Assert: The mathematical value of A's \"length\" property is n + 1.21. Perform !\u00a0CreateDataPropertyOrThrow(A, \"index\", \ud835\udd3d(lastIndex)).22. Perform !\u00a0CreateDataPropertyOrThrow(A, \"input\", S).23. Let match be the Match Record { [[StartIndex]]: lastIndex, [[EndIndex]]: e }.24. Let indices be a new empty List.25. Let groupNames be a new empty List.26. Append match to indices.27. Let matchedSubstr be GetMatchString(S, match).28. Perform !\u00a0CreateDataPropertyOrThrow(A, \"0\", matchedSubstr).29. If R contains any GroupName, thena. Let groups be OrdinaryObjectCreate(null).b. Let hasGroups be true.30. Else,a. Let groups be undefined.b. Let hasGroups be false.31. Perform !\u00a0CreateDataPropertyOrThrow(A, \"groups\", groups).32. For each integer i such that i \u2265 1 and i \u2264 n, in ascending order, doa. Let captureI be ith element of r's captures List.b. If captureI is undefined, theni. Let capturedValue be undefined.ii. Append undefined to indices.c. Else,i. Let captureStart be captureI's startIndex.ii. Let captureEnd be captureI's endIndex.iii. If fullUnicode is true, then1. Set captureStart to GetStringIndex(S, captureStart).2. Set captureEnd to GetStringIndex(S, captureEnd).iv. Let capture be the Match Record { [[StartIndex]]: captureStart, [[EndIndex]]: captureEnd }.v. Let capturedValue be GetMatchString(S, capture).vi. Append capture to indices.d. Perform !\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(i)), capturedValue).e. If the ith capture of R was defined with a GroupName, theni. Let s be the CapturingGroupName of the corresponding RegExpIdentifierName.ii. Perform !\u00a0CreateDataPropertyOrThrow(groups, s, capturedValue).iii. Append s to groupNames.f. Else,i. Append undefined to groupNames.33. If hasIndices is true, thena. Let indicesArray be MakeMatchIndicesIndexPairArray(S, indices, groupNames, hasGroups).b. Perform !\u00a0CreateDataPropertyOrThrow(A, \"indices\", indicesArray).34. Return A.\n\n\n22.2.5.2.3 AdvanceStringIndex ( S, index, unicode )\nThe abstract operation AdvanceStringIndex takes arguments S (a String), index (a non-negative integer), and unicode (a Boolean) and returns an integer. It performs the following steps when called:\n1. Assert: index \u2264 253 - 1.2. If unicode is false, return index + 1.3. Let length be the number of code units in S.4. If index + 1 \u2265 length, return index + 1.5. Let cp be CodePointAt(S, index).6. Return index + cp.[[CodeUnitCount]].\n\n\n22.2.5.2.4 GetStringIndex ( S, e )\nThe abstract operation GetStringIndex takes arguments S (a String) and e (a non-negative integer) and returns a non-negative integer. It performs the following steps when called:\n1. If S is the empty String, return 0.2. Let codepoints be StringToCodePoints(S).3. Let eUTF be the smallest index into S that corresponds to the character at element e of codepoints. If e is greater than or equal to the number of elements in codepoints, then eUTF is the number of code units in S.4. Return eUTF.\n\n\n22.2.5.2.5 Match Records\nA Match Record is a Record value used to encapsulate the start and end indices of a regular expression match or capture.\nMatch Records have the fields listed in Table 70.\nTable 70: Match Record Fields\n\n\nField Name\nValue\nMeaning\n\n\n[[StartIndex]]\na non-negative integer\nThe number of code units from the start of a string at which the match begins (inclusive).\n\n\n[[EndIndex]]\nan integer \u2265 [[StartIndex]]\nThe number of code units from the start of a string at which the match ends (exclusive).\n\n\n\n\n\n22.2.5.2.6 GetMatchString ( S, match )\nThe abstract operation GetMatchString takes arguments S (a String) and match (a Match Record) and returns a String. It performs the following steps when called:\n1. Assert: match.[[StartIndex]] is a non-negative integer less than or equal to the length of S.2. Assert: match.[[EndIndex]] is an integer between match.[[StartIndex]] and the length of S, inclusive.3. Return the substring of S from match.[[StartIndex]] to match.[[EndIndex]].\n\n\n22.2.5.2.7 GetMatchIndexPair ( S, match )\nThe abstract operation GetMatchIndexPair takes arguments S (a String) and match (a Match Record) and returns an Array. It performs the following steps when called:\n1. Assert: match.[[StartIndex]] is a non-negative integer less than or equal to the length of S.2. Assert: match.[[EndIndex]] is an integer between match.[[StartIndex]] and the length of S, inclusive.3. Return CreateArrayFromList(\u00ab \ud835\udd3d(match.[[StartIndex]]), \ud835\udd3d(match.[[EndIndex]]) \u00bb).\n\n\n22.2.5.2.8 MakeMatchIndicesIndexPairArray ( S, indices, groupNames, hasGroups )\nThe abstract operation MakeMatchIndicesIndexPairArray takes arguments S (a String), indices (a List of either Match Records or undefined), groupNames (a List of either Strings or undefined), and hasGroups (a Boolean) and returns an Array. It performs the following steps when called:\n1. Let n be the number of elements in indices.2. Assert: n < 232 - 1.3. Assert: groupNames has n - 1 elements.4. NOTE: The groupNames List contains elements aligned with the indices List starting at indices[1].5. Let A be !\u00a0ArrayCreate(n).6. If hasGroups is true, thena. Let groups be OrdinaryObjectCreate(null).7. Else,a. Let groups be undefined.8. Perform !\u00a0CreateDataPropertyOrThrow(A, \"groups\", groups).9. For each integer i starting with 0 such that i < n, in ascending order, doa. Let matchIndices be indices[i].b. If matchIndices is not undefined, theni. Let matchIndexPair be GetMatchIndexPair(S, matchIndices).c. Else,i. Let matchIndexPair be undefined.d. Perform !\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(i)), matchIndexPair).e. If i > 0 and groupNames[i - 1] is not undefined, theni. Assert: groups is not undefined.ii. Perform !\u00a0CreateDataPropertyOrThrow(groups, groupNames[i - 1], matchIndexPair).10. Return A.\n\n\n\n22.2.5.3 get RegExp.prototype.dotAll\nRegExp.prototype.dotAll is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let R be the this value.2. Let cu be the code unit 0x0073 (LATIN SMALL LETTER S).3. Return ?\u00a0RegExpHasFlag(R, cu).\n\n22.2.5.3.1 RegExpHasFlag ( R, codeUnit )\nThe abstract operation RegExpHasFlag takes arguments R (an ECMAScript language value) and codeUnit (a code unit) and returns either a normal completion containing either a Boolean or undefined, or an abrupt completion. It performs the following steps when called:\n1. If Type(R) is not Object, throw a TypeError exception.2. If R does not have an [[OriginalFlags]] internal slot, thena. If SameValue(R, %RegExp.prototype%) is true, return undefined.b. Otherwise, throw a TypeError exception.3. Let flags be R.[[OriginalFlags]].4. If flags contains codeUnit, return true.5. Return false.\n\n\n\n22.2.5.4 get RegExp.prototype.flags\nRegExp.prototype.flags is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let R be the this value.2. If Type(R) is not Object, throw a TypeError exception.3. Let result be the empty String.4. Let hasIndices be ToBoolean(? Get(R, \"hasIndices\")).5. If hasIndices is true, append the code unit 0x0064 (LATIN SMALL LETTER D) as the last code unit of result.6. Let global be ToBoolean(? Get(R, \"global\")).7. If global is true, append the code unit 0x0067 (LATIN SMALL LETTER G) as the last code unit of result.8. Let ignoreCase be ToBoolean(? Get(R, \"ignoreCase\")).9. If ignoreCase is true, append the code unit 0x0069 (LATIN SMALL LETTER I) as the last code unit of result.10. Let multiline be ToBoolean(? Get(R, \"multiline\")).11. If multiline is true, append the code unit 0x006D (LATIN SMALL LETTER M) as the last code unit of result.12. Let dotAll be ToBoolean(? Get(R, \"dotAll\")).13. If dotAll is true, append the code unit 0x0073 (LATIN SMALL LETTER S) as the last code unit of result.14. Let unicode be ToBoolean(? Get(R, \"unicode\")).15. If unicode is true, append the code unit 0x0075 (LATIN SMALL LETTER U) as the last code unit of result.16. Let sticky be ToBoolean(? Get(R, \"sticky\")).17. If sticky is true, append the code unit 0x0079 (LATIN SMALL LETTER Y) as the last code unit of result.18. Return result.\n\n\n22.2.5.5 get RegExp.prototype.global\nRegExp.prototype.global is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let R be the this value.2. Let cu be the code unit 0x0067 (LATIN SMALL LETTER G).3. Return ?\u00a0RegExpHasFlag(R, cu).\n\n\n22.2.5.6 get RegExp.prototype.hasIndices\nRegExp.prototype.hasIndices is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let R be the this value.2. Let cu be the code unit 0x0064 (LATIN SMALL LETTER D).3. Return ?\u00a0RegExpHasFlag(R, cu).\n\n\n22.2.5.7 get RegExp.prototype.ignoreCase\nRegExp.prototype.ignoreCase is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let R be the this value.2. Let cu be the code unit 0x0069 (LATIN SMALL LETTER I).3. Return ?\u00a0RegExpHasFlag(R, cu).\n\n\n22.2.5.8 RegExp.prototype [ @@match ] ( string )\nWhen the @@match method is called with argument string, the following steps are taken:\n1. Let rx be the this value.2. If Type(rx) is not Object, throw a TypeError exception.3. Let S be ?\u00a0ToString(string).4. Let global be ToBoolean(? Get(rx, \"global\")).5. If global is false, thena. Return ?\u00a0RegExpExec(rx, S).6. Else,a. Assert: global is true.b. Let fullUnicode be ToBoolean(? Get(rx, \"unicode\")).c. Perform ?\u00a0Set(rx, \"lastIndex\", +0\ud835\udd3d, true).d. Let A be !\u00a0ArrayCreate(0).e. Let n be 0.f. Repeat,i. Let result be ?\u00a0RegExpExec(rx, S).ii. If result is null, then1. If n = 0, return null.2. Return A.iii. Else,1. Let matchStr be ?\u00a0ToString(? Get(result, \"0\")).2. Perform !\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(n)), matchStr).3. If matchStr is the empty String, thena. Let thisIndex be \u211d(? ToLength(? Get(rx, \"lastIndex\"))).b. Let nextIndex be AdvanceStringIndex(S, thisIndex, fullUnicode).c. Perform ?\u00a0Set(rx, \"lastIndex\", \ud835\udd3d(nextIndex), true).4. Set n to n + 1.\nThe value of the \"name\" property of this function is \"[Symbol.match]\".\nNote\nThe @@match property is used by the IsRegExp abstract operation to identify objects that have the basic behaviour of regular expressions. The absence of a @@match property or the existence of such a property whose value does not Boolean coerce to true indicates that the object is not intended to be used as a regular expression object.\n\n\n\n22.2.5.9 RegExp.prototype [ @@matchAll ] ( string )\nWhen the @@matchAll method is called with argument string, the following steps are taken:\n1. Let R be the this value.2. If Type(R) is not Object, throw a TypeError exception.3. Let S be ?\u00a0ToString(string).4. Let C be ?\u00a0SpeciesConstructor(R, %RegExp%).5. Let flags be ?\u00a0ToString(? Get(R, \"flags\")).6. Let matcher be ?\u00a0Construct(C, \u00ab R, flags \u00bb).7. Let lastIndex be ?\u00a0ToLength(? Get(R, \"lastIndex\")).8. Perform ?\u00a0Set(matcher, \"lastIndex\", lastIndex, true).9. If flags contains \"g\", let global be true.10. Else, let global be false.11. If flags contains \"u\", let fullUnicode be true.12. Else, let fullUnicode be false.13. Return CreateRegExpStringIterator(matcher, S, global, fullUnicode).\nThe value of the \"name\" property of this function is \"[Symbol.matchAll]\".\n\n\n22.2.5.10 get RegExp.prototype.multiline\nRegExp.prototype.multiline is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let R be the this value.2. Let cu be the code unit 0x006D (LATIN SMALL LETTER M).3. Return ?\u00a0RegExpHasFlag(R, cu).\n\n\n22.2.5.11 RegExp.prototype [ @@replace ] ( string, replaceValue )\nWhen the @@replace method is called with arguments string and replaceValue, the following steps are taken:\n1. Let rx be the this value.2. If Type(rx) is not Object, throw a TypeError exception.3. Let S be ?\u00a0ToString(string).4. Let lengthS be the number of code unit elements in S.5. Let functionalReplace be IsCallable(replaceValue).6. If functionalReplace is false, thena. Set replaceValue to ?\u00a0ToString(replaceValue).7. Let global be ToBoolean(? Get(rx, \"global\")).8. If global is true, thena. Let fullUnicode be ToBoolean(? Get(rx, \"unicode\")).b. Perform ?\u00a0Set(rx, \"lastIndex\", +0\ud835\udd3d, true).9. Let results be a new empty List.10. Let done be false.11. Repeat, while done is false,a. Let result be ?\u00a0RegExpExec(rx, S).b. If result is null, set done to true.c. Else,i. Append result to the end of results.ii. If global is false, set done to true.iii. Else,1. Let matchStr be ?\u00a0ToString(? Get(result, \"0\")).2. If matchStr is the empty String, thena. Let thisIndex be \u211d(? ToLength(? Get(rx, \"lastIndex\"))).b. Let nextIndex be AdvanceStringIndex(S, thisIndex, fullUnicode).c. Perform ?\u00a0Set(rx, \"lastIndex\", \ud835\udd3d(nextIndex), true).12. Let accumulatedResult be the empty String.13. Let nextSourcePosition be 0.14. For each element result of results, doa. Let resultLength be ?\u00a0LengthOfArrayLike(result).b. Let nCaptures be max(resultLength - 1, 0).c. Let matched be ?\u00a0ToString(? Get(result, \"0\")).d. Let matchLength be the number of code units in matched.e. Let position be ?\u00a0ToIntegerOrInfinity(? Get(result, \"index\")).f. Set position to the result of clamping position between 0 and lengthS.g. Let n be 1.h. Let captures be a new empty List.i. Repeat, while n \u2264 nCaptures,i. Let capN be ?\u00a0Get(result, !\u00a0ToString(\ud835\udd3d(n))).ii. If capN is not undefined, then1. Set capN to ?\u00a0ToString(capN).iii. Append capN as the last element of captures.iv. NOTE: When n = 1, the preceding step puts the first element into captures (at index 0). More generally, the nth capture (the characters captured by the nth set of capturing parentheses) is at captures[n - 1].v. Set n to n + 1.j. Let namedCaptures be ?\u00a0Get(result, \"groups\").k. If functionalReplace is true, theni. Let replacerArgs be \u00ab matched \u00bb.ii. Append in List order the elements of captures to the end of the List replacerArgs.iii. Append \ud835\udd3d(position) and S to replacerArgs.iv. If namedCaptures is not undefined, then1. Append namedCaptures as the last element of replacerArgs.v. Let replValue be ?\u00a0Call(replaceValue, undefined, replacerArgs).vi. Let replacement be ?\u00a0ToString(replValue).l. Else,i. If namedCaptures is not undefined, then1. Set namedCaptures to ?\u00a0ToObject(namedCaptures).ii. Let replacement be ?\u00a0GetSubstitution(matched, S, position, captures, namedCaptures, replaceValue).m. If position \u2265 nextSourcePosition, theni. NOTE: position\n should not normally move backwards. If it does, it is an indication of \nan ill-behaving RegExp subclass or use of an access triggered \nside-effect to change the global flag or other characteristics of rx. In such cases, the corresponding substitution is ignored.ii. Set accumulatedResult to the string-concatenation of accumulatedResult, the substring of S from nextSourcePosition to position, and replacement.iii. Set nextSourcePosition to position + matchLength.15. If nextSourcePosition \u2265 lengthS, return accumulatedResult.16. Return the string-concatenation of accumulatedResult and the substring of S from nextSourcePosition.\nThe value of the \"name\" property of this function is \"[Symbol.replace]\".\n\n\n22.2.5.12 RegExp.prototype [ @@search ] ( string )\nWhen the @@search method is called with argument string, the following steps are taken:\n1. Let rx be the this value.2. If Type(rx) is not Object, throw a TypeError exception.3. Let S be ?\u00a0ToString(string).4. Let previousLastIndex be ?\u00a0Get(rx, \"lastIndex\").5. If SameValue(previousLastIndex, +0\ud835\udd3d) is false, thena. Perform ?\u00a0Set(rx, \"lastIndex\", +0\ud835\udd3d, true).6. Let result be ?\u00a0RegExpExec(rx, S).7. Let currentLastIndex be ?\u00a0Get(rx, \"lastIndex\").8. If SameValue(currentLastIndex, previousLastIndex) is false, thena. Perform ?\u00a0Set(rx, \"lastIndex\", previousLastIndex, true).9. If result is null, return -1\ud835\udd3d.10. Return ?\u00a0Get(result, \"index\").\nThe value of the \"name\" property of this function is \"[Symbol.search]\".\nNote\nThe \"lastIndex\" and \"global\" properties of this RegExp object are ignored when performing the search. The \"lastIndex\" property is left unchanged.\n\n\n\n22.2.5.13 get RegExp.prototype.source\nRegExp.prototype.source is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let R be the this value.2. If Type(R) is not Object, throw a TypeError exception.3. If R does not have an [[OriginalSource]] internal slot, thena. If SameValue(R, %RegExp.prototype%) is true, return \"(?:)\".b. Otherwise, throw a TypeError exception.4. Assert: R has an [[OriginalFlags]] internal slot.5. Let src be R.[[OriginalSource]].6. Let flags be R.[[OriginalFlags]].7. Return EscapeRegExpPattern(src, flags).\n\n\n22.2.5.14 RegExp.prototype [ @@split ] ( string, limit )\nNote 1\nReturns an Array into which substrings of the result of converting string to a String have been stored. The substrings are determined by searching from left to right for matches of the this\n value regular expression; these occurrences are not part of any String \nin the returned array, but serve to divide up the String value.\nThe this value may be an empty regular \nexpression or a regular expression that can match an empty String. In \nthis case, the regular expression does not match the empty substring at the beginning or end of the input String, nor does it match the empty substring\n at the end of the previous separator match. (For example, if the \nregular expression matches the empty String, the String is split up into\n individual code unit elements; the length of the result array equals \nthe length of the String, and each substring \ncontains one code unit.) Only the first match at a given index of the \nString is considered, even if backtracking could yield a non-empty substring match at that index. (For example, /a*?/[Symbol.split](\"ab\") evaluates to the array [\"a\", \"b\"], while /a*/[Symbol.split](\"ab\") evaluates to the array [\"\",\"b\"].)\nIf string is (or converts to) the empty String, \nthe result depends on whether the regular expression can match the empty\n String. If it can, the result array contains no elements. Otherwise, \nthe result array contains one element, which is the empty String.\nIf the regular expression contains capturing parentheses, then each time separator is matched the results (including any undefined results) of the capturing parentheses are spliced into the output array. For example,\n/<(\\/)?([^<>]+)>/[Symbol.split](\"A<B>bold</B>and<CODE>coded</CODE>\")\nevaluates to the array\n[\"A\", undefined, \"B\", \"bold\", \"/\", \"B\", \"and\", undefined, \"CODE\", \"coded\", \"/\", \"CODE\", \"\"]\nIf limit is not undefined, then the output array is truncated so that it contains no more than limit elements.\n\nWhen the @@split method is called, the following steps are taken:\n1. Let rx be the this value.2. If Type(rx) is not Object, throw a TypeError exception.3. Let S be ?\u00a0ToString(string).4. Let C be ?\u00a0SpeciesConstructor(rx, %RegExp%).5. Let flags be ?\u00a0ToString(? Get(rx, \"flags\")).6. If flags contains \"u\", let unicodeMatching be true.7. Else, let unicodeMatching be false.8. If flags contains \"y\", let newFlags be flags.9. Else, let newFlags be the string-concatenation of flags and \"y\".10. Let splitter be ?\u00a0Construct(C, \u00ab rx, newFlags \u00bb).11. Let A be !\u00a0ArrayCreate(0).12. Let lengthA be 0.13. If limit is undefined, let lim be 232 - 1; else let lim be \u211d(? ToUint32(limit)).14. If lim is 0, return A.15. Let size be the length of S.16. If size is 0, thena. Let z be ?\u00a0RegExpExec(splitter, S).b. If z is not null, return A.c. Perform !\u00a0CreateDataPropertyOrThrow(A, \"0\", S).d. Return A.17. Let p be 0.18. Let q be p.19. Repeat, while q < size,a. Perform ?\u00a0Set(splitter, \"lastIndex\", \ud835\udd3d(q), true).b. Let z be ?\u00a0RegExpExec(splitter, S).c. If z is null, set q to AdvanceStringIndex(S, q, unicodeMatching).d. Else,i. Let e be \u211d(? ToLength(? Get(splitter, \"lastIndex\"))).ii. Set e to min(e, size).iii. If e = p, set q to AdvanceStringIndex(S, q, unicodeMatching).iv. Else,1. Let T be the substring of S from p to q.2. Perform !\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(lengthA)), T).3. Set lengthA to lengthA + 1.4. If lengthA = lim, return A.5. Set p to e.6. Let numberOfCaptures be ?\u00a0LengthOfArrayLike(z).7. Set numberOfCaptures to max(numberOfCaptures - 1, 0).8. Let i be 1.9. Repeat, while i \u2264 numberOfCaptures,a. Let nextCapture be ?\u00a0Get(z, !\u00a0ToString(\ud835\udd3d(i))).b. Perform !\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(lengthA)), nextCapture).c. Set i to i + 1.d. Set lengthA to lengthA + 1.e. If lengthA = lim, return A.10. Set q to p.20. Let T be the substring of S from p to size.21. Perform !\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(lengthA)), T).22. Return A.\nThe value of the \"name\" property of this function is \"[Symbol.split]\".\nNote 2\nThe @@split method ignores the value of the \"global\" and \"sticky\" properties of this RegExp object.\n\n\n\n22.2.5.15 get RegExp.prototype.sticky\nRegExp.prototype.sticky is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let R be the this value.2. Let cu be the code unit 0x0079 (LATIN SMALL LETTER Y).3. Return ?\u00a0RegExpHasFlag(R, cu).\n\n\n22.2.5.16 RegExp.prototype.test ( S )\nThe following steps are taken:\n1. Let R be the this value.2. If Type(R) is not Object, throw a TypeError exception.3. Let string be ?\u00a0ToString(S).4. Let match be ?\u00a0RegExpExec(R, string).5. If match is not null, return true; else return false.\n\n\n22.2.5.17 RegExp.prototype.toString ( )\n1. Let R be the this value.2. If Type(R) is not Object, throw a TypeError exception.3. Let pattern be ?\u00a0ToString(? Get(R, \"source\")).4. Let flags be ?\u00a0ToString(? Get(R, \"flags\")).5. Let result be the string-concatenation of \"/\", pattern, \"/\", and flags.6. Return result.\nNote\nThe returned String has the form of a RegularExpressionLiteral that evaluates to another RegExp object with the same behaviour as this object.\n\n\n\n22.2.5.18 get RegExp.prototype.unicode\nRegExp.prototype.unicode is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let R be the this value.2. Let cu be the code unit 0x0075 (LATIN SMALL LETTER U).3. Return ?\u00a0RegExpHasFlag(R, cu).\n\n\n\n22.2.6 Properties of RegExp Instances\nRegExp instances are ordinary objects that inherit properties from the RegExp prototype object.\n RegExp instances have internal slots [[RegExpMatcher]], \n[[OriginalSource]], and [[OriginalFlags]]. The value of the \n[[RegExpMatcher]] internal slot is an Abstract Closure representation of the Pattern of the RegExp object.\nNote\nPrior to ECMAScript 2015, RegExp instances were specified as having the own data properties \"source\", \"global\", \"ignoreCase\", and \"multiline\". Those properties are now specified as accessor properties of RegExp.prototype.\n\nRegExp instances also have the following property:\n\n22.2.6.1 lastIndex\nThe value of the \"lastIndex\" property specifies the String index at which to start the next match. It is coerced to an integral Number when used (see 22.2.5.2.2). This property shall have the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n22.2.7 RegExp String Iterator Objects\nA RegExp String Iterator is an object, that represents a \nspecific iteration over some specific String instance object, matching \nagainst some specific RegExp instance object. There is not a named constructor\n for RegExp String Iterator objects. Instead, RegExp String Iterator \nobjects are created by calling certain methods of RegExp instance \nobjects.\n\n22.2.7.1 CreateRegExpStringIterator ( R, S, global, fullUnicode )\nThe abstract operation CreateRegExpStringIterator takes arguments R (an Object), S (a String), global (a Boolean), and fullUnicode (a Boolean) and returns a Generator. It performs the following steps when called:\n1. Let closure be a new Abstract Closure with no parameters that captures R, S, global, and fullUnicode and performs the following steps when called:a. Repeat,i. Let match be ?\u00a0RegExpExec(R, S).ii. If match is null, return undefined.iii. If global is false, then1. Perform ?\u00a0GeneratorYield(CreateIterResultObject(match, false)).2. Return undefined.iv. Let matchStr be ?\u00a0ToString(? Get(match, \"0\")).v. If matchStr is the empty String, then1. Let thisIndex be \u211d(? ToLength(? Get(R, \"lastIndex\"))).2. Let nextIndex be AdvanceStringIndex(S, thisIndex, fullUnicode).3. Perform ?\u00a0Set(R, \"lastIndex\", \ud835\udd3d(nextIndex), true).vi. Perform ?\u00a0GeneratorYield(CreateIterResultObject(match, false)).2. Return CreateIteratorFromClosure(closure, \"%RegExpStringIteratorPrototype%\", %RegExpStringIteratorPrototype%).\n\n\n22.2.7.2 The %RegExpStringIteratorPrototype% Object\nThe %RegExpStringIteratorPrototype% object:\n\nhas properties that are inherited by all RegExp String Iterator Objects.\nis an ordinary object.\nhas a [[Prototype]] internal slot whose value is %IteratorPrototype%.\nhas the following properties:\n\n\n22.2.7.2.1 %RegExpStringIteratorPrototype%.next ( )\n1. Return ?\u00a0GeneratorResume(this value, empty, \"%RegExpStringIteratorPrototype%\").\n\n\n22.2.7.2.2 %RegExpStringIteratorPrototype% [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"RegExp String Iterator\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n\n\n\n23 Indexed Collections\n\n23.1 Array Objects\nArrays are exotic objects that give special treatment to a certain class of property names. See 10.4.2 for a definition of this special treatment.\n\n23.1.1 The Array Constructor\nThe Array constructor:\n\nis %Array%.\nis the initial value of the \"Array\" property of the global object.\ncreates and initializes a new Array when called as a constructor.\nalso creates and initializes a new Array when called as a function rather than as a constructor. Thus the function call Array(\u2026) is equivalent to the object creation expression new Array(\u2026) with the same arguments.\nis a function whose behaviour differs based upon the number and types of its arguments.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the exotic Array behaviour must include a super call to the Array constructor to initialize subclass instances that are Array exotic objects. However, most of the Array.prototype methods are generic methods that are not dependent upon their this value being an Array exotic object.\nhas a \"length\" property whose value is 1\ud835\udd3d.\n\n\n23.1.1.1 Array ( ...values )\nWhen the Array function is called, the following steps are taken:\n1. If NewTarget is undefined, let newTarget be the active function object; else let newTarget be NewTarget.2. Let proto be ?\u00a0GetPrototypeFromConstructor(newTarget, \"%Array.prototype%\").3. Let numberOfArgs be the number of elements in values.4. If numberOfArgs = 0, thena. Return !\u00a0ArrayCreate(0, proto).5. Else if numberOfArgs = 1, thena. Let len be values[0].b. Let array be !\u00a0ArrayCreate(0, proto).c. If Type(len) is not Number, theni. Perform !\u00a0CreateDataPropertyOrThrow(array, \"0\", len).ii. Let intLen be 1\ud835\udd3d.d. Else,i. Let intLen be !\u00a0ToUint32(len).ii. If SameValueZero(intLen, len) is false, throw a RangeError exception.e. Perform !\u00a0Set(array, \"length\", intLen, true).f. Return array.6. Else,a. Assert: numberOfArgs \u2265 2.b. Let array be ?\u00a0ArrayCreate(numberOfArgs, proto).c. Let k be 0.d. Repeat, while k < numberOfArgs,i. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).ii. Let itemK be values[k].iii. Perform !\u00a0CreateDataPropertyOrThrow(array, Pk, itemK).iv. Set k to k + 1.e. Assert: The mathematical value of array's \"length\" property is numberOfArgs.f. Return array.\n\n\n\n23.1.2 Properties of the Array Constructor\nThe Array constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n23.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )\nWhen the from method is called, the following steps are taken:\n1. Let C be the this value.2. If mapfn is undefined, let mapping be false.3. Else,a. If IsCallable(mapfn) is false, throw a TypeError exception.b. Let mapping be true.4. Let usingIterator be ?\u00a0GetMethod(items, @@iterator).5. If usingIterator is not undefined, thena. If IsConstructor(C) is true, theni. Let A be ?\u00a0Construct(C).b. Else,i. Let A be !\u00a0ArrayCreate(0).c. Let iteratorRecord be ?\u00a0GetIterator(items, sync, usingIterator).d. Let k be 0.e. Repeat,i. If k \u2265 253 - 1, then1. Let error be ThrowCompletion(a newly created TypeError object).2. Return ?\u00a0IteratorClose(iteratorRecord, error).ii. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).iii. Let next be ?\u00a0IteratorStep(iteratorRecord).iv. If next is false, then1. Perform ?\u00a0Set(A, \"length\", \ud835\udd3d(k), true).2. Return A.v. Let nextValue be ?\u00a0IteratorValue(next).vi. If mapping is true, then1. Let mappedValue be Completion(Call(mapfn, thisArg, \u00ab nextValue, \ud835\udd3d(k) \u00bb)).2. IfAbruptCloseIterator(mappedValue, iteratorRecord).vii. Else, let mappedValue be nextValue.viii. Let defineStatus be Completion(CreateDataPropertyOrThrow(A, Pk, mappedValue)).ix. IfAbruptCloseIterator(defineStatus, iteratorRecord).x. Set k to k + 1.6. NOTE: items is not an Iterable so assume it is an array-like object.7. Let arrayLike be !\u00a0ToObject(items).8. Let len be ?\u00a0LengthOfArrayLike(arrayLike).9. If IsConstructor(C) is true, thena. Let A be ?\u00a0Construct(C, \u00ab \ud835\udd3d(len) \u00bb).10. Else,a. Let A be ?\u00a0ArrayCreate(len).11. Let k be 0.12. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be ?\u00a0Get(arrayLike, Pk).c. If mapping is true, theni. Let mappedValue be ?\u00a0Call(mapfn, thisArg, \u00ab kValue, \ud835\udd3d(k) \u00bb).d. Else, let mappedValue be kValue.e. Perform ?\u00a0CreateDataPropertyOrThrow(A, Pk, mappedValue).f. Set k to k + 1.13. Perform ?\u00a0Set(A, \"length\", \ud835\udd3d(len), true).14. Return A.\nNote\nThe from function is an intentionally generic factory method; it does not require that its this value be the Array constructor. Therefore it can be transferred to or inherited by any other constructors that may be called with a single numeric argument.\n\n\n\n23.1.2.2 Array.isArray ( arg )\nWhen the isArray method is called, the following steps are taken:\n1. Return ?\u00a0IsArray(arg).\n\n\n23.1.2.3 Array.of ( ...items )\nWhen the of method is called, the following steps are taken:\n1. Let len be the number of elements in items.2. Let lenNumber be \ud835\udd3d(len).3. Let C be the this value.4. If IsConstructor(C) is true, thena. Let A be ?\u00a0Construct(C, \u00ab lenNumber \u00bb).5. Else,a. Let A be ?\u00a0ArrayCreate(len).6. Let k be 0.7. Repeat, while k < len,a. Let kValue be items[k].b. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).c. Perform ?\u00a0CreateDataPropertyOrThrow(A, Pk, kValue).d. Set k to k + 1.8. Perform ?\u00a0Set(A, \"length\", lenNumber, true).9. Return A.\nNote\nThe of function is an intentionally generic factory method; it does not require that its this value be the Array constructor. Therefore it can be transferred to or inherited by other constructors that may be called with a single numeric argument.\n\n\n\n23.1.2.4 Array.prototype\nThe value of Array.prototype is the Array prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n23.1.2.5 get Array [ @@species ]\nArray[@@species] is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps when called:\n1. Return the this value.\nThe value of the \"name\" property of this function is \"get [Symbol.species]\".\nNote\nArray prototype methods normally use their this value's constructor to create a derived object. However, a subclass constructor may over-ride that default behaviour by redefining its @@species property.\n\n\n\n\n23.1.3 Properties of the Array Prototype Object\nThe Array prototype object:\n\nis %Array.prototype%.\nis an Array exotic object and has the internal methods specified for such objects.\nhas a \"length\" property whose initial value is +0\ud835\udd3d and whose attributes are { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\n\nNote\nThe Array prototype object is specified to be an Array exotic object to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.\n\n\n23.1.3.1 Array.prototype.at ( index )\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. Let relativeIndex be ?\u00a0ToIntegerOrInfinity(index).4. If relativeIndex \u2265 0, thena. Let k be relativeIndex.5. Else,a. Let k be len + relativeIndex.6. If k < 0 or k \u2265 len, return undefined.7. Return ?\u00a0Get(O, !\u00a0ToString(\ud835\udd3d(k))).\n\n\n23.1.3.2 Array.prototype.concat ( ...items )\nReturns an array containing the array elements of the object followed by the array elements of each argument.\nWhen the concat method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let A be ?\u00a0ArraySpeciesCreate(O, 0).3. Let n be 0.4. Prepend O to items.5. For each element E of items, doa. Let spreadable be ?\u00a0IsConcatSpreadable(E).b. If spreadable is true, theni. Let k be 0.ii. Let len be ?\u00a0LengthOfArrayLike(E).iii. If n + len > 253 - 1, throw a TypeError exception.iv. Repeat, while k < len,1. Let P be !\u00a0ToString(\ud835\udd3d(k)).2. Let exists be ?\u00a0HasProperty(E, P).3. If exists is true, thena. Let subElement be ?\u00a0Get(E, P).b. Perform ?\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(n)), subElement).4. Set n to n + 1.5. Set k to k + 1.c. Else,i. NOTE: E is added as a single item rather than spread.ii. If n \u2265 253 - 1, throw a TypeError exception.iii. Perform ?\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(n)), E).iv. Set n to n + 1.6. Perform ?\u00a0Set(A, \"length\", \ud835\udd3d(n), true).7. Return A.\nThe \"length\" property of the concat method is 1\ud835\udd3d.\nNote 1\nThe explicit setting of the \"length\" property in step 6 is necessary to ensure that its value is correct in situations where the trailing elements of the result Array are not present.\n\nNote 2\nThe concat function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n23.1.3.2.1 IsConcatSpreadable ( O )\nThe abstract operation IsConcatSpreadable takes argument O and returns either a normal completion containing a Boolean or an abrupt completion. It performs the following steps when called:\n1. If Type(O) is not Object, return false.2. Let spreadable be ?\u00a0Get(O, @@isConcatSpreadable).3. If spreadable is not undefined, return ToBoolean(spreadable).4. Return ?\u00a0IsArray(O).\n\n\n\n23.1.3.3 Array.prototype.constructor\nThe initial value of Array.prototype.constructor is %Array%.\n\n\n23.1.3.4 Array.prototype.copyWithin ( target, start [ , end ] )\nNote 1\nThe end argument is optional. If it is not provided, the length of the this value is used.\n\nNote 2\nIf target is negative, it is treated as length + target where length is the length of the array. If start is negative, it is treated as length + start. If end is negative, it is treated as length + end.\n\nWhen the copyWithin method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. Let relativeTarget be ?\u00a0ToIntegerOrInfinity(target).4. If relativeTarget is -\u221e, let to be 0.5. Else if relativeTarget < 0, let to be max(len + relativeTarget, 0).6. Else, let to be min(relativeTarget, len).7. Let relativeStart be ?\u00a0ToIntegerOrInfinity(start).8. If relativeStart is -\u221e, let from be 0.9. Else if relativeStart < 0, let from be max(len + relativeStart, 0).10. Else, let from be min(relativeStart, len).11. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\u00a0ToIntegerOrInfinity(end).12. If relativeEnd is -\u221e, let final be 0.13. Else if relativeEnd < 0, let final be max(len + relativeEnd, 0).14. Else, let final be min(relativeEnd, len).15. Let count be min(final - from, len - to).16. If from < to and to < from + count, thena. Let direction be -1.b. Set from to from + count - 1.c. Set to to to + count - 1.17. Else,a. Let direction be 1.18. Repeat, while count > 0,a. Let fromKey be !\u00a0ToString(\ud835\udd3d(from)).b. Let toKey be !\u00a0ToString(\ud835\udd3d(to)).c. Let fromPresent be ?\u00a0HasProperty(O, fromKey).d. If fromPresent is true, theni. Let fromVal be ?\u00a0Get(O, fromKey).ii. Perform ?\u00a0Set(O, toKey, fromVal, true).e. Else,i. Assert: fromPresent is false.ii. Perform ?\u00a0DeletePropertyOrThrow(O, toKey).f. Set from to from + direction.g. Set to to to + direction.h. Set count to count - 1.19. Return O.\nNote 3\nThe copyWithin function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.5 Array.prototype.entries ( )\nWhen the entries method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Return CreateArrayIterator(O, key+value).\n\n\n23.1.3.6 Array.prototype.every ( callbackfn [ , thisArg ] )\nNote 1\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to a Boolean value. every calls callbackfn once for each element present in the array, in ascending order, until it finds one where callbackfn returns false. If such an element is found, every immediately returns false. Otherwise, if callbackfn returned true for all elements, every will return true. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not provided, undefined is used instead.\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed.\nevery does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\nThe range of elements processed by every is set before the first call to callbackfn. Elements which are appended to the array after the call to every begins will not be visited by callbackfn. If existing elements of the array are changed, their value as passed to callbackfn will be the value at the time every visits them; elements that are deleted after the call to every begins and before being visited are not visited. every acts like the \"for all\" quantifier in mathematics. In particular, for an empty array, it returns true.\n\nWhen the every method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If IsCallable(callbackfn) is false, throw a TypeError exception.4. Let k be 0.5. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kPresent be ?\u00a0HasProperty(O, Pk).c. If kPresent is true, theni. Let kValue be ?\u00a0Get(O, Pk).ii. Let testResult be ToBoolean(? Call(callbackfn, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb)).iii. If testResult is false, return false.d. Set k to k + 1.6. Return true.\nNote 2\nThe every function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.7 Array.prototype.fill ( value [ , start [ , end ] ] )\nNote 1\nThe start argument is optional. If it is not provided, +0\ud835\udd3d is used.\nThe end argument is optional. If it is not provided, the length of the this value is used.\n\nNote 2\nIf start is negative, it is treated as length + start where length is the length of the array. If end is negative, it is treated as length + end.\n\nWhen the fill method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. Let relativeStart be ?\u00a0ToIntegerOrInfinity(start).4. If relativeStart is -\u221e, let k be 0.5. Else if relativeStart < 0, let k be max(len + relativeStart, 0).6. Else, let k be min(relativeStart, len).7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\u00a0ToIntegerOrInfinity(end).8. If relativeEnd is -\u221e, let final be 0.9. Else if relativeEnd < 0, let final be max(len + relativeEnd, 0).10. Else, let final be min(relativeEnd, len).11. Repeat, while k < final,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Perform ?\u00a0Set(O, Pk, value, true).c. Set k to k + 1.12. Return O.\nNote 3\nThe fill function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.8 Array.prototype.filter ( callbackfn [ , thisArg ] )\nNote 1\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to a Boolean value. filter calls callbackfn once for each element in the array, in ascending order, and constructs a new array of all the values for which callbackfn returns true. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not provided, undefined is used instead.\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed.\nfilter does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\nThe range of elements processed by filter is set before the first call to callbackfn. Elements which are appended to the array after the call to filter begins will not be visited by callbackfn. If existing elements of the array are changed their value as passed to callbackfn will be the value at the time filter visits them; elements that are deleted after the call to filter begins and before being visited are not visited.\n\nWhen the filter method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If IsCallable(callbackfn) is false, throw a TypeError exception.4. Let A be ?\u00a0ArraySpeciesCreate(O, 0).5. Let k be 0.6. Let to be 0.7. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kPresent be ?\u00a0HasProperty(O, Pk).c. If kPresent is true, theni. Let kValue be ?\u00a0Get(O, Pk).ii. Let selected be ToBoolean(? Call(callbackfn, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb)).iii. If selected is true, then1. Perform ?\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(to)), kValue).2. Set to to to + 1.d. Set k to k + 1.8. Return A.\nNote 2\nThe filter function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.9 Array.prototype.find ( predicate [ , thisArg ] )\nNote 1\npredicate should be a function that accepts three arguments and returns a value that is coercible to a Boolean value. find calls predicate once for each element of the array, in ascending order, until it finds one where predicate returns true. If such an element is found, find immediately returns that element value. Otherwise, find returns undefined.\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of predicate. If it is not provided, undefined is used instead.\npredicate is called with three arguments: the value of the element, the index of the element, and the object being traversed.\nfind does not directly mutate the object on which it is called but the object may be mutated by the calls to predicate.\nThe range of elements processed by find is set before the first call to predicate. Elements that are appended to the array after the call to find begins will not be visited by predicate. If existing elements of the array are changed, their value as passed to predicate will be the value at the time that find visits them; elements that are deleted after the call to find begins and before being visited are still visited and are either looked up from the prototype or are undefined.\n\nWhen the find method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If IsCallable(predicate) is false, throw a TypeError exception.4. Let k be 0.5. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be ?\u00a0Get(O, Pk).c. Let testResult be ToBoolean(? Call(predicate, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb)).d. If testResult is true, return kValue.e. Set k to k + 1.6. Return undefined.\nNote 2\nThe find function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.10 Array.prototype.findIndex ( predicate [ , thisArg ] )\nNote 1\npredicate should be a function that accepts three arguments and returns a value that is coercible to a Boolean value. findIndex calls predicate once for each element of the array, in ascending order, until it finds one where predicate returns true. If such an element is found, findIndex immediately returns the index of that element value. Otherwise, findIndex returns -1.\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of predicate. If it is not provided, undefined is used instead.\npredicate is called with three arguments: the value of the element, the index of the element, and the object being traversed.\nfindIndex does not directly mutate the object on which it is called but the object may be mutated by the calls to predicate.\nThe range of elements processed by findIndex is set before the first call to predicate. Elements that are appended to the array after the call to findIndex begins will not be visited by predicate. If existing elements of the array are changed, their value as passed to predicate will be the value at the time that findIndex visits them; elements that are deleted after the call to findIndex begins and before being visited are still visited and are either looked up from the prototype or are undefined.\n\nWhen the findIndex method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If IsCallable(predicate) is false, throw a TypeError exception.4. Let k be 0.5. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be ?\u00a0Get(O, Pk).c. Let testResult be ToBoolean(? Call(predicate, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb)).d. If testResult is true, return \ud835\udd3d(k).e. Set k to k + 1.6. Return -1\ud835\udd3d.\nNote 2\nThe findIndex function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.11 Array.prototype.flat ( [ depth ] )\nWhen the flat method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let sourceLen be ?\u00a0LengthOfArrayLike(O).3. Let depthNum be 1.4. If depth is not undefined, thena. Set depthNum to ?\u00a0ToIntegerOrInfinity(depth).b. If depthNum < 0, set depthNum to 0.5. Let A be ?\u00a0ArraySpeciesCreate(O, 0).6. Perform ?\u00a0FlattenIntoArray(A, O, sourceLen, 0, depthNum).7. Return A.\n\n23.1.3.11.1 FlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction [ , thisArg ] ] )\nThe abstract operation FlattenIntoArray takes arguments target (an Object), source (an Object), sourceLen (a non-negative integer), start (a non-negative integer), and depth (a non-negative integer or +\u221e) and optional arguments mapperFunction and thisArg and returns either a normal completion containing a non-negative integer or an abrupt completion. It performs the following steps when called:\n1. Assert: If mapperFunction is present, then IsCallable(mapperFunction) is true, thisArg is present, and depth is 1.2. Let targetIndex be start.3. Let sourceIndex be +0\ud835\udd3d.4. Repeat, while \u211d(sourceIndex) < sourceLen,a. Let P be !\u00a0ToString(sourceIndex).b. Let exists be ?\u00a0HasProperty(source, P).c. If exists is true, theni. Let element be ?\u00a0Get(source, P).ii. If mapperFunction is present, then1. Set element to ?\u00a0Call(mapperFunction, thisArg, \u00ab element, sourceIndex, source \u00bb).iii. Let shouldFlatten be false.iv. If depth > 0, then1. Set shouldFlatten to ?\u00a0IsArray(element).v. If shouldFlatten is true, then1. If depth is +\u221e, let newDepth be +\u221e.2. Else, let newDepth be depth - 1.3. Let elementLen be ?\u00a0LengthOfArrayLike(element).4. Set targetIndex to ?\u00a0FlattenIntoArray(target, element, elementLen, targetIndex, newDepth).vi. Else,1. If targetIndex \u2265 253 - 1, throw a TypeError exception.2. Perform ?\u00a0CreateDataPropertyOrThrow(target, !\u00a0ToString(\ud835\udd3d(targetIndex)), element).3. Set targetIndex to targetIndex + 1.d. Set sourceIndex to sourceIndex + 1\ud835\udd3d.5. Return targetIndex.\n\n\n\n23.1.3.12 Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\nWhen the flatMap method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let sourceLen be ?\u00a0LengthOfArrayLike(O).3. If IsCallable(mapperFunction) is false, throw a TypeError exception.4. Let A be ?\u00a0ArraySpeciesCreate(O, 0).5. Perform ?\u00a0FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, thisArg).6. Return A.\n\n\n23.1.3.13 Array.prototype.forEach ( callbackfn [ , thisArg ] )\nNote 1\ncallbackfn should be a function that accepts three arguments. forEach calls callbackfn once for each element present in the array, in ascending order. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not provided, undefined is used instead.\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed.\nforEach does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\nThe range of elements processed by forEach is set before the first call to callbackfn. Elements which are appended to the array after the call to forEach begins will not be visited by callbackfn. If existing elements of the array are changed, their value as passed to callbackfn will be the value at the time forEach visits them; elements that are deleted after the call to forEach begins and before being visited are not visited.\n\nWhen the forEach method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If IsCallable(callbackfn) is false, throw a TypeError exception.4. Let k be 0.5. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kPresent be ?\u00a0HasProperty(O, Pk).c. If kPresent is true, theni. Let kValue be ?\u00a0Get(O, Pk).ii. Perform ?\u00a0Call(callbackfn, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb).d. Set k to k + 1.6. Return undefined.\nNote 2\nThe forEach function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.14 Array.prototype.includes ( searchElement [ , fromIndex ] )\nNote 1\nincludes compares searchElement to the elements of the array, in ascending order, using the SameValueZero algorithm, and if found at any position, returns true; otherwise, false is returned.\nThe optional second argument fromIndex defaults to +0\ud835\udd3d (i.e. the whole array is searched). If it is greater than or equal to the length of the array, false is returned, i.e. the array will not be searched. If it is less than +0\ud835\udd3d, it is used as the offset from the end of the array to compute fromIndex. If the computed index is less than +0\ud835\udd3d, the whole array will be searched.\n\nWhen the includes method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If len is 0, return false.4. Let n be ?\u00a0ToIntegerOrInfinity(fromIndex).5. Assert: If fromIndex is undefined, then n is 0.6. If n is +\u221e, return false.7. Else if n is -\u221e, set n to 0.8. If n \u2265 0, thena. Let k be n.9. Else,a. Let k be len + n.b. If k < 0, set k to 0.10. Repeat, while k < len,a. Let elementK be ?\u00a0Get(O, !\u00a0ToString(\ud835\udd3d(k))).b. If SameValueZero(searchElement, elementK) is true, return true.c. Set k to k + 1.11. Return false.\nNote 2\nThe includes function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\nNote 3\nThe includes method intentionally differs from the similar indexOf method in two ways. First, it uses the SameValueZero algorithm, instead of IsStrictlyEqual, allowing it to detect NaN array elements. Second, it does not skip missing array elements, instead treating them as undefined.\n\n\n\n23.1.3.15 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\nindexOf compares searchElement to the elements of the array, in ascending order, using the IsStrictlyEqual algorithm, and if found at one or more indices, returns the smallest such index; otherwise, -1\ud835\udd3d is returned.\nNote 1\nThe optional second argument fromIndex defaults to +0\ud835\udd3d (i.e. the whole array is searched). If it is greater than or equal to the length of the array, -1\ud835\udd3d is returned, i.e. the array will not be searched. If it is less than +0\ud835\udd3d, it is used as the offset from the end of the array to compute fromIndex. If the computed index is less than +0\ud835\udd3d, the whole array will be searched.\n\nWhen the indexOf method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If len is 0, return -1\ud835\udd3d.4. Let n be ?\u00a0ToIntegerOrInfinity(fromIndex).5. Assert: If fromIndex is undefined, then n is 0.6. If n is +\u221e, return -1\ud835\udd3d.7. Else if n is -\u221e, set n to 0.8. If n \u2265 0, thena. Let k be n.9. Else,a. Let k be len + n.b. If k < 0, set k to 0.10. Repeat, while k < len,a. Let kPresent be ?\u00a0HasProperty(O, !\u00a0ToString(\ud835\udd3d(k))).b. If kPresent is true, theni. Let elementK be ?\u00a0Get(O, !\u00a0ToString(\ud835\udd3d(k))).ii. Let same be IsStrictlyEqual(searchElement, elementK).iii. If same is true, return \ud835\udd3d(k).c. Set k to k + 1.11. Return -1\ud835\udd3d.\nNote 2\nThe indexOf function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.16 Array.prototype.join ( separator )\nThe elements of the array are converted to Strings, and these Strings are then concatenated, separated by occurrences of the separator. If no separator is provided, a single comma is used as the separator.\nWhen the join method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If separator is undefined, let sep be the single-element String \",\".4. Else, let sep be ?\u00a0ToString(separator).5. Let R be the empty String.6. Let k be 0.7. Repeat, while k < len,a. If k > 0, set R to the string-concatenation of R and sep.b. Let element be ?\u00a0Get(O, !\u00a0ToString(\ud835\udd3d(k))).c. If element is undefined or null, let next be the empty String; otherwise, let next be ?\u00a0ToString(element).d. Set R to the string-concatenation of R and next.e. Set k to k + 1.8. Return R.\nNote\nThe join function is intentionally generic; it does not require that its this value be an Array. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.17 Array.prototype.keys ( )\nWhen the keys method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Return CreateArrayIterator(O, key).\n\n\n23.1.3.18 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\nNote 1\nlastIndexOf compares searchElement to the elements of the array in descending order using the IsStrictlyEqual algorithm, and if found at one or more indices, returns the largest such index; otherwise, -1\ud835\udd3d is returned.\nThe optional second argument fromIndex defaults \nto the array's length minus one (i.e. the whole array is searched). If \nit is greater than or equal to the length of the array, the whole array \nwill be searched. If it is less than +0\ud835\udd3d, it is used as the offset from the end of the array to compute fromIndex. If the computed index is less than +0\ud835\udd3d, -1\ud835\udd3d is returned.\n\nWhen the lastIndexOf method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If len is 0, return -1\ud835\udd3d.4. If fromIndex is present, let n be ?\u00a0ToIntegerOrInfinity(fromIndex); else let n be len - 1.5. If n is -\u221e, return -1\ud835\udd3d.6. If n \u2265 0, thena. Let k be min(n, len - 1).7. Else,a. Let k be len + n.8. Repeat, while k \u2265 0,a. Let kPresent be ?\u00a0HasProperty(O, !\u00a0ToString(\ud835\udd3d(k))).b. If kPresent is true, theni. Let elementK be ?\u00a0Get(O, !\u00a0ToString(\ud835\udd3d(k))).ii. Let same be IsStrictlyEqual(searchElement, elementK).iii. If same is true, return \ud835\udd3d(k).c. Set k to k - 1.9. Return -1\ud835\udd3d.\nNote 2\nThe lastIndexOf function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.19 Array.prototype.map ( callbackfn [ , thisArg ] )\nNote 1\ncallbackfn should be a function that accepts three arguments. map calls callbackfn once for each element in the array, in ascending order, and constructs a new Array from the results. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not provided, undefined is used instead.\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed.\nmap does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\nThe range of elements processed by map is set before the first call to callbackfn. Elements which are appended to the array after the call to map begins will not be visited by callbackfn. If existing elements of the array are changed, their value as passed to callbackfn will be the value at the time map visits them; elements that are deleted after the call to map begins and before being visited are not visited.\n\nWhen the map method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If IsCallable(callbackfn) is false, throw a TypeError exception.4. Let A be ?\u00a0ArraySpeciesCreate(O, len).5. Let k be 0.6. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kPresent be ?\u00a0HasProperty(O, Pk).c. If kPresent is true, theni. Let kValue be ?\u00a0Get(O, Pk).ii. Let mappedValue be ?\u00a0Call(callbackfn, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb).iii. Perform ?\u00a0CreateDataPropertyOrThrow(A, Pk, mappedValue).d. Set k to k + 1.7. Return A.\nNote 2\nThe map function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.20 Array.prototype.pop ( )\nNote 1\nThe last element of the array is removed from the array and returned.\n\nWhen the pop method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If len = 0, thena. Perform ?\u00a0Set(O, \"length\", +0\ud835\udd3d, true).b. Return undefined.4. Else,a. Assert: len > 0.b. Let newLen be \ud835\udd3d(len - 1).c. Let index be !\u00a0ToString(newLen).d. Let element be ?\u00a0Get(O, index).e. Perform ?\u00a0DeletePropertyOrThrow(O, index).f. Perform ?\u00a0Set(O, \"length\", newLen, true).g. Return element.\nNote 2\nThe pop function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.21 Array.prototype.push ( ...items )\nNote 1\nThe arguments are appended to the end of the array, in the \norder in which they appear. The new length of the array is returned as \nthe result of the call.\n\nWhen the push method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. Let argCount be the number of elements in items.4. If len + argCount > 253 - 1, throw a TypeError exception.5. For each element E of items, doa. Perform ?\u00a0Set(O, !\u00a0ToString(\ud835\udd3d(len)), E, true).b. Set len to len + 1.6. Perform ?\u00a0Set(O, \"length\", \ud835\udd3d(len), true).7. Return \ud835\udd3d(len).\nThe \"length\" property of the push method is 1\ud835\udd3d.\nNote 2\nThe push function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.22 Array.prototype.reduce ( callbackfn [ , initialValue ] )\nNote 1\ncallbackfn should be a function that takes four arguments. reduce calls the callback, as a function, once for each element after the first element present in the array, in ascending order.\ncallbackfn is called with four arguments: the previousValue (value from the previous call to callbackfn), the currentValue (value of the current element), the currentIndex, and the object being traversed. The first time that callback is called, the previousValue and currentValue can be one of two values. If an initialValue was supplied in the call to reduce, then previousValue will be equal to initialValue and currentValue will be equal to the first value in the array. If no initialValue was supplied, then previousValue will be equal to the first value in the array and currentValue will be equal to the second. It is a TypeError if the array contains no elements and initialValue is not provided.\nreduce does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\nThe range of elements processed by reduce is set before the first call to callbackfn. Elements that are appended to the array after the call to reduce begins will not be visited by callbackfn. If existing elements of the array are changed, their value as passed to callbackfn will be the value at the time reduce visits them; elements that are deleted after the call to reduce begins and before being visited are not visited.\n\nWhen the reduce method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If IsCallable(callbackfn) is false, throw a TypeError exception.4. If len = 0 and initialValue is not present, throw a TypeError exception.5. Let k be 0.6. Let accumulator be undefined.7. If initialValue is present, thena. Set accumulator to initialValue.8. Else,a. Let kPresent be false.b. Repeat, while kPresent is false and k < len,i. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).ii. Set kPresent to ?\u00a0HasProperty(O, Pk).iii. If kPresent is true, then1. Set accumulator to ?\u00a0Get(O, Pk).iv. Set k to k + 1.c. If kPresent is false, throw a TypeError exception.9. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kPresent be ?\u00a0HasProperty(O, Pk).c. If kPresent is true, theni. Let kValue be ?\u00a0Get(O, Pk).ii. Set accumulator to ?\u00a0Call(callbackfn, undefined, \u00ab accumulator, kValue, \ud835\udd3d(k), O \u00bb).d. Set k to k + 1.10. Return accumulator.\nNote 2\nThe reduce function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.23 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\nNote 1\ncallbackfn should be a function that takes four arguments. reduceRight calls the callback, as a function, once for each element after the first element present in the array, in descending order.\ncallbackfn is called with four arguments: the previousValue (value from the previous call to callbackfn), the currentValue (value of the current element), the currentIndex, and the object being traversed. The first time the function is called, the previousValue and currentValue can be one of two values. If an initialValue was supplied in the call to reduceRight, then previousValue will be equal to initialValue and currentValue will be equal to the last value in the array. If no initialValue was supplied, then previousValue will be equal to the last value in the array and currentValue will be equal to the second-to-last value. It is a TypeError if the array contains no elements and initialValue is not provided.\nreduceRight does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\nThe range of elements processed by reduceRight is set before the first call to callbackfn. Elements that are appended to the array after the call to reduceRight begins will not be visited by callbackfn. If existing elements of the array are changed by callbackfn, their value as passed to callbackfn will be the value at the time reduceRight visits them; elements that are deleted after the call to reduceRight begins and before being visited are not visited.\n\nWhen the reduceRight method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If IsCallable(callbackfn) is false, throw a TypeError exception.4. If len is 0 and initialValue is not present, throw a TypeError exception.5. Let k be len - 1.6. Let accumulator be undefined.7. If initialValue is present, thena. Set accumulator to initialValue.8. Else,a. Let kPresent be false.b. Repeat, while kPresent is false and k \u2265 0,i. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).ii. Set kPresent to ?\u00a0HasProperty(O, Pk).iii. If kPresent is true, then1. Set accumulator to ?\u00a0Get(O, Pk).iv. Set k to k - 1.c. If kPresent is false, throw a TypeError exception.9. Repeat, while k \u2265 0,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kPresent be ?\u00a0HasProperty(O, Pk).c. If kPresent is true, theni. Let kValue be ?\u00a0Get(O, Pk).ii. Set accumulator to ?\u00a0Call(callbackfn, undefined, \u00ab accumulator, kValue, \ud835\udd3d(k), O \u00bb).d. Set k to k - 1.10. Return accumulator.\nNote 2\nThe reduceRight function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.24 Array.prototype.reverse ( )\nNote 1\nThe elements of the array are rearranged so as to reverse their order. The object is returned as the result of the call.\n\nWhen the reverse method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. Let middle be floor(len / 2).4. Let lower be 0.5. Repeat, while lower \u2260 middle,a. Let upper be len - lower - 1.b. Let upperP be !\u00a0ToString(\ud835\udd3d(upper)).c. Let lowerP be !\u00a0ToString(\ud835\udd3d(lower)).d. Let lowerExists be ?\u00a0HasProperty(O, lowerP).e. If lowerExists is true, theni. Let lowerValue be ?\u00a0Get(O, lowerP).f. Let upperExists be ?\u00a0HasProperty(O, upperP).g. If upperExists is true, theni. Let upperValue be ?\u00a0Get(O, upperP).h. If lowerExists is true and upperExists is true, theni. Perform ?\u00a0Set(O, lowerP, upperValue, true).ii. Perform ?\u00a0Set(O, upperP, lowerValue, true).i. Else if lowerExists is false and upperExists is true, theni. Perform ?\u00a0Set(O, lowerP, upperValue, true).ii. Perform ?\u00a0DeletePropertyOrThrow(O, upperP).j. Else if lowerExists is true and upperExists is false, theni. Perform ?\u00a0DeletePropertyOrThrow(O, lowerP).ii. Perform ?\u00a0Set(O, upperP, lowerValue, true).k. Else,i. Assert: lowerExists and upperExists are both false.ii. No action is required.l. Set lower to lower + 1.6. Return O.\nNote 2\nThe reverse function is intentionally generic; it does not require that its this value be an Array. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.25 Array.prototype.shift ( )\nThe first element of the array is removed from the array and returned.\nWhen the shift method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If len = 0, thena. Perform ?\u00a0Set(O, \"length\", +0\ud835\udd3d, true).b. Return undefined.4. Let first be ?\u00a0Get(O, \"0\").5. Let k be 1.6. Repeat, while k < len,a. Let from be !\u00a0ToString(\ud835\udd3d(k)).b. Let to be !\u00a0ToString(\ud835\udd3d(k - 1)).c. Let fromPresent be ?\u00a0HasProperty(O, from).d. If fromPresent is true, theni. Let fromVal be ?\u00a0Get(O, from).ii. Perform ?\u00a0Set(O, to, fromVal, true).e. Else,i. Assert: fromPresent is false.ii. Perform ?\u00a0DeletePropertyOrThrow(O, to).f. Set k to k + 1.7. Perform ?\u00a0DeletePropertyOrThrow(O, !\u00a0ToString(\ud835\udd3d(len - 1))).8. Perform ?\u00a0Set(O, \"length\", \ud835\udd3d(len - 1), true).9. Return first.\nNote\nThe shift function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.26 Array.prototype.slice ( start, end )\nThe slice method returns an array containing the elements of the array from element start up to, but not including, element end (or through the end of the array if end is undefined). If start is negative, it is treated as length + start where length is the length of the array. If end is negative, it is treated as length + end where length is the length of the array.\nWhen the slice method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. Let relativeStart be ?\u00a0ToIntegerOrInfinity(start).4. If relativeStart is -\u221e, let k be 0.5. Else if relativeStart < 0, let k be max(len + relativeStart, 0).6. Else, let k be min(relativeStart, len).7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\u00a0ToIntegerOrInfinity(end).8. If relativeEnd is -\u221e, let final be 0.9. Else if relativeEnd < 0, let final be max(len + relativeEnd, 0).10. Else, let final be min(relativeEnd, len).11. Let count be max(final - k, 0).12. Let A be ?\u00a0ArraySpeciesCreate(O, count).13. Let n be 0.14. Repeat, while k < final,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kPresent be ?\u00a0HasProperty(O, Pk).c. If kPresent is true, theni. Let kValue be ?\u00a0Get(O, Pk).ii. Perform ?\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(n)), kValue).d. Set k to k + 1.e. Set n to n + 1.15. Perform ?\u00a0Set(A, \"length\", \ud835\udd3d(n), true).16. Return A.\nNote 1\nThe explicit setting of the \"length\" property of the result Array in step 15\n was necessary in previous editions of ECMAScript to ensure that its \nlength was correct in situations where the trailing elements of the \nresult Array were not present. Setting \"length\" \nbecame unnecessary starting in ES2015 when the result Array was \ninitialized to its proper length rather than an empty Array but is \ncarried forward to preserve backward compatibility.\n\nNote 2\nThe slice function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.27 Array.prototype.some ( callbackfn [ , thisArg ] )\nNote 1\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to a Boolean value. some calls callbackfn once for each element present in the array, in ascending order, until it finds one where callbackfn returns true. If such an element is found, some immediately returns true. Otherwise, some returns false. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not provided, undefined is used instead.\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed.\nsome does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\nThe range of elements processed by some is set before the first call to callbackfn. Elements that are appended to the array after the call to some begins will not be visited by callbackfn. If existing elements of the array are changed, their value as passed to callbackfn will be the value at the time that some visits them; elements that are deleted after the call to some begins and before being visited are not visited. some acts like the \"exists\" quantifier in mathematics. In particular, for an empty array, it returns false.\n\nWhen the some method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. If IsCallable(callbackfn) is false, throw a TypeError exception.4. Let k be 0.5. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kPresent be ?\u00a0HasProperty(O, Pk).c. If kPresent is true, theni. Let kValue be ?\u00a0Get(O, Pk).ii. Let testResult be ToBoolean(? Call(callbackfn, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb)).iii. If testResult is true, return true.d. Set k to k + 1.6. Return false.\nNote 2\nThe some function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.28 Array.prototype.sort ( comparefn )\nThe elements of this array are sorted. The sort must be \nstable (that is, elements that compare equal must remain in their \noriginal order). If comparefn is not undefined, it should be a function that accepts two arguments x and y and returns a negative Number if x < y, a positive Number if x > y, or a zero otherwise.\nWhen the sort method is called, the following steps are taken:\n1. If comparefn is not undefined and IsCallable(comparefn) is false, throw a TypeError exception.2. Let obj be ?\u00a0ToObject(this value).3. Let len be ?\u00a0LengthOfArrayLike(obj).4. Let SortCompare be a new Abstract Closure with parameters (x, y) that captures comparefn and performs the following steps when called:a. If x and y are both undefined, return +0\ud835\udd3d.b. If x is undefined, return 1\ud835\udd3d.c. If y is undefined, return -1\ud835\udd3d.d. If comparefn is not undefined, theni. Let v be ?\u00a0ToNumber(? Call(comparefn, undefined, \u00ab x, y \u00bb)).ii. If v is NaN, return +0\ud835\udd3d.iii. Return v.e. Let xString be ?\u00a0ToString(x).f. Let yString be ?\u00a0ToString(y).g. Let xSmaller be !\u00a0IsLessThan(xString, yString, true).h. If xSmaller is true, return -1\ud835\udd3d.i. Let ySmaller be !\u00a0IsLessThan(yString, xString, true).j. If ySmaller is true, return 1\ud835\udd3d.k. Return +0\ud835\udd3d.5. Return ?\u00a0SortIndexedProperties(obj, len, SortCompare).\nNote 1\nBecause non-existent property values always compare greater than undefined property values, and undefined always compares greater than any other value, undefined property values always sort to the end of the result, followed by non-existent property values.\n\nNote 2\nMethod calls performed by the ToString abstract operations in steps 4.e and 4.f have the potential to cause SortCompare to not behave as a consistent comparator.\n\nNote 3\nThe sort function is intentionally generic; it does not require that its this value be an Array. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n\n23.1.3.28.1 SortIndexedProperties ( obj, len, SortCompare )\nThe abstract operation SortIndexedProperties takes arguments obj (an Object), len (a non-negative integer), and SortCompare (an Abstract Closure with two parameters) and returns either a normal completion containing an Object or an abrupt completion. It performs the following steps when called:\n1. Let items be a new empty List.2. Let k be 0.3. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kPresent be ?\u00a0HasProperty(obj, Pk).c. If kPresent is true, theni. Let kValue be ?\u00a0Get(obj, Pk).ii. Append kValue to items.d. Set k to k + 1.4. Let itemCount be the number of elements in items.5. Sort items using an implementation-defined sequence of calls to SortCompare. If any such call returns an abrupt completion, stop before performing any further calls to SortCompare and return that Completion Record.6. Let j be 0.7. Repeat, while j < itemCount,a. Perform ?\u00a0Set(obj, !\u00a0ToString(\ud835\udd3d(j)), items[j], true).b. Set j to j + 1.8. Repeat, while j < len,a. Perform ?\u00a0DeletePropertyOrThrow(obj, !\u00a0ToString(\ud835\udd3d(j))).b. Set j to j + 1.9. Return obj.\nThe sort order is the ordering of items after completion of step 5 of the algorithm above. The sort order is implementation-defined if SortCompare is not a consistent comparator for the elements of items. When SortIndexedProperties is invoked by Array.prototype.sort, the sort order is also implementation-defined if comparefn is undefined, and all applications of ToString, to any specific value passed as an argument to SortCompare, do not produce the same result.\nUnless the sort order is specified to be implementation-defined, it must satisfy all of the following conditions:\n\n\n              There must be some mathematical permutation \u03c0 of the non-negative integers less than itemCount, such that for every non-negative integer j less than itemCount, the element old[j] is exactly the same as new[\u03c0(j)].\n            \n\n              Then for all non-negative integers j and k, each less than itemCount, if SortCompare(old[j], old[k]) < 0, then \u03c0(j) < \u03c0(k).\n            \n\nHere the notation old[j] is used to refer to items[j] before step 5 is executed, and the notation new[j] to refer to items[j] after step 5 has been executed.\nAn abstract closure or function comparator is a consistent comparator for a set of values S if all of the requirements below are met for all values a, b, and c (possibly the same value) in the set S: The notation a <C b means comparator(a, b) < 0; a =C b means comparator(a, b) = 0 (of either sign); and a >C b means comparator(a, b) > 0.\n\n\n              Calling comparator(a, b) always returns the same value v when given a specific pair of values a and b as its two arguments. Furthermore, Type(v) is Number, and v is not NaN. Note that this implies that exactly one of a <C b, a =C b, and a >C b will be true for a given pair of a and b.\n            \n\n              Calling comparator(a, b) does not modify obj or any object on obj's prototype chain.\n            \n\na =C a (reflexivity)\n            \n\n              If a =C b, then b =C a (symmetry)\n            \n\n              If a =C b and b =C c, then a =C c (transitivity of =C)\n            \n\n              If a <C b and b <C c, then a <C c (transitivity of <C)\n            \n\n              If a >C b and b >C c, then a >C c (transitivity of >C)\n            \n\nNote\nThe above conditions are necessary and sufficient to ensure that comparator divides the set S into equivalence classes and that these equivalence classes are totally ordered.\n\n\n\n\n23.1.3.29 Array.prototype.splice ( start, deleteCount, ...items )\nNote 1\nThe deleteCount elements of the array starting at integer index start are replaced by the elements of items. An Array containing the deleted elements (if any) is returned.\n\nWhen the splice method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. Let relativeStart be ?\u00a0ToIntegerOrInfinity(start).4. If relativeStart is -\u221e, let actualStart be 0.5. Else if relativeStart < 0, let actualStart be max(len + relativeStart, 0).6. Else, let actualStart be min(relativeStart, len).7. Let insertCount be the number of elements in items.8. If start is not present, thena. Let actualDeleteCount be 0.9. Else if deleteCount is not present, thena. Let actualDeleteCount be len - actualStart.10. Else,a. Let dc be ?\u00a0ToIntegerOrInfinity(deleteCount).b. Let actualDeleteCount be the result of clamping dc between 0 and len - actualStart.11. If len + insertCount - actualDeleteCount > 253 - 1, throw a TypeError exception.12. Let A be ?\u00a0ArraySpeciesCreate(O, actualDeleteCount).13. Let k be 0.14. Repeat, while k < actualDeleteCount,a. Let from be !\u00a0ToString(\ud835\udd3d(actualStart + k)).b. If ?\u00a0HasProperty(O, from) is true, theni. Let fromValue be ?\u00a0Get(O, from).ii. Perform ?\u00a0CreateDataPropertyOrThrow(A, !\u00a0ToString(\ud835\udd3d(k)), fromValue).c. Set k to k + 1.15. Perform ?\u00a0Set(A, \"length\", \ud835\udd3d(actualDeleteCount), true).16. Let itemCount be the number of elements in items.17. If itemCount < actualDeleteCount, thena. Set k to actualStart.b. Repeat, while k < (len - actualDeleteCount),i. Let from be !\u00a0ToString(\ud835\udd3d(k + actualDeleteCount)).ii. Let to be !\u00a0ToString(\ud835\udd3d(k + itemCount)).iii. If ?\u00a0HasProperty(O, from) is true, then1. Let fromValue be ?\u00a0Get(O, from).2. Perform ?\u00a0Set(O, to, fromValue, true).iv. Else,1. Perform ?\u00a0DeletePropertyOrThrow(O, to).v. Set k to k + 1.c. Set k to len.d. Repeat, while k > (len - actualDeleteCount + itemCount),i. Perform ?\u00a0DeletePropertyOrThrow(O, !\u00a0ToString(\ud835\udd3d(k - 1))).ii. Set k to k - 1.18. Else if itemCount > actualDeleteCount, thena. Set k to (len - actualDeleteCount).b. Repeat, while k > actualStart,i. Let from be !\u00a0ToString(\ud835\udd3d(k + actualDeleteCount - 1)).ii. Let to be !\u00a0ToString(\ud835\udd3d(k + itemCount - 1)).iii. If ?\u00a0HasProperty(O, from) is true, then1. Let fromValue be ?\u00a0Get(O, from).2. Perform ?\u00a0Set(O, to, fromValue, true).iv. Else,1. Perform ?\u00a0DeletePropertyOrThrow(O, to).v. Set k to k - 1.19. Set k to actualStart.20. For each element E of items, doa. Perform ?\u00a0Set(O, !\u00a0ToString(\ud835\udd3d(k)), E, true).b. Set k to k + 1.21. Perform ?\u00a0Set(O, \"length\", \ud835\udd3d(len - actualDeleteCount + itemCount), true).22. Return A.\nNote 2\nThe explicit setting of the \"length\" property of the result Array in step 21\n was necessary in previous editions of ECMAScript to ensure that its \nlength was correct in situations where the trailing elements of the \nresult Array were not present. Setting \"length\" \nbecame unnecessary starting in ES2015 when the result Array was \ninitialized to its proper length rather than an empty Array but is \ncarried forward to preserve backward compatibility.\n\nNote 3\nThe splice function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.30 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\nAn ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the Array.prototype.toLocaleString\n method as specified in the ECMA-402 specification. If an ECMAScript \nimplementation does not include the ECMA-402 API the following \nspecification of the toLocaleString method is used.\nNote 1\nThe first edition of ECMA-402 did not include a replacement specification for the Array.prototype.toLocaleString method.\n\nThe meanings of the optional parameters to this method are \ndefined in the ECMA-402 specification; implementations that do not \ninclude ECMA-402 support must not use those parameter positions for \nanything else.\nWhen the toLocaleString method is called, the following steps are taken:\n1. Let array be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(array).3. Let separator be the implementation-defined list-separator String value appropriate for the host environment's current locale (such as \", \").4. Let R be the empty String.5. Let k be 0.6. Repeat, while k < len,a. If k > 0, theni. Set R to the string-concatenation of R and separator.b. Let nextElement be ?\u00a0Get(array, !\u00a0ToString(\ud835\udd3d(k))).c. If nextElement is not undefined or null, theni. Let S be ?\u00a0ToString(? Invoke(nextElement, \"toLocaleString\")).ii. Set R to the string-concatenation of R and S.d. Set k to k + 1.7. Return R.\nNote 2\nThe elements of the array are converted to Strings using their toLocaleString methods, and these Strings are then concatenated, separated by occurrences of an implementation-defined locale-sensitive separator String. This function is analogous to toString except that it is intended to yield a locale-sensitive result corresponding with conventions of the host environment's current locale.\n\nNote 3\nThe toLocaleString function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.31 Array.prototype.toString ( )\nWhen the toString method is called, the following steps are taken:\n1. Let array be ?\u00a0ToObject(this value).2. Let func be ?\u00a0Get(array, \"join\").3. If IsCallable(func) is false, set func to the intrinsic function %Object.prototype.toString%.4. Return ?\u00a0Call(func, array).\nNote\nThe toString function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.32 Array.prototype.unshift ( ...items )\nThe arguments are prepended to the start of the array, such \nthat their order within the array is the same as the order in which they\n appear in the argument list.\nWhen the unshift method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Let len be ?\u00a0LengthOfArrayLike(O).3. Let argCount be the number of elements in items.4. If argCount > 0, thena. If len + argCount > 253 - 1, throw a TypeError exception.b. Let k be len.c. Repeat, while k > 0,i. Let from be !\u00a0ToString(\ud835\udd3d(k - 1)).ii. Let to be !\u00a0ToString(\ud835\udd3d(k + argCount - 1)).iii. Let fromPresent be ?\u00a0HasProperty(O, from).iv. If fromPresent is true, then1. Let fromValue be ?\u00a0Get(O, from).2. Perform ?\u00a0Set(O, to, fromValue, true).v. Else,1. Assert: fromPresent is false.2. Perform ?\u00a0DeletePropertyOrThrow(O, to).vi. Set k to k - 1.d. Let j be +0\ud835\udd3d.e. For each element E of items, doi. Perform ?\u00a0Set(O, !\u00a0ToString(j), E, true).ii. Set j to j + 1\ud835\udd3d.5. Perform ?\u00a0Set(O, \"length\", \ud835\udd3d(len + argCount), true).6. Return \ud835\udd3d(len + argCount).\nThe \"length\" property of the unshift method is 1\ud835\udd3d.\nNote\nThe unshift function is intentionally generic; it does not require that its this value be an Array. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\n23.1.3.33 Array.prototype.values ( )\nWhen the values method is called, the following steps are taken:\n1. Let O be ?\u00a0ToObject(this value).2. Return CreateArrayIterator(O, value).\n\n\n23.1.3.34 Array.prototype [ @@iterator ] ( )\nThe initial value of the @@iterator property is %Array.prototype.values%, defined in 23.1.3.33.\n\n\n23.1.3.35 Array.prototype [ @@unscopables ]\nThe initial value of the @@unscopables data property is an object created by the following steps:\n1. Let unscopableList be OrdinaryObjectCreate(null).2. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"at\", true).3. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"copyWithin\", true).4. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"entries\", true).5. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"fill\", true).6. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"find\", true).7. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"findIndex\", true).8. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"flat\", true).9. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"flatMap\", true).10. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"includes\", true).11. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"keys\", true).12. Perform !\u00a0CreateDataPropertyOrThrow(unscopableList, \"values\", true).13. Return unscopableList.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\nNote\nThe own property names of this object are property names that were not included as standard properties of Array.prototype prior to the ECMAScript 2015 specification. These names are ignored for with\n statement binding purposes in order to preserve the behaviour of \nexisting code that might use one of these names as a binding in an outer\n scope that is shadowed by a with statement whose binding object is an Array.\n\n\n\n\n23.1.4 Properties of Array Instances\nArray instances are Array exotic objects and have the internal methods specified for such objects. Array instances inherit properties from the Array prototype object.\nArray instances have a \"length\" property, and a set of enumerable properties with array index names.\n\n23.1.4.1 length\nThe \"length\" property of an Array instance is a data property whose value is always numerically greater than the name of every configurable own property whose name is an array index.\nThe \"length\" property initially has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }.\nNote\nReducing the value of the \"length\" property has the side-effect of deleting own array elements whose array index is between the old and new length values. However, non-configurable properties can not be deleted. Attempting to set the \"length\" property of an Array to a value that is numerically less than or equal to the largest numeric own property name of an existing non-configurable array-indexed\n property of the array will result in the length being set to a numeric \nvalue that is one greater than that non-configurable numeric own property name. See 10.4.2.1.\n\n\n\n\n23.1.5 Array Iterator Objects\nAn Array Iterator is an object, that represents a specific \niteration over some specific Array instance object. There is not a named\n constructor for Array Iterator objects. Instead, Array iterator objects are created by calling certain methods of Array instance objects.\n\n23.1.5.1 CreateArrayIterator ( array, kind )\nThe abstract operation CreateArrayIterator takes arguments array (an Object) and kind (key+value, key, or value)\n and returns a Generator. It is used to create iterator objects for \nArray methods that return such iterators. It performs the following \nsteps when called:\n1. Let closure be a new Abstract Closure with no parameters that captures kind and array and performs the following steps when called:a. Let index be 0.b. Repeat,i. If array has a [[TypedArrayName]] internal slot, then1. If IsDetachedBuffer(array.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.2. Let len be array.[[ArrayLength]].ii. Else,1. Let len be ?\u00a0LengthOfArrayLike(array).iii. If index \u2265 len, return undefined.iv. If kind is key, perform ?\u00a0GeneratorYield(CreateIterResultObject(\ud835\udd3d(index), false)).v. Else,1. Let elementKey be !\u00a0ToString(\ud835\udd3d(index)).2. Let elementValue be ?\u00a0Get(array, elementKey).3. If kind is value, perform ?\u00a0GeneratorYield(CreateIterResultObject(elementValue, false)).4. Else,a. Assert: kind is key+value.b. Let result be CreateArrayFromList(\u00ab \ud835\udd3d(index), elementValue \u00bb).c. Perform ?\u00a0GeneratorYield(CreateIterResultObject(result, false)).vi. Set index to index + 1.2. Return CreateIteratorFromClosure(closure, \"%ArrayIteratorPrototype%\", %ArrayIteratorPrototype%).\n\n\n23.1.5.2 The %ArrayIteratorPrototype% Object\nThe %ArrayIteratorPrototype% object:\n\nhas properties that are inherited by all Array Iterator Objects.\nis an ordinary object.\nhas a [[Prototype]] internal slot whose value is %IteratorPrototype%.\nhas the following properties:\n\n\n23.1.5.2.1 %ArrayIteratorPrototype%.next ( )\n1. Return ?\u00a0GeneratorResume(this value, empty, \"%ArrayIteratorPrototype%\").\n\n\n23.1.5.2.2 %ArrayIteratorPrototype% [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Array Iterator\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n\n\n23.2 TypedArray Objects\nA TypedArray presents an array-like view of an underlying binary data buffer (25.1). A TypedArray element type is the underlying binary scalar data type that all elements of a TypedArray instance have. There is a distinct TypedArray constructor, listed in Table 71, for each of the supported element types. Each constructor in Table 71 has a corresponding distinct prototype object.\nTable 71: The TypedArray Constructors\n\n\n\nConstructor Name and Intrinsic\n          \n\n            Element Type\n          \n\n            Element Size\n          \n\n            Conversion Operation\n          \n\n            Description\n          \n\n\n\n            Int8Array\n%Int8Array%\n\n\nInt8\n\n\n            1\n          \n\nToInt8\n\n\n            8-bit two's complement signed integer\n\n\n\n\n            Uint8Array\n%Uint8Array%\n\n\nUint8\n\n\n            1\n          \n\nToUint8\n\n\n            8-bit unsigned integer\n\n\n\n\n            Uint8ClampedArray\n%Uint8ClampedArray%\n\n\nUint8C\n\n\n            1\n          \n\nToUint8Clamp\n\n\n            8-bit unsigned integer (clamped conversion)\n          \n\n\n\n            Int16Array\n%Int16Array%\n\n\nInt16\n\n\n            2\n          \n\nToInt16\n\n\n            16-bit two's complement signed integer\n\n\n\n\n            Uint16Array\n%Uint16Array%\n\n\nUint16\n\n\n            2\n          \n\nToUint16\n\n\n            16-bit unsigned integer\n\n\n\n\n            Int32Array\n%Int32Array%\n\n\nInt32\n\n\n            4\n          \n\nToInt32\n\n\n            32-bit two's complement signed integer\n\n\n\n\n            Uint32Array\n%Uint32Array%\n\n\nUint32\n\n\n            4\n          \n\nToUint32\n\n\n            32-bit unsigned integer\n\n\n\n\n            BigInt64Array\n%BigInt64Array%\n\n\nBigInt64\n\n\n            8\n          \n\nToBigInt64\n\n\n            64-bit two's complement signed integer\n\n\n\n\n            BigUint64Array\n%BigUint64Array%\n\n\nBigUint64\n\n\n            8\n          \n\nToBigUint64\n\n\n            64-bit unsigned integer\n\n\n\n\n            Float32Array\n%Float32Array%\n\n\nFloat32\n\n\n            4\n          \n\n\n\n            32-bit IEEE floating point\n          \n\n\n\n            Float64Array\n%Float64Array%\n\n\nFloat64\n\n\n            8\n          \n\n\n\n            64-bit IEEE floating point\n          \n\n\n\nIn the definitions below, references to TypedArray should be replaced with the appropriate constructor name from the above table.\n\n23.2.1 The %TypedArray% Intrinsic Object\nThe %TypedArray% intrinsic object:\n\nis a constructor function object that all of the TypedArray constructor objects inherit from.\nalong with its corresponding prototype object, provides common properties that are inherited by all TypedArray constructors and their instances.\ndoes not have a global name or appear as a property of the global object.\nacts as the abstract superclass of the various TypedArray constructors.\nwill throw an error when invoked, because it is an abstract class constructor. The TypedArray constructors do not perform a super call to it.\n\n\n23.2.1.1 %TypedArray% ( )\nThe %TypedArray% constructor performs the following steps when called:\n1. Throw a TypeError exception.\nThe \"length\" property of the %TypedArray% constructor function is +0\ud835\udd3d.\n\n\n\n23.2.2 Properties of the %TypedArray% Intrinsic Object\nThe %TypedArray% intrinsic object:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas a \"name\" property whose value is \"TypedArray\".\nhas the following properties:\n\n\n23.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\nWhen the from method is called, the following steps are taken:\n1. Let C be the this value.2. If IsConstructor(C) is false, throw a TypeError exception.3. If mapfn is undefined, let mapping be false.4. Else,a. If IsCallable(mapfn) is false, throw a TypeError exception.b. Let mapping be true.5. Let usingIterator be ?\u00a0GetMethod(source, @@iterator).6. If usingIterator is not undefined, thena. Let values be ?\u00a0IterableToList(source, usingIterator).b. Let len be the number of elements in values.c. Let targetObj be ?\u00a0TypedArrayCreate(C, \u00ab \ud835\udd3d(len) \u00bb).d. Let k be 0.e. Repeat, while k < len,i. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).ii. Let kValue be the first element of values and remove that element from values.iii. If mapping is true, then1. Let mappedValue be ?\u00a0Call(mapfn, thisArg, \u00ab kValue, \ud835\udd3d(k) \u00bb).iv. Else, let mappedValue be kValue.v. Perform ?\u00a0Set(targetObj, Pk, mappedValue, true).vi. Set k to k + 1.f. Assert: values is now an empty List.g. Return targetObj.7. NOTE: source is not an Iterable so assume it is already an array-like object.8. Let arrayLike be !\u00a0ToObject(source).9. Let len be ?\u00a0LengthOfArrayLike(arrayLike).10. Let targetObj be ?\u00a0TypedArrayCreate(C, \u00ab \ud835\udd3d(len) \u00bb).11. Let k be 0.12. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be ?\u00a0Get(arrayLike, Pk).c. If mapping is true, theni. Let mappedValue be ?\u00a0Call(mapfn, thisArg, \u00ab kValue, \ud835\udd3d(k) \u00bb).d. Else, let mappedValue be kValue.e. Perform ?\u00a0Set(targetObj, Pk, mappedValue, true).f. Set k to k + 1.13. Return targetObj.\n\n\n23.2.2.2 %TypedArray%.of ( ...items )\nWhen the of method is called, the following steps are taken:\n1. Let len be the number of elements in items.2. Let C be the this value.3. If IsConstructor(C) is false, throw a TypeError exception.4. Let newObj be ?\u00a0TypedArrayCreate(C, \u00ab \ud835\udd3d(len) \u00bb).5. Let k be 0.6. Repeat, while k < len,a. Let kValue be items[k].b. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).c. Perform ?\u00a0Set(newObj, Pk, kValue, true).d. Set k to k + 1.7. Return newObj.\n\n\n23.2.2.3 %TypedArray%.prototype\nThe initial value of %TypedArray%.prototype is the %TypedArray% prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n23.2.2.4 get %TypedArray% [ @@species ]\n%TypedArray%[@@species] is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps when called:\n1. Return the this value.\nThe value of the \"name\" property of this function is \"get [Symbol.species]\".\nNote\n%TypedArray.prototype% methods normally use their this value's constructor to create a derived object. However, a subclass constructor may over-ride that default behaviour by redefining its @@species property.\n\n\n\n\n23.2.3 Properties of the %TypedArray% Prototype Object\nThe %TypedArray% prototype object:\n\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis %TypedArray.prototype%.\nis an ordinary object.\ndoes not have a [[ViewedArrayBuffer]] or any other of the internal slots that are specific to TypedArray instance objects.\n\n\n23.2.3.1 %TypedArray%.prototype.at ( index )\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. Let relativeIndex be ?\u00a0ToIntegerOrInfinity(index).5. If relativeIndex \u2265 0, thena. Let k be relativeIndex.6. Else,a. Let k be len + relativeIndex.7. If k < 0 or k \u2265 len, return undefined.8. Return !\u00a0Get(O, !\u00a0ToString(\ud835\udd3d(k))).\n\n\n23.2.3.2 get %TypedArray%.prototype.buffer\n%TypedArray%.prototype.buffer is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps when called:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[TypedArrayName]]).3. Assert: O has a [[ViewedArrayBuffer]] internal slot.4. Let buffer be O.[[ViewedArrayBuffer]].5. Return buffer.\n\n\n23.2.3.3 get %TypedArray%.prototype.byteLength\n%TypedArray%.prototype.byteLength is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps when called:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[TypedArrayName]]).3. Assert: O has a [[ViewedArrayBuffer]] internal slot.4. Let buffer be O.[[ViewedArrayBuffer]].5. If IsDetachedBuffer(buffer) is true, return +0\ud835\udd3d.6. Let size be O.[[ByteLength]].7. Return \ud835\udd3d(size).\n\n\n23.2.3.4 get %TypedArray%.prototype.byteOffset\n%TypedArray%.prototype.byteOffset is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps when called:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[TypedArrayName]]).3. Assert: O has a [[ViewedArrayBuffer]] internal slot.4. Let buffer be O.[[ViewedArrayBuffer]].5. If IsDetachedBuffer(buffer) is true, return +0\ud835\udd3d.6. Let offset be O.[[ByteOffset]].7. Return \ud835\udd3d(offset).\n\n\n23.2.3.5 %TypedArray%.prototype.constructor\nThe initial value of %TypedArray%.prototype.constructor is %TypedArray%.\n\n\n23.2.3.6 %TypedArray%.prototype.copyWithin ( target, start [ , end ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.copyWithin are the same as for Array.prototype.copyWithin as defined in 23.1.3.4.\nWhen the copyWithin method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. Let relativeTarget be ?\u00a0ToIntegerOrInfinity(target).5. If relativeTarget is -\u221e, let to be 0.6. Else if relativeTarget < 0, let to be max(len + relativeTarget, 0).7. Else, let to be min(relativeTarget, len).8. Let relativeStart be ?\u00a0ToIntegerOrInfinity(start).9. If relativeStart is -\u221e, let from be 0.10. Else if relativeStart < 0, let from be max(len + relativeStart, 0).11. Else, let from be min(relativeStart, len).12. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\u00a0ToIntegerOrInfinity(end).13. If relativeEnd is -\u221e, let final be 0.14. Else if relativeEnd < 0, let final be max(len + relativeEnd, 0).15. Else, let final be min(relativeEnd, len).16. Let count be min(final - from, len - to).17. If count > 0, thena. NOTE: The copying must be performed in a manner that preserves the bit-level encoding of the source data.b. Let buffer be O.[[ViewedArrayBuffer]].c. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.d. Let elementSize be TypedArrayElementSize(O).e. Let byteOffset be O.[[ByteOffset]].f. Let toByteIndex be to \u00d7 elementSize + byteOffset.g. Let fromByteIndex be from \u00d7 elementSize + byteOffset.h. Let countBytes be count \u00d7 elementSize.i. If fromByteIndex < toByteIndex and toByteIndex < fromByteIndex + countBytes, theni. Let direction be -1.ii. Set fromByteIndex to fromByteIndex + countBytes - 1.iii. Set toByteIndex to toByteIndex + countBytes - 1.j. Else,i. Let direction be 1.k. Repeat, while countBytes > 0,i. Let value be GetValueFromBuffer(buffer, fromByteIndex, Uint8, true, Unordered).ii. Perform SetValueInBuffer(buffer, toByteIndex, Uint8, value, true, Unordered).iii. Set fromByteIndex to fromByteIndex + direction.iv. Set toByteIndex to toByteIndex + direction.v. Set countBytes to countBytes - 1.18. Return O.\n\n\n23.2.3.7 %TypedArray%.prototype.entries ( )\nWhen the entries method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Return CreateArrayIterator(O, key+value).\n\n\n23.2.3.8 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.every are the same as for Array.prototype.every as defined in 23.1.3.6.\nWhen the every method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If IsCallable(callbackfn) is false, throw a TypeError exception.5. Let k be 0.6. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be !\u00a0Get(O, Pk).c. Let testResult be ToBoolean(? Call(callbackfn, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb)).d. If testResult is false, return false.e. Set k to k + 1.7. Return true.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.9 %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.fill are the same as for Array.prototype.fill as defined in 23.1.3.7.\nWhen the fill method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If O.[[ContentType]] is BigInt, set value to ?\u00a0ToBigInt(value).5. Otherwise, set value to ?\u00a0ToNumber(value).6. Let relativeStart be ?\u00a0ToIntegerOrInfinity(start).7. If relativeStart is -\u221e, let k be 0.8. Else if relativeStart < 0, let k be max(len + relativeStart, 0).9. Else, let k be min(relativeStart, len).10. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\u00a0ToIntegerOrInfinity(end).11. If relativeEnd is -\u221e, let final be 0.12. Else if relativeEnd < 0, let final be max(len + relativeEnd, 0).13. Else, let final be min(relativeEnd, len).14. If IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.15. Repeat, while k < final,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Perform !\u00a0Set(O, Pk, value, true).c. Set k to k + 1.16. Return O.\n\n\n23.2.3.10 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.filter are the same as for Array.prototype.filter as defined in 23.1.3.8.\nWhen the filter method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If IsCallable(callbackfn) is false, throw a TypeError exception.5. Let kept be a new empty List.6. Let k be 0.7. Let captured be 0.8. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be !\u00a0Get(O, Pk).c. Let selected be ToBoolean(? Call(callbackfn, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb)).d. If selected is true, theni. Append kValue to the end of kept.ii. Set captured to captured + 1.e. Set k to k + 1.9. Let A be ?\u00a0TypedArraySpeciesCreate(O, \u00ab \ud835\udd3d(captured) \u00bb).10. Let n be 0.11. For each element e of kept, doa. Perform !\u00a0Set(A, !\u00a0ToString(\ud835\udd3d(n)), e, true).b. Set n to n + 1.12. Return A.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.11 %TypedArray%.prototype.find ( predicate [ , thisArg ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.find are the same as for Array.prototype.find as defined in 23.1.3.9.\nWhen the find method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If IsCallable(predicate) is false, throw a TypeError exception.5. Let k be 0.6. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be !\u00a0Get(O, Pk).c. Let testResult be ToBoolean(? Call(predicate, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb)).d. If testResult is true, return kValue.e. Set k to k + 1.7. Return undefined.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.12 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.findIndex are the same as for Array.prototype.findIndex as defined in 23.1.3.10.\nWhen the findIndex method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If IsCallable(predicate) is false, throw a TypeError exception.5. Let k be 0.6. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be !\u00a0Get(O, Pk).c. Let testResult be ToBoolean(? Call(predicate, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb)).d. If testResult is true, return \ud835\udd3d(k).e. Set k to k + 1.7. Return -1\ud835\udd3d.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.13 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.forEach are the same as for Array.prototype.forEach as defined in 23.1.3.13.\nWhen the forEach method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If IsCallable(callbackfn) is false, throw a TypeError exception.5. Let k be 0.6. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be !\u00a0Get(O, Pk).c. Perform ?\u00a0Call(callbackfn, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb).d. Set k to k + 1.7. Return undefined.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.14 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.includes are the same as for Array.prototype.includes as defined in 23.1.3.14.\nWhen the includes method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If len is 0, return false.5. Let n be ?\u00a0ToIntegerOrInfinity(fromIndex).6. Assert: If fromIndex is undefined, then n is 0.7. If n is +\u221e, return false.8. Else if n is -\u221e, set n to 0.9. If n \u2265 0, thena. Let k be n.10. Else,a. Let k be len + n.b. If k < 0, set k to 0.11. Repeat, while k < len,a. Let elementK be !\u00a0Get(O, !\u00a0ToString(\ud835\udd3d(k))).b. If SameValueZero(searchElement, elementK) is true, return true.c. Set k to k + 1.12. Return false.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.15 %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.indexOf are the same as for Array.prototype.indexOf as defined in 23.1.3.15.\nWhen the indexOf method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If len is 0, return -1\ud835\udd3d.5. Let n be ?\u00a0ToIntegerOrInfinity(fromIndex).6. Assert: If fromIndex is undefined, then n is 0.7. If n is +\u221e, return -1\ud835\udd3d.8. Else if n is -\u221e, set n to 0.9. If n \u2265 0, thena. Let k be n.10. Else,a. Let k be len + n.b. If k < 0, set k to 0.11. Repeat, while k < len,a. Let kPresent be !\u00a0HasProperty(O, !\u00a0ToString(\ud835\udd3d(k))).b. If kPresent is true, theni. Let elementK be !\u00a0Get(O, !\u00a0ToString(\ud835\udd3d(k))).ii. Let same be IsStrictlyEqual(searchElement, elementK).iii. If same is true, return \ud835\udd3d(k).c. Set k to k + 1.12. Return -1\ud835\udd3d.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.16 %TypedArray%.prototype.join ( separator )\nThe interpretation and use of the arguments of %TypedArray%.prototype.join are the same as for Array.prototype.join as defined in 23.1.3.16.\nWhen the join method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If separator is undefined, let sep be the single-element String \",\".5. Else, let sep be ?\u00a0ToString(separator).6. Let R be the empty String.7. Let k be 0.8. Repeat, while k < len,a. If k > 0, set R to the string-concatenation of R and sep.b. Let element be !\u00a0Get(O, !\u00a0ToString(\ud835\udd3d(k))).c. If element is undefined, let next be the empty String; otherwise, let next be !\u00a0ToString(element).d. Set R to the string-concatenation of R and next.e. Set k to k + 1.9. Return R.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.17 %TypedArray%.prototype.keys ( )\nWhen the keys method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Return CreateArrayIterator(O, key).\n\n\n23.2.3.18 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.lastIndexOf are the same as for Array.prototype.lastIndexOf as defined in 23.1.3.18.\nWhen the lastIndexOf method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If len is 0, return -1\ud835\udd3d.5. If fromIndex is present, let n be ?\u00a0ToIntegerOrInfinity(fromIndex); else let n be len - 1.6. If n is -\u221e, return -1\ud835\udd3d.7. If n \u2265 0, thena. Let k be min(n, len - 1).8. Else,a. Let k be len + n.9. Repeat, while k \u2265 0,a. Let kPresent be !\u00a0HasProperty(O, !\u00a0ToString(\ud835\udd3d(k))).b. If kPresent is true, theni. Let elementK be !\u00a0Get(O, !\u00a0ToString(\ud835\udd3d(k))).ii. Let same be IsStrictlyEqual(searchElement, elementK).iii. If same is true, return \ud835\udd3d(k).c. Set k to k - 1.10. Return -1\ud835\udd3d.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.19 get %TypedArray%.prototype.length\n%TypedArray%.prototype.length is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps when called:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[TypedArrayName]]).3. Assert: O has [[ViewedArrayBuffer]] and [[ArrayLength]] internal slots.4. Let buffer be O.[[ViewedArrayBuffer]].5. If IsDetachedBuffer(buffer) is true, return +0\ud835\udd3d.6. Let length be O.[[ArrayLength]].7. Return \ud835\udd3d(length).\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.20 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.map are the same as for Array.prototype.map as defined in 23.1.3.19.\nWhen the map method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If IsCallable(callbackfn) is false, throw a TypeError exception.5. Let A be ?\u00a0TypedArraySpeciesCreate(O, \u00ab \ud835\udd3d(len) \u00bb).6. Let k be 0.7. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be !\u00a0Get(O, Pk).c. Let mappedValue be ?\u00a0Call(callbackfn, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb).d. Perform ?\u00a0Set(A, Pk, mappedValue, true).e. Set k to k + 1.8. Return A.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.21 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.reduce are the same as for Array.prototype.reduce as defined in 23.1.3.22.\nWhen the reduce method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If IsCallable(callbackfn) is false, throw a TypeError exception.5. If len = 0 and initialValue is not present, throw a TypeError exception.6. Let k be 0.7. Let accumulator be undefined.8. If initialValue is present, thena. Set accumulator to initialValue.9. Else,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Set accumulator to !\u00a0Get(O, Pk).c. Set k to k + 1.10. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be !\u00a0Get(O, Pk).c. Set accumulator to ?\u00a0Call(callbackfn, undefined, \u00ab accumulator, kValue, \ud835\udd3d(k), O \u00bb).d. Set k to k + 1.11. Return accumulator.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.22 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.reduceRight are the same as for Array.prototype.reduceRight as defined in 23.1.3.23.\nWhen the reduceRight method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If IsCallable(callbackfn) is false, throw a TypeError exception.5. If len is 0 and initialValue is not present, throw a TypeError exception.6. Let k be len - 1.7. Let accumulator be undefined.8. If initialValue is present, thena. Set accumulator to initialValue.9. Else,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Set accumulator to !\u00a0Get(O, Pk).c. Set k to k - 1.10. Repeat, while k \u2265 0,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be !\u00a0Get(O, Pk).c. Set accumulator to ?\u00a0Call(callbackfn, undefined, \u00ab accumulator, kValue, \ud835\udd3d(k), O \u00bb).d. Set k to k - 1.11. Return accumulator.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.23 %TypedArray%.prototype.reverse ( )\nThe interpretation and use of the arguments of %TypedArray%.prototype.reverse are the same as for Array.prototype.reverse as defined in 23.1.3.24.\nWhen the reverse method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. Let middle be floor(len / 2).5. Let lower be 0.6. Repeat, while lower \u2260 middle,a. Let upper be len - lower - 1.b. Let upperP be !\u00a0ToString(\ud835\udd3d(upper)).c. Let lowerP be !\u00a0ToString(\ud835\udd3d(lower)).d. Let lowerValue be !\u00a0Get(O, lowerP).e. Let upperValue be !\u00a0Get(O, upperP).f. Perform !\u00a0Set(O, lowerP, upperValue, true).g. Perform !\u00a0Set(O, upperP, lowerValue, true).h. Set lower to lower + 1.7. Return O.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.24 %TypedArray%.prototype.set ( source [ , offset ] )\n%TypedArray%.prototype.set is a function whose behaviour differs based upon the type of its first argument.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\nSets multiple values in this TypedArray, reading the values from source. The optional offset value indicates the first element index in this TypedArray where values are written. If omitted, it is assumed to be 0.\nWhen the set method is called, the following steps are taken:\n1. Let target be the this value.2. Perform ?\u00a0RequireInternalSlot(target, [[TypedArrayName]]).3. Assert: target has a [[ViewedArrayBuffer]] internal slot.4. Let targetOffset be ?\u00a0ToIntegerOrInfinity(offset).5. If targetOffset < 0, throw a RangeError exception.6. If source is an Object that has a [[TypedArrayName]] internal slot, thena. Perform ?\u00a0SetTypedArrayFromTypedArray(target, targetOffset, source).7. Else,a. Perform ?\u00a0SetTypedArrayFromArrayLike(target, targetOffset, source).8. Return undefined.\n\n23.2.3.24.1 SetTypedArrayFromTypedArray ( target, targetOffset, source )\nThe abstract operation SetTypedArrayFromTypedArray takes arguments target (a TypedArray), targetOffset (a non-negative integer or +\u221e), and source (a TypedArray) and returns either a normal completion containing unused or an abrupt completion. It sets multiple values in target, starting at index targetOffset, reading the values from source. It performs the following steps when called:\n1. Let targetBuffer be target.[[ViewedArrayBuffer]].2. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.3. Let targetLength be target.[[ArrayLength]].4. Let srcBuffer be source.[[ViewedArrayBuffer]].5. If IsDetachedBuffer(srcBuffer) is true, throw a TypeError exception.6. Let targetType be TypedArrayElementType(target).7. Let targetElementSize be TypedArrayElementSize(target).8. Let targetByteOffset be target.[[ByteOffset]].9. Let srcType be TypedArrayElementType(source).10. Let srcElementSize be TypedArrayElementSize(source).11. Let srcLength be source.[[ArrayLength]].12. Let srcByteOffset be source.[[ByteOffset]].13. If targetOffset is +\u221e, throw a RangeError exception.14. If srcLength + targetOffset > targetLength, throw a RangeError exception.15. If target.[[ContentType]] \u2260 source.[[ContentType]], throw a TypeError exception.16. If both IsSharedArrayBuffer(srcBuffer) and IsSharedArrayBuffer(targetBuffer) are true, thena. If srcBuffer.[[ArrayBufferData]] and targetBuffer.[[ArrayBufferData]] are the same Shared Data Block values, let same be true; else let same be false.17. Else, let same be SameValue(srcBuffer, targetBuffer).18. If same is true, thena. Let srcByteLength be source.[[ByteLength]].b. Set srcBuffer to ?\u00a0CloneArrayBuffer(srcBuffer, srcByteOffset, srcByteLength, %ArrayBuffer%).c. NOTE: %ArrayBuffer% is used to clone srcBuffer because is it known to not have any observable side-effects.d. Let srcByteIndex be 0.19. Else, let srcByteIndex be srcByteOffset.20. Let targetByteIndex be targetOffset \u00d7 targetElementSize + targetByteOffset.21. Let limit be targetByteIndex + targetElementSize \u00d7 srcLength.22. If srcType is the same as targetType, thena. NOTE: If srcType and targetType are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.b. Repeat, while targetByteIndex < limit,i. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, Uint8, true, Unordered).ii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, Uint8, value, true, Unordered).iii. Set srcByteIndex to srcByteIndex + 1.iv. Set targetByteIndex to targetByteIndex + 1.23. Else,a. Repeat, while targetByteIndex < limit,i. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, srcType, true, Unordered).ii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType, value, true, Unordered).iii. Set srcByteIndex to srcByteIndex + srcElementSize.iv. Set targetByteIndex to targetByteIndex + targetElementSize.24. Return unused.\n\n\n23.2.3.24.2 SetTypedArrayFromArrayLike ( target, targetOffset, source )\nThe abstract operation SetTypedArrayFromArrayLike takes arguments target (a TypedArray), targetOffset (a non-negative integer or +\u221e), and source (an ECMAScript language value, but not a TypedArray) and returns either a normal completion containing unused or an abrupt completion. It sets multiple values in target, starting at index targetOffset, reading the values from source. It performs the following steps when called:\n1. Let targetBuffer be target.[[ViewedArrayBuffer]].2. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.3. Let targetLength be target.[[ArrayLength]].4. Let targetElementSize be TypedArrayElementSize(target).5. Let targetType be TypedArrayElementType(target).6. Let targetByteOffset be target.[[ByteOffset]].7. Let src be ?\u00a0ToObject(source).8. Let srcLength be ?\u00a0LengthOfArrayLike(src).9. If targetOffset is +\u221e, throw a RangeError exception.10. If srcLength + targetOffset > targetLength, throw a RangeError exception.11. Let targetByteIndex be targetOffset \u00d7 targetElementSize + targetByteOffset.12. Let k be 0.13. Let limit be targetByteIndex + targetElementSize \u00d7 srcLength.14. Repeat, while targetByteIndex < limit,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let value be ?\u00a0Get(src, Pk).c. If target.[[ContentType]] is BigInt, set value to ?\u00a0ToBigInt(value).d. Otherwise, set value to ?\u00a0ToNumber(value).e. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.f. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType, value, true, Unordered).g. Set k to k + 1.h. Set targetByteIndex to targetByteIndex + targetElementSize.15. Return unused.\n\n\n\n23.2.3.25 %TypedArray%.prototype.slice ( start, end )\nThe interpretation and use of the arguments of %TypedArray%.prototype.slice are the same as for Array.prototype.slice as defined in 23.1.3.26. The following steps are taken:\nWhen the slice method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. Let relativeStart be ?\u00a0ToIntegerOrInfinity(start).5. If relativeStart is -\u221e, let k be 0.6. Else if relativeStart < 0, let k be max(len + relativeStart, 0).7. Else, let k be min(relativeStart, len).8. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\u00a0ToIntegerOrInfinity(end).9. If relativeEnd is -\u221e, let final be 0.10. Else if relativeEnd < 0, let final be max(len + relativeEnd, 0).11. Else, let final be min(relativeEnd, len).12. Let count be max(final - k, 0).13. Let A be ?\u00a0TypedArraySpeciesCreate(O, \u00ab \ud835\udd3d(count) \u00bb).14. If count > 0, thena. If IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.b. Let srcType be TypedArrayElementType(O).c. Let targetType be TypedArrayElementType(A).d. If srcType is different from targetType, theni. Let n be 0.ii. Repeat, while k < final,1. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).2. Let kValue be !\u00a0Get(O, Pk).3. Perform !\u00a0Set(A, !\u00a0ToString(\ud835\udd3d(n)), kValue, true).4. Set k to k + 1.5. Set n to n + 1.e. Else,i. Let srcBuffer be O.[[ViewedArrayBuffer]].ii. Let targetBuffer be A.[[ViewedArrayBuffer]].iii. Let elementSize be TypedArrayElementSize(O).iv. NOTE: If srcType and targetType are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.v. Let srcByteOffset be O.[[ByteOffset]].vi. Let targetByteIndex be A.[[ByteOffset]].vii. Let srcByteIndex be (k \u00d7 elementSize) + srcByteOffset.viii. Let limit be targetByteIndex + count \u00d7 elementSize.ix. Repeat, while targetByteIndex < limit,1. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, Uint8, true, Unordered).2. Perform SetValueInBuffer(targetBuffer, targetByteIndex, Uint8, value, true, Unordered).3. Set srcByteIndex to srcByteIndex + 1.4. Set targetByteIndex to targetByteIndex + 1.15. Return A.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.26 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\nThe interpretation and use of the arguments of %TypedArray%.prototype.some are the same as for Array.prototype.some as defined in 23.1.3.27.\nWhen the some method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Let len be O.[[ArrayLength]].4. If IsCallable(callbackfn) is false, throw a TypeError exception.5. Let k be 0.6. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be !\u00a0Get(O, Pk).c. Let testResult be ToBoolean(? Call(callbackfn, thisArg, \u00ab kValue, \ud835\udd3d(k), O \u00bb)).d. If testResult is true, return true.e. Set k to k + 1.7. Return false.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.27 %TypedArray%.prototype.sort ( comparefn )\n%TypedArray%.prototype.sort is a distinct function that, except as described below, implements the same requirements as those of Array.prototype.sort as defined in 23.1.3.28. The implementation of the %TypedArray%.prototype.sort specification may be optimized with the knowledge that the this value is an object that has a fixed length and whose integer-indexed properties are not sparse.\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\nThe following steps are performed:\n1. If comparefn is not undefined and IsCallable(comparefn) is false, throw a TypeError exception.2. Let obj be the this value.3. Perform ?\u00a0ValidateTypedArray(obj).4. Let buffer be obj.[[ViewedArrayBuffer]].5. Let len be obj.[[ArrayLength]].6. NOTE: The following closure performs a numeric comparison rather than the string comparison used in 23.1.3.28.7. Let SortCompare be a new Abstract Closure with parameters (x, y) that captures comparefn and buffer and performs the following steps when called:a. Assert: Both Type(x) and Type(y) are Number or both are BigInt.b. If comparefn is not undefined, theni. Let v be ?\u00a0ToNumber(? Call(comparefn, undefined, \u00ab x, y \u00bb)).ii. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.iii. If v is NaN, return +0\ud835\udd3d.iv. Return v.c. If x and y are both NaN, return +0\ud835\udd3d.d. If x is NaN, return 1\ud835\udd3d.e. If y is NaN, return -1\ud835\udd3d.f. If x < y, return -1\ud835\udd3d.g. If x > y, return 1\ud835\udd3d.h. If x is -0\ud835\udd3d and y is +0\ud835\udd3d, return -1\ud835\udd3d.i. If x is +0\ud835\udd3d and y is -0\ud835\udd3d, return 1\ud835\udd3d.j. Return +0\ud835\udd3d.8. Return ?\u00a0SortIndexedProperties(obj, len, SortCompare).\nNote\nBecause NaN always compares greater than any other value, NaN property values always sort to the end of the result when comparefn is not provided.\n\n\n\n23.2.3.28 %TypedArray%.prototype.subarray ( begin, end )\nReturns a new TypedArray whose element type is the same as this TypedArray and whose ArrayBuffer is the same as the ArrayBuffer of this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning.\nWhen the subarray method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[TypedArrayName]]).3. Assert: O has a [[ViewedArrayBuffer]] internal slot.4. Let buffer be O.[[ViewedArrayBuffer]].5. Let srcLength be O.[[ArrayLength]].6. Let relativeBegin be ?\u00a0ToIntegerOrInfinity(begin).7. If relativeBegin is -\u221e, let beginIndex be 0.8. Else if relativeBegin < 0, let beginIndex be max(srcLength + relativeBegin, 0).9. Else, let beginIndex be min(relativeBegin, srcLength).10. If end is undefined, let relativeEnd be srcLength; else let relativeEnd be ?\u00a0ToIntegerOrInfinity(end).11. If relativeEnd is -\u221e, let endIndex be 0.12. Else if relativeEnd < 0, let endIndex be max(srcLength + relativeEnd, 0).13. Else, let endIndex be min(relativeEnd, srcLength).14. Let newLength be max(endIndex - beginIndex, 0).15. Let elementSize be TypedArrayElementSize(O).16. Let srcByteOffset be O.[[ByteOffset]].17. Let beginByteOffset be srcByteOffset + beginIndex \u00d7 elementSize.18. Let argumentsList be \u00ab buffer, \ud835\udd3d(beginByteOffset), \ud835\udd3d(newLength) \u00bb.19. Return ?\u00a0TypedArraySpeciesCreate(O, argumentsList).\nThis function is not generic. The this value must be an object with a [[TypedArrayName]] internal slot.\n\n\n23.2.3.29 %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n%TypedArray%.prototype.toLocaleString is a distinct function that implements the same algorithm as Array.prototype.toLocaleString as defined in 23.1.3.30 except that the this value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of \"length\". The implementation of the algorithm may be optimized with the knowledge that the this value is an object that has a fixed length and whose integer-indexed\n properties are not sparse. However, such optimization must not \nintroduce any observable changes in the specified behaviour of the \nalgorithm.\nThis function is not generic. ValidateTypedArray is applied to the this value prior to evaluating the algorithm. If its result is an abrupt completion that exception is thrown instead of evaluating the algorithm.\nNote\nIf the ECMAScript implementation includes the ECMA-402 Internationalization API this function is based upon the algorithm for Array.prototype.toLocaleString that is in the ECMA-402 specification.\n\n\n\n23.2.3.30 %TypedArray%.prototype.toString ( )\nThe initial value of the \"toString\" property is %Array.prototype.toString%, defined in 23.1.3.31.\n\n\n23.2.3.31 %TypedArray%.prototype.values ( )\nWhen the values method is called, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0ValidateTypedArray(O).3. Return CreateArrayIterator(O, value).\n\n\n23.2.3.32 %TypedArray%.prototype [ @@iterator ] ( )\nThe initial value of the @@iterator property is %TypedArray.prototype.values%, defined in 23.2.3.31.\n\n\n23.2.3.33 get %TypedArray%.prototype [ @@toStringTag ]\n%TypedArray%.prototype[@@toStringTag] is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps when called:\n1. Let O be the this value.2. If Type(O) is not Object, return undefined.3. If O does not have a [[TypedArrayName]] internal slot, return undefined.4. Let name be O.[[TypedArrayName]].5. Assert: Type(name) is String.6. Return name.\nThis property has the attributes { [[Enumerable]]: false, [[Configurable]]: true }.\nThe initial value of the \"name\" property of this function is \"get [Symbol.toStringTag]\".\n\n\n\n23.2.4 Abstract Operations for TypedArray Objects\n\n23.2.4.1 TypedArraySpeciesCreate ( exemplar, argumentList )\nThe abstract operation TypedArraySpeciesCreate takes arguments exemplar (a TypedArray) and argumentList and returns either a normal completion containing a TypedArray or an abrupt completion. It is used to specify the creation of a new TypedArray using a constructor function that is derived from exemplar. Unlike ArraySpeciesCreate, which can create non-Array objects through the use of @@species, this operation enforces that the constructor function creates an actual TypedArray. It performs the following steps when called:\n1. Let defaultConstructor be the intrinsic object listed in column one of Table 71 for exemplar.[[TypedArrayName]].2. Let constructor be ?\u00a0SpeciesConstructor(exemplar, defaultConstructor).3. Let result be ?\u00a0TypedArrayCreate(constructor, argumentList).4. Assert: result has [[TypedArrayName]] and [[ContentType]] internal slots.5. If result.[[ContentType]] \u2260 exemplar.[[ContentType]], throw a TypeError exception.6. Return result.\n\n\n23.2.4.2 TypedArrayCreate ( constructor, argumentList )\nThe abstract operation TypedArrayCreate takes arguments constructor and argumentList and returns either a normal completion containing a TypedArray or an abrupt completion. It is used to specify the creation of a new TypedArray using a constructor function. It performs the following steps when called:\n1. Let newTypedArray be ?\u00a0Construct(constructor, argumentList).2. Perform ?\u00a0ValidateTypedArray(newTypedArray).3. If argumentList is a List of a single Number, thena. If newTypedArray.[[ArrayLength]] < \u211d(argumentList[0]), throw a TypeError exception.4. Return newTypedArray.\n\n\n23.2.4.3 ValidateTypedArray ( O )\nThe abstract operation ValidateTypedArray takes argument O and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Perform ?\u00a0RequireInternalSlot(O, [[TypedArrayName]]).2. Assert: O has a [[ViewedArrayBuffer]] internal slot.3. Let buffer be O.[[ViewedArrayBuffer]].4. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.5. Return unused.\n\n\n23.2.4.4 TypedArrayElementSize ( O )\nThe abstract operation TypedArrayElementSize takes argument O (a TypedArray) and returns a non-negative integer. It performs the following steps when called:\n1. Return the Element Size value specified in Table 71 for O.[[TypedArrayName]].\n\n\n23.2.4.5 TypedArrayElementType ( O )\nThe abstract operation TypedArrayElementType takes argument O (a TypedArray) and returns a TypedArray element type. It performs the following steps when called:\n1. Return the Element Type value specified in Table 71 for O.[[TypedArrayName]].\n\n\n\n23.2.5 The TypedArray Constructors\nEach TypedArray constructor:\n\nis an intrinsic object that has the structure described below, differing only in the name used as the constructor name instead of TypedArray, in Table 71.\nis a function whose behaviour differs based upon the number and types of its arguments. The actual behaviour of a call of TypedArray depends upon the number and kind of arguments that are passed to it.\nis not intended to be called as a function and will throw an exception when called in that manner.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified TypedArray behaviour must include a super call to the TypedArray constructor to create and initialize the subclass instance with the internal state necessary to support the %TypedArray%.prototype built-in methods.\nhas a \"length\" property whose value is 3\ud835\udd3d.\n\n\n23.2.5.1 TypedArray ( ...args )\nEach TypedArray constructor performs the following steps when called:\n1. If NewTarget is undefined, throw a TypeError exception.2. Let constructorName be the String value of the Constructor Name value specified in Table 71 for this TypedArray constructor.3. Let proto be \"%TypedArray.prototype%\".4. Let numberOfArgs be the number of elements in args.5. If numberOfArgs = 0, thena. Return ?\u00a0AllocateTypedArray(constructorName, NewTarget, proto, 0).6. Else,a. Let firstArgument be args[0].b. If Type(firstArgument) is Object, theni. Let O be ?\u00a0AllocateTypedArray(constructorName, NewTarget, proto).ii. If firstArgument has a [[TypedArrayName]] internal slot, then1. Perform ?\u00a0InitializeTypedArrayFromTypedArray(O, firstArgument).iii. Else if firstArgument has an [[ArrayBufferData]] internal slot, then1. If numberOfArgs > 1, let byteOffset be args[1]; else let byteOffset be undefined.2. If numberOfArgs > 2, let length be args[2]; else let length be undefined.3. Perform ?\u00a0InitializeTypedArrayFromArrayBuffer(O, firstArgument, byteOffset, length).iv. Else,1. Assert: Type(firstArgument) is Object and firstArgument does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.2. Let usingIterator be ?\u00a0GetMethod(firstArgument, @@iterator).3. If usingIterator is not undefined, thena. Let values be ?\u00a0IterableToList(firstArgument, usingIterator).b. Perform ?\u00a0InitializeTypedArrayFromList(O, values).4. Else,a. NOTE: firstArgument is not an Iterable so assume it is already an array-like object.b. Perform ?\u00a0InitializeTypedArrayFromArrayLike(O, firstArgument).v. Return O.c. Else,i. Assert: firstArgument is not an Object.ii. Let elementLength be ?\u00a0ToIndex(firstArgument).iii. Return ?\u00a0AllocateTypedArray(constructorName, NewTarget, proto, elementLength).\n\n23.2.5.1.1 AllocateTypedArray ( constructorName, newTarget, defaultProto [ , length ] )\nThe abstract operation AllocateTypedArray takes arguments constructorName (a String which is the name of a TypedArray constructor in Table 71), newTarget, and defaultProto and optional argument length (a non-negative integer) and returns either a normal completion containing a TypedArray or an abrupt completion. It is used to validate and create an instance of a TypedArray constructor. If the length\n argument is passed, an ArrayBuffer of that length is also allocated and\n associated with the new TypedArray instance. AllocateTypedArray \nprovides common semantics that is used by TypedArray. It performs the following steps when called:\n1. Let proto be ?\u00a0GetPrototypeFromConstructor(newTarget, defaultProto).2. Let obj be IntegerIndexedObjectCreate(proto).3. Assert: obj.[[ViewedArrayBuffer]] is undefined.4. Set obj.[[TypedArrayName]] to constructorName.5. If constructorName is \"BigInt64Array\" or \"BigUint64Array\", set obj.[[ContentType]] to BigInt.6. Otherwise, set obj.[[ContentType]] to Number.7. If length is not present, thena. Set obj.[[ByteLength]] to 0.b. Set obj.[[ByteOffset]] to 0.c. Set obj.[[ArrayLength]] to 0.8. Else,a. Perform ?\u00a0AllocateTypedArrayBuffer(obj, length).9. Return obj.\n\n\n23.2.5.1.2 InitializeTypedArrayFromTypedArray ( O, srcArray )\nThe abstract operation InitializeTypedArrayFromTypedArray takes arguments O (a TypedArray) and srcArray (a TypedArray) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let srcData be srcArray.[[ViewedArrayBuffer]].2. If IsDetachedBuffer(srcData) is true, throw a TypeError exception.3. Let elementType be TypedArrayElementType(O).4. Let elementSize be TypedArrayElementSize(O).5. Let srcType be TypedArrayElementType(srcArray).6. Let srcElementSize be TypedArrayElementSize(srcArray).7. Let srcByteOffset be srcArray.[[ByteOffset]].8. Let elementLength be srcArray.[[ArrayLength]].9. Let byteLength be elementSize \u00d7 elementLength.10. If IsSharedArrayBuffer(srcData) is false, thena. Let bufferConstructor be ?\u00a0SpeciesConstructor(srcData, %ArrayBuffer%).11. Else,a. Let bufferConstructor be %ArrayBuffer%.12. If elementType is the same as srcType, thena. Let data be ?\u00a0CloneArrayBuffer(srcData, srcByteOffset, byteLength, bufferConstructor).13. Else,a. Let data be ?\u00a0AllocateArrayBuffer(bufferConstructor, byteLength).b. If IsDetachedBuffer(srcData) is true, throw a TypeError exception.c. If srcArray.[[ContentType]] \u2260 O.[[ContentType]], throw a TypeError exception.d. Let srcByteIndex be srcByteOffset.e. Let targetByteIndex be 0.f. Let count be elementLength.g. Repeat, while count > 0,i. Let value be GetValueFromBuffer(srcData, srcByteIndex, srcType, true, Unordered).ii. Perform SetValueInBuffer(data, targetByteIndex, elementType, value, true, Unordered).iii. Set srcByteIndex to srcByteIndex + srcElementSize.iv. Set targetByteIndex to targetByteIndex + elementSize.v. Set count to count - 1.14. Set O.[[ViewedArrayBuffer]] to data.15. Set O.[[ByteLength]] to byteLength.16. Set O.[[ByteOffset]] to 0.17. Set O.[[ArrayLength]] to elementLength.18. Return unused.\n\n\n23.2.5.1.3 InitializeTypedArrayFromArrayBuffer ( O, buffer, byteOffset, length )\nThe abstract operation InitializeTypedArrayFromArrayBuffer takes arguments O (a TypedArray), buffer (an ArrayBuffer or a SharedArrayBuffer), byteOffset (an ECMAScript language value), and length (an ECMAScript language value) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let elementSize be TypedArrayElementSize(O).2. Let offset be ?\u00a0ToIndex(byteOffset).3. If offset modulo elementSize \u2260 0, throw a RangeError exception.4. If length is not undefined, thena. Let newLength be ?\u00a0ToIndex(length).5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.6. Let bufferByteLength be buffer.[[ArrayBufferByteLength]].7. If length is undefined, thena. If bufferByteLength modulo elementSize \u2260 0, throw a RangeError exception.b. Let newByteLength be bufferByteLength - offset.c. If newByteLength < 0, throw a RangeError exception.8. Else,a. Let newByteLength be newLength \u00d7 elementSize.b. If offset + newByteLength > bufferByteLength, throw a RangeError exception.9. Set O.[[ViewedArrayBuffer]] to buffer.10. Set O.[[ByteLength]] to newByteLength.11. Set O.[[ByteOffset]] to offset.12. Set O.[[ArrayLength]] to newByteLength / elementSize.13. Return unused.\n\n\n23.2.5.1.4 InitializeTypedArrayFromList ( O, values )\nThe abstract operation InitializeTypedArrayFromList takes arguments O (a TypedArray) and values (a List of ECMAScript language values) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let len be the number of elements in values.2. Perform ?\u00a0AllocateTypedArrayBuffer(O, len).3. Let k be 0.4. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be the first element of values and remove that element from values.c. Perform ?\u00a0Set(O, Pk, kValue, true).d. Set k to k + 1.5. Assert: values is now an empty List.6. Return unused.\n\n\n23.2.5.1.5 InitializeTypedArrayFromArrayLike ( O, arrayLike )\nThe abstract operation InitializeTypedArrayFromArrayLike takes arguments O (a TypedArray) and arrayLike (an Object, but not a TypedArray or an ArrayBuffer) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let len be ?\u00a0LengthOfArrayLike(arrayLike).2. Perform ?\u00a0AllocateTypedArrayBuffer(O, len).3. Let k be 0.4. Repeat, while k < len,a. Let Pk be !\u00a0ToString(\ud835\udd3d(k)).b. Let kValue be ?\u00a0Get(arrayLike, Pk).c. Perform ?\u00a0Set(O, Pk, kValue, true).d. Set k to k + 1.5. Return unused.\n\n\n23.2.5.1.6 AllocateTypedArrayBuffer ( O, length )\nThe abstract operation AllocateTypedArrayBuffer takes arguments O (a TypedArray) and length (a non-negative integer) and returns either a normal completion containing unused or an abrupt completion. It allocates and associates an ArrayBuffer with O. It performs the following steps when called:\n1. Assert: O.[[ViewedArrayBuffer]] is undefined.2. Let elementSize be TypedArrayElementSize(O).3. Let byteLength be elementSize \u00d7 length.4. Let data be ?\u00a0AllocateArrayBuffer(%ArrayBuffer%, byteLength).5. Set O.[[ViewedArrayBuffer]] to data.6. Set O.[[ByteLength]] to byteLength.7. Set O.[[ByteOffset]] to 0.8. Set O.[[ArrayLength]] to length.9. Return unused.\n\n\n\n\n23.2.6 Properties of the TypedArray Constructors\nEach TypedArray constructor:\n\nhas a [[Prototype]] internal slot whose value is %TypedArray%.\nhas a \"name\" property whose value is the String value of the constructor name specified for it in Table 71.\nhas the following properties:\n\n\n23.2.6.1 TypedArray.BYTES_PER_ELEMENT\nThe value of TypedArray.BYTES_PER_ELEMENT is the Element Size value specified in Table 71 for TypedArray.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n23.2.6.2 TypedArray.prototype\nThe initial value of TypedArray.prototype is the corresponding TypedArray prototype intrinsic object (23.2.7).\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n23.2.7 Properties of the TypedArray Prototype Objects\nEach TypedArray prototype object:\n\nhas a [[Prototype]] internal slot whose value is %TypedArray.prototype%.\nis an ordinary object.\ndoes not have a [[ViewedArrayBuffer]] or any other of the internal slots that are specific to TypedArray instance objects.\n\n\n23.2.7.1 TypedArray.prototype.BYTES_PER_ELEMENT\nThe value of TypedArray.prototype.BYTES_PER_ELEMENT is the Element Size value specified in Table 71 for TypedArray.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n23.2.7.2 TypedArray.prototype.constructor\nThe initial value of a TypedArray.prototype.constructor is the corresponding %TypedArray% intrinsic object.\n\n\n\n23.2.8 Properties of TypedArray Instances\nTypedArray instances are Integer-Indexed exotic objects. Each TypedArray instance inherits properties from the corresponding TypedArray prototype object. Each TypedArray\n instance has the following internal slots: [[TypedArrayName]], \n[[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]], and \n[[ArrayLength]].\n\n\n\n\n24 Keyed Collections\n\n24.1 Map Objects\nMaps are collections of key/value pairs where both the keys and values may be arbitrary ECMAScript language values.\n A distinct key value may only occur in one key/value pair within the \nMap's collection. Distinct key values are discriminated using the SameValueZero comparison algorithm.\nMaps must be implemented using either hash tables or other \nmechanisms that, on average, provide access times that are sublinear on \nthe number of elements in the collection. The data structure used in \nthis specification is only intended to describe the required observable \nsemantics of Maps. It is not intended to be a viable implementation \nmodel.\n\n24.1.1 The Map Constructor\nThe Map constructor:\n\nis %Map%.\nis the initial value of the \"Map\" property of the global object.\ncreates and initializes a new Map when called as a constructor.\nis not intended to be called as a function and will throw an exception when called in that manner.\nmay be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified Map behaviour must include a super call to the Map constructor to create and initialize the subclass instance with the internal state necessary to support the Map.prototype built-in methods.\n\n\n24.1.1.1 Map ( [ iterable ] )\nWhen the Map function is called with optional argument iterable, the following steps are taken:\n1. If NewTarget is undefined, throw a TypeError exception.2. Let map be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%Map.prototype%\", \u00ab [[MapData]] \u00bb).3. Set map.[[MapData]] to a new empty List.4. If iterable is either undefined or null, return map.5. Let adder be ?\u00a0Get(map, \"set\").6. Return ?\u00a0AddEntriesFromIterable(map, iterable, adder).\nNote\nIf the parameter iterable is present, it is expected to be an object that implements an @@iterator method that returns an iterator object that produces a two element array-like object whose first element is a value that will be used as a Map key and whose second element is the value to associate with that key.\n\n\n\n24.1.1.2 AddEntriesFromIterable ( target, iterable, adder )\nThe abstract operation AddEntriesFromIterable takes arguments target, iterable (an ECMAScript language value, but not undefined or null), and adder (a function object) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. adder will be invoked, with target as the receiver. It performs the following steps when called:\n1. If IsCallable(adder) is false, throw a TypeError exception.2. Let iteratorRecord be ?\u00a0GetIterator(iterable).3. Repeat,a. Let next be ?\u00a0IteratorStep(iteratorRecord).b. If next is false, return target.c. Let nextItem be ?\u00a0IteratorValue(next).d. If Type(nextItem) is not Object, theni. Let error be ThrowCompletion(a newly created TypeError object).ii. Return ?\u00a0IteratorClose(iteratorRecord, error).e. Let k be Completion(Get(nextItem, \"0\")).f. IfAbruptCloseIterator(k, iteratorRecord).g. Let v be Completion(Get(nextItem, \"1\")).h. IfAbruptCloseIterator(v, iteratorRecord).i. Let status be Completion(Call(adder, target, \u00ab k, v \u00bb)).j. IfAbruptCloseIterator(status, iteratorRecord).\nNote\nThe parameter iterable is expected to be an object that implements an @@iterator method that returns an iterator object that produces a two element array-like object whose first element is a value that will be used as a Map key and whose second element is the value to associate with that key.\n\n\n\n\n24.1.2 Properties of the Map Constructor\nThe Map constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n24.1.2.1 Map.prototype\nThe initial value of Map.prototype is the Map prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n24.1.2.2 get Map [ @@species ]\nMap[@@species] is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Return the this value.\nThe value of the \"name\" property of this function is \"get [Symbol.species]\".\nNote\nMethods that create derived collection objects should call @@species to determine the constructor to use to create the derived objects. Subclass constructor may over-ride @@species to change the default constructor assignment.\n\n\n\n\n24.1.3 Properties of the Map Prototype Object\nThe Map prototype object:\n\nis %Map.prototype%.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis an ordinary object.\ndoes not have a [[MapData]] internal slot.\n\n\n24.1.3.1 Map.prototype.clear ( )\nThe following steps are taken:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[MapData]]).3. Let entries be the List that is M.[[MapData]].4. For each Record { [[Key]], [[Value]] } p of entries, doa. Set p.[[Key]] to empty.b. Set p.[[Value]] to empty.5. Return undefined.\nNote\nThe existing [[MapData]] List is preserved because there may be existing Map Iterator objects that are suspended midway through iterating over that List.\n\n\n\n24.1.3.2 Map.prototype.constructor\nThe initial value of Map.prototype.constructor is %Map%.\n\n\n24.1.3.3 Map.prototype.delete ( key )\nThe following steps are taken:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[MapData]]).3. Let entries be the List that is M.[[MapData]].4. For each Record { [[Key]], [[Value]] } p of entries, doa. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, theni. Set p.[[Key]] to empty.ii. Set p.[[Value]] to empty.iii. Return true.5. Return false.\nNote\nThe value empty is used as a \nspecification device to indicate that an entry has been deleted. Actual \nimplementations may take other actions such as physically removing the \nentry from internal data structures.\n\n\n\n24.1.3.4 Map.prototype.entries ( )\nThe following steps are taken:\n1. Let M be the this value.2. Return ?\u00a0CreateMapIterator(M, key+value).\n\n\n24.1.3.5 Map.prototype.forEach ( callbackfn [ , thisArg ] )\nWhen the forEach method is called with one or two arguments, the following steps are taken:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[MapData]]).3. If IsCallable(callbackfn) is false, throw a TypeError exception.4. Let entries be the List that is M.[[MapData]].5. For each Record { [[Key]], [[Value]] } e of entries, doa. If e.[[Key]] is not empty, theni. Perform ?\u00a0Call(callbackfn, thisArg, \u00ab e.[[Value]], e.[[Key]], M \u00bb).6. Return undefined.\nNote\ncallbackfn should be a function that accepts three arguments. forEach calls callbackfn once for each key/value pair present in the Map, in key insertion order. callbackfn is called only for keys of the Map which actually exist; it is not called for keys that have been deleted from the Map.\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not provided, undefined is used instead.\ncallbackfn is called with three arguments: the value of the item, the key of the item, and the Map being traversed.\nforEach does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn. Each entry of a map's [[MapData]] is only visited once. New keys added after the call to forEach begins are visited. A key will be revisited if it is deleted after it has been visited and then re-added before the forEach call completes. Keys that are deleted after the call to forEach begins and before being visited are not visited unless the key is added again before the forEach call completes.\n\n\n\n24.1.3.6 Map.prototype.get ( key )\nThe following steps are taken:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[MapData]]).3. Let entries be the List that is M.[[MapData]].4. For each Record { [[Key]], [[Value]] } p of entries, doa. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, return p.[[Value]].5. Return undefined.\n\n\n24.1.3.7 Map.prototype.has ( key )\nThe following steps are taken:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[MapData]]).3. Let entries be the List that is M.[[MapData]].4. For each Record { [[Key]], [[Value]] } p of entries, doa. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, return true.5. Return false.\n\n\n24.1.3.8 Map.prototype.keys ( )\nThe following steps are taken:\n1. Let M be the this value.2. Return ?\u00a0CreateMapIterator(M, key).\n\n\n24.1.3.9 Map.prototype.set ( key, value )\nThe following steps are taken:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[MapData]]).3. Let entries be the List that is M.[[MapData]].4. For each Record { [[Key]], [[Value]] } p of entries, doa. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, theni. Set p.[[Value]] to value.ii. Return M.5. If key is -0\ud835\udd3d, set key to +0\ud835\udd3d.6. Let p be the Record { [[Key]]: key, [[Value]]: value }.7. Append p as the last element of entries.8. Return M.\n\n\n24.1.3.10 get Map.prototype.size\nMap.prototype.size is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[MapData]]).3. Let entries be the List that is M.[[MapData]].4. Let count be 0.5. For each Record { [[Key]], [[Value]] } p of entries, doa. If p.[[Key]] is not empty, set count to count + 1.6. Return \ud835\udd3d(count).\n\n\n24.1.3.11 Map.prototype.values ( )\nThe following steps are taken:\n1. Let M be the this value.2. Return ?\u00a0CreateMapIterator(M, value).\n\n\n24.1.3.12 Map.prototype [ @@iterator ] ( )\nThe initial value of the @@iterator property is %Map.prototype.entries%, defined in 24.1.3.4.\n\n\n24.1.3.13 Map.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Map\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n24.1.4 Properties of Map Instances\nMap instances are ordinary objects that inherit properties from the Map prototype. Map instances also have a [[MapData]] internal slot.\n\n\n24.1.5 Map Iterator Objects\nA Map Iterator is an object, that represents a specific iteration over some specific Map instance object. There is not a named constructor for Map Iterator objects. Instead, map iterator objects are created by calling certain methods of Map instance objects.\n\n24.1.5.1 CreateMapIterator ( map, kind )\nThe abstract operation CreateMapIterator takes arguments map (an ECMAScript language value) and kind (key+value, key, or value) and returns either a normal completion containing a Generator or an abrupt completion. It is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:\n1. Perform ?\u00a0RequireInternalSlot(map, [[MapData]]).2. Let closure be a new Abstract Closure with no parameters that captures map and kind and performs the following steps when called:a. Let entries be the List that is map.[[MapData]].b. Let index be 0.c. Let numEntries be the number of elements of entries.d. Repeat, while index < numEntries,i. Let e be the Record { [[Key]], [[Value]] } that is the value of entries[index].ii. Set index to index + 1.iii. If e.[[Key]] is not empty, then1. If kind is key, let result be e.[[Key]].2. Else if kind is value, let result be e.[[Value]].3. Else,a. Assert: kind is key+value.b. Let result be CreateArrayFromList(\u00ab e.[[Key]], e.[[Value]] \u00bb).4. Perform ?\u00a0GeneratorYield(CreateIterResultObject(result, false)).5. NOTE: The number of elements in entries may have changed while execution of this abstract operation was paused by Yield.6. Set numEntries to the number of elements of entries.e. Return undefined.3. Return CreateIteratorFromClosure(closure, \"%MapIteratorPrototype%\", %MapIteratorPrototype%).\n\n\n24.1.5.2 The %MapIteratorPrototype% Object\nThe %MapIteratorPrototype% object:\n\nhas properties that are inherited by all Map Iterator Objects.\nis an ordinary object.\nhas a [[Prototype]] internal slot whose value is %IteratorPrototype%.\nhas the following properties:\n\n\n24.1.5.2.1 %MapIteratorPrototype%.next ( )\n1. Return ?\u00a0GeneratorResume(this value, empty, \"%MapIteratorPrototype%\").\n\n\n24.1.5.2.2 %MapIteratorPrototype% [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Map Iterator\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n\n\n24.2 Set Objects\nSet objects are collections of ECMAScript language values. A distinct value may only occur once as an element of a Set's collection. Distinct values are discriminated using the SameValueZero comparison algorithm.\nSet objects must be implemented using either hash tables or other\n mechanisms that, on average, provide access times that are sublinear on\n the number of elements in the collection. The data structure used in \nthis specification is only intended to describe the required observable \nsemantics of Set objects. It is not intended to be a viable \nimplementation model.\n\n24.2.1 The Set Constructor\nThe Set constructor:\n\nis %Set%.\nis the initial value of the \"Set\" property of the global object.\ncreates and initializes a new Set object when called as a constructor.\nis not intended to be called as a function and will throw an exception when called in that manner.\nmay be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified Set behaviour must include a super call to the Set constructor to create and initialize the subclass instance with the internal state necessary to support the Set.prototype built-in methods.\n\n\n24.2.1.1 Set ( [ iterable ] )\nWhen the Set function is called with optional argument iterable, the following steps are taken:\n1. If NewTarget is undefined, throw a TypeError exception.2. Let set be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%Set.prototype%\", \u00ab [[SetData]] \u00bb).3. Set set.[[SetData]] to a new empty List.4. If iterable is either undefined or null, return set.5. Let adder be ?\u00a0Get(set, \"add\").6. If IsCallable(adder) is false, throw a TypeError exception.7. Let iteratorRecord be ?\u00a0GetIterator(iterable).8. Repeat,a. Let next be ?\u00a0IteratorStep(iteratorRecord).b. If next is false, return set.c. Let nextValue be ?\u00a0IteratorValue(next).d. Let status be Completion(Call(adder, set, \u00ab nextValue \u00bb)).e. IfAbruptCloseIterator(status, iteratorRecord).\n\n\n\n24.2.2 Properties of the Set Constructor\nThe Set constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n24.2.2.1 Set.prototype\nThe initial value of Set.prototype is the Set prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n24.2.2.2 get Set [ @@species ]\nSet[@@species] is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Return the this value.\nThe value of the \"name\" property of this function is \"get [Symbol.species]\".\nNote\nMethods that create derived collection objects should call @@species to determine the constructor to use to create the derived objects. Subclass constructor may over-ride @@species to change the default constructor assignment.\n\n\n\n\n24.2.3 Properties of the Set Prototype Object\nThe Set prototype object:\n\nis %Set.prototype%.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis an ordinary object.\ndoes not have a [[SetData]] internal slot.\n\n\n24.2.3.1 Set.prototype.add ( value )\nThe following steps are taken:\n1. Let S be the this value.2. Perform ?\u00a0RequireInternalSlot(S, [[SetData]]).3. Let entries be the List that is S.[[SetData]].4. For each element e of entries, doa. If e is not empty and SameValueZero(e, value) is true, theni. Return S.5. If value is -0\ud835\udd3d, set value to +0\ud835\udd3d.6. Append value as the last element of entries.7. Return S.\n\n\n24.2.3.2 Set.prototype.clear ( )\nThe following steps are taken:\n1. Let S be the this value.2. Perform ?\u00a0RequireInternalSlot(S, [[SetData]]).3. Let entries be the List that is S.[[SetData]].4. For each element e of entries, doa. Replace the element of entries whose value is e with an element whose value is empty.5. Return undefined.\nNote\nThe existing [[SetData]] List is preserved because there may be existing Set Iterator objects that are suspended midway through iterating over that List.\n\n\n\n24.2.3.3 Set.prototype.constructor\nThe initial value of Set.prototype.constructor is %Set%.\n\n\n24.2.3.4 Set.prototype.delete ( value )\nThe following steps are taken:\n1. Let S be the this value.2. Perform ?\u00a0RequireInternalSlot(S, [[SetData]]).3. Let entries be the List that is S.[[SetData]].4. For each element e of entries, doa. If e is not empty and SameValueZero(e, value) is true, theni. Replace the element of entries whose value is e with an element whose value is empty.ii. Return true.5. Return false.\nNote\nThe value empty is used as a \nspecification device to indicate that an entry has been deleted. Actual \nimplementations may take other actions such as physically removing the \nentry from internal data structures.\n\n\n\n24.2.3.5 Set.prototype.entries ( )\nThe following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateSetIterator(S, key+value).\nNote\nFor iteration purposes, a Set appears similar to a Map where each entry has the same value for its key and value.\n\n\n\n24.2.3.6 Set.prototype.forEach ( callbackfn [ , thisArg ] )\nWhen the forEach method is called with one or two arguments, the following steps are taken:\n1. Let S be the this value.2. Perform ?\u00a0RequireInternalSlot(S, [[SetData]]).3. If IsCallable(callbackfn) is false, throw a TypeError exception.4. Let entries be the List that is S.[[SetData]].5. For each element e of entries, doa. If e is not empty, theni. Perform ?\u00a0Call(callbackfn, thisArg, \u00ab e, e, S \u00bb).6. Return undefined.\nNote\ncallbackfn should be a function that accepts three arguments. forEach calls callbackfn once for each value present in the Set object, in value insertion order. callbackfn is called only for values of the Set which actually exist; it is not called for keys that have been deleted from the set.\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not provided, undefined is used instead.\ncallbackfn is called with three arguments: the \nfirst two arguments are a value contained in the Set. The same value is \npassed for both arguments. The Set object being traversed is passed as \nthe third argument.\nThe callbackfn is called with three arguments to be consistent with the call back functions used by forEach methods for Map and Array. For Sets, each item value is considered to be both the key and the value.\nforEach does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\nEach value is normally visited only once. However, a value \nwill be revisited if it is deleted after it has been visited and then \nre-added before the forEach call completes. Values that are deleted after the call to forEach begins and before being visited are not visited unless the value is added again before the forEach call completes. New values added after the call to forEach begins are visited.\n\n\n\n24.2.3.7 Set.prototype.has ( value )\nThe following steps are taken:\n1. Let S be the this value.2. Perform ?\u00a0RequireInternalSlot(S, [[SetData]]).3. Let entries be the List that is S.[[SetData]].4. For each element e of entries, doa. If e is not empty and SameValueZero(e, value) is true, return true.5. Return false.\n\n\n24.2.3.8 Set.prototype.keys ( )\nThe initial value of the \"keys\" property is %Set.prototype.values%, defined in 24.2.3.10.\nNote\nFor iteration purposes, a Set appears similar to a Map where each entry has the same value for its key and value.\n\n\n\n24.2.3.9 get Set.prototype.size\nSet.prototype.size is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let S be the this value.2. Perform ?\u00a0RequireInternalSlot(S, [[SetData]]).3. Let entries be the List that is S.[[SetData]].4. Let count be 0.5. For each element e of entries, doa. If e is not empty, set count to count + 1.6. Return \ud835\udd3d(count).\n\n\n24.2.3.10 Set.prototype.values ( )\nThe following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateSetIterator(S, value).\n\n\n24.2.3.11 Set.prototype [ @@iterator ] ( )\nThe initial value of the @@iterator property is %Set.prototype.values%, defined in 24.2.3.10.\n\n\n24.2.3.12 Set.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Set\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n24.2.4 Properties of Set Instances\nSet instances are ordinary objects that inherit properties from the Set prototype. Set instances also have a [[SetData]] internal slot.\n\n\n24.2.5 Set Iterator Objects\nA Set Iterator is an ordinary object,\n with the structure defined below, that represents a specific iteration \nover some specific Set instance object. There is not a named constructor for Set Iterator objects. Instead, set iterator objects are created by calling certain methods of Set instance objects.\n\n24.2.5.1 CreateSetIterator ( set, kind )\nThe abstract operation CreateSetIterator takes arguments set (an ECMAScript language value) and kind (key+value or value) and returns either a normal completion containing a Generator or an abrupt completion. It is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:\n1. Perform ?\u00a0RequireInternalSlot(set, [[SetData]]).2. Let closure be a new Abstract Closure with no parameters that captures set and kind and performs the following steps when called:a. Let index be 0.b. Let entries be the List that is set.[[SetData]].c. Let numEntries be the number of elements of entries.d. Repeat, while index < numEntries,i. Let e be entries[index].ii. Set index to index + 1.iii. If e is not empty, then1. If kind is key+value, thena. Let result be CreateArrayFromList(\u00ab e, e \u00bb).b. Perform ?\u00a0GeneratorYield(CreateIterResultObject(result, false)).2. Else,a. Assert: kind is value.b. Perform ?\u00a0GeneratorYield(CreateIterResultObject(e, false)).3. NOTE: The number of elements in entries may have changed while execution of this abstract operation was paused by Yield.4. Set numEntries to the number of elements of entries.e. Return undefined.3. Return CreateIteratorFromClosure(closure, \"%SetIteratorPrototype%\", %SetIteratorPrototype%).\n\n\n24.2.5.2 The %SetIteratorPrototype% Object\nThe %SetIteratorPrototype% object:\n\nhas properties that are inherited by all Set Iterator Objects.\nis an ordinary object.\nhas a [[Prototype]] internal slot whose value is %IteratorPrototype%.\nhas the following properties:\n\n\n24.2.5.2.1 %SetIteratorPrototype%.next ( )\n1. Return ?\u00a0GeneratorResume(this value, empty, \"%SetIteratorPrototype%\").\n\n\n24.2.5.2.2 %SetIteratorPrototype% [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Set Iterator\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n\n\n24.3 WeakMap Objects\nWeakMaps are collections of key/value pairs where the keys are objects and values may be arbitrary ECMAScript language values.\n A WeakMap may be queried to see if it contains a key/value pair with a \nspecific key, but no mechanism is provided for enumerating the objects \nit holds as keys. In certain conditions, objects which are not live are removed as WeakMap keys, as described in 9.10.3.\nAn implementation may impose an arbitrarily determined latency \nbetween the time a key/value pair of a WeakMap becomes inaccessible and \nthe time when the key/value pair is removed from the WeakMap. If this \nlatency was observable to ECMAScript program, it would be a source of \nindeterminacy that could impact program execution. For that reason, an \nECMAScript implementation must not provide any means to observe a key of\n a WeakMap that does not require the observer to present the observed \nkey.\nWeakMaps must be implemented using either hash tables or other \nmechanisms that, on average, provide access times that are sublinear on \nthe number of key/value pairs in the collection. The data structure used\n in this specification is only intended to describe the required \nobservable semantics of WeakMaps. It is not intended to be a viable \nimplementation model.\nNote\nWeakMap and WeakSets are intended to provide mechanisms for \ndynamically associating state with an object in a manner that does not \n\u201cleak\u201d memory resources if, in the absence of the WeakMap or WeakSet, \nthe object otherwise became inaccessible and subject to resource \nreclamation by the implementation's garbage collection mechanisms. This \ncharacteristic can be achieved by using an inverted per-object mapping \nof weak map instances to keys. Alternatively each weak map may \ninternally store its key to value mappings but this approach requires \ncoordination between the WeakMap or WeakSet implementation and the \ngarbage collector. The following references describe mechanism that may \nbe useful to implementations of WeakMap and WeakSets:\nBarry Hayes. 1997. Ephemerons: a new finalization mechanism. In Proceedings of the 12th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications (OOPSLA '97), A. Michael Berman (Ed.). ACM, New York, NY, USA, 176-183, http://doi.acm.org/10.1145/263698.263733.\nAlexandra Barros, Roberto Ierusalimschy, Eliminating Cycles in \nWeak Tables. Journal of Universal Computer Science - J.UCS, vol. 14, no.\n 21, pp. 3481-3497, 2008, http://www.jucs.org/jucs_14_21/eliminating_cycles_in_weak\n\n\n24.3.1 The WeakMap Constructor\nThe WeakMap constructor:\n\nis %WeakMap%.\nis the initial value of the \"WeakMap\" property of the global object.\ncreates and initializes a new WeakMap when called as a constructor.\nis not intended to be called as a function and will throw an exception when called in that manner.\nmay be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified WeakMap behaviour must include a super call to the WeakMap constructor to create and initialize the subclass instance with the internal state necessary to support the WeakMap.prototype built-in methods.\n\n\n24.3.1.1 WeakMap ( [ iterable ] )\nWhen the WeakMap function is called with optional argument iterable, the following steps are taken:\n1. If NewTarget is undefined, throw a TypeError exception.2. Let map be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%WeakMap.prototype%\", \u00ab [[WeakMapData]] \u00bb).3. Set map.[[WeakMapData]] to a new empty List.4. If iterable is either undefined or null, return map.5. Let adder be ?\u00a0Get(map, \"set\").6. Return ?\u00a0AddEntriesFromIterable(map, iterable, adder).\nNote\nIf the parameter iterable is present, it is expected to be an object that implements an @@iterator method that returns an iterator object that produces a two element array-like object\n whose first element is a value that will be used as a WeakMap key and \nwhose second element is the value to associate with that key.\n\n\n\n\n24.3.2 Properties of the WeakMap Constructor\nThe WeakMap constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n24.3.2.1 WeakMap.prototype\nThe initial value of WeakMap.prototype is the WeakMap prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n24.3.3 Properties of the WeakMap Prototype Object\nThe WeakMap prototype object:\n\nis %WeakMap.prototype%.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis an ordinary object.\ndoes not have a [[WeakMapData]] internal slot.\n\n\n24.3.3.1 WeakMap.prototype.constructor\nThe initial value of WeakMap.prototype.constructor is %WeakMap%.\n\n\n24.3.3.2 WeakMap.prototype.delete ( key )\nThe following steps are taken:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[WeakMapData]]).3. Let entries be the List that is M.[[WeakMapData]].4. If Type(key) is not Object, return false.5. For each Record { [[Key]], [[Value]] } p of entries, doa. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, theni. Set p.[[Key]] to empty.ii. Set p.[[Value]] to empty.iii. Return true.6. Return false.\nNote\nThe value empty is used as a \nspecification device to indicate that an entry has been deleted. Actual \nimplementations may take other actions such as physically removing the \nentry from internal data structures.\n\n\n\n24.3.3.3 WeakMap.prototype.get ( key )\nThe following steps are taken:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[WeakMapData]]).3. Let entries be the List that is M.[[WeakMapData]].4. If Type(key) is not Object, return undefined.5. For each Record { [[Key]], [[Value]] } p of entries, doa. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, return p.[[Value]].6. Return undefined.\n\n\n24.3.3.4 WeakMap.prototype.has ( key )\nThe following steps are taken:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[WeakMapData]]).3. Let entries be the List that is M.[[WeakMapData]].4. If Type(key) is not Object, return false.5. For each Record { [[Key]], [[Value]] } p of entries, doa. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, return true.6. Return false.\n\n\n24.3.3.5 WeakMap.prototype.set ( key, value )\nThe following steps are taken:\n1. Let M be the this value.2. Perform ?\u00a0RequireInternalSlot(M, [[WeakMapData]]).3. Let entries be the List that is M.[[WeakMapData]].4. If Type(key) is not Object, throw a TypeError exception.5. For each Record { [[Key]], [[Value]] } p of entries, doa. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, theni. Set p.[[Value]] to value.ii. Return M.6. Let p be the Record { [[Key]]: key, [[Value]]: value }.7. Append p as the last element of entries.8. Return M.\n\n\n24.3.3.6 WeakMap.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"WeakMap\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n24.3.4 Properties of WeakMap Instances\nWeakMap instances are ordinary objects that inherit properties from the WeakMap prototype. WeakMap instances also have a [[WeakMapData]] internal slot.\n\n\n\n24.4 WeakSet Objects\nWeakSets are collections of objects. A distinct object may only \noccur once as an element of a WeakSet's collection. A WeakSet may be \nqueried to see if it contains a specific object, but no mechanism is \nprovided for enumerating the objects it holds. In certain conditions, \nobjects which are not live are removed as WeakSet elements, as described in 9.10.3.\nAn implementation may impose an arbitrarily determined latency \nbetween the time an object contained in a WeakSet becomes inaccessible \nand the time when the object is removed from the WeakSet. If this \nlatency was observable to ECMAScript program, it would be a source of \nindeterminacy that could impact program execution. For that reason, an \nECMAScript implementation must not provide any means to determine if a \nWeakSet contains a particular object that does not require the observer \nto present the observed object.\nWeakSets must be implemented using either hash tables or other \nmechanisms that, on average, provide access times that are sublinear on \nthe number of elements in the collection. The data structure used in \nthis specification is only intended to describe the required observable \nsemantics of WeakSets. It is not intended to be a viable implementation \nmodel.\nNote\nSee the NOTE in 24.3.\n\n\n24.4.1 The WeakSet Constructor\nThe WeakSet constructor:\n\nis %WeakSet%.\nis the initial value of the \"WeakSet\" property of the global object.\ncreates and initializes a new WeakSet when called as a constructor.\nis not intended to be called as a function and will throw an exception when called in that manner.\nmay be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified WeakSet behaviour must include a super call to the WeakSet constructor to create and initialize the subclass instance with the internal state necessary to support the WeakSet.prototype built-in methods.\n\n\n24.4.1.1 WeakSet ( [ iterable ] )\nWhen the WeakSet function is called with optional argument iterable, the following steps are taken:\n1. If NewTarget is undefined, throw a TypeError exception.2. Let set be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%WeakSet.prototype%\", \u00ab [[WeakSetData]] \u00bb).3. Set set.[[WeakSetData]] to a new empty List.4. If iterable is either undefined or null, return set.5. Let adder be ?\u00a0Get(set, \"add\").6. If IsCallable(adder) is false, throw a TypeError exception.7. Let iteratorRecord be ?\u00a0GetIterator(iterable).8. Repeat,a. Let next be ?\u00a0IteratorStep(iteratorRecord).b. If next is false, return set.c. Let nextValue be ?\u00a0IteratorValue(next).d. Let status be Completion(Call(adder, set, \u00ab nextValue \u00bb)).e. IfAbruptCloseIterator(status, iteratorRecord).\n\n\n\n24.4.2 Properties of the WeakSet Constructor\nThe WeakSet constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n24.4.2.1 WeakSet.prototype\nThe initial value of WeakSet.prototype is the WeakSet prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n24.4.3 Properties of the WeakSet Prototype Object\nThe WeakSet prototype object:\n\nis %WeakSet.prototype%.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis an ordinary object.\ndoes not have a [[WeakSetData]] internal slot.\n\n\n24.4.3.1 WeakSet.prototype.add ( value )\nThe following steps are taken:\n1. Let S be the this value.2. Perform ?\u00a0RequireInternalSlot(S, [[WeakSetData]]).3. If Type(value) is not Object, throw a TypeError exception.4. Let entries be the List that is S.[[WeakSetData]].5. For each element e of entries, doa. If e is not empty and SameValue(e, value) is true, theni. Return S.6. Append value as the last element of entries.7. Return S.\n\n\n24.4.3.2 WeakSet.prototype.constructor\nThe initial value of WeakSet.prototype.constructor is %WeakSet%.\n\n\n24.4.3.3 WeakSet.prototype.delete ( value )\nThe following steps are taken:\n1. Let S be the this value.2. Perform ?\u00a0RequireInternalSlot(S, [[WeakSetData]]).3. If Type(value) is not Object, return false.4. Let entries be the List that is S.[[WeakSetData]].5. For each element e of entries, doa. If e is not empty and SameValue(e, value) is true, theni. Replace the element of entries whose value is e with an element whose value is empty.ii. Return true.6. Return false.\nNote\nThe value empty is used as a \nspecification device to indicate that an entry has been deleted. Actual \nimplementations may take other actions such as physically removing the \nentry from internal data structures.\n\n\n\n24.4.3.4 WeakSet.prototype.has ( value )\nThe following steps are taken:\n1. Let S be the this value.2. Perform ?\u00a0RequireInternalSlot(S, [[WeakSetData]]).3. Let entries be the List that is S.[[WeakSetData]].4. If Type(value) is not Object, return false.5. For each element e of entries, doa. If e is not empty and SameValue(e, value) is true, return true.6. Return false.\n\n\n24.4.3.5 WeakSet.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"WeakSet\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n24.4.4 Properties of WeakSet Instances\nWeakSet instances are ordinary objects that inherit properties from the WeakSet prototype. WeakSet instances also have a [[WeakSetData]] internal slot.\n\n\n\n\n25 Structured Data\n\n25.1 ArrayBuffer Objects\n\n25.1.1 Notation\nThe descriptions below in this section, 25.4, and 29 use the read-modify-write modification function internal data structure.\nA read-modify-write modification function is a mathematical function that is notationally represented as an abstract closure that takes two Lists of byte values as arguments and returns a List of byte values. These abstract closures satisfy all of the following properties:\n\nThey perform all their algorithm steps atomically.\nTheir individual algorithm steps are not observable.\n\nNote\nTo aid verifying that a read-modify-write modification \nfunction's algorithm steps constitute a pure, mathematical function, the\n following editorial conventions are recommended:\n\nThey do not access, directly or transitively via invoked abstract operations and abstract closures, any language or specification values except their parameters and captured values.\nThey do not return Completion Records.\n\n\n\n\n25.1.2 Abstract Operations For ArrayBuffer Objects\n\n25.1.2.1 AllocateArrayBuffer ( constructor, byteLength )\nThe abstract operation AllocateArrayBuffer takes arguments constructor and byteLength (a non-negative integer) and returns either a normal completion containing an ArrayBuffer or an abrupt completion. It is used to create an ArrayBuffer. It performs the following steps when called:\n1. Let obj be ?\u00a0OrdinaryCreateFromConstructor(constructor, \"%ArrayBuffer.prototype%\", \u00ab [[ArrayBufferData]], [[ArrayBufferByteLength]], [[ArrayBufferDetachKey]] \u00bb).2. Let block be ?\u00a0CreateByteDataBlock(byteLength).3. Set obj.[[ArrayBufferData]] to block.4. Set obj.[[ArrayBufferByteLength]] to byteLength.5. Return obj.\n\n\n25.1.2.2 IsDetachedBuffer ( arrayBuffer )\nThe abstract operation IsDetachedBuffer takes argument arrayBuffer (an ArrayBuffer or a SharedArrayBuffer) and returns a Boolean. It performs the following steps when called:\n1. If arrayBuffer.[[ArrayBufferData]] is null, return true.2. Return false.\n\n\n25.1.2.3 DetachArrayBuffer ( arrayBuffer [ , key ] )\nThe abstract operation DetachArrayBuffer takes argument arrayBuffer (an ArrayBuffer) and optional argument key and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Assert: IsSharedArrayBuffer(arrayBuffer) is false.2. If key is not present, set key to undefined.3. If SameValue(arrayBuffer.[[ArrayBufferDetachKey]], key) is false, throw a TypeError exception.4. Set arrayBuffer.[[ArrayBufferData]] to null.5. Set arrayBuffer.[[ArrayBufferByteLength]] to 0.6. Return unused.\nNote\nDetaching an ArrayBuffer instance disassociates the Data Block\n used as its backing store from the instance and sets the byte length of\n the buffer to 0. No operations defined by this specification use the \nDetachArrayBuffer abstract operation. However, an ECMAScript host or implementation may define such operations.\n\n\n\n25.1.2.4 CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength, cloneConstructor )\nThe abstract operation CloneArrayBuffer takes arguments srcBuffer (an ArrayBuffer or a SharedArrayBuffer), srcByteOffset (a non-negative integer), srcLength (a non-negative integer), and cloneConstructor (a constructor) and returns either a normal completion containing an ArrayBuffer or an abrupt completion. It creates a new ArrayBuffer whose data is a copy of srcBuffer's data over the range starting at srcByteOffset and continuing for srcLength bytes. It performs the following steps when called:\n1. Let targetBuffer be ?\u00a0AllocateArrayBuffer(cloneConstructor, srcLength).2. If IsDetachedBuffer(srcBuffer) is true, throw a TypeError exception.3. Let srcBlock be srcBuffer.[[ArrayBufferData]].4. Let targetBlock be targetBuffer.[[ArrayBufferData]].5. Perform CopyDataBlockBytes(targetBlock, 0, srcBlock, srcByteOffset, srcLength).6. Return targetBuffer.\n\n\n25.1.2.5 IsUnsignedElementType ( type )\nThe abstract operation IsUnsignedElementType takes argument type and returns a Boolean. It verifies if the argument type is an unsigned TypedArray element type. It performs the following steps when called:\n1. If type is Uint8, Uint8C, Uint16, Uint32, or BigUint64, return true.2. Return false.\n\n\n25.1.2.6 IsUnclampedIntegerElementType ( type )\nThe abstract operation IsUnclampedIntegerElementType takes argument type and returns a Boolean. It verifies if the argument type is an Integer TypedArray element type not including Uint8C. It performs the following steps when called:\n1. If type is Int8, Uint8, Int16, Uint16, Int32, or Uint32, return true.2. Return false.\n\n\n25.1.2.7 IsBigIntElementType ( type )\nThe abstract operation IsBigIntElementType takes argument type and returns a Boolean. It verifies if the argument type is a BigInt TypedArray element type. It performs the following steps when called:\n1. If type is BigUint64 or BigInt64, return true.2. Return false.\n\n\n25.1.2.8 IsNoTearConfiguration ( type, order )\nThe abstract operation IsNoTearConfiguration takes arguments type and order and returns a Boolean. It performs the following steps when called:\n1. If IsUnclampedIntegerElementType(type) is true, return true.2. If IsBigIntElementType(type) is true and order is not Init or Unordered, return true.3. Return false.\n\n\n25.1.2.9 RawBytesToNumeric ( type, rawBytes, isLittleEndian )\nThe abstract operation RawBytesToNumeric takes arguments type (a TypedArray element type), rawBytes (a List), and isLittleEndian (a Boolean) and returns a Number or a BigInt. It performs the following steps when called:\n1. Let elementSize be the Element Size value specified in Table 71 for Element Type type.2. If isLittleEndian is false, reverse the order of the elements of rawBytes.3. If type is Float32, thena. Let value be the byte elements of rawBytes concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2019 binary32 value.b. If value is an IEEE 754-2019 binary32 NaN value, return the NaN Number value.c. Return the Number value that corresponds to value.4. If type is Float64, thena. Let value be the byte elements of rawBytes concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2019 binary64 value.b. If value is an IEEE 754-2019 binary64 NaN value, return the NaN Number value.c. Return the Number value that corresponds to value.5. If IsUnsignedElementType(type) is true, thena. Let intValue be the byte elements of rawBytes concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.6. Else,a. Let intValue be the byte elements of rawBytes concatenated and interpreted as a bit string encoding of a binary little-endian two's complement number of bit length elementSize \u00d7 8.7. If IsBigIntElementType(type) is true, return the BigInt value that corresponds to intValue.8. Otherwise, return the Number value that corresponds to intValue.\n\n\n25.1.2.10 GetValueFromBuffer ( arrayBuffer, byteIndex, type, isTypedArray, order [ , isLittleEndian ] )\nThe abstract operation GetValueFromBuffer takes arguments arrayBuffer (an ArrayBuffer or SharedArrayBuffer), byteIndex (a non-negative integer), type (a TypedArray element type), isTypedArray (a Boolean), and order (SeqCst or Unordered) and optional argument isLittleEndian (a Boolean) and returns a Number or a BigInt. It performs the following steps when called:\n1. Assert: IsDetachedBuffer(arrayBuffer) is false.2. Assert: There are sufficient bytes in arrayBuffer starting at byteIndex to represent a value of type.3. Let block be arrayBuffer.[[ArrayBufferData]].4. Let elementSize be the Element Size value specified in Table 71 for Element Type type.5. If IsSharedArrayBuffer(arrayBuffer) is true, thena. Let execution be the [[CandidateExecution]] field of the surrounding agent's Agent Record.b. Let eventList be the [[EventList]] field of the element in execution.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().c. If isTypedArray is true and IsNoTearConfiguration(type, order) is true, let noTear be true; otherwise let noTear be false.d. Let rawValue be a List of length elementSize whose elements are nondeterministically chosen byte values.e. NOTE: In implementations, rawValue\n is the result of a non-atomic or atomic read instruction on the \nunderlying hardware. The nondeterminism is a semantic prescription of \nthe memory model to describe observable behaviour of hardware with weak consistency.f. Let readEvent be ReadSharedMemory { [[Order]]: order, [[NoTear]]: noTear, [[Block]]: block, [[ByteIndex]]: byteIndex, [[ElementSize]]: elementSize }.g. Append readEvent to eventList.h. Append Chosen Value Record { [[Event]]: readEvent, [[ChosenValue]]: rawValue } to execution.[[ChosenValues]].6. Else, let rawValue be a List whose elements are bytes from block at indices byteIndex (inclusive) through byteIndex + elementSize (exclusive).7. Assert: The number of elements in rawValue is elementSize.8. If isLittleEndian is not present, set isLittleEndian to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.9. Return RawBytesToNumeric(type, rawValue, isLittleEndian).\n\n\n25.1.2.11 NumericToRawBytes ( type, value, isLittleEndian )\nThe abstract operation NumericToRawBytes takes arguments type (a TypedArray element type), value (a BigInt or a Number), and isLittleEndian (a Boolean) and returns a List of byte values. It performs the following steps when called:\n1. If type is Float32, thena. Let rawBytes be a List whose elements are the 4 bytes that are the result of converting value to IEEE 754-2019 binary32 format using roundTiesToEven mode. If isLittleEndian is false, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If value is NaN, rawBytes may be set to any implementation chosen IEEE 754-2019\n binary32 format Not-a-Number encoding. An implementation must always \nchoose the same encoding for each implementation distinguishable NaN value.2. Else if type is Float64, thena. Let rawBytes be a List whose elements are the 8 bytes that are the IEEE 754-2019 binary64 format encoding of value. If isLittleEndian is false, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If value is NaN, rawBytes may be set to any implementation chosen IEEE 754-2019\n binary64 format Not-a-Number encoding. An implementation must always \nchoose the same encoding for each implementation distinguishable NaN value.3. Else,a. Let n be the Element Size value specified in Table 71 for Element Type type.b. Let convOp be the abstract operation named in the Conversion Operation column in Table 71 for Element Type type.c. Let intValue be \u211d(convOp(value)).d. If intValue \u2265 0, theni. Let rawBytes be a List whose elements are the n-byte binary encoding of intValue. If isLittleEndian is false, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.e. Else,i. Let rawBytes be a List whose elements are the n-byte binary two's complement encoding of intValue. If isLittleEndian is false, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.4. Return rawBytes.\n\n\n25.1.2.12 SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )\nThe abstract operation SetValueInBuffer takes arguments arrayBuffer (an ArrayBuffer or SharedArrayBuffer), byteIndex (a non-negative integer), type (a TypedArray element type), value (a Number or a BigInt), isTypedArray (a Boolean), and order (SeqCst, Unordered, or Init) and optional argument isLittleEndian (a Boolean) and returns unused. It performs the following steps when called:\n1. Assert: IsDetachedBuffer(arrayBuffer) is false.2. Assert: There are sufficient bytes in arrayBuffer starting at byteIndex to represent a value of type.3. Assert: Type(value) is BigInt if IsBigIntElementType(type) is true; otherwise, Type(value) is Number.4. Let block be arrayBuffer.[[ArrayBufferData]].5. Let elementSize be the Element Size value specified in Table 71 for Element Type type.6. If isLittleEndian is not present, set isLittleEndian to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.7. Let rawBytes be NumericToRawBytes(type, value, isLittleEndian).8. If IsSharedArrayBuffer(arrayBuffer) is true, thena. Let execution be the [[CandidateExecution]] field of the surrounding agent's Agent Record.b. Let eventList be the [[EventList]] field of the element in execution.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().c. If isTypedArray is true and IsNoTearConfiguration(type, order) is true, let noTear be true; otherwise let noTear be false.d. Append WriteSharedMemory { [[Order]]: order, [[NoTear]]: noTear, [[Block]]: block, [[ByteIndex]]: byteIndex, [[ElementSize]]: elementSize, [[Payload]]: rawBytes } to eventList.9. Else, store the individual bytes of rawBytes into block, starting at block[byteIndex].10. Return unused.\n\n\n25.1.2.13 GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )\nThe abstract operation GetModifySetValueInBuffer takes arguments arrayBuffer (an ArrayBuffer or a SharedArrayBuffer), byteIndex (a non-negative integer), type (a TypedArray element type), value (a Number or a BigInt), and op (a read-modify-write modification function) and optional argument isLittleEndian (a Boolean) and returns a Number or a BigInt. It performs the following steps when called:\n1. Assert: IsDetachedBuffer(arrayBuffer) is false.2. Assert: There are sufficient bytes in arrayBuffer starting at byteIndex to represent a value of type.3. Assert: Type(value) is BigInt if IsBigIntElementType(type) is true; otherwise, Type(value) is Number.4. Let block be arrayBuffer.[[ArrayBufferData]].5. Let elementSize be the Element Size value specified in Table 71 for Element Type type.6. If isLittleEndian is not present, set isLittleEndian to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.7. Let rawBytes be NumericToRawBytes(type, value, isLittleEndian).8. If IsSharedArrayBuffer(arrayBuffer) is true, thena. Let execution be the [[CandidateExecution]] field of the surrounding agent's Agent Record.b. Let eventList be the [[EventList]] field of the element in execution.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().c. Let rawBytesRead be a List of length elementSize whose elements are nondeterministically chosen byte values.d. NOTE: In implementations, rawBytesRead\n is the result of a load-link, of a load-exclusive, or of an operand of a\n read-modify-write instruction on the underlying hardware. The \nnondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency.e. Let rmwEvent be ReadModifyWriteSharedMemory { [[Order]]: SeqCst, [[NoTear]]: true, [[Block]]: block, [[ByteIndex]]: byteIndex, [[ElementSize]]: elementSize, [[Payload]]: rawBytes, [[ModifyOp]]: op }.f. Append rmwEvent to eventList.g. Append Chosen Value Record { [[Event]]: rmwEvent, [[ChosenValue]]: rawBytesRead } to execution.[[ChosenValues]].9. Else,a. Let rawBytesRead be a List of length elementSize whose elements are the sequence of elementSize bytes starting with block[byteIndex].b. Let rawBytesModified be op(rawBytesRead, rawBytes).c. Store the individual bytes of rawBytesModified into block, starting at block[byteIndex].10. Return RawBytesToNumeric(type, rawBytesRead, isLittleEndian).\n\n\n\n25.1.3 The ArrayBuffer Constructor\nThe ArrayBuffer constructor:\n\nis %ArrayBuffer%.\nis the initial value of the \"ArrayBuffer\" property of the global object.\ncreates and initializes a new ArrayBuffer when called as a constructor.\nis not intended to be called as a function and will throw an exception when called in that manner.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified ArrayBuffer behaviour must include a super call to the ArrayBuffer constructor to create and initialize subclass instances with the internal state necessary to support the ArrayBuffer.prototype built-in methods.\n\n\n25.1.3.1 ArrayBuffer ( length )\nWhen the ArrayBuffer function is called with argument length, the following steps are taken:\n1. If NewTarget is undefined, throw a TypeError exception.2. Let byteLength be ?\u00a0ToIndex(length).3. Return ?\u00a0AllocateArrayBuffer(NewTarget, byteLength).\n\n\n\n25.1.4 Properties of the ArrayBuffer Constructor\nThe ArrayBuffer constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n25.1.4.1 ArrayBuffer.isView ( arg )\nThe isView function takes one argument arg, and performs the following steps:\n1. If Type(arg) is not Object, return false.2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.3. Return false.\n\n\n25.1.4.2 ArrayBuffer.prototype\nThe initial value of ArrayBuffer.prototype is the ArrayBuffer prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n25.1.4.3 get ArrayBuffer [ @@species ]\nArrayBuffer[@@species] is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Return the this value.\nThe value of the \"name\" property of this function is \"get [Symbol.species]\".\nNote\nArrayBuffer prototype methods normally use their this value's constructor to create a derived object. However, a subclass constructor may over-ride that default behaviour by redefining its @@species property.\n\n\n\n\n25.1.5 Properties of the ArrayBuffer Prototype Object\nThe ArrayBuffer prototype object:\n\nis %ArrayBuffer.prototype%.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis an ordinary object.\ndoes not have an [[ArrayBufferData]] or [[ArrayBufferByteLength]] internal slot.\n\n\n25.1.5.1 get ArrayBuffer.prototype.byteLength\nArrayBuffer.prototype.byteLength is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[ArrayBufferData]]).3. If IsSharedArrayBuffer(O) is true, throw a TypeError exception.4. If IsDetachedBuffer(O) is true, return +0\ud835\udd3d.5. Let length be O.[[ArrayBufferByteLength]].6. Return \ud835\udd3d(length).\n\n\n25.1.5.2 ArrayBuffer.prototype.constructor\nThe initial value of ArrayBuffer.prototype.constructor is %ArrayBuffer%.\n\n\n25.1.5.3 ArrayBuffer.prototype.slice ( start, end )\nThe following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[ArrayBufferData]]).3. If IsSharedArrayBuffer(O) is true, throw a TypeError exception.4. If IsDetachedBuffer(O) is true, throw a TypeError exception.5. Let len be O.[[ArrayBufferByteLength]].6. Let relativeStart be ?\u00a0ToIntegerOrInfinity(start).7. If relativeStart is -\u221e, let first be 0.8. Else if relativeStart < 0, let first be max(len + relativeStart, 0).9. Else, let first be min(relativeStart, len).10. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\u00a0ToIntegerOrInfinity(end).11. If relativeEnd is -\u221e, let final be 0.12. Else if relativeEnd < 0, let final be max(len + relativeEnd, 0).13. Else, let final be min(relativeEnd, len).14. Let newLen be max(final - first, 0).15. Let ctor be ?\u00a0SpeciesConstructor(O, %ArrayBuffer%).16. Let new be ?\u00a0Construct(ctor, \u00ab \ud835\udd3d(newLen) \u00bb).17. Perform ?\u00a0RequireInternalSlot(new, [[ArrayBufferData]]).18. If IsSharedArrayBuffer(new) is true, throw a TypeError exception.19. If IsDetachedBuffer(new) is true, throw a TypeError exception.20. If SameValue(new, O) is true, throw a TypeError exception.21. If new.[[ArrayBufferByteLength]] < newLen, throw a TypeError exception.22. NOTE: Side-effects of the above steps may have detached O.23. If IsDetachedBuffer(O) is true, throw a TypeError exception.24. Let fromBuf be O.[[ArrayBufferData]].25. Let toBuf be new.[[ArrayBufferData]].26. Perform CopyDataBlockBytes(toBuf, 0, fromBuf, first, newLen).27. Return new.\n\n\n25.1.5.4 ArrayBuffer.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"ArrayBuffer\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n25.1.6 Properties of ArrayBuffer Instances\nArrayBuffer instances inherit properties from the ArrayBuffer prototype object.\n ArrayBuffer instances each have an [[ArrayBufferData]] internal slot, \nan [[ArrayBufferByteLength]] internal slot, and an \n[[ArrayBufferDetachKey]] internal slot.\nArrayBuffer instances whose [[ArrayBufferData]] is null are considered to be detached and all operators to access or modify data contained in the ArrayBuffer instance will fail.\nArrayBuffer instances whose [[ArrayBufferDetachKey]] is set to a value other than undefined need to have all DetachArrayBuffer\n calls passing that same \"detach key\" as an argument, otherwise a \nTypeError will result. This internal slot is only ever set by certain \nembedding environments, not by algorithms in this specification.\n\n\n\n25.2 SharedArrayBuffer Objects\n\n25.2.1 Abstract Operations for SharedArrayBuffer Objects\n\n25.2.1.1 AllocateSharedArrayBuffer ( constructor, byteLength )\nThe abstract operation AllocateSharedArrayBuffer takes arguments constructor and byteLength (a non-negative integer) and returns either a normal completion containing a SharedArrayBuffer or an abrupt completion. It is used to create a SharedArrayBuffer. It performs the following steps when called:\n1. Let obj be ?\u00a0OrdinaryCreateFromConstructor(constructor, \"%SharedArrayBuffer.prototype%\", \u00ab [[ArrayBufferData]], [[ArrayBufferByteLength]] \u00bb).2. Let block be ?\u00a0CreateSharedByteDataBlock(byteLength).3. Set obj.[[ArrayBufferData]] to block.4. Set obj.[[ArrayBufferByteLength]] to byteLength.5. Return obj.\n\n\n25.2.1.2 IsSharedArrayBuffer ( obj )\nThe abstract operation IsSharedArrayBuffer takes argument obj\n (an ArrayBuffer or a SharedArrayBuffer) and returns a Boolean. It tests\n whether an object is an ArrayBuffer, a SharedArrayBuffer, or a subtype \nof either. It performs the following steps when called:\n1. Let bufferData be obj.[[ArrayBufferData]].2. If bufferData is null, return false.3. If bufferData is a Data Block, return false.4. Assert: bufferData is a Shared Data Block.5. Return true.\n\n\n\n25.2.2 The SharedArrayBuffer Constructor\nThe SharedArrayBuffer constructor:\n\nis %SharedArrayBuffer%.\nis the initial value of the \"SharedArrayBuffer\" property of the global object, if that property is present (see below).\ncreates and initializes a new SharedArrayBuffer when called as a constructor.\nis not intended to be called as a function and will throw an exception when called in that manner.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified SharedArrayBuffer behaviour must include a super call to the SharedArrayBuffer constructor to create and initialize subclass instances with the internal state necessary to support the SharedArrayBuffer.prototype built-in methods.\n\nWhenever a host does not provide concurrent access to SharedArrayBuffers it may omit the \"SharedArrayBuffer\" property of the global object.\nNote\nUnlike an ArrayBuffer, a SharedArrayBuffer cannot become detached, and its internal [[ArrayBufferData]] slot is never null.\n\n\n25.2.2.1 SharedArrayBuffer ( length )\nWhen the SharedArrayBuffer function is called with argument length, the following steps are taken:\n1. If NewTarget is undefined, throw a TypeError exception.2. Let byteLength be ?\u00a0ToIndex(length).3. Return ?\u00a0AllocateSharedArrayBuffer(NewTarget, byteLength).\n\n\n\n25.2.3 Properties of the SharedArrayBuffer Constructor\nThe SharedArrayBuffer constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n25.2.3.1 SharedArrayBuffer.prototype\nThe initial value of SharedArrayBuffer.prototype is the SharedArrayBuffer prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n25.2.3.2 get SharedArrayBuffer [ @@species ]\nSharedArrayBuffer[@@species] is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Return the this value.\nThe value of the \"name\" property of this function is \"get [Symbol.species]\".\n\n\n\n25.2.4 Properties of the SharedArrayBuffer Prototype Object\nThe SharedArrayBuffer prototype object:\n\nis %SharedArrayBuffer.prototype%.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis an ordinary object.\ndoes not have an [[ArrayBufferData]] or [[ArrayBufferByteLength]] internal slot.\n\n\n25.2.4.1 get SharedArrayBuffer.prototype.byteLength\nSharedArrayBuffer.prototype.byteLength is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[ArrayBufferData]]).3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.4. Let length be O.[[ArrayBufferByteLength]].5. Return \ud835\udd3d(length).\n\n\n25.2.4.2 SharedArrayBuffer.prototype.constructor\nThe initial value of SharedArrayBuffer.prototype.constructor is %SharedArrayBuffer%.\n\n\n25.2.4.3 SharedArrayBuffer.prototype.slice ( start, end )\nThe following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[ArrayBufferData]]).3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.4. Let len be O.[[ArrayBufferByteLength]].5. Let relativeStart be ?\u00a0ToIntegerOrInfinity(start).6. If relativeStart is -\u221e, let first be 0.7. Else if relativeStart < 0, let first be max(len + relativeStart, 0).8. Else, let first be min(relativeStart, len).9. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\u00a0ToIntegerOrInfinity(end).10. If relativeEnd is -\u221e, let final be 0.11. Else if relativeEnd < 0, let final be max(len + relativeEnd, 0).12. Else, let final be min(relativeEnd, len).13. Let newLen be max(final - first, 0).14. Let ctor be ?\u00a0SpeciesConstructor(O, %SharedArrayBuffer%).15. Let new be ?\u00a0Construct(ctor, \u00ab \ud835\udd3d(newLen) \u00bb).16. Perform ?\u00a0RequireInternalSlot(new, [[ArrayBufferData]]).17. If IsSharedArrayBuffer(new) is false, throw a TypeError exception.18. If new.[[ArrayBufferData]] and O.[[ArrayBufferData]] are the same Shared Data Block values, throw a TypeError exception.19. If new.[[ArrayBufferByteLength]] < newLen, throw a TypeError exception.20. Let fromBuf be O.[[ArrayBufferData]].21. Let toBuf be new.[[ArrayBufferData]].22. Perform CopyDataBlockBytes(toBuf, 0, fromBuf, first, newLen).23. Return new.\n\n\n25.2.4.4 SharedArrayBuffer.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"SharedArrayBuffer\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n25.2.5 Properties of SharedArrayBuffer Instances\nSharedArrayBuffer instances inherit properties from the SharedArrayBuffer prototype object. SharedArrayBuffer instances each have an [[ArrayBufferData]] internal slot and an [[ArrayBufferByteLength]] internal slot.\nNote\nSharedArrayBuffer instances, unlike ArrayBuffer instances, are never detached.\n\n\n\n\n25.3 DataView Objects\n\n25.3.1 Abstract Operations For DataView Objects\n\n25.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\nThe abstract operation GetViewValue takes arguments view, requestIndex, isLittleEndian, and type and returns either a normal completion containing either a Number or a BigInt, or an abrupt completion.\n It is used by functions on DataView instances to retrieve values from \nthe view's buffer. It performs the following steps when called:\n1. Perform ?\u00a0RequireInternalSlot(view, [[DataView]]).2. Assert: view has a [[ViewedArrayBuffer]] internal slot.3. Let getIndex be ?\u00a0ToIndex(requestIndex).4. Set isLittleEndian to ToBoolean(isLittleEndian).5. Let buffer be view.[[ViewedArrayBuffer]].6. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.7. Let viewOffset be view.[[ByteOffset]].8. Let viewSize be view.[[ByteLength]].9. Let elementSize be the Element Size value specified in Table 71 for Element Type type.10. If getIndex + elementSize > viewSize, throw a RangeError exception.11. Let bufferIndex be getIndex + viewOffset.12. Return GetValueFromBuffer(buffer, bufferIndex, type, false, Unordered, isLittleEndian).\n\n\n25.3.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\nThe abstract operation SetViewValue takes arguments view, requestIndex, isLittleEndian, type, and value and returns either a normal completion containing undefined or an abrupt completion.\n It is used by functions on DataView instances to store values into the \nview's buffer. It performs the following steps when called:\n1. Perform ?\u00a0RequireInternalSlot(view, [[DataView]]).2. Assert: view has a [[ViewedArrayBuffer]] internal slot.3. Let getIndex be ?\u00a0ToIndex(requestIndex).4. If IsBigIntElementType(type) is true, let numberValue be ?\u00a0ToBigInt(value).5. Otherwise, let numberValue be ?\u00a0ToNumber(value).6. Set isLittleEndian to ToBoolean(isLittleEndian).7. Let buffer be view.[[ViewedArrayBuffer]].8. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.9. Let viewOffset be view.[[ByteOffset]].10. Let viewSize be view.[[ByteLength]].11. Let elementSize be the Element Size value specified in Table 71 for Element Type type.12. If getIndex + elementSize > viewSize, throw a RangeError exception.13. Let bufferIndex be getIndex + viewOffset.14. Perform SetValueInBuffer(buffer, bufferIndex, type, numberValue, false, Unordered, isLittleEndian).15. Return undefined.\n\n\n\n25.3.2 The DataView Constructor\nThe DataView constructor:\n\nis %DataView%.\nis the initial value of the \"DataView\" property of the global object.\ncreates and initializes a new DataView when called as a constructor.\nis not intended to be called as a function and will throw an exception when called in that manner.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified DataView behaviour must include a super call to the DataView constructor to create and initialize subclass instances with the internal state necessary to support the DataView.prototype built-in methods.\n\n\n25.3.2.1 DataView ( buffer [ , byteOffset [ , byteLength ] ] )\nWhen the DataView function is called with at least one argument buffer, the following steps are taken:\n1. If NewTarget is undefined, throw a TypeError exception.2. Perform ?\u00a0RequireInternalSlot(buffer, [[ArrayBufferData]]).3. Let offset be ?\u00a0ToIndex(byteOffset).4. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.5. Let bufferByteLength be buffer.[[ArrayBufferByteLength]].6. If offset > bufferByteLength, throw a RangeError exception.7. If byteLength is undefined, thena. Let viewByteLength be bufferByteLength - offset.8. Else,a. Let viewByteLength be ?\u00a0ToIndex(byteLength).b. If offset + viewByteLength > bufferByteLength, throw a RangeError exception.9. Let O be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%DataView.prototype%\", \u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).10. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.11. Set O.[[ViewedArrayBuffer]] to buffer.12. Set O.[[ByteLength]] to viewByteLength.13. Set O.[[ByteOffset]] to offset.14. Return O.\n\n\n\n25.3.3 Properties of the DataView Constructor\nThe DataView constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n25.3.3.1 DataView.prototype\nThe initial value of DataView.prototype is the DataView prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n25.3.4 Properties of the DataView Prototype Object\nThe DataView prototype object:\n\nis %DataView.prototype%.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis an ordinary object.\ndoes not have a [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], or [[ByteOffset]] internal slot.\n\n\n25.3.4.1 get DataView.prototype.buffer\nDataView.prototype.buffer is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[DataView]]).3. Assert: O has a [[ViewedArrayBuffer]] internal slot.4. Let buffer be O.[[ViewedArrayBuffer]].5. Return buffer.\n\n\n25.3.4.2 get DataView.prototype.byteLength\nDataView.prototype.byteLength is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[DataView]]).3. Assert: O has a [[ViewedArrayBuffer]] internal slot.4. Let buffer be O.[[ViewedArrayBuffer]].5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.6. Let size be O.[[ByteLength]].7. Return \ud835\udd3d(size).\n\n\n25.3.4.3 get DataView.prototype.byteOffset\nDataView.prototype.byteOffset is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[DataView]]).3. Assert: O has a [[ViewedArrayBuffer]] internal slot.4. Let buffer be O.[[ViewedArrayBuffer]].5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.6. Let offset be O.[[ByteOffset]].7. Return \ud835\udd3d(offset).\n\n\n25.3.4.4 DataView.prototype.constructor\nThe initial value of DataView.prototype.constructor is %DataView%.\n\n\n25.3.4.5 DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\nWhen the getBigInt64 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. Return ?\u00a0GetViewValue(v, byteOffset, littleEndian, BigInt64).\n\n\n25.3.4.6 DataView.prototype.getBigUint64 ( byteOffset [ , littleEndian ] )\nWhen the getBigUint64 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. Return ?\u00a0GetViewValue(v, byteOffset, littleEndian, BigUint64).\n\n\n25.3.4.7 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )\nWhen the getFloat32 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0GetViewValue(v, byteOffset, littleEndian, Float32).\n\n\n25.3.4.8 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )\nWhen the getFloat64 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0GetViewValue(v, byteOffset, littleEndian, Float64).\n\n\n25.3.4.9 DataView.prototype.getInt8 ( byteOffset )\nWhen the getInt8 method is called with argument byteOffset, the following steps are taken:\n1. Let v be the this value.2. Return ?\u00a0GetViewValue(v, byteOffset, true, Int8).\n\n\n25.3.4.10 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )\nWhen the getInt16 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0GetViewValue(v, byteOffset, littleEndian, Int16).\n\n\n25.3.4.11 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\nWhen the getInt32 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0GetViewValue(v, byteOffset, littleEndian, Int32).\n\n\n25.3.4.12 DataView.prototype.getUint8 ( byteOffset )\nWhen the getUint8 method is called with argument byteOffset, the following steps are taken:\n1. Let v be the this value.2. Return ?\u00a0GetViewValue(v, byteOffset, true, Uint8).\n\n\n25.3.4.13 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )\nWhen the getUint16 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0GetViewValue(v, byteOffset, littleEndian, Uint16).\n\n\n25.3.4.14 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )\nWhen the getUint32 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0GetViewValue(v, byteOffset, littleEndian, Uint32).\n\n\n25.3.4.15 DataView.prototype.setBigInt64 ( byteOffset, value [ , littleEndian ] )\nWhen the setBigInt64 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. Return ?\u00a0SetViewValue(v, byteOffset, littleEndian, BigInt64, value).\n\n\n25.3.4.16 DataView.prototype.setBigUint64 ( byteOffset, value [ , littleEndian ] )\nWhen the setBigUint64 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. Return ?\u00a0SetViewValue(v, byteOffset, littleEndian, BigUint64, value).\n\n\n25.3.4.17 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )\nWhen the setFloat32 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0SetViewValue(v, byteOffset, littleEndian, Float32, value).\n\n\n25.3.4.18 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )\nWhen the setFloat64 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0SetViewValue(v, byteOffset, littleEndian, Float64, value).\n\n\n25.3.4.19 DataView.prototype.setInt8 ( byteOffset, value )\nWhen the setInt8 method is called with arguments byteOffset and value, the following steps are taken:\n1. Let v be the this value.2. Return ?\u00a0SetViewValue(v, byteOffset, true, Int8, value).\n\n\n25.3.4.20 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )\nWhen the setInt16 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0SetViewValue(v, byteOffset, littleEndian, Int16, value).\n\n\n25.3.4.21 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )\nWhen the setInt32 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0SetViewValue(v, byteOffset, littleEndian, Int32, value).\n\n\n25.3.4.22 DataView.prototype.setUint8 ( byteOffset, value )\nWhen the setUint8 method is called with arguments byteOffset and value, the following steps are taken:\n1. Let v be the this value.2. Return ?\u00a0SetViewValue(v, byteOffset, true, Uint8, value).\n\n\n25.3.4.23 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )\nWhen the setUint16 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0SetViewValue(v, byteOffset, littleEndian, Uint16, value).\n\n\n25.3.4.24 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )\nWhen the setUint32 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:\n1. Let v be the this value.2. If littleEndian is not present, set littleEndian to false.3. Return ?\u00a0SetViewValue(v, byteOffset, littleEndian, Uint32, value).\n\n\n25.3.4.25 DataView.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"DataView\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n25.3.5 Properties of DataView Instances\nDataView instances are ordinary objects that inherit properties from the DataView prototype object. DataView instances each have [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], and [[ByteOffset]] internal slots.\nNote\nThe value of the [[DataView]] internal slot is not used \nwithin this specification. The simple presence of that internal slot is \nused within the specification to identify objects created using the \nDataView constructor.\n\n\n\n\n25.4 The Atomics Object\nThe Atomics object:\n\nis %Atomics%.\nis the initial value of the \"Atomics\" property of the global object.\nis an ordinary object.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\ndoes not have a [[Construct]] internal method; it cannot be used as a constructor with the new operator.\ndoes not have a [[Call]] internal method; it cannot be invoked as a function.\n\nThe Atomics object provides functions that operate indivisibly \n(atomically) on shared memory array cells as well as functions that let agents wait for and dispatch primitive events. When used with discipline, the Atomics functions allow multi-agent\n programs that communicate through shared memory to execute in a \nwell-understood order even on parallel CPUs. The rules that govern \nshared-memory communication are provided by the memory model, defined below.\nNote\nFor informative guidelines for programming and implementing shared memory in ECMAScript, please see the notes at the end of the memory model section.\n\n\n25.4.1 WaiterList Objects\nA WaiterList is a semantic object that contains an ordered list of agent signifiers for those agents that are waiting on a location (block, i) in shared memory; block is a Shared Data Block and i a byte offset into the memory of block. A WaiterList object also optionally contains a Synchronize event denoting the previous leaving of its critical section.\nInitially a WaiterList object has an empty list and no Synchronize event.\nThe agent cluster has a store of WaiterList objects; the store is indexed by (block, i). WaiterLists are agent-independent: a lookup in the store of WaiterLists by (block, i) will result in the same WaiterList object in any agent in the agent cluster.\nEach WaiterList has a critical section that controls exclusive access to that WaiterList during evaluation. Only a single agent\n may enter a WaiterList's critical section at one time. Entering and \nleaving a WaiterList's critical section is controlled by the abstract operations EnterCriticalSection and LeaveCriticalSection. Operations on a WaiterList\u2014adding and removing waiting agents, traversing the list of agents, suspending and notifying agents on the list, setting and retrieving the Synchronize event\u2014may only be performed by agents that have entered the WaiterList's critical section.\n\n\n25.4.2 Abstract Operations for Atomics\n\n25.4.2.1 ValidateIntegerTypedArray ( typedArray [ , waitable ] )\nThe abstract operation ValidateIntegerTypedArray takes argument typedArray and optional argument waitable (a Boolean) and returns either a normal completion containing either an ArrayBuffer or a SharedArrayBuffer, or an abrupt completion. It performs the following steps when called:\n1. If waitable is not present, set waitable to false.2. Perform ?\u00a0ValidateTypedArray(typedArray).3. Let buffer be typedArray.[[ViewedArrayBuffer]].4. If waitable is true, thena. If typedArray.[[TypedArrayName]] is not \"Int32Array\" or \"BigInt64Array\", throw a TypeError exception.5. Else,a. Let type be TypedArrayElementType(typedArray).b. If IsUnclampedIntegerElementType(type) is false and IsBigIntElementType(type) is false, throw a TypeError exception.6. Return buffer.\n\n\n25.4.2.2 ValidateAtomicAccess ( typedArray, requestIndex )\nThe abstract operation ValidateAtomicAccess takes arguments typedArray (a TypedArray) and requestIndex and returns either a normal completion containing an integer or an abrupt completion. It performs the following steps when called:\n1. Let length be typedArray.[[ArrayLength]].2. Let accessIndex be ?\u00a0ToIndex(requestIndex).3. Assert: accessIndex \u2265 0.4. If accessIndex \u2265 length, throw a RangeError exception.5. Let elementSize be TypedArrayElementSize(typedArray).6. Let offset be typedArray.[[ByteOffset]].7. Return (accessIndex \u00d7 elementSize) + offset.\n\n\n25.4.2.3 GetWaiterList ( block, i )\nThe abstract operation GetWaiterList takes arguments block (a Shared Data Block) and i (a non-negative integer that is evenly divisible by 4) and returns a WaiterList. It performs the following steps when called:\n1. Assert: i and i + 3 are valid byte offsets within the memory of block.2. Return the WaiterList that is referenced by the pair (block, i).\n\n\n25.4.2.4 EnterCriticalSection ( WL )\nThe abstract operation EnterCriticalSection takes argument WL (a WaiterList) and returns unused. It performs the following steps when called:\n1. Assert: The calling agent is not in the critical section for any WaiterList.2. Wait until no agent is in the critical section for WL, then enter the critical section for WL (without allowing any other agent to enter).3. If WL has a Synchronize event, thena. NOTE: A WL whose critical section has been entered at least once has a Synchronize event set by LeaveCriticalSection.b. Let execution be the [[CandidateExecution]] field of the surrounding agent's Agent Record.c. Let eventsRecord be the Agent Events Record in execution.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().d. Let entererEventList be eventsRecord.[[EventList]].e. Let enterEvent be a new Synchronize event.f. Append enterEvent to entererEventList.g. Let leaveEvent be the Synchronize event in WL.h. Append (leaveEvent, enterEvent) to eventsRecord.[[AgentSynchronizesWith]].4. Return unused.\nEnterCriticalSection has contention when an agent attempting to enter the critical section must wait for another agent\n to leave it. When there is no contention, FIFO order of \nEnterCriticalSection calls is observable. When there is contention, an \nimplementation may choose an arbitrary order but may not cause an agent to wait indefinitely.\n\n\n25.4.2.5 LeaveCriticalSection ( WL )\nThe abstract operation LeaveCriticalSection takes argument WL (a WaiterList) and returns unused. It performs the following steps when called:\n1. Assert: The calling agent is in the critical section for WL.2. Let execution be the [[CandidateExecution]] field of the calling surrounding's Agent Record.3. Let eventsRecord be the Agent Events Record in execution.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().4. Let leaverEventList be eventsRecord.[[EventList]].5. Let leaveEvent be a new Synchronize event.6. Append leaveEvent to leaverEventList.7. Set the Synchronize event in WL to leaveEvent.8. Leave the critical section for WL.9. Return unused.\n\n\n25.4.2.6 AddWaiter ( WL, W )\nThe abstract operation AddWaiter takes arguments WL (a WaiterList) and W (an agent signifier) and returns unused. It performs the following steps when called:\n1. Assert: The calling agent is in the critical section for WL.2. Assert: W is not on the list of waiters in any WaiterList.3. Add W to the end of the list of waiters in WL.4. Return unused.\n\n\n25.4.2.7 RemoveWaiter ( WL, W )\nThe abstract operation RemoveWaiter takes arguments WL (a WaiterList) and W (an agent signifier) and returns unused. It performs the following steps when called:\n1. Assert: The calling agent is in the critical section for WL.2. Assert: W is on the list of waiters in WL.3. Remove W from the list of waiters in WL.4. Return unused.\n\n\n25.4.2.8 RemoveWaiters ( WL, c )\nThe abstract operation RemoveWaiters takes arguments WL (a WaiterList) and c (a non-negative integer or +\u221e) and returns a List of agent signifiers. It performs the following steps when called:\n1. Assert: The calling agent is in the critical section for WL.2. Let L be a new empty List.3. Let S be a reference to the list of waiters in WL.4. Repeat, while c > 0 and S is not an empty List,a. Let W be the first waiter in S.b. Add W to the end of L.c. Remove W from S.d. If c is finite, set c to c - 1.5. Return L.\n\n\n25.4.2.9 SuspendAgent ( WL, W, timeout )\nThe abstract operation SuspendAgent takes arguments WL (a WaiterList), W (an agent signifier), and timeout (a non-negative integer) and returns a Boolean. It performs the following steps when called:\n1. Assert: The calling agent is in the critical section for WL.2. Assert: W is equivalent to AgentSignifier().3. Assert: W is on the list of waiters in WL.4. Assert: AgentCanSuspend() is true.5. Perform LeaveCriticalSection(WL) and suspend W for up to timeout milliseconds, performing the combined operation in such a way that a notification that arrives after the critical section is exited but before the suspension takes effect is not lost. W can notify either because the timeout expired or because it was notified explicitly by another agent calling NotifyWaiter with arguments WL and W, and not for any other reasons at all.6. Perform EnterCriticalSection(WL).7. If W was notified explicitly by another agent calling NotifyWaiter with arguments WL and W, return true.8. Return false.\n\n\n25.4.2.10 NotifyWaiter ( WL, W )\nThe abstract operation NotifyWaiter takes arguments WL (a WaiterList) and W (an agent signifier) and returns unused. It performs the following steps when called:\n1. Assert: The calling agent is in the critical section for WL.2. Notify the agent W.3. Return unused.\nNote\nThe embedding may delay notifying W, e.g. for resource management reasons, but W must eventually be notified in order to guarantee forward progress.\n\n\n\n25.4.2.11 AtomicReadModifyWrite ( typedArray, index, value, op )\nThe abstract operation AtomicReadModifyWrite takes arguments typedArray, index, value, and op (a read-modify-write modification function) and returns either a normal completion containing either a Number or a BigInt, or an abrupt completion. op takes two List of byte values arguments and returns a List of byte values.\n This operation atomically loads a value, combines it with another \nvalue, and stores the result of the combination. It returns the loaded \nvalue. It performs the following steps when called:\n1. Let buffer be ?\u00a0ValidateIntegerTypedArray(typedArray).2. Let indexedPosition be ?\u00a0ValidateAtomicAccess(typedArray, index).3. If typedArray.[[ContentType]] is BigInt, let v be ?\u00a0ToBigInt(value).4. Otherwise, let v be \ud835\udd3d(? ToIntegerOrInfinity(value)).5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.6. NOTE: The above check is not redundant with the check in ValidateIntegerTypedArray because the call to ToBigInt or ToIntegerOrInfinity on the preceding lines can have arbitrary side effects, which could cause the buffer to become detached.7. Let elementType be TypedArrayElementType(typedArray).8. Return GetModifySetValueInBuffer(buffer, indexedPosition, elementType, v, op).\n\n\n25.4.2.12 ByteListBitwiseOp ( op, xBytes, yBytes )\nThe abstract operation ByteListBitwiseOp takes arguments op (&, ^, or |), xBytes (a List of byte values), and yBytes (a List of byte values) and returns a List of byte values. The operation atomically performs a bitwise operation on all byte values of the arguments and returns a List of byte values. It performs the following steps when called:\n1. Assert: xBytes and yBytes have the same number of elements.2. Let result be a new empty List.3. Let i be 0.4. For each element xByte of xBytes, doa. Let yByte be yBytes[i].b. If op is &, let resultByte be the result of applying the bitwise AND operation to xByte and yByte.c. Else if op is ^, let resultByte be the result of applying the bitwise exclusive OR (XOR) operation to xByte and yByte.d. Else, op is |. Let resultByte be the result of applying the bitwise inclusive OR operation to xByte and yByte.e. Set i to i + 1.f. Append resultByte to the end of result.5. Return result.\n\n\n25.4.2.13 ByteListEqual ( xBytes, yBytes )\nThe abstract operation ByteListEqual takes arguments xBytes (a List of byte values) and yBytes (a List of byte values) and returns a Boolean. It performs the following steps when called:\n1. If xBytes and yBytes do not have the same number of elements, return false.2. Let i be 0.3. For each element xByte of xBytes, doa. Let yByte be yBytes[i].b. If xByte \u2260 yByte, return false.c. Set i to i + 1.4. Return true.\n\n\n\n25.4.3 Atomics.add ( typedArray, index, value )\nThe following steps are taken:\n1. Let type be TypedArrayElementType(typedArray).2. Let isLittleEndian be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.3. Let add be a new read-modify-write modification function with parameters (xBytes, yBytes) that captures type and isLittleEndian and performs the following steps atomically when called:a. Let x be RawBytesToNumeric(type, xBytes, isLittleEndian).b. Let y be RawBytesToNumeric(type, yBytes, isLittleEndian).c. If Type(x) is Number, theni. Let sum be Number::add(x, y).d. Else,i. Assert: Type(x) is BigInt.ii. Let sum be BigInt::add(x, y).e. Let sumBytes be NumericToRawBytes(type, sum, isLittleEndian).f. Assert: sumBytes, xBytes, and yBytes have the same number of elements.g. Return sumBytes.4. Return ?\u00a0AtomicReadModifyWrite(typedArray, index, value, add).\n\n\n25.4.4 Atomics.and ( typedArray, index, value )\nThe following steps are taken:\n1. Let and be a new read-modify-write modification function with parameters (xBytes, yBytes) that captures nothing and performs the following steps atomically when called:a. Return ByteListBitwiseOp(&, xBytes, yBytes).2. Return ?\u00a0AtomicReadModifyWrite(typedArray, index, value, and).\n\n\n25.4.5 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )\nThe following steps are taken:\n1. Let buffer be ?\u00a0ValidateIntegerTypedArray(typedArray).2. Let block be buffer.[[ArrayBufferData]].3. Let indexedPosition be ?\u00a0ValidateAtomicAccess(typedArray, index).4. If typedArray.[[ContentType]] is BigInt, thena. Let expected be ?\u00a0ToBigInt(expectedValue).b. Let replacement be ?\u00a0ToBigInt(replacementValue).5. Else,a. Let expected be \ud835\udd3d(? ToIntegerOrInfinity(expectedValue)).b. Let replacement be \ud835\udd3d(? ToIntegerOrInfinity(replacementValue)).6. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.7. NOTE: The above check is not redundant with the check in ValidateIntegerTypedArray because the call to ToBigInt or ToIntegerOrInfinity on the preceding lines can have arbitrary side effects, which could cause the buffer to become detached.8. Let elementType be TypedArrayElementType(typedArray).9. Let elementSize be TypedArrayElementSize(typedArray).10. Let isLittleEndian be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.11. Let expectedBytes be NumericToRawBytes(elementType, expected, isLittleEndian).12. Let replacementBytes be NumericToRawBytes(elementType, replacement, isLittleEndian).13. If IsSharedArrayBuffer(buffer) is true, thena. Let execution be the [[CandidateExecution]] field of the surrounding agent's Agent Record.b. Let eventList be the [[EventList]] field of the element in execution.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().c. Let rawBytesRead be a List of length elementSize whose elements are nondeterministically chosen byte values.d. NOTE: In implementations, rawBytesRead\n is the result of a load-link, of a load-exclusive, or of an operand of a\n read-modify-write instruction on the underlying hardware. The \nnondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency.e. NOTE: The comparison of the expected value and the read value is performed outside of the read-modify-write modification function to avoid needlessly strong synchronization when the expected value is not equal to the read value.f. If ByteListEqual(rawBytesRead, expectedBytes) is true, theni. Let second be a new read-modify-write modification function with parameters (oldBytes, newBytes) that captures nothing and performs the following steps atomically when called:1. Return newBytes.ii. Let event be ReadModifyWriteSharedMemory { [[Order]]: SeqCst, [[NoTear]]: true, [[Block]]: block, [[ByteIndex]]: indexedPosition, [[ElementSize]]: elementSize, [[Payload]]: replacementBytes, [[ModifyOp]]: second }.g. Else,i. Let event be ReadSharedMemory { [[Order]]: SeqCst, [[NoTear]]: true, [[Block]]: block, [[ByteIndex]]: indexedPosition, [[ElementSize]]: elementSize }.h. Append event to eventList.i. Append Chosen Value Record { [[Event]]: event, [[ChosenValue]]: rawBytesRead } to execution.[[ChosenValues]].14. Else,a. Let rawBytesRead be a List of length elementSize whose elements are the sequence of elementSize bytes starting with block[indexedPosition].b. If ByteListEqual(rawBytesRead, expectedBytes) is true, theni. Store the individual bytes of replacementBytes into block, starting at block[indexedPosition].15. Return RawBytesToNumeric(elementType, rawBytesRead, isLittleEndian).\n\n\n25.4.6 Atomics.exchange ( typedArray, index, value )\nThe following steps are taken:\n1. Let second be a new read-modify-write modification function with parameters (oldBytes, newBytes) that captures nothing and performs the following steps atomically when called:a. Return newBytes.2. Return ?\u00a0AtomicReadModifyWrite(typedArray, index, value, second).\n\n\n25.4.7 Atomics.isLockFree ( size )\nThe following steps are taken:\n1. Let n be ?\u00a0ToIntegerOrInfinity(size).2. Let AR be the Agent Record of the surrounding agent.3. If n = 1, return AR.[[IsLockFree1]].4. If n = 2, return AR.[[IsLockFree2]].5. If n = 4, return true.6. If n = 8, return AR.[[IsLockFree8]].7. Return false.\nNote\nAtomics.isLockFree() is an optimization primitive. The intuition is that if the atomic step of an atomic primitive (compareExchange, load, store, add, sub, and, or, xor, or exchange) on a datum of size n bytes will be performed without the calling agent acquiring a lock outside the n bytes comprising the datum, then Atomics.isLockFree(n) will return true. High-performance algorithms will use Atomics.isLockFree to determine whether to use locks or atomic operations in critical sections. If an atomic primitive is not lock-free then it is often more efficient for an algorithm to provide its own locking.\nAtomics.isLockFree(4) always returns true as that can be supported on all known relevant hardware. Being able to assume this will generally simplify programs.\nRegardless of the value of Atomics.isLockFree, \nall atomic operations are guaranteed to be atomic. For example, they \nwill never have a visible operation take place in the middle of the \noperation (e.g., \"tearing\").\n\n\n\n25.4.8 Atomics.load ( typedArray, index )\nThe following steps are taken:\n1. Let buffer be ?\u00a0ValidateIntegerTypedArray(typedArray).2. Let indexedPosition be ?\u00a0ValidateAtomicAccess(typedArray, index).3. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.4. NOTE: The above check is not redundant with the check in ValidateIntegerTypedArray because the call to ValidateAtomicAccess on the preceding line can have arbitrary side effects, which could cause the buffer to become detached.5. Let elementType be TypedArrayElementType(typedArray).6. Return GetValueFromBuffer(buffer, indexedPosition, elementType, true, SeqCst).\n\n\n25.4.9 Atomics.or ( typedArray, index, value )\nThe following steps are taken:\n1. Let or be a new read-modify-write modification function with parameters (xBytes, yBytes) that captures nothing and performs the following steps atomically when called:a. Return ByteListBitwiseOp(|, xBytes, yBytes).2. Return ?\u00a0AtomicReadModifyWrite(typedArray, index, value, or).\n\n\n25.4.10 Atomics.store ( typedArray, index, value )\nThe following steps are taken:\n1. Let buffer be ?\u00a0ValidateIntegerTypedArray(typedArray).2. Let indexedPosition be ?\u00a0ValidateAtomicAccess(typedArray, index).3. If typedArray.[[ContentType]] is BigInt, let v be ?\u00a0ToBigInt(value).4. Otherwise, let v be \ud835\udd3d(? ToIntegerOrInfinity(value)).5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.6. NOTE: The above check is not redundant with the check in ValidateIntegerTypedArray because the call to ToBigInt or ToIntegerOrInfinity on the preceding lines can have arbitrary side effects, which could cause the buffer to become detached.7. Let elementType be TypedArrayElementType(typedArray).8. Perform SetValueInBuffer(buffer, indexedPosition, elementType, v, true, SeqCst).9. Return v.\n\n\n25.4.11 Atomics.sub ( typedArray, index, value )\nThe following steps are taken:\n1. Let type be TypedArrayElementType(typedArray).2. Let isLittleEndian be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.3. Let subtract be a new read-modify-write modification function with parameters (xBytes, yBytes) that captures type and isLittleEndian and performs the following steps atomically when called:a. Let x be RawBytesToNumeric(type, xBytes, isLittleEndian).b. Let y be RawBytesToNumeric(type, yBytes, isLittleEndian).c. If Type(x) is Number, theni. Let difference be Number::subtract(x, y).d. Else,i. Assert: Type(x) is BigInt.ii. Let difference be BigInt::subtract(x, y).e. Let differenceBytes be NumericToRawBytes(type, difference, isLittleEndian).f. Assert: differenceBytes, xBytes, and yBytes have the same number of elements.g. Return differenceBytes.4. Return ?\u00a0AtomicReadModifyWrite(typedArray, index, value, subtract).\n\n\n25.4.12 Atomics.wait ( typedArray, index, value, timeout )\nAtomics.wait puts the calling agent in a wait queue and puts it to sleep until it is notified or the sleep times out. The following steps are taken:\n1. Let buffer be ?\u00a0ValidateIntegerTypedArray(typedArray, true).2. If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.3. Let indexedPosition be ?\u00a0ValidateAtomicAccess(typedArray, index).4. If typedArray.[[TypedArrayName]] is \"BigInt64Array\", let v be ?\u00a0ToBigInt64(value).5. Otherwise, let v be ?\u00a0ToInt32(value).6. Let q be ?\u00a0ToNumber(timeout).7. If q is NaN or +\u221e\ud835\udd3d, let t be +\u221e; else if q is -\u221e\ud835\udd3d, let t be 0; else let t be max(\u211d(q), 0).8. Let B be AgentCanSuspend().9. If B is false, throw a TypeError exception.10. Let block be buffer.[[ArrayBufferData]].11. Let WL be GetWaiterList(block, indexedPosition).12. Perform EnterCriticalSection(WL).13. Let elementType be TypedArrayElementType(typedArray).14. Let w be GetValueFromBuffer(buffer, indexedPosition, elementType, true, SeqCst).15. If v \u2260 w, thena. Perform LeaveCriticalSection(WL).b. Return the String \"not-equal\".16. Let W be AgentSignifier().17. Perform AddWaiter(WL, W).18. Let notified be SuspendAgent(WL, W, t).19. If notified is true, thena. Assert: W is not on the list of waiters in WL.20. Else,a. Perform RemoveWaiter(WL, W).21. Perform LeaveCriticalSection(WL).22. If notified is true, return the String \"ok\".23. Return the String \"timed-out\".\n\n\n25.4.13 Atomics.notify ( typedArray, index, count )\nAtomics.notify notifies some agents that are sleeping in the wait queue. The following steps are taken:\n1. Let buffer be ?\u00a0ValidateIntegerTypedArray(typedArray, true).2. Let indexedPosition be ?\u00a0ValidateAtomicAccess(typedArray, index).3. If count is undefined, let c be +\u221e.4. Else,a. Let intCount be ?\u00a0ToIntegerOrInfinity(count).b. Let c be max(intCount, 0).5. Let block be buffer.[[ArrayBufferData]].6. If IsSharedArrayBuffer(buffer) is false, return +0\ud835\udd3d.7. Let WL be GetWaiterList(block, indexedPosition).8. Let n be 0.9. Perform EnterCriticalSection(WL).10. Let S be RemoveWaiters(WL, c).11. Repeat, while S is not an empty List,a. Let W be the first agent in S.b. Remove W from the front of S.c. Perform NotifyWaiter(WL, W).d. Set n to n + 1.12. Perform LeaveCriticalSection(WL).13. Return \ud835\udd3d(n).\n\n\n25.4.14 Atomics.xor ( typedArray, index, value )\nThe following steps are taken:\n1. Let xor be a new read-modify-write modification function with parameters (xBytes, yBytes) that captures nothing and performs the following steps atomically when called:a. Return ByteListBitwiseOp(^, xBytes, yBytes).2. Return ?\u00a0AtomicReadModifyWrite(typedArray, index, value, xor).\n\n\n25.4.15 Atomics [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Atomics\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n25.5 The JSON Object\nThe JSON object:\n\nis %JSON%.\nis the initial value of the \"JSON\" property of the global object.\nis an ordinary object.\ncontains two functions, parse and stringify, that are used to parse and construct JSON texts.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\ndoes not have a [[Construct]] internal method; it cannot be used as a constructor with the new operator.\ndoes not have a [[Call]] internal method; it cannot be invoked as a function.\n\nThe JSON Data Interchange Format is defined in ECMA-404. The JSON\n interchange format used in this specification is exactly that described\n by ECMA-404. Conforming implementations of JSON.parse and JSON.stringify\n must support the exact interchange format described in the ECMA-404 \nspecification without any deletions or extensions to the format.\n\n25.5.1 JSON.parse ( text [ , reviver ] )\nThe parse function parses a JSON text (a JSON-formatted String) and produces an ECMAScript language value.\n The JSON format represents literals, arrays, and objects with a syntax \nsimilar to the syntax for ECMAScript literals, Array Initializers, and \nObject Initializers. After parsing, JSON objects are realized as \nECMAScript objects. JSON arrays are realized as ECMAScript Array \ninstances. JSON strings, numbers, booleans, and null are realized as \nECMAScript Strings, Numbers, Booleans, and null.\nThe optional reviver parameter is a function that takes two parameters, key and value. It can filter and transform the results. It is called with each of the key/value\n pairs produced by the parse, and its return value is used instead of \nthe original value. If it returns what it received, the structure is not\n modified. If it returns undefined then the property is deleted from the result.\n1. Let jsonString be ?\u00a0ToString(text).2. Parse StringToCodePoints(jsonString) as a JSON text as specified in ECMA-404. Throw a SyntaxError exception if it is not a valid JSON text as defined in that specification.3. Let scriptString be the string-concatenation of \"(\", jsonString, and \");\".4. Let script be ParseText(StringToCodePoints(scriptString), Script).5. NOTE: The early error rules defined in 13.2.5.1 have special handling for the above invocation of ParseText.6. Assert: script is a Parse Node.7. Let completion be the result of evaluating script.8. NOTE: The PropertyDefinitionEvaluation semantics defined in 13.2.5.5 have special handling for the above evaluation.9. Let unfiltered be completion.[[Value]].10. Assert: unfiltered is either a String, Number, Boolean, Null, or an Object that is defined by either an ArrayLiteral or an ObjectLiteral.11. If IsCallable(reviver) is true, thena. Let root be OrdinaryObjectCreate(%Object.prototype%).b. Let rootName be the empty String.c. Perform !\u00a0CreateDataPropertyOrThrow(root, rootName, unfiltered).d. Return ?\u00a0InternalizeJSONProperty(root, rootName, reviver).12. Else,a. Return unfiltered.\nThe \"length\" property of the parse function is 2\ud835\udd3d.\nNote\nValid JSON text is a subset of the ECMAScript PrimaryExpression syntax. Step 2 verifies that jsonString conforms to that subset, and step 10 asserts that that parsing and evaluation returns a value of an appropriate type.\nHowever, because 13.2.5.5 behaves differently during JSON.parse, the same source text can produce different results when evaluated as a PrimaryExpression rather than as JSON. Furthermore, the Early Error for duplicate \"__proto__\" properties in object literals, which likewise does not apply during JSON.parse, means that not all texts accepted by JSON.parse are valid as a PrimaryExpression, despite matching the grammar.\n\n\n25.5.1.1 InternalizeJSONProperty ( holder, name, reviver )\nThe abstract operation InternalizeJSONProperty takes arguments holder (an Object), name (a String), and reviver (a function object) and returns either a normal completion containing an ECMAScript language value or an abrupt completion.\nNote 1\nThis algorithm intentionally does not throw an exception if either [[Delete]] or CreateDataProperty return false.\n\nIt performs the following steps when called:\n1. Let val be ?\u00a0Get(holder, name).2. If Type(val) is Object, thena. Let isArray be ?\u00a0IsArray(val).b. If isArray is true, theni. Let I be 0.ii. Let len be ?\u00a0LengthOfArrayLike(val).iii. Repeat, while I < len,1. Let prop be !\u00a0ToString(\ud835\udd3d(I)).2. Let newElement be ?\u00a0InternalizeJSONProperty(val, prop, reviver).3. If newElement is undefined, thena. Perform ?\u00a0val.[[Delete]](prop).4. Else,a. Perform ?\u00a0CreateDataProperty(val, prop, newElement).5. Set I to I + 1.c. Else,i. Let keys be ?\u00a0EnumerableOwnPropertyNames(val, key).ii. For each String P of keys, do1. Let newElement be ?\u00a0InternalizeJSONProperty(val, P, reviver).2. If newElement is undefined, thena. Perform ?\u00a0val.[[Delete]](P).3. Else,a. Perform ?\u00a0CreateDataProperty(val, P, newElement).3. Return ?\u00a0Call(reviver, holder, \u00ab name, val \u00bb).\nIt is not permitted for a conforming implementation of JSON.parse\n to extend the JSON grammars. If an implementation wishes to support a \nmodified or extended JSON interchange format it must do so by defining a\n different parse function.\nNote 2\nIn the case where there are duplicate name Strings within \nan object, lexically preceding values for the same key shall be \noverwritten.\n\n\n\n\n25.5.2 JSON.stringify ( value [ , replacer [ , space ] ] )\nThe stringify function returns a String in UTF-16 encoded JSON format representing an ECMAScript language value, or undefined. It can take three parameters. The value parameter is an ECMAScript language value, which is usually an object or array, although it can also be a String, Boolean, Number or null. The optional replacer\n parameter is either a function that alters the way objects and arrays \nare stringified, or an array of Strings and Numbers that acts as an \ninclusion list for selecting the object properties that will be \nstringified. The optional space parameter is a String or Number that allows the result to have white space injected into it to improve human readability.\nThese are the steps in stringifying an object:\n1. Let stack be a new empty List.2. Let indent be the empty String.3. Let PropertyList and ReplacerFunction be undefined.4. If Type(replacer) is Object, thena. If IsCallable(replacer) is true, theni. Set ReplacerFunction to replacer.b. Else,i. Let isArray be ?\u00a0IsArray(replacer).ii. If isArray is true, then1. Set PropertyList to a new empty List.2. Let len be ?\u00a0LengthOfArrayLike(replacer).3. Let k be 0.4. Repeat, while k < len,a. Let prop be !\u00a0ToString(\ud835\udd3d(k)).b. Let v be ?\u00a0Get(replacer, prop).c. Let item be undefined.d. If Type(v) is String, set item to v.e. Else if Type(v) is Number, set item to !\u00a0ToString(v).f. Else if Type(v) is Object, theni. If v has a [[StringData]] or [[NumberData]] internal slot, set item to ?\u00a0ToString(v).g. If item is not undefined and item is not currently an element of PropertyList, theni. Append item to the end of PropertyList.h. Set k to k + 1.5. If Type(space) is Object, thena. If space has a [[NumberData]] internal slot, theni. Set space to ?\u00a0ToNumber(space).b. Else if space has a [[StringData]] internal slot, theni. Set space to ?\u00a0ToString(space).6. If Type(space) is Number, thena. Let spaceMV be !\u00a0ToIntegerOrInfinity(space).b. Set spaceMV to min(10, spaceMV).c. If spaceMV < 1, let gap be the empty String; otherwise let gap be the String value containing spaceMV occurrences of the code unit 0x0020 (SPACE).7. Else if Type(space) is String, thena. If the length of space is 10 or less, let gap be space; otherwise let gap be the substring of space from 0 to 10.8. Else,a. Let gap be the empty String.9. Let wrapper be OrdinaryObjectCreate(%Object.prototype%).10. Perform !\u00a0CreateDataPropertyOrThrow(wrapper, the empty String, value).11. Let state be the Record { [[ReplacerFunction]]: ReplacerFunction, [[Stack]]: stack, [[Indent]]: indent, [[Gap]]: gap, [[PropertyList]]: PropertyList }.12. Return ?\u00a0SerializeJSONProperty(state, the empty String, wrapper).\nThe \"length\" property of the stringify function is 3\ud835\udd3d.\nNote 1\nJSON structures are allowed to be nested to any depth, but they must be acyclic. If value is or contains a cyclic structure, then the stringify function must throw a TypeError exception. This is an example of a value that cannot be stringified:\na = [];\na[0] = a;\nmy_text = JSON.stringify(a); // This must throw a TypeError.\n\nNote 2\nSymbolic primitive values are rendered as follows:\n\n\n            The null value is rendered in JSON text as the String \"null\".\n          \n\n            The undefined value is not rendered.\n          \n\n            The true value is rendered in JSON text as the String \"true\".\n          \n\n            The false value is rendered in JSON text as the String \"false\".\n          \n\n\nNote 3\nString values are wrapped in QUOTATION MARK (\") code units. The code units \" and \\ are escaped with \\ prefixes. Control characters code units are replaced with escape sequences \\uHHHH, or with the shorter forms, \\b (BACKSPACE), \\f (FORM FEED), \\n (LINE FEED), \\r (CARRIAGE RETURN), \\t (CHARACTER TABULATION).\n\nNote 4\nFinite numbers are stringified as if by calling ToString(number). NaN and Infinity regardless of sign are represented as the String \"null\".\n\nNote 5\nValues that do not have a JSON representation (such as undefined and functions) do not produce a String. Instead they produce the undefined value. In arrays these values are represented as the String \"null\". In objects an unrepresentable value causes the property to be excluded from stringification.\n\nNote 6\nAn object is rendered as U+007B (LEFT CURLY BRACKET) followed\n by zero or more properties, separated with a U+002C (COMMA), closed \nwith a U+007D (RIGHT CURLY BRACKET). A property is a quoted String \nrepresenting the key or property name,\n a U+003A (COLON), and then the stringified property value. An array is \nrendered as an opening U+005B (LEFT SQUARE BRACKET followed by zero or \nmore values, separated with a U+002C (COMMA), closed with a U+005D \n(RIGHT SQUARE BRACKET).\n\n\n25.5.2.1 SerializeJSONProperty ( state, key, holder )\nThe abstract operation SerializeJSONProperty takes arguments state, key, and holder and returns either a normal completion containing either undefined or a String, or an abrupt completion. It performs the following steps when called:\n1. Let value be ?\u00a0Get(holder, key).2. If Type(value) is Object or BigInt, thena. Let toJSON be ?\u00a0GetV(value, \"toJSON\").b. If IsCallable(toJSON) is true, theni. Set value to ?\u00a0Call(toJSON, value, \u00ab key \u00bb).3. If state.[[ReplacerFunction]] is not undefined, thena. Set value to ?\u00a0Call(state.[[ReplacerFunction]], holder, \u00ab key, value \u00bb).4. If Type(value) is Object, thena. If value has a [[NumberData]] internal slot, theni. Set value to ?\u00a0ToNumber(value).b. Else if value has a [[StringData]] internal slot, theni. Set value to ?\u00a0ToString(value).c. Else if value has a [[BooleanData]] internal slot, theni. Set value to value.[[BooleanData]].d. Else if value has a [[BigIntData]] internal slot, theni. Set value to value.[[BigIntData]].5. If value is null, return \"null\".6. If value is true, return \"true\".7. If value is false, return \"false\".8. If Type(value) is String, return QuoteJSONString(value).9. If Type(value) is Number, thena. If value is finite, return !\u00a0ToString(value).b. Return \"null\".10. If Type(value) is BigInt, throw a TypeError exception.11. If Type(value) is Object and IsCallable(value) is false, thena. Let isArray be ?\u00a0IsArray(value).b. If isArray is true, return ?\u00a0SerializeJSONArray(state, value).c. Return ?\u00a0SerializeJSONObject(state, value).12. Return undefined.\n\n\n25.5.2.2 QuoteJSONString ( value )\nThe abstract operation QuoteJSONString takes argument value (a String) and returns a String. It wraps value in 0x0022 (QUOTATION MARK) code units and escapes certain other code units within it. This operation interprets value as a sequence of UTF-16 encoded code points, as described in 6.1.4. It performs the following steps when called:\n1. Let product be the String value consisting solely of the code unit 0x0022 (QUOTATION MARK).2. For each code point C of StringToCodePoints(value), doa. If C is listed in the \u201cCode Point\u201d column of Table 72, theni. Set product to the string-concatenation of product and the escape sequence for C as specified in the \u201cEscape Sequence\u201d column of the corresponding row.b. Else if C has a numeric value less than 0x0020 (SPACE), or if C has the same numeric value as a leading surrogate or trailing surrogate, theni. Let unit be the code unit whose numeric value is that of C.ii. Set product to the string-concatenation of product and UnicodeEscape(unit).c. Else,i. Set product to the string-concatenation of product and UTF16EncodeCodePoint(C).3. Set product to the string-concatenation of product and the code unit 0x0022 (QUOTATION MARK).4. Return product.\nTable 72: JSON Single Character Escape Sequences\n\n\n\n                Code Point\n              \n\n                Unicode Character Name\n              \n\n                Escape Sequence\n              \n\n\n\n                U+0008\n              \n\n                BACKSPACE\n              \n\n\\b\n\n\n\n\n                U+0009\n              \n\n                CHARACTER TABULATION\n              \n\n\\t\n\n\n\n\n                U+000A\n              \n\n                LINE FEED (LF)\n              \n\n\\n\n\n\n\n\n                U+000C\n              \n\n                FORM FEED (FF)\n              \n\n\\f\n\n\n\n\n                U+000D\n              \n\n                CARRIAGE RETURN (CR)\n              \n\n\\r\n\n\n\n\n                U+0022\n              \n\n                QUOTATION MARK\n              \n\n\\\"\n\n\n\n\n                U+005C\n              \n\n                REVERSE SOLIDUS\n              \n\n\\\\\n\n\n\n\n\n\n25.5.2.3 UnicodeEscape ( C )\nThe abstract operation UnicodeEscape takes argument C (a code unit) and returns a String. It represents C as a Unicode escape sequence. It performs the following steps when called:\n1. Let n be the numeric value of C.2. Assert: n \u2264 0xFFFF.3. Return the string-concatenation of:the code unit 0x005C (REVERSE SOLIDUS)\"u\"the String representation of n, formatted as a four-digit lowercase hexadecimal number, padded to the left with zeroes if necessary\n\n\n25.5.2.4 SerializeJSONObject ( state, value )\nThe abstract operation SerializeJSONObject takes arguments state and value (an Object) and returns either a normal completion containing a String or an abrupt completion. It serializes an object. It performs the following steps when called:\n1. If state.[[Stack]] contains value, throw a TypeError exception because the structure is cyclical.2. Append value to state.[[Stack]].3. Let stepback be state.[[Indent]].4. Set state.[[Indent]] to the string-concatenation of state.[[Indent]] and state.[[Gap]].5. If state.[[PropertyList]] is not undefined, thena. Let K be state.[[PropertyList]].6. Else,a. Let K be ?\u00a0EnumerableOwnPropertyNames(value, key).7. Let partial be a new empty List.8. For each element P of K, doa. Let strP be ?\u00a0SerializeJSONProperty(state, P, value).b. If strP is not undefined, theni. Let member be QuoteJSONString(P).ii. Set member to the string-concatenation of member and \":\".iii. If state.[[Gap]] is not the empty String, then1. Set member to the string-concatenation of member and the code unit 0x0020 (SPACE).iv. Set member to the string-concatenation of member and strP.v. Append member to partial.9. If partial is empty, thena. Let final be \"{}\".10. Else,a. If state.[[Gap]] is the empty String, theni. Let properties be the String value formed by concatenating all the element Strings of partial\n with each adjacent pair of Strings separated with the code unit 0x002C \n(COMMA). A comma is not inserted either before the first String or after\n the last String.ii. Let final be the string-concatenation of \"{\", properties, and \"}\".b. Else,i. Let separator be the string-concatenation of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and state.[[Indent]].ii. Let properties be the String value formed by concatenating all the element Strings of partial with each adjacent pair of Strings separated with separator. The separator String is not inserted either before the first String or after the last String.iii. Let final be the string-concatenation of \"{\", the code unit 0x000A (LINE FEED), state.[[Indent]], properties, the code unit 0x000A (LINE FEED), stepback, and \"}\".11. Remove the last element of state.[[Stack]].12. Set state.[[Indent]] to stepback.13. Return final.\n\n\n25.5.2.5 SerializeJSONArray ( state, value )\nThe abstract operation SerializeJSONArray takes arguments state and value (an ECMAScript language value) and returns either a normal completion containing a String or an abrupt completion. It serializes an array. It performs the following steps when called:\n1. If state.[[Stack]] contains value, throw a TypeError exception because the structure is cyclical.2. Append value to state.[[Stack]].3. Let stepback be state.[[Indent]].4. Set state.[[Indent]] to the string-concatenation of state.[[Indent]] and state.[[Gap]].5. Let partial be a new empty List.6. Let len be ?\u00a0LengthOfArrayLike(value).7. Let index be 0.8. Repeat, while index < len,a. Let strP be ?\u00a0SerializeJSONProperty(state, !\u00a0ToString(\ud835\udd3d(index)), value).b. If strP is undefined, theni. Append \"null\" to partial.c. Else,i. Append strP to partial.d. Set index to index + 1.9. If partial is empty, thena. Let final be \"[]\".10. Else,a. If state.[[Gap]] is the empty String, theni. Let properties be the String value formed by concatenating all the element Strings of partial\n with each adjacent pair of Strings separated with the code unit 0x002C \n(COMMA). A comma is not inserted either before the first String or after\n the last String.ii. Let final be the string-concatenation of \"[\", properties, and \"]\".b. Else,i. Let separator be the string-concatenation of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and state.[[Indent]].ii. Let properties be the String value formed by concatenating all the element Strings of partial with each adjacent pair of Strings separated with separator. The separator String is not inserted either before the first String or after the last String.iii. Let final be the string-concatenation of \"[\", the code unit 0x000A (LINE FEED), state.[[Indent]], properties, the code unit 0x000A (LINE FEED), stepback, and \"]\".11. Remove the last element of state.[[Stack]].12. Set state.[[Indent]] to stepback.13. Return final.\nNote\nThe representation of arrays includes only the elements between zero and array.length - 1 inclusive. Properties whose keys are not array indices\n are excluded from the stringification. An array is stringified as an \nopening LEFT SQUARE BRACKET, elements separated by COMMA, and a closing \nRIGHT SQUARE BRACKET.\n\n\n\n\n25.5.3 JSON [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"JSON\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n\n26 Managing Memory\n\n26.1 WeakRef Objects\nA WeakRef is an object that is used to refer to a target object without preserving it from garbage collection. WeakRefs can be dereferenced to allow access to the target object, if the target object hasn't been reclaimed by garbage collection.\n\n26.1.1 The WeakRef Constructor\nThe WeakRef constructor:\n\nis %WeakRef%.\n\n          is the initial value of the \"WeakRef\" property of the global object.\n        \n\n          creates and initializes a new WeakRef when called as a constructor.\n        \n\n          is not intended to be called as a function and will throw an exception when called in that manner.\n        \n\n          may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified WeakRef behaviour must include a super call to the WeakRef constructor to create and initialize the subclass instance with the internal state necessary to support the WeakRef.prototype built-in methods.\n        \n\n\n26.1.1.1 WeakRef ( target )\nWhen the WeakRef function is called with argument target, the following steps are taken:\n1. If NewTarget is undefined, throw a TypeError exception.2. If Type(target) is not Object, throw a TypeError exception.3. Let weakRef be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%WeakRef.prototype%\", \u00ab [[WeakRefTarget]] \u00bb).4. Perform AddToKeptObjects(target).5. Set weakRef.[[WeakRefTarget]] to target.6. Return weakRef.\n\n\n\n26.1.2 Properties of the WeakRef Constructor\nThe WeakRef constructor:\n\n\n          has a [[Prototype]] internal slot whose value is %Function.prototype%.\n        \nhas the following properties:\n\n\n26.1.2.1 WeakRef.prototype\nThe initial value of WeakRef.prototype is the WeakRef prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n26.1.3 Properties of the WeakRef Prototype Object\nThe WeakRef prototype object:\n\nis %WeakRef.prototype%.\n\n          has a [[Prototype]] internal slot whose value is %Object.prototype%.\n        \nis an ordinary object.\ndoes not have a [[WeakRefTarget]] internal slot.\n\nNormative Optional\n26.1.3.1 WeakRef.prototype.constructor\nThe initial value of WeakRef.prototype.constructor is %WeakRef%.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n26.1.3.2 WeakRef.prototype.deref ( )\nThe following steps are taken:\n1. Let weakRef be the this value.2. Perform ?\u00a0RequireInternalSlot(weakRef, [[WeakRefTarget]]).3. Return WeakRefDeref(weakRef).\nNote\nIf the WeakRef returns a target Object that is not undefined, then this target object should not be garbage collected until the current execution of ECMAScript code has completed. The AddToKeptObjects operation makes sure read consistency is maintained.\ntarget = { foo: function() {} };\nlet weakRef = new WeakRef(target);\n\n... later ...\n\nif (weakRef.deref()) {\n  weakRef.deref().foo();\n}\nIn the above example, if the first deref does not evaluate to undefined then the second deref cannot either.\n\n\n\n26.1.3.3 WeakRef.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"WeakRef\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n26.1.4 WeakRef Abstract Operations\n\n26.1.4.1 WeakRefDeref ( weakRef )\nThe abstract operation WeakRefDeref takes argument weakRef (a WeakRef) and returns an ECMAScript language value. It performs the following steps when called:\n1. Let target be weakRef.[[WeakRefTarget]].2. If target is not empty, thena. Perform AddToKeptObjects(target).b. Return target.3. Return undefined.\nNote\nThis abstract operation is defined separately from \nWeakRef.prototype.deref strictly to make it possible to succinctly \ndefine liveness.\n\n\n\n\n26.1.5 Properties of WeakRef Instances\nWeakRef instances are ordinary objects that inherit properties from the WeakRef prototype. WeakRef instances also have a [[WeakRefTarget]] internal slot.\n\n\n\n26.2 FinalizationRegistry Objects\nA FinalizationRegistry\n is an object that manages registration and unregistration of cleanup \noperations that are performed when target objects are garbage collected.\n\n26.2.1 The FinalizationRegistry Constructor\nThe FinalizationRegistry constructor:\n\nis %FinalizationRegistry%.\n\n          is the initial value of the \"FinalizationRegistry\" property of the global object.\n        \n\n          creates and initializes a new FinalizationRegistry when called as a constructor.\n        \n\n          is not intended to be called as a function and will throw an exception when called in that manner.\n        \n\n          may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified FinalizationRegistry behaviour must include a super call to the FinalizationRegistry constructor to create and initialize the subclass instance with the internal state necessary to support the FinalizationRegistry.prototype built-in methods.\n        \n\n\n26.2.1.1 FinalizationRegistry ( cleanupCallback )\nWhen the FinalizationRegistry function is called with argument cleanupCallback, the following steps are taken:\n1. If NewTarget is undefined, throw a TypeError exception.2. If IsCallable(cleanupCallback) is false, throw a TypeError exception.3. Let finalizationRegistry be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%FinalizationRegistry.prototype%\", \u00ab [[Realm]], [[CleanupCallback]], [[Cells]] \u00bb).4. Let fn be the active function object.5. Set finalizationRegistry.[[Realm]] to fn.[[Realm]].6. Set finalizationRegistry.[[CleanupCallback]] to HostMakeJobCallback(cleanupCallback).7. Set finalizationRegistry.[[Cells]] to a new empty List.8. Return finalizationRegistry.\n\n\n\n26.2.2 Properties of the FinalizationRegistry Constructor\nThe FinalizationRegistry constructor:\n\n\n          has a [[Prototype]] internal slot whose value is %Function.prototype%.\n        \nhas the following properties:\n\n\n26.2.2.1 FinalizationRegistry.prototype\nThe initial value of FinalizationRegistry.prototype is the FinalizationRegistry prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n26.2.3 Properties of the FinalizationRegistry Prototype Object\nThe FinalizationRegistry prototype object:\n\nis %FinalizationRegistry.prototype%.\n\n          has a [[Prototype]] internal slot whose value is %Object.prototype%.\n        \nis an ordinary object.\n\n          does not have [[Cells]] and [[CleanupCallback]] internal slots.\n        \n\n\n26.2.3.1 FinalizationRegistry.prototype.constructor\nThe initial value of FinalizationRegistry.prototype.constructor is %FinalizationRegistry%.\n\n\n26.2.3.2 FinalizationRegistry.prototype.register ( target, heldValue [ , unregisterToken ] )\nThe following steps are taken:\n1. Let finalizationRegistry be the this value.2. Perform ?\u00a0RequireInternalSlot(finalizationRegistry, [[Cells]]).3. If Type(target) is not Object, throw a TypeError exception.4. If SameValue(target, heldValue) is true, throw a TypeError exception.5. If Type(unregisterToken) is not Object, thena. If unregisterToken is not undefined, throw a TypeError exception.b. Set unregisterToken to empty.6. Let cell be the Record { [[WeakRefTarget]]: target, [[HeldValue]]: heldValue, [[UnregisterToken]]: unregisterToken }.7. Append cell to finalizationRegistry.[[Cells]].8. Return undefined.\nNote\nBased on the algorithms and definitions in this specification, cell.[[HeldValue]] is live when cell is in finalizationRegistry.[[Cells]]; however, this does not necessarily mean that cell.[[UnregisterToken]] or cell.[[Target]] are live. For example, registering an object with itself as its unregister token would not keep the object alive forever.\n\n\n\n26.2.3.3 FinalizationRegistry.prototype.unregister ( unregisterToken )\nThe following steps are taken:\n1. Let finalizationRegistry be the this value.2. Perform ?\u00a0RequireInternalSlot(finalizationRegistry, [[Cells]]).3. If Type(unregisterToken) is not Object, throw a TypeError exception.4. Let removed be false.5. For each Record { [[WeakRefTarget]], [[HeldValue]], [[UnregisterToken]] } cell of finalizationRegistry.[[Cells]], doa. If cell.[[UnregisterToken]] is not empty and SameValue(cell.[[UnregisterToken]], unregisterToken) is true, theni. Remove cell from finalizationRegistry.[[Cells]].ii. Set removed to true.6. Return removed.\n\n\n26.2.3.4 FinalizationRegistry.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"FinalizationRegistry\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n26.2.4 Properties of FinalizationRegistry Instances\nFinalizationRegistry instances are ordinary objects that inherit properties from the FinalizationRegistry prototype. FinalizationRegistry instances also have [[Cells]] and [[CleanupCallback]] internal slots.\n\n\n\n\n27 Control Abstraction Objects\n\n27.1 Iteration\n\n27.1.1 Common Iteration Interfaces\nAn interface is a set of property keys\n whose associated values match a specific specification. Any object that\n provides all the properties as described by an interface's \nspecification conforms to that interface. An interface is not \nrepresented by a distinct object. There may be many separately \nimplemented objects that conform to any interface. An individual object \nmay conform to multiple interfaces.\n\n27.1.1.1 The Iterable Interface\nThe Iterable interface includes the property described in Table 73:\nTable 73: Iterable Interface Required Properties\n\n\n\n                Property\n              \n\n                Value\n              \n\n                Requirements\n              \n\n\n\n@@iterator\n\n\n                a function that returns an Iterator object\n              \n\n                The returned object must conform to the Iterator interface.\n              \n\n\n\n\n\n27.1.1.2 The Iterator Interface\nAn object that implements the Iterator interface must include the property in Table 74. Such objects may also implement the properties in Table 75.\nTable 74: Iterator Interface Required Properties\n\n\n\n                Property\n              \n\n                Value\n              \n\n                Requirements\n              \n\n\n\n\"next\"\n\n\n                a function that returns an IteratorResult object\n              \n\n                The returned object must conform to the IteratorResult interface. If a previous call to the next method of an Iterator has returned an IteratorResult object whose \"done\" property is true, then all subsequent calls to the next method of that object should also return an IteratorResult object whose \"done\" property is true. However, this requirement is not enforced.\n              \n\n\n\nNote 1\nArguments may be passed to the next function but their interpretation and validity is dependent upon the target Iterator. The for-of statement and other common users of Iterators do not pass any arguments, so Iterator objects that expect to be used in such a manner must be prepared to deal with being called with no arguments.\n\nTable 75: Iterator Interface Optional Properties\n\n\n\n                Property\n              \n\n                Value\n              \n\n                Requirements\n              \n\n\n\n\"return\"\n\n\n                a function that returns an IteratorResult object\n              \n\n                The returned object must conform to the IteratorResult interface. Invoking this method notifies the Iterator object that the caller does not intend to make any more next method calls to the Iterator. The returned IteratorResult object will typically have a \"done\" property whose value is true, and a \"value\" property with the value passed as the argument of the return method. However, this requirement is not enforced.\n              \n\n\n\n\"throw\"\n\n\n                a function that returns an IteratorResult object\n              \n\n                The returned object must conform to the IteratorResult interface. Invoking this method notifies the Iterator\n object that the caller has detected an error condition. The argument \nmay be used to identify the error condition and typically will be an \nexception object. A typical response is to throw the value passed as the argument. If the method does not throw, the returned IteratorResult object will typically have a \"done\" property whose value is true.\n              \n\n\n\nNote 2\nTypically callers of these methods should check for their \nexistence before invoking them. Certain ECMAScript language features \nincluding for-of, yield*, and array destructuring call these methods after performing an existence check. Most ECMAScript library functions that accept Iterable objects as arguments also conditionally call them.\n\n\n\n27.1.1.3 The AsyncIterable Interface\nThe AsyncIterable interface includes the properties described in Table 76:\nTable 76: AsyncIterable Interface Required Properties\n\n\nProperty\nValue\nRequirements\n\n\n@@asyncIterator\na function that returns an AsyncIterator object\nThe returned object must conform to the AsyncIterator interface.\n\n\n\n\n\n27.1.1.4 The AsyncIterator Interface\nAn object that implements the AsyncIterator interface must include the properties in Table 77. Such objects may also implement the properties in Table 78.\nTable 77: AsyncIterator Interface Required Properties\n\n\nProperty\nValue\nRequirements\n\n\n\"next\"\na function that returns a promise for an IteratorResult object\n\nThe returned promise, when fulfilled, must fulfill with an object that conforms to the IteratorResult interface. If a previous call to the next method of an AsyncIterator has returned a promise for an IteratorResult object whose \"done\" property is true, then all subsequent calls to the next method of that object should also return a promise for an IteratorResult object whose \"done\" property is true. However, this requirement is not enforced.\nAdditionally, the IteratorResult object that serves as a fulfillment value should have a \"value\" property whose value is not a promise (or \"thenable\"). However, this requirement is also not enforced.\n\n\n\n\nNote 1\nArguments may be passed to the next function but their interpretation and validity is dependent upon the target AsyncIterator. The for-await-of statement and other common users of AsyncIterators do not pass any arguments, so AsyncIterator objects that expect to be used in such a manner must be prepared to deal with being called with no arguments.\n\nTable 78: AsyncIterator Interface Optional Properties\n\n\nProperty\nValue\nRequirements\n\n\n\"return\"\na function that returns a promise for an IteratorResult object\n\nThe returned promise, when fulfilled, must fulfill with an object that conforms to the IteratorResult interface. Invoking this method notifies the AsyncIterator object that the caller does not intend to make any more next method calls to the AsyncIterator. The returned promise will fulfill with an IteratorResult object which will typically have a \"done\" property whose value is true, and a \"value\" property with the value passed as the argument of the return method. However, this requirement is not enforced.\nAdditionally, the IteratorResult object that serves as a fulfillment value should have a \"value\"\n property whose value is not a promise (or \"thenable\"). If the argument \nvalue is used in the typical manner, then if it is a rejected promise, a\n promise rejected with the same reason should be returned; if it is a \nfulfilled promise, then its fulfillment value should be used as the \"value\" property of the returned promise's IteratorResult object fulfillment value. However, these requirements are also not enforced.\n\n\n\n\"throw\"\na function that returns a promise for an IteratorResult object\n\nThe returned promise, when fulfilled, must fulfill with an object that conforms to the IteratorResult interface. Invoking this method notifies the AsyncIterator\n object that the caller has detected an error condition. The argument \nmay be used to identify the error condition and typically will be an \nexception object. A typical response is to return a rejected promise \nwhich rejects with the value passed as the argument.\nIf the returned promise is fulfilled, the IteratorResult fulfillment value will typically have a \"done\" property whose value is true. Additionally, it should have a \"value\" property whose value is not a promise (or \"thenable\"), but this requirement is not enforced.\n\n\n\n\nNote 2\nTypically callers of these methods should check for their \nexistence before invoking them. Certain ECMAScript language features \nincluding for-await-of and yield* call these methods after performing an existence check.\n\n\n\n27.1.1.5 The IteratorResult Interface\nThe IteratorResult interface includes the properties listed in Table 79:\nTable 79: IteratorResult Interface Properties\n\n\n\n                Property\n              \n\n                Value\n              \n\n                Requirements\n              \n\n\n\n\"done\"\n\n\n                a Boolean\n              \n\n                This is the result status of an iterator next method call. If the end of the iterator was reached \"done\" is true. If the end was not reached \"done\" is false and a value is available. If a \"done\" property (either own or inherited) does not exist, it is considered to have the value false.\n              \n\n\n\n\"value\"\n\n\n                an ECMAScript language value\n\n\n                If done is false, this is the current iteration element value. If done is true, this is the return value of the iterator, if it supplied one. If the iterator does not have a return value, \"value\" is undefined. In that case, the \"value\" property may be absent from the conforming object if it does not inherit an explicit \"value\" property.\n              \n\n\n\n\n\n\n27.1.2 The %IteratorPrototype% Object\nThe %IteratorPrototype% object:\n\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis an ordinary object.\n\nNote\nAll objects defined in this specification that implement the \nIterator interface also inherit from %IteratorPrototype%. ECMAScript \ncode may also define objects that inherit from %IteratorPrototype%. The \n%IteratorPrototype% object provides a place where additional methods \nthat are applicable to all iterator objects may be added.\nThe following expression is one way that ECMAScript code can access the %IteratorPrototype% object:\nObject.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))\n\n\n27.1.2.1 %IteratorPrototype% [ @@iterator ] ( )\nThe following steps are taken:\n1. Return the this value.\nThe value of the \"name\" property of this function is \"[Symbol.iterator]\".\n\n\n\n27.1.3 The %AsyncIteratorPrototype% Object\nThe %AsyncIteratorPrototype% object:\n\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis an ordinary object.\n\nNote\nAll objects defined in this specification that implement the \nAsyncIterator interface also inherit from %AsyncIteratorPrototype%. \nECMAScript code may also define objects that inherit from \n%AsyncIteratorPrototype%. The %AsyncIteratorPrototype% object provides a\n place where additional methods that are applicable to all async \niterator objects may be added.\n\n\n27.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\nThe following steps are taken:\n1. Return the this value.\nThe value of the \"name\" property of this function is \"[Symbol.asyncIterator]\".\n\n\n\n27.1.4 Async-from-Sync Iterator Objects\nAn Async-from-Sync Iterator object is an async iterator that adapts a specific synchronous iterator. There is not a named constructor for Async-from-Sync Iterator objects. Instead, Async-from-Sync iterator objects are created by the CreateAsyncFromSyncIterator abstract operation as needed.\n\n27.1.4.1 CreateAsyncFromSyncIterator ( syncIteratorRecord )\nThe abstract operation CreateAsyncFromSyncIterator takes argument syncIteratorRecord and returns an Iterator Record. It is used to create an async Iterator Record from a synchronous Iterator Record. It performs the following steps when called:\n1. Let asyncIterator be OrdinaryObjectCreate(%AsyncFromSyncIteratorPrototype%, \u00ab [[SyncIteratorRecord]] \u00bb).2. Set asyncIterator.[[SyncIteratorRecord]] to syncIteratorRecord.3. Let nextMethod be !\u00a0Get(asyncIterator, \"next\").4. Let iteratorRecord be the Iterator Record { [[Iterator]]: asyncIterator, [[NextMethod]]: nextMethod, [[Done]]: false }.5. Return iteratorRecord.\n\n\n27.1.4.2 The %AsyncFromSyncIteratorPrototype% Object\nThe %AsyncFromSyncIteratorPrototype% object:\n\nhas properties that are inherited by all Async-from-Sync Iterator Objects.\nis an ordinary object.\nhas a [[Prototype]] internal slot whose value is %AsyncIteratorPrototype%.\nhas the following properties:\n\n\n27.1.4.2.1 %AsyncFromSyncIteratorPrototype%.next ( [ value ] )\n1. Let O be the this value.2. Assert: O is an Object that has a [[SyncIteratorRecord]] internal slot.3. Let promiseCapability be !\u00a0NewPromiseCapability(%Promise%).4. Let syncIteratorRecord be O.[[SyncIteratorRecord]].5. If value is present, thena. Let result be Completion(IteratorNext(syncIteratorRecord, value)).6. Else,a. Let result be Completion(IteratorNext(syncIteratorRecord)).7. IfAbruptRejectPromise(result, promiseCapability).8. Return AsyncFromSyncIteratorContinuation(result, promiseCapability).\n\n\n27.1.4.2.2 %AsyncFromSyncIteratorPrototype%.return ( [ value ] )\n1. Let O be the this value.2. Assert: O is an Object that has a [[SyncIteratorRecord]] internal slot.3. Let promiseCapability be !\u00a0NewPromiseCapability(%Promise%).4. Let syncIterator be O.[[SyncIteratorRecord]].[[Iterator]].5. Let return be Completion(GetMethod(syncIterator, \"return\")).6. IfAbruptRejectPromise(return, promiseCapability).7. If return is undefined, thena. Let iterResult be CreateIterResultObject(value, true).b. Perform !\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab iterResult \u00bb).c. Return promiseCapability.[[Promise]].8. If value is present, thena. Let result be Completion(Call(return, syncIterator, \u00ab value \u00bb)).9. Else,a. Let result be Completion(Call(return, syncIterator)).10. IfAbruptRejectPromise(result, promiseCapability).11. If Type(result) is not Object, thena. Perform !\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab a newly created TypeError object \u00bb).b. Return promiseCapability.[[Promise]].12. Return AsyncFromSyncIteratorContinuation(result, promiseCapability).\n\n\n27.1.4.2.3 %AsyncFromSyncIteratorPrototype%.throw ( [ value ] )\nNoteIn this specification, value is always provided, but is left optional for consistency with %AsyncFromSyncIteratorPrototype%.return ( [ value ] ).\n1. Let O be the this value.2. Assert: O is an Object that has a [[SyncIteratorRecord]] internal slot.3. Let promiseCapability be !\u00a0NewPromiseCapability(%Promise%).4. Let syncIterator be O.[[SyncIteratorRecord]].[[Iterator]].5. Let throw be Completion(GetMethod(syncIterator, \"throw\")).6. IfAbruptRejectPromise(throw, promiseCapability).7. If throw is undefined, thena. Perform !\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab value \u00bb).b. Return promiseCapability.[[Promise]].8. If value is present, thena. Let result be Completion(Call(throw, syncIterator, \u00ab value \u00bb)).9. Else,a. Let result be Completion(Call(throw, syncIterator)).10. IfAbruptRejectPromise(result, promiseCapability).11. If Type(result) is not Object, thena. Perform !\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab a newly created TypeError object \u00bb).b. Return promiseCapability.[[Promise]].12. Return AsyncFromSyncIteratorContinuation(result, promiseCapability).\n\n\n\n27.1.4.3 Properties of Async-from-Sync Iterator Instances\nAsync-from-Sync Iterator instances are ordinary objects that inherit properties from the %AsyncFromSyncIteratorPrototype% intrinsic object. Async-from-Sync Iterator instances are initially created with the internal slots listed in Table 80. Async-from-Sync Iterator instances are not directly observable from ECMAScript code.\nTable 80: Internal Slots of Async-from-Sync Iterator Instances\n\n\n\n\n                  Internal Slot\n                \n\n                  Type\n                \n\n                  Description\n                \n\n\n\n\n                [[SyncIteratorRecord]]\n              \n\n                an Iterator Record\n\n\n                Represents the original synchronous iterator which is being adapted.\n              \n\n\n\n\n\n27.1.4.4 AsyncFromSyncIteratorContinuation ( result, promiseCapability )\nThe abstract operation AsyncFromSyncIteratorContinuation takes arguments result and promiseCapability (a PromiseCapability Record for an intrinsic %Promise%) and returns a Promise. It performs the following steps when called:\n1. NOTE: Because promiseCapability is derived from the intrinsic %Promise%, the calls to promiseCapability.[[Reject]] entailed by the use IfAbruptRejectPromise below are guaranteed not to throw.2. Let done be Completion(IteratorComplete(result)).3. IfAbruptRejectPromise(done, promiseCapability).4. Let value be Completion(IteratorValue(result)).5. IfAbruptRejectPromise(value, promiseCapability).6. Let valueWrapper be Completion(PromiseResolve(%Promise%, value)).7. IfAbruptRejectPromise(valueWrapper, promiseCapability).8. Let unwrap be a new Abstract Closure with parameters (value) that captures done and performs the following steps when called:a. Return CreateIterResultObject(value, done).9. Let onFulfilled be CreateBuiltinFunction(unwrap, 1, \"\", \u00ab \u00bb).10. NOTE: onFulfilled is used when processing the \"value\"\n property of an IteratorResult object in order to wait for its value if \nit is a promise and re-package the result in a new \"unwrapped\" \nIteratorResult object.11. Perform PerformPromiseThen(valueWrapper, onFulfilled, undefined, promiseCapability).12. Return promiseCapability.[[Promise]].\n\n\n\n\n27.2 Promise Objects\nA Promise is an object that is used as a placeholder for the \neventual results of a deferred (and possibly asynchronous) computation.\nAny Promise is in one of three mutually exclusive states: fulfilled, rejected, and pending:\n\n\n        A promise p is fulfilled if p.then(f, r) will immediately enqueue a Job to call the function f.\n      \n\n        A promise p is rejected if p.then(f, r) will immediately enqueue a Job to call the function r.\n      \n\n        A promise is pending if it is neither fulfilled nor rejected.\n      \n\nA promise is said to be settled if it is not pending, i.e. if it is either fulfilled or rejected.\nA promise is resolved if it is settled or if it has been\n \u201clocked in\u201d to match the state of another promise. Attempting to \nresolve or reject a resolved promise has no effect. A promise is unresolved\n if it is not resolved. An unresolved promise is always in the pending \nstate. A resolved promise may be pending, fulfilled or rejected.\n\n27.2.1 Promise Abstract Operations\n\n27.2.1.1 PromiseCapability Records\nA PromiseCapability Record is a Record\n value used to encapsulate a Promise or promise-like object along with \nthe functions that are capable of resolving or rejecting that promise. \nPromiseCapability Records are produced by the NewPromiseCapability abstract operation.\nPromiseCapability Records have the fields listed in Table 81.\nTable 81: PromiseCapability Record Fields\n\n\n\n                Field Name\n              \n\n                Value\n              \n\n                Meaning\n              \n\n\n\n                [[Promise]]\n              \n\n                an Object\n              \n\n                An object that is usable as a promise.\n              \n\n\n\n                [[Resolve]]\n              \n\n                a function object\n\n\n                The function that is used to resolve the given promise.\n              \n\n\n\n                [[Reject]]\n              \n\n                a function object\n\n\n                The function that is used to reject the given promise.\n              \n\n\n\n\n27.2.1.1.1 IfAbruptRejectPromise ( value, capability )\nIfAbruptRejectPromise is a shorthand for a sequence of algorithm steps that use a PromiseCapability Record. An algorithm step of the form:\n1. IfAbruptRejectPromise(value, capability).\nmeans the same thing as:\n1. If value is an abrupt completion, thena. Perform ?\u00a0Call(capability.[[Reject]], undefined, \u00ab value.[[Value]] \u00bb).b. Return capability.[[Promise]].2. Else if value is a Completion Record, set value to value.[[Value]].\n\n\n\n27.2.1.2 PromiseReaction Records\nThe PromiseReaction is a Record\n value used to store information about how a promise should react when \nit becomes resolved or rejected with a given value. PromiseReaction \nrecords are created by the PerformPromiseThen abstract operation, and are used by the Abstract Closure returned by NewPromiseReactionJob.\nPromiseReaction records have the fields listed in Table 82.\nTable 82: PromiseReaction Record Fields\n\n\n\n                Field Name\n              \n\n                Value\n              \n\n                Meaning\n              \n\n\n\n                [[Capability]]\n              \n\n                a PromiseCapability Record or undefined\n\n\n                The capabilities of the promise for which this record provides a reaction handler.\n              \n\n\n\n                [[Type]]\n              \n\nFulfill or Reject\n\n\n                The [[Type]] is used when [[Handler]] is empty to allow for behaviour specific to the settlement type.\n              \n\n\n\n                [[Handler]]\n              \n\n                a JobCallback Record or empty\n\n\n                The function that should be applied to the incoming \nvalue, and whose return value will govern what happens to the derived \npromise. If [[Handler]] is empty, a function that depends on the value of [[Type]] will be used instead.\n              \n\n\n\n\n\n27.2.1.3 CreateResolvingFunctions ( promise )\nThe abstract operation CreateResolvingFunctions takes argument promise and returns a Record with fields [[Resolve]] (a function object) and [[Reject]] (a function object). It performs the following steps when called:\n1. Let alreadyResolved be the Record { [[Value]]: false }.2. Let stepsResolve be the algorithm steps defined in Promise Resolve Functions.3. Let lengthResolve be the number of non-optional parameters of the function definition in Promise Resolve Functions.4. Let resolve be CreateBuiltinFunction(stepsResolve, lengthResolve, \"\", \u00ab [[Promise]], [[AlreadyResolved]] \u00bb).5. Set resolve.[[Promise]] to promise.6. Set resolve.[[AlreadyResolved]] to alreadyResolved.7. Let stepsReject be the algorithm steps defined in Promise Reject Functions.8. Let lengthReject be the number of non-optional parameters of the function definition in Promise Reject Functions.9. Let reject be CreateBuiltinFunction(stepsReject, lengthReject, \"\", \u00ab [[Promise]], [[AlreadyResolved]] \u00bb).10. Set reject.[[Promise]] to promise.11. Set reject.[[AlreadyResolved]] to alreadyResolved.12. Return the Record { [[Resolve]]: resolve, [[Reject]]: reject }.\n\n27.2.1.3.1 Promise Reject Functions\nA promise reject function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal slots.\nWhen a promise reject function is called with argument reason, the following steps are taken:\n1. Let F be the active function object.2. Assert: F has a [[Promise]] internal slot whose value is an Object.3. Let promise be F.[[Promise]].4. Let alreadyResolved be F.[[AlreadyResolved]].5. If alreadyResolved.[[Value]] is true, return undefined.6. Set alreadyResolved.[[Value]] to true.7. Perform RejectPromise(promise, reason).8. Return undefined.\nThe \"length\" property of a promise reject function is 1\ud835\udd3d.\n\n\n27.2.1.3.2 Promise Resolve Functions\nA promise resolve function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal slots.\nWhen a promise resolve function is called with argument resolution, the following steps are taken:\n1. Let F be the active function object.2. Assert: F has a [[Promise]] internal slot whose value is an Object.3. Let promise be F.[[Promise]].4. Let alreadyResolved be F.[[AlreadyResolved]].5. If alreadyResolved.[[Value]] is true, return undefined.6. Set alreadyResolved.[[Value]] to true.7. If SameValue(resolution, promise) is true, thena. Let selfResolutionError be a newly created TypeError object.b. Perform RejectPromise(promise, selfResolutionError).c. Return undefined.8. If Type(resolution) is not Object, thena. Perform FulfillPromise(promise, resolution).b. Return undefined.9. Let then be Completion(Get(resolution, \"then\")).10. If then is an abrupt completion, thena. Perform RejectPromise(promise, then.[[Value]]).b. Return undefined.11. Let thenAction be then.[[Value]].12. If IsCallable(thenAction) is false, thena. Perform FulfillPromise(promise, resolution).b. Return undefined.13. Let thenJobCallback be HostMakeJobCallback(thenAction).14. Let job be NewPromiseResolveThenableJob(promise, resolution, thenJobCallback).15. Perform HostEnqueuePromiseJob(job.[[Job]], job.[[Realm]]).16. Return undefined.\nThe \"length\" property of a promise resolve function is 1\ud835\udd3d.\n\n\n\n27.2.1.4 FulfillPromise ( promise, value )\nThe abstract operation FulfillPromise takes arguments promise and value and returns unused. It performs the following steps when called:\n1. Assert: The value of promise.[[PromiseState]] is pending.2. Let reactions be promise.[[PromiseFulfillReactions]].3. Set promise.[[PromiseResult]] to value.4. Set promise.[[PromiseFulfillReactions]] to undefined.5. Set promise.[[PromiseRejectReactions]] to undefined.6. Set promise.[[PromiseState]] to fulfilled.7. Perform TriggerPromiseReactions(reactions, value).8. Return unused.\n\n\n27.2.1.5 NewPromiseCapability ( C )\nThe abstract operation NewPromiseCapability takes argument C and returns either a normal completion containing a PromiseCapability Record or an abrupt completion. It attempts to use C as a constructor in the fashion of the built-in Promise constructor to create a promise and extract its resolve and reject functions. The promise plus the resolve and reject functions are used to initialize a new PromiseCapability Record. It performs the following steps when called:\n1. If IsConstructor(C) is false, throw a TypeError exception.2. NOTE: C is assumed to be a constructor function that supports the parameter conventions of the Promise constructor (see 27.2.3.1).3. Let promiseCapability be the PromiseCapability Record { [[Promise]]: undefined, [[Resolve]]: undefined, [[Reject]]: undefined }.4. Let executorClosure be a new Abstract Closure with parameters (resolve, reject) that captures promiseCapability and performs the following steps when called:a. If promiseCapability.[[Resolve]] is not undefined, throw a TypeError exception.b. If promiseCapability.[[Reject]] is not undefined, throw a TypeError exception.c. Set promiseCapability.[[Resolve]] to resolve.d. Set promiseCapability.[[Reject]] to reject.e. Return undefined.5. Let executor be CreateBuiltinFunction(executorClosure, 2, \"\", \u00ab \u00bb).6. Let promise be ?\u00a0Construct(C, \u00ab executor \u00bb).7. If IsCallable(promiseCapability.[[Resolve]]) is false, throw a TypeError exception.8. If IsCallable(promiseCapability.[[Reject]]) is false, throw a TypeError exception.9. Set promiseCapability.[[Promise]] to promise.10. Return promiseCapability.\nNote\nThis abstract operation supports Promise subclassing, as it is generic on any constructor that calls a passed executor function argument in the same way as the Promise constructor. It is used to generalize static methods of the Promise constructor to any subclass.\n\n\n\n27.2.1.6 IsPromise ( x )\nThe abstract operation IsPromise takes argument x and returns a Boolean. It checks for the promise brand on an object. It performs the following steps when called:\n1. If Type(x) is not Object, return false.2. If x does not have a [[PromiseState]] internal slot, return false.3. Return true.\n\n\n27.2.1.7 RejectPromise ( promise, reason )\nThe abstract operation RejectPromise takes arguments promise and reason and returns unused. It performs the following steps when called:\n1. Assert: The value of promise.[[PromiseState]] is pending.2. Let reactions be promise.[[PromiseRejectReactions]].3. Set promise.[[PromiseResult]] to reason.4. Set promise.[[PromiseFulfillReactions]] to undefined.5. Set promise.[[PromiseRejectReactions]] to undefined.6. Set promise.[[PromiseState]] to rejected.7. If promise.[[PromiseIsHandled]] is false, perform HostPromiseRejectionTracker(promise, \"reject\").8. Perform TriggerPromiseReactions(reactions, reason).9. Return unused.\n\n\n27.2.1.8 TriggerPromiseReactions ( reactions, argument )\nThe abstract operation TriggerPromiseReactions takes arguments reactions (a List of PromiseReaction Records) and argument and returns unused. It enqueues a new Job for each record in reactions. Each such Job processes the [[Type]] and [[Handler]] of the PromiseReaction Record, and if the [[Handler]] is not empty, calls it passing the given argument. If the [[Handler]] is empty, the behaviour is determined by the [[Type]]. It performs the following steps when called:\n1. For each element reaction of reactions, doa. Let job be NewPromiseReactionJob(reaction, argument).b. Perform HostEnqueuePromiseJob(job.[[Job]], job.[[Realm]]).2. Return unused.\n\n\n27.2.1.9 HostPromiseRejectionTracker ( promise, operation )\nThe host-defined abstract operation HostPromiseRejectionTracker takes arguments promise (a Promise) and operation (\"reject\" or \"handle\") and returns unused. It allows host environments to track promise rejections.\nAn implementation of HostPromiseRejectionTracker must conform to the following requirements:\n\nIt must complete normally (i.e. not return an abrupt completion).\n\nThe default implementation of HostPromiseRejectionTracker is to return unused.\nNote 1\nHostPromiseRejectionTracker is called in two scenarios:\n\nWhen a promise is rejected without any handlers, it is called with its operation argument set to \"reject\".\nWhen a handler is added to a rejected promise for the first time, it is called with its operation argument set to \"handle\".\n\nA typical implementation of HostPromiseRejectionTracker \nmight try to notify developers of unhandled rejections, while also being\n careful to notify them if such previous notifications are later \ninvalidated by new handlers being attached.\n\nNote 2\nIf operation is \"handle\", an implementation should not hold a reference to promise in a way that would interfere with garbage collection. An implementation may hold a reference to promise if operation is \"reject\", since it is expected that rejections will be rare and not on hot code paths.\n\n\n\n\n27.2.2 Promise Jobs\n\n27.2.2.1 NewPromiseReactionJob ( reaction, argument )\nThe abstract operation NewPromiseReactionJob takes arguments reaction (a PromiseReaction Record) and argument and returns a Record with fields [[Job]] (a Job Abstract Closure) and [[Realm]] (a Realm Record or null). It returns a new Job Abstract Closure\n that applies the appropriate handler to the incoming value, and uses \nthe handler's return value to resolve or reject the derived promise \nassociated with that handler. It performs the following steps when \ncalled:\n1. Let job be a new Job Abstract Closure with no parameters that captures reaction and argument and performs the following steps when called:a. Let promiseCapability be reaction.[[Capability]].b. Let type be reaction.[[Type]].c. Let handler be reaction.[[Handler]].d. If handler is empty, theni. If type is Fulfill, let handlerResult be NormalCompletion(argument).ii. Else,1. Assert: type is Reject.2. Let handlerResult be ThrowCompletion(argument).e. Else, let handlerResult be Completion(HostCallJobCallback(handler, undefined, \u00ab argument \u00bb)).f. If promiseCapability is undefined, theni. Assert: handlerResult is not an abrupt completion.ii. Return empty.g. Assert: promiseCapability is a PromiseCapability Record.h. If handlerResult is an abrupt completion, theni. Return ?\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab handlerResult.[[Value]] \u00bb).i. Else,i. Return ?\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab handlerResult.[[Value]] \u00bb).2. Let handlerRealm be null.3. If reaction.[[Handler]] is not empty, thena. Let getHandlerRealmResult be Completion(GetFunctionRealm(reaction.[[Handler]].[[Callback]])).b. If getHandlerRealmResult is a normal completion, set handlerRealm to getHandlerRealmResult.[[Value]].c. Else, set handlerRealm to the current Realm Record.d. NOTE: handlerRealm is never null unless the handler is undefined. When the handler is a revoked Proxy and no ECMAScript code runs, handlerRealm is used to create error objects.4. Return the Record { [[Job]]: job, [[Realm]]: handlerRealm }.\n\n\n27.2.2.2 NewPromiseResolveThenableJob ( promiseToResolve, thenable, then )\nThe abstract operation NewPromiseResolveThenableJob takes arguments promiseToResolve, thenable, and then and returns a Record with fields [[Job]] (a Job Abstract Closure) and [[Realm]] (a Realm Record). It performs the following steps when called:\n1. Let job be a new Job Abstract Closure with no parameters that captures promiseToResolve, thenable, and then and performs the following steps when called:a. Let resolvingFunctions be CreateResolvingFunctions(promiseToResolve).b. Let thenCallResult be Completion(HostCallJobCallback(then, thenable, \u00ab resolvingFunctions.[[Resolve]], resolvingFunctions.[[Reject]] \u00bb)).c. If thenCallResult is an abrupt completion, theni. Return ?\u00a0Call(resolvingFunctions.[[Reject]], undefined, \u00ab thenCallResult.[[Value]] \u00bb).d. Return ?\u00a0thenCallResult.2. Let getThenRealmResult be Completion(GetFunctionRealm(then.[[Callback]])).3. If getThenRealmResult is a normal completion, let thenRealm be getThenRealmResult.[[Value]].4. Else, let thenRealm be the current Realm Record.5. NOTE: thenRealm is never null. When then.[[Callback]] is a revoked Proxy and no code runs, thenRealm is used to create error objects.6. Return the Record { [[Job]]: job, [[Realm]]: thenRealm }.\nNote\nThis Job uses the supplied thenable and its then method to resolve the given promise. This process must take place as a Job to ensure that the evaluation of the then method occurs after evaluation of any surrounding code has completed.\n\n\n\n\n27.2.3 The Promise Constructor\nThe Promise constructor:\n\nis %Promise%.\nis the initial value of the \"Promise\" property of the global object.\ncreates and initializes a new Promise when called as a constructor.\nis not intended to be called as a function and will throw an exception when called in that manner.\nmay be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified Promise behaviour must include a super call to the Promise constructor to create and initialize the subclass instance with the internal state necessary to support the Promise and Promise.prototype built-in methods.\n\n\n27.2.3.1 Promise ( executor )\nWhen the Promise function is called with argument executor, the following steps are taken:\n1. If NewTarget is undefined, throw a TypeError exception.2. If IsCallable(executor) is false, throw a TypeError exception.3. Let promise be ?\u00a0OrdinaryCreateFromConstructor(NewTarget, \"%Promise.prototype%\", \u00ab [[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]], [[PromiseRejectReactions]], [[PromiseIsHandled]] \u00bb).4. Set promise.[[PromiseState]] to pending.5. Set promise.[[PromiseFulfillReactions]] to a new empty List.6. Set promise.[[PromiseRejectReactions]] to a new empty List.7. Set promise.[[PromiseIsHandled]] to false.8. Let resolvingFunctions be CreateResolvingFunctions(promise).9. Let completion be Completion(Call(executor, undefined, \u00ab resolvingFunctions.[[Resolve]], resolvingFunctions.[[Reject]] \u00bb)).10. If completion is an abrupt completion, thena. Perform ?\u00a0Call(resolvingFunctions.[[Reject]], undefined, \u00ab completion.[[Value]] \u00bb).11. Return promise.\nNote\nThe executor argument must be a function object.\n It is called for initiating and reporting completion of the possibly \ndeferred action represented by this Promise. The executor is called with\n two arguments: resolve and reject. These are functions that may be used by the executor\n function to report eventual completion or failure of the deferred \ncomputation. Returning from the executor function does not mean that the\n deferred action has been completed but only that the request to \neventually perform the deferred action has been accepted.\nThe resolve function that is passed to an executor function accepts a single argument. The executor code may eventually call the resolve function to indicate that it wishes to resolve the associated Promise. The argument passed to the resolve\n function represents the eventual value of the deferred action and can \nbe either the actual fulfillment value or another promise which will \nprovide the value if it is fulfilled.\nThe reject function that is passed to an executor function accepts a single argument. The executor code may eventually call the reject function to indicate that the associated Promise is rejected and will never be fulfilled. The argument passed to the reject function is used as the rejection value of the promise. Typically it will be an Error object.\nThe resolve and reject functions passed to an executor function by the Promise constructor have the capability to actually resolve and reject the associated promise. Subclasses may have different constructor behaviour that passes in customized values for resolve and reject.\n\n\n\n\n27.2.4 Properties of the Promise Constructor\nThe Promise constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\nhas the following properties:\n\n\n27.2.4.1 Promise.all ( iterable )\nThe all function returns a new promise which is \nfulfilled with an array of fulfillment values for the passed promises, \nor rejects with the reason of the first passed promise that rejects. It \nresolves all elements of the passed iterable to promises as it runs this\n algorithm.\n1. Let C be the this value.2. Let promiseCapability be ?\u00a0NewPromiseCapability(C).3. Let promiseResolve be Completion(GetPromiseResolve(C)).4. IfAbruptRejectPromise(promiseResolve, promiseCapability).5. Let iteratorRecord be Completion(GetIterator(iterable)).6. IfAbruptRejectPromise(iteratorRecord, promiseCapability).7. Let result be Completion(PerformPromiseAll(iteratorRecord, C, promiseCapability, promiseResolve)).8. If result is an abrupt completion, thena. If iteratorRecord.[[Done]] is false, set result to Completion(IteratorClose(iteratorRecord, result)).b. IfAbruptRejectPromise(result, promiseCapability).9. Return ?\u00a0result.\nNote\nThe all function requires its this value to be a constructor function that supports the parameter conventions of the Promise constructor.\n\n\n27.2.4.1.1 GetPromiseResolve ( promiseConstructor )\nThe abstract operation GetPromiseResolve takes argument promiseConstructor (a constructor) and returns either a normal completion containing a function object or an abrupt completion. It performs the following steps when called:\n1. Let promiseResolve be ?\u00a0Get(promiseConstructor, \"resolve\").2. If IsCallable(promiseResolve) is false, throw a TypeError exception.3. Return promiseResolve.\n\n\n27.2.4.1.2 PerformPromiseAll ( iteratorRecord, constructor, resultCapability, promiseResolve )\nThe abstract operation PerformPromiseAll takes arguments iteratorRecord, constructor (a constructor), resultCapability (a PromiseCapability Record), and promiseResolve (a function object) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let values be a new empty List.2. Let remainingElementsCount be the Record { [[Value]]: 1 }.3. Let index be 0.4. Repeat,a. Let next be Completion(IteratorStep(iteratorRecord)).b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(next).d. If next is false, theni. Set iteratorRecord.[[Done]] to true.ii. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.iii. If remainingElementsCount.[[Value]] is 0, then1. Let valuesArray be CreateArrayFromList(values).2. Perform ?\u00a0Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).iv. Return resultCapability.[[Promise]].e. Let nextValue be Completion(IteratorValue(next)).f. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.g. ReturnIfAbrupt(nextValue).h. Append undefined to values.i. Let nextPromise be ?\u00a0Call(promiseResolve, constructor, \u00ab nextValue \u00bb).j. Let steps be the algorithm steps defined in Promise.all Resolve Element Functions.k. Let length be the number of non-optional parameters of the function definition in Promise.all Resolve Element Functions.l. Let onFulfilled be CreateBuiltinFunction(steps, length, \"\", \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).m. Set onFulfilled.[[AlreadyCalled]] to false.n. Set onFulfilled.[[Index]] to index.o. Set onFulfilled.[[Values]] to values.p. Set onFulfilled.[[Capability]] to resultCapability.q. Set onFulfilled.[[RemainingElements]] to remainingElementsCount.r. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] + 1.s. Perform ?\u00a0Invoke(nextPromise, \"then\", \u00ab onFulfilled, resultCapability.[[Reject]] \u00bb).t. Set index to index + 1.\n\n\n27.2.4.1.3 Promise.all Resolve Element Functions\nA Promise.all resolve element function is an anonymous built-in function that is used to resolve a specific Promise.all element. Each Promise.all\n resolve element function has [[Index]], [[Values]], [[Capability]], \n[[RemainingElements]], and [[AlreadyCalled]] internal slots.\nWhen a Promise.all resolve element function is called with argument x, the following steps are taken:\n1. Let F be the active function object.2. If F.[[AlreadyCalled]] is true, return undefined.3. Set F.[[AlreadyCalled]] to true.4. Let index be F.[[Index]].5. Let values be F.[[Values]].6. Let promiseCapability be F.[[Capability]].7. Let remainingElementsCount be F.[[RemainingElements]].8. Set values[index] to x.9. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.10. If remainingElementsCount.[[Value]] is 0, thena. Let valuesArray be CreateArrayFromList(values).b. Return ?\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).11. Return undefined.\nThe \"length\" property of a Promise.all resolve element function is 1\ud835\udd3d.\n\n\n\n27.2.4.2 Promise.allSettled ( iterable )\nThe allSettled function returns a promise that \nis fulfilled with an array of promise state snapshots, but only after \nall the original promises have settled, i.e. become either fulfilled or \nrejected. It resolves all elements of the passed iterable to promises as\n it runs this algorithm.\n1. Let C be the this value.2. Let promiseCapability be ?\u00a0NewPromiseCapability(C).3. Let promiseResolve be Completion(GetPromiseResolve(C)).4. IfAbruptRejectPromise(promiseResolve, promiseCapability).5. Let iteratorRecord be Completion(GetIterator(iterable)).6. IfAbruptRejectPromise(iteratorRecord, promiseCapability).7. Let result be Completion(PerformPromiseAllSettled(iteratorRecord, C, promiseCapability, promiseResolve)).8. If result is an abrupt completion, thena. If iteratorRecord.[[Done]] is false, set result to Completion(IteratorClose(iteratorRecord, result)).b. IfAbruptRejectPromise(result, promiseCapability).9. Return ?\u00a0result.\nNote\nThe allSettled function requires its this value to be a constructor function that supports the parameter conventions of the Promise constructor.\n\n\n27.2.4.2.1 PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability, promiseResolve )\nThe abstract operation PerformPromiseAllSettled takes arguments iteratorRecord, constructor (a constructor), resultCapability (a PromiseCapability Record), and promiseResolve (a function object) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let values be a new empty List.2. Let remainingElementsCount be the Record { [[Value]]: 1 }.3. Let index be 0.4. Repeat,a. Let next be Completion(IteratorStep(iteratorRecord)).b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(next).d. If next is false, theni. Set iteratorRecord.[[Done]] to true.ii. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.iii. If remainingElementsCount.[[Value]] is 0, then1. Let valuesArray be CreateArrayFromList(values).2. Perform ?\u00a0Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).iv. Return resultCapability.[[Promise]].e. Let nextValue be Completion(IteratorValue(next)).f. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.g. ReturnIfAbrupt(nextValue).h. Append undefined to values.i. Let nextPromise be ?\u00a0Call(promiseResolve, constructor, \u00ab nextValue \u00bb).j. Let stepsFulfilled be the algorithm steps defined in Promise.allSettled Resolve Element Functions.k. Let lengthFulfilled be the number of non-optional parameters of the function definition in Promise.allSettled Resolve Element Functions.l. Let onFulfilled be CreateBuiltinFunction(stepsFulfilled, lengthFulfilled, \"\", \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).m. Let alreadyCalled be the Record { [[Value]]: false }.n. Set onFulfilled.[[AlreadyCalled]] to alreadyCalled.o. Set onFulfilled.[[Index]] to index.p. Set onFulfilled.[[Values]] to values.q. Set onFulfilled.[[Capability]] to resultCapability.r. Set onFulfilled.[[RemainingElements]] to remainingElementsCount.s. Let stepsRejected be the algorithm steps defined in Promise.allSettled Reject Element Functions.t. Let lengthRejected be the number of non-optional parameters of the function definition in Promise.allSettled Reject Element Functions.u. Let onRejected be CreateBuiltinFunction(stepsRejected, lengthRejected, \"\", \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).v. Set onRejected.[[AlreadyCalled]] to alreadyCalled.w. Set onRejected.[[Index]] to index.x. Set onRejected.[[Values]] to values.y. Set onRejected.[[Capability]] to resultCapability.z. Set onRejected.[[RemainingElements]] to remainingElementsCount.?. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] + 1.?. Perform ?\u00a0Invoke(nextPromise, \"then\", \u00ab onFulfilled, onRejected \u00bb).?. Set index to index + 1.\n\n\n27.2.4.2.2 Promise.allSettled Resolve Element Functions\nA Promise.allSettled resolve element function is an anonymous built-in function that is used to resolve a specific Promise.allSettled element. Each Promise.allSettled\n resolve element function has [[Index]], [[Values]], [[Capability]], \n[[RemainingElements]], and [[AlreadyCalled]] internal slots.\nWhen a Promise.allSettled resolve element function is called with argument x, the following steps are taken:\n1. Let F be the active function object.2. Let alreadyCalled be F.[[AlreadyCalled]].3. If alreadyCalled.[[Value]] is true, return undefined.4. Set alreadyCalled.[[Value]] to true.5. Let index be F.[[Index]].6. Let values be F.[[Values]].7. Let promiseCapability be F.[[Capability]].8. Let remainingElementsCount be F.[[RemainingElements]].9. Let obj be OrdinaryObjectCreate(%Object.prototype%).10. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"status\", \"fulfilled\").11. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"value\", x).12. Set values[index] to obj.13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.14. If remainingElementsCount.[[Value]] is 0, thena. Let valuesArray be CreateArrayFromList(values).b. Return ?\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).15. Return undefined.\nThe \"length\" property of a Promise.allSettled resolve element function is 1\ud835\udd3d.\n\n\n27.2.4.2.3 Promise.allSettled Reject Element Functions\nA Promise.allSettled reject element function is an anonymous built-in function that is used to reject a specific Promise.allSettled element. Each Promise.allSettled reject element function has [[Index]], [[Values]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal slots.\nWhen a Promise.allSettled reject element function is called with argument x, the following steps are taken:\n1. Let F be the active function object.2. Let alreadyCalled be F.[[AlreadyCalled]].3. If alreadyCalled.[[Value]] is true, return undefined.4. Set alreadyCalled.[[Value]] to true.5. Let index be F.[[Index]].6. Let values be F.[[Values]].7. Let promiseCapability be F.[[Capability]].8. Let remainingElementsCount be F.[[RemainingElements]].9. Let obj be OrdinaryObjectCreate(%Object.prototype%).10. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"status\", \"rejected\").11. Perform !\u00a0CreateDataPropertyOrThrow(obj, \"reason\", x).12. Set values[index] to obj.13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.14. If remainingElementsCount.[[Value]] is 0, thena. Let valuesArray be CreateArrayFromList(values).b. Return ?\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).15. Return undefined.\nThe \"length\" property of a Promise.allSettled reject element function is 1\ud835\udd3d.\n\n\n\n27.2.4.3 Promise.any ( iterable )\nThe any function returns a promise that is fulfilled by the first given promise to be fulfilled, or rejected with an AggregateError\n holding the rejection reasons if all of the given promises are \nrejected. It resolves all elements of the passed iterable to promises as\n it runs this algorithm.\n1. Let C be the this value.2. Let promiseCapability be ?\u00a0NewPromiseCapability(C).3. Let promiseResolve be Completion(GetPromiseResolve(C)).4. IfAbruptRejectPromise(promiseResolve, promiseCapability).5. Let iteratorRecord be Completion(GetIterator(iterable)).6. IfAbruptRejectPromise(iteratorRecord, promiseCapability).7. Let result be Completion(PerformPromiseAny(iteratorRecord, C, promiseCapability, promiseResolve)).8. If result is an abrupt completion, thena. If iteratorRecord.[[Done]] is false, set result to Completion(IteratorClose(iteratorRecord, result)).b. IfAbruptRejectPromise(result, promiseCapability).9. Return ?\u00a0result.\nNote\nThe any function requires its this value to be a constructor function that supports the parameter conventions of the Promise constructor.\n\n\n27.2.4.3.1 PerformPromiseAny ( iteratorRecord, constructor, resultCapability, promiseResolve )\nThe abstract operation PerformPromiseAny takes arguments iteratorRecord, constructor (a constructor), resultCapability (a PromiseCapability Record), and promiseResolve (a function object) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let errors be a new empty List.2. Let remainingElementsCount be the Record { [[Value]]: 1 }.3. Let index be 0.4. Repeat,a. Let next be Completion(IteratorStep(iteratorRecord)).b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(next).d. If next is false, theni. Set iteratorRecord.[[Done]] to true.ii. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.iii. If remainingElementsCount.[[Value]] is 0, then1. Let error be a newly created AggregateError object.2. Perform !\u00a0DefinePropertyOrThrow(error, \"errors\", PropertyDescriptor { [[Configurable]]: true, [[Enumerable]]: false, [[Writable]]: true, [[Value]]: CreateArrayFromList(errors) }).3. Return ThrowCompletion(error).iv. Return resultCapability.[[Promise]].e. Let nextValue be Completion(IteratorValue(next)).f. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.g. ReturnIfAbrupt(nextValue).h. Append undefined to errors.i. Let nextPromise be ?\u00a0Call(promiseResolve, constructor, \u00ab nextValue \u00bb).j. Let stepsRejected be the algorithm steps defined in Promise.any Reject Element Functions.k. Let lengthRejected be the number of non-optional parameters of the function definition in Promise.any Reject Element Functions.l. Let onRejected be CreateBuiltinFunction(stepsRejected, lengthRejected, \"\", \u00ab [[AlreadyCalled]], [[Index]], [[Errors]], [[Capability]], [[RemainingElements]] \u00bb).m. Set onRejected.[[AlreadyCalled]] to false.n. Set onRejected.[[Index]] to index.o. Set onRejected.[[Errors]] to errors.p. Set onRejected.[[Capability]] to resultCapability.q. Set onRejected.[[RemainingElements]] to remainingElementsCount.r. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] + 1.s. Perform ?\u00a0Invoke(nextPromise, \"then\", \u00ab resultCapability.[[Resolve]], onRejected \u00bb).t. Set index to index + 1.\n\n\n27.2.4.3.2 Promise.any Reject Element Functions\nA Promise.any reject element function is an anonymous built-in function that is used to reject a specific Promise.any element. Each Promise.any reject element function has [[Index]], [[Errors]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal slots.\nWhen a Promise.any reject element function is called with argument x, the following steps are taken:\n1. Let F be the active function object.2. If F.[[AlreadyCalled]] is true, return undefined.3. Set F.[[AlreadyCalled]] to true.4. Let index be F.[[Index]].5. Let errors be F.[[Errors]].6. Let promiseCapability be F.[[Capability]].7. Let remainingElementsCount be F.[[RemainingElements]].8. Set errors[index] to x.9. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.10. If remainingElementsCount.[[Value]] is 0, thena. Let error be a newly created AggregateError object.b. Perform !\u00a0DefinePropertyOrThrow(error, \"errors\", PropertyDescriptor { [[Configurable]]: true, [[Enumerable]]: false, [[Writable]]: true, [[Value]]: CreateArrayFromList(errors) }).c. Return ?\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab error \u00bb).11. Return undefined.\nThe \"length\" property of a Promise.any reject element function is 1\ud835\udd3d.\n\n\n\n27.2.4.4 Promise.prototype\nThe initial value of Promise.prototype is the Promise prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n27.2.4.5 Promise.race ( iterable )\nThe race function returns a new promise which is\n settled in the same way as the first passed promise to settle. It \nresolves all elements of the passed iterable to promises as it runs this algorithm.\n1. Let C be the this value.2. Let promiseCapability be ?\u00a0NewPromiseCapability(C).3. Let promiseResolve be Completion(GetPromiseResolve(C)).4. IfAbruptRejectPromise(promiseResolve, promiseCapability).5. Let iteratorRecord be Completion(GetIterator(iterable)).6. IfAbruptRejectPromise(iteratorRecord, promiseCapability).7. Let result be Completion(PerformPromiseRace(iteratorRecord, C, promiseCapability, promiseResolve)).8. If result is an abrupt completion, thena. If iteratorRecord.[[Done]] is false, set result to Completion(IteratorClose(iteratorRecord, result)).b. IfAbruptRejectPromise(result, promiseCapability).9. Return ?\u00a0result.\nNote 1\nIf the iterable argument is empty or if none of the promises in iterable ever settle then the pending promise returned by this method will never be settled.\n\nNote 2\nThe race function expects its this value to be a constructor function that supports the parameter conventions of the Promise constructor. It also expects that its this value provides a resolve method.\n\n\n27.2.4.5.1 PerformPromiseRace ( iteratorRecord, constructor, resultCapability, promiseResolve )\nThe abstract operation PerformPromiseRace takes arguments iteratorRecord, constructor (a constructor), resultCapability (a PromiseCapability Record), and promiseResolve (a function object) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Repeat,a. Let next be Completion(IteratorStep(iteratorRecord)).b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.c. ReturnIfAbrupt(next).d. If next is false, theni. Set iteratorRecord.[[Done]] to true.ii. Return resultCapability.[[Promise]].e. Let nextValue be Completion(IteratorValue(next)).f. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.g. ReturnIfAbrupt(nextValue).h. Let nextPromise be ?\u00a0Call(promiseResolve, constructor, \u00ab nextValue \u00bb).i. Perform ?\u00a0Invoke(nextPromise, \"then\", \u00ab resultCapability.[[Resolve]], resultCapability.[[Reject]] \u00bb).\n\n\n\n27.2.4.6 Promise.reject ( r )\nThe reject function returns a new promise rejected with the passed argument.\n1. Let C be the this value.2. Let promiseCapability be ?\u00a0NewPromiseCapability(C).3. Perform ?\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab r \u00bb).4. Return promiseCapability.[[Promise]].\nNote\nThe reject function expects its this value to be a constructor function that supports the parameter conventions of the Promise constructor.\n\n\n\n27.2.4.7 Promise.resolve ( x )\nThe resolve function returns either a new \npromise resolved with the passed argument, or the argument itself if the\n argument is a promise produced by this constructor.\n1. Let C be the this value.2. If Type(C) is not Object, throw a TypeError exception.3. Return ?\u00a0PromiseResolve(C, x).\nNote\nThe resolve function expects its this value to be a constructor function that supports the parameter conventions of the Promise constructor.\n\n\n27.2.4.7.1 PromiseResolve ( C, x )\nThe abstract operation PromiseResolve takes arguments C (a constructor) and x (an ECMAScript language value) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It returns a new promise resolved with x. It performs the following steps when called:\n1. If IsPromise(x) is true, thena. Let xConstructor be ?\u00a0Get(x, \"constructor\").b. If SameValue(xConstructor, C) is true, return x.2. Let promiseCapability be ?\u00a0NewPromiseCapability(C).3. Perform ?\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab x \u00bb).4. Return promiseCapability.[[Promise]].\n\n\n\n27.2.4.8 get Promise [ @@species ]\nPromise[@@species] is an accessor property whose set accessor function is undefined. Its get accessor function performs the following steps:\n1. Return the this value.\nThe value of the \"name\" property of this function is \"get [Symbol.species]\".\nNote\nPromise prototype methods normally use their this value's constructor to create a derived object. However, a subclass constructor may over-ride that default behaviour by redefining its @@species property.\n\n\n\n\n27.2.5 Properties of the Promise Prototype Object\nThe Promise prototype object:\n\nis %Promise.prototype%.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis an ordinary object.\ndoes not have a [[PromiseState]] internal slot or any of the other internal slots of Promise instances.\n\n\n27.2.5.1 Promise.prototype.catch ( onRejected )\nWhen the catch method is called with argument onRejected, the following steps are taken:\n1. Let promise be the this value.2. Return ?\u00a0Invoke(promise, \"then\", \u00ab undefined, onRejected \u00bb).\n\n\n27.2.5.2 Promise.prototype.constructor\nThe initial value of Promise.prototype.constructor is %Promise%.\n\n\n27.2.5.3 Promise.prototype.finally ( onFinally )\nWhen the finally method is called with argument onFinally, the following steps are taken:\n1. Let promise be the this value.2. If Type(promise) is not Object, throw a TypeError exception.3. Let C be ?\u00a0SpeciesConstructor(promise, %Promise%).4. Assert: IsConstructor(C) is true.5. If IsCallable(onFinally) is false, thena. Let thenFinally be onFinally.b. Let catchFinally be onFinally.6. Else,a. Let thenFinallyClosure be a new Abstract Closure with parameters (value) that captures onFinally and C and performs the following steps when called:i. Let result be ?\u00a0Call(onFinally, undefined).ii. Let promise be ?\u00a0PromiseResolve(C, result).iii. Let returnValue be a new Abstract Closure with no parameters that captures value and performs the following steps when called:1. Return value.iv. Let valueThunk be CreateBuiltinFunction(returnValue, 0, \"\", \u00ab \u00bb).v. Return ?\u00a0Invoke(promise, \"then\", \u00ab valueThunk \u00bb).b. Let thenFinally be CreateBuiltinFunction(thenFinallyClosure, 1, \"\", \u00ab \u00bb).c. Let catchFinallyClosure be a new Abstract Closure with parameters (reason) that captures onFinally and C and performs the following steps when called:i. Let result be ?\u00a0Call(onFinally, undefined).ii. Let promise be ?\u00a0PromiseResolve(C, result).iii. Let throwReason be a new Abstract Closure with no parameters that captures reason and performs the following steps when called:1. Return ThrowCompletion(reason).iv. Let thrower be CreateBuiltinFunction(throwReason, 0, \"\", \u00ab \u00bb).v. Return ?\u00a0Invoke(promise, \"then\", \u00ab thrower \u00bb).d. Let catchFinally be CreateBuiltinFunction(catchFinallyClosure, 1, \"\", \u00ab \u00bb).7. Return ?\u00a0Invoke(promise, \"then\", \u00ab thenFinally, catchFinally \u00bb).\n\n\n27.2.5.4 Promise.prototype.then ( onFulfilled, onRejected )\nWhen the then method is called with arguments onFulfilled and onRejected, the following steps are taken:\n1. Let promise be the this value.2. If IsPromise(promise) is false, throw a TypeError exception.3. Let C be ?\u00a0SpeciesConstructor(promise, %Promise%).4. Let resultCapability be ?\u00a0NewPromiseCapability(C).5. Return PerformPromiseThen(promise, onFulfilled, onRejected, resultCapability).\n\n27.2.5.4.1 PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] )\nThe abstract operation PerformPromiseThen takes arguments promise, onFulfilled, and onRejected and optional argument resultCapability (a PromiseCapability Record) and returns an ECMAScript language value. It performs the \u201cthen\u201d operation on promise using onFulfilled and onRejected as its settlement actions. If resultCapability is passed, the result is stored by updating resultCapability's\n promise. If it is not passed, then PerformPromiseThen is being called \nby a specification-internal operation where the result does not matter. \nIt performs the following steps when called:\n1. Assert: IsPromise(promise) is true.2. If resultCapability is not present, thena. Set resultCapability to undefined.3. If IsCallable(onFulfilled) is false, thena. Let onFulfilledJobCallback be empty.4. Else,a. Let onFulfilledJobCallback be HostMakeJobCallback(onFulfilled).5. If IsCallable(onRejected) is false, thena. Let onRejectedJobCallback be empty.6. Else,a. Let onRejectedJobCallback be HostMakeJobCallback(onRejected).7. Let fulfillReaction be the PromiseReaction { [[Capability]]: resultCapability, [[Type]]: Fulfill, [[Handler]]: onFulfilledJobCallback }.8. Let rejectReaction be the PromiseReaction { [[Capability]]: resultCapability, [[Type]]: Reject, [[Handler]]: onRejectedJobCallback }.9. If promise.[[PromiseState]] is pending, thena. Append fulfillReaction as the last element of the List that is promise.[[PromiseFulfillReactions]].b. Append rejectReaction as the last element of the List that is promise.[[PromiseRejectReactions]].10. Else if promise.[[PromiseState]] is fulfilled, thena. Let value be promise.[[PromiseResult]].b. Let fulfillJob be NewPromiseReactionJob(fulfillReaction, value).c. Perform HostEnqueuePromiseJob(fulfillJob.[[Job]], fulfillJob.[[Realm]]).11. Else,a. Assert: The value of promise.[[PromiseState]] is rejected.b. Let reason be promise.[[PromiseResult]].c. If promise.[[PromiseIsHandled]] is false, perform HostPromiseRejectionTracker(promise, \"handle\").d. Let rejectJob be NewPromiseReactionJob(rejectReaction, reason).e. Perform HostEnqueuePromiseJob(rejectJob.[[Job]], rejectJob.[[Realm]]).12. Set promise.[[PromiseIsHandled]] to true.13. If resultCapability is undefined, thena. Return undefined.14. Else,a. Return resultCapability.[[Promise]].\n\n\n\n27.2.5.5 Promise.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Promise\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n27.2.6 Properties of Promise Instances\nPromise instances are ordinary objects that inherit properties from the Promise prototype object (the intrinsic, %Promise.prototype%). Promise instances are initially created with the internal slots described in Table 83.\nTable 83: Internal Slots of Promise Instances\n\n\n\n              Internal Slot\n            \n\n              Type\n            \n\n              Description\n            \n\n\n\n              [[PromiseState]]\n            \n\npending, fulfilled, or rejected\n\n\n              Governs how a promise will react to incoming calls to its then method.\n            \n\n\n\n              [[PromiseResult]]\n            \n\n              an ECMAScript language value\n\n\n              The value with which the promise has been fulfilled or \nrejected, if any. Only meaningful if [[PromiseState]] is not pending.\n            \n\n\n\n              [[PromiseFulfillReactions]]\n            \n\n              a List of PromiseReaction Records\n\n\nRecords to be processed when/if the promise transitions from the pending state to the fulfilled state.\n            \n\n\n\n              [[PromiseRejectReactions]]\n            \n\n              a List of PromiseReaction Records\n\n\nRecords to be processed when/if the promise transitions from the pending state to the rejected state.\n            \n\n\n\n              [[PromiseIsHandled]]\n            \n\n              a Boolean\n            \n\n              Indicates whether the promise has ever had a fulfillment \nor rejection handler; used in unhandled rejection tracking.\n            \n\n\n\n\n\n\n27.3 GeneratorFunction Objects\nGeneratorFunctions are functions that are usually created by evaluating GeneratorDeclarations, GeneratorExpressions, and GeneratorMethods. They may also be created by calling the %GeneratorFunction% intrinsic.\nFigure 6 (Informative): Generator Objects Relationships\n\n\n\n27.3.1 The GeneratorFunction Constructor\nThe GeneratorFunction constructor:\n\nis %GeneratorFunction%.\nis a subclass of Function.\ncreates and initializes a new GeneratorFunction when called as a function rather than as a constructor. Thus the function call GeneratorFunction (\u2026) is equivalent to the object creation expression new GeneratorFunction (\u2026) with the same arguments.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified GeneratorFunction behaviour must include a super call to the GeneratorFunction constructor\n to create and initialize subclass instances with the internal slots \nnecessary for built-in GeneratorFunction behaviour. All ECMAScript \nsyntactic forms for defining generator function objects create direct instances of GeneratorFunction. There is no syntactic means to create instances of GeneratorFunction subclasses.\n\n\n27.3.1.1 GeneratorFunction ( p1, p2, \u2026 , pn, body )\nThe last argument specifies the body (executable code) of a \ngenerator function; any preceding arguments specify formal parameters.\nWhen the GeneratorFunction function is called with some arguments p1, p2, \u2026 , pn, body (where n might be 0, that is, there are no \u201cp\u201d arguments, and where body might also not be provided), the following steps are taken:\n1. Let C be the active function object.2. Let args be the argumentsList that was passed to this function by [[Call]] or [[Construct]].3. Return ?\u00a0CreateDynamicFunction(C, NewTarget, generator, args).\nNote\nSee NOTE for 20.2.1.1.\n\n\n\n\n27.3.2 Properties of the GeneratorFunction Constructor\nThe GeneratorFunction constructor:\n\nis a standard built-in function object that inherits from the Function constructor.\nhas a [[Prototype]] internal slot whose value is %Function%.\nhas a \"name\" property whose value is \"GeneratorFunction\".\nhas the following properties:\n\n\n27.3.2.1 GeneratorFunction.length\nThis is a data property with a value of 1. This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.3.2.2 GeneratorFunction.prototype\nThe initial value of GeneratorFunction.prototype is the GeneratorFunction prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n27.3.3 Properties of the GeneratorFunction Prototype Object\nThe GeneratorFunction prototype object:\n\nis %GeneratorFunction.prototype% (see Figure 6).\nis an ordinary object.\nis not a function object and does not have an [[ECMAScriptCode]] internal slot or any other of the internal slots listed in Table 33 or Table 84.\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\n\n\n27.3.3.1 GeneratorFunction.prototype.constructor\nThe initial value of GeneratorFunction.prototype.constructor is %GeneratorFunction%.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.3.3.2 GeneratorFunction.prototype.prototype\nThe initial value of GeneratorFunction.prototype.prototype is the Generator prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.3.3.3 GeneratorFunction.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"GeneratorFunction\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n27.3.4 GeneratorFunction Instances\nEvery GeneratorFunction instance is an ECMAScript function object and has the internal slots listed in Table 33. The value of the [[IsClassConstructor]] internal slot for all such instances is false.\nEach GeneratorFunction instance has the following own properties:\n\n27.3.4.1 length\nThe specification for the \"length\" property of Function instances given in 20.2.4.1 also applies to GeneratorFunction instances.\n\n\n27.3.4.2 name\nThe specification for the \"name\" property of Function instances given in 20.2.4.2 also applies to GeneratorFunction instances.\n\n\n27.3.4.3 prototype\nWhenever a GeneratorFunction instance is created another ordinary object is also created and is the initial value of the generator function's \"prototype\"\n property. The value of the prototype property is used to initialize the\n [[Prototype]] internal slot of a newly created Generator when the \ngenerator function object is invoked using [[Call]].\nThis property has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }.\nNote\nUnlike Function instances, the object that is the value of the a GeneratorFunction's \"prototype\" property does not have a \"constructor\" property whose value is the GeneratorFunction instance.\n\n\n\n\n\n27.4 AsyncGeneratorFunction Objects\nAsyncGeneratorFunctions are functions that are usually created by evaluating AsyncGeneratorDeclaration, AsyncGeneratorExpression, and AsyncGeneratorMethod syntactic productions. They may also be created by calling the %AsyncGeneratorFunction% intrinsic.\n\n27.4.1 The AsyncGeneratorFunction Constructor\nThe AsyncGeneratorFunction constructor:\n\nis %AsyncGeneratorFunction%.\nis a subclass of Function.\ncreates and initializes a new AsyncGeneratorFunction when called as a function rather than as a constructor. Thus the function call AsyncGeneratorFunction (...) is equivalent to the object creation expression new AsyncGeneratorFunction (...) with the same arguments.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified AsyncGeneratorFunction behaviour must include a super call to the AsyncGeneratorFunction constructor\n to create and initialize subclass instances with the internal slots \nnecessary for built-in AsyncGeneratorFunction behaviour. All ECMAScript \nsyntactic forms for defining async generator function objects\n create direct instances of AsyncGeneratorFunction. There is no \nsyntactic means to create instances of AsyncGeneratorFunction \nsubclasses.\n\n\n27.4.1.1 AsyncGeneratorFunction ( p1, p2, \u2026 , pn, body )\nThe last argument specifies the body (executable code) of an \nasync generator function; any preceding arguments specify formal \nparameters.\nWhen the AsyncGeneratorFunction function is called with some arguments p1, p2, \u2026 , pn, body (where n might be 0, that is, there are no \"p\" arguments, and where body might also not be provided), the following steps are taken:\n1. Let C be the active function object.2. Let args be the argumentsList that was passed to this function by [[Call]] or [[Construct]].3. Return ?\u00a0CreateDynamicFunction(C, NewTarget, asyncGenerator, args).\nNote\nSee NOTE for 20.2.1.1.\n\n\n\n\n27.4.2 Properties of the AsyncGeneratorFunction Constructor\nThe AsyncGeneratorFunction constructor:\n\nis a standard built-in function object that inherits from the Function constructor.\nhas a [[Prototype]] internal slot whose value is %Function%.\nhas a \"name\" property whose value is \"AsyncGeneratorFunction\".\nhas the following properties:\n\n\n27.4.2.1 AsyncGeneratorFunction.length\nThis is a data property with a value of 1. This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.4.2.2 AsyncGeneratorFunction.prototype\nThe initial value of AsyncGeneratorFunction.prototype is the AsyncGeneratorFunction prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n27.4.3 Properties of the AsyncGeneratorFunction Prototype Object\nThe AsyncGeneratorFunction prototype object:\n\nis %AsyncGeneratorFunction.prototype%.\nis an ordinary object.\nis not a function object and does not have an [[ECMAScriptCode]] internal slot or any other of the internal slots listed in Table 33 or Table 85.\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\n\n\n27.4.3.1 AsyncGeneratorFunction.prototype.constructor\nThe initial value of AsyncGeneratorFunction.prototype.constructor is %AsyncGeneratorFunction%.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.4.3.2 AsyncGeneratorFunction.prototype.prototype\nThe initial value of AsyncGeneratorFunction.prototype.prototype is the AsyncGenerator prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.4.3.3 AsyncGeneratorFunction.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"AsyncGeneratorFunction\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n27.4.4 AsyncGeneratorFunction Instances\nEvery AsyncGeneratorFunction instance is an ECMAScript function object and has the internal slots listed in Table 33. The value of the [[IsClassConstructor]] internal slot for all such instances is false.\nEach AsyncGeneratorFunction instance has the following own properties:\n\n27.4.4.1 length\nThe value of the \"length\" property is an integral Number\n that indicates the typical number of arguments expected by the \nAsyncGeneratorFunction. However, the language permits the function to be\n invoked with some other number of arguments. The behaviour of an \nAsyncGeneratorFunction when invoked on a number of arguments other than \nthe number specified by its \"length\" property depends on the function.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.4.4.2 name\nThe specification for the \"name\" property of Function instances given in 20.2.4.2 also applies to AsyncGeneratorFunction instances.\n\n\n27.4.4.3 prototype\nWhenever an AsyncGeneratorFunction instance is created another ordinary object is also created and is the initial value of the async generator function's \"prototype\"\n property. The value of the prototype property is used to initialize the\n [[Prototype]] internal slot of a newly created AsyncGenerator when the \ngenerator function object is invoked using [[Call]].\nThis property has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }.\nNote\nUnlike function instances, the object that is the value of the an AsyncGeneratorFunction's \"prototype\" property does not have a \"constructor\" property whose value is the AsyncGeneratorFunction instance.\n\n\n\n\n\n27.5 Generator Objects\nA Generator is an instance of a generator function and conforms to both the Iterator and Iterable interfaces.\nGenerator instances directly inherit properties from the object that is the initial value of the \"prototype\"\n property of the Generator function that created the instance. Generator\n instances indirectly inherit properties from the Generator Prototype \nintrinsic, %GeneratorFunction.prototype.prototype%.\n\n27.5.1 Properties of the Generator Prototype Object\nThe Generator prototype object:\n\nis %GeneratorFunction.prototype.prototype%.\nis an ordinary object.\nis not a Generator instance and does not have a [[GeneratorState]] internal slot.\nhas a [[Prototype]] internal slot whose value is %IteratorPrototype%.\nhas properties that are indirectly inherited by all Generator instances.\n\n\n27.5.1.1 Generator.prototype.constructor\nThe initial value of Generator.prototype.constructor is %GeneratorFunction.prototype%.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.5.1.2 Generator.prototype.next ( value )\n1. Return ?\u00a0GeneratorResume(this value, value, empty).\n\n\n27.5.1.3 Generator.prototype.return ( value )\nThe return method performs the following steps:\n1. Let g be the this value.2. Let C be Completion Record { [[Type]]: return, [[Value]]: value, [[Target]]: empty }.3. Return ?\u00a0GeneratorResumeAbrupt(g, C, empty).\n\n\n27.5.1.4 Generator.prototype.throw ( exception )\nThe throw method performs the following steps:\n1. Let g be the this value.2. Let C be ThrowCompletion(exception).3. Return ?\u00a0GeneratorResumeAbrupt(g, C, empty).\n\n\n27.5.1.5 Generator.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Generator\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n27.5.2 Properties of Generator Instances\nGenerator instances are initially created with the internal slots described in Table 84.\nTable 84: Internal Slots of Generator Instances\n\n\n\n              Internal Slot\n            \n\n              Type\n            \n\n              Description\n            \n\n\n\n              [[GeneratorState]]\n            \n\nundefined, suspendedStart, suspendedYield, executing, or completed\n\n\n              The current execution state of the generator.\n            \n\n\n\n              [[GeneratorContext]]\n            \n\n              an execution context\n\n\n              The execution context that is used when executing the code of this generator.\n            \n\n\n\n              [[GeneratorBrand]]\n            \n\n              a String or empty\n\n\n              A brand used to distinguish different kinds of generators.\n The [[GeneratorBrand]] of generators declared by ECMAScript source text\n is always empty.\n            \n\n\n\n\n\n27.5.3 Generator Abstract Operations\n\n27.5.3.1 GeneratorStart ( generator, generatorBody )\nThe abstract operation GeneratorStart takes arguments generator and generatorBody (a FunctionBody Parse Node or an Abstract Closure with no parameters) and returns unused. It performs the following steps when called:\n1. Assert: The value of generator.[[GeneratorState]] is undefined.2. Let genContext be the running execution context.3. Set the Generator component of genContext to generator.4. Set the code evaluation state of genContext such that when evaluation is resumed for that execution context the following steps will be performed:a. If generatorBody is a Parse Node, theni. Let result be the result of evaluating generatorBody.b. Else,i. Assert: generatorBody is an Abstract Closure with no parameters.ii. Let result be generatorBody().c. Assert: If we return here, the generator either threw an exception or performed either an implicit or explicit return.d. Remove genContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.e. Set generator.[[GeneratorState]] to completed.f. Once a generator enters the completed state it never leaves it and its associated execution context is never resumed. Any execution state associated with generator can be discarded at this point.g. If result.[[Type]] is normal, let resultValue be undefined.h. Else if result.[[Type]] is return, let resultValue be result.[[Value]].i. Else,i. Assert: result.[[Type]] is throw.ii. Return ?\u00a0result.j. Return CreateIterResultObject(resultValue, true).5. Set generator.[[GeneratorContext]] to genContext.6. Set generator.[[GeneratorState]] to suspendedStart.7. Return unused.\n\n\n27.5.3.2 GeneratorValidate ( generator, generatorBrand )\nThe abstract operation GeneratorValidate takes arguments generator and generatorBrand and returns either a normal completion containing either suspendedStart, suspendedYield, or completed, or an abrupt completion. It performs the following steps when called:\n1. Perform ?\u00a0RequireInternalSlot(generator, [[GeneratorState]]).2. Perform ?\u00a0RequireInternalSlot(generator, [[GeneratorBrand]]).3. If generator.[[GeneratorBrand]] is not the same value as generatorBrand, throw a TypeError exception.4. Assert: generator also has a [[GeneratorContext]] internal slot.5. Let state be generator.[[GeneratorState]].6. If state is executing, throw a TypeError exception.7. Return state.\n\n\n27.5.3.3 GeneratorResume ( generator, value, generatorBrand )\nThe abstract operation GeneratorResume takes arguments generator, value, and generatorBrand and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let state be ?\u00a0GeneratorValidate(generator, generatorBrand).2. If state is completed, return CreateIterResultObject(undefined, true).3. Assert: state is either suspendedStart or suspendedYield.4. Let genContext be generator.[[GeneratorContext]].5. Let methodContext be the running execution context.6. Suspend methodContext.7. Set generator.[[GeneratorState]] to executing.8. Push genContext onto the execution context stack; genContext is now the running execution context.9. Resume the suspended evaluation of genContext using NormalCompletion(value) as the result of the operation that suspended it. Let result be the value returned by the resumed computation.10. Assert: When we return here, genContext has already been removed from the execution context stack and methodContext is the currently running execution context.11. Return ?\u00a0result.\n\n\n27.5.3.4 GeneratorResumeAbrupt ( generator, abruptCompletion, generatorBrand )\nThe abstract operation GeneratorResumeAbrupt takes arguments generator, abruptCompletion (a return completion or a throw completion), and generatorBrand and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let state be ?\u00a0GeneratorValidate(generator, generatorBrand).2. If state is suspendedStart, thena. Set generator.[[GeneratorState]] to completed.b. Once a generator enters the completed state it never leaves it and its associated execution context is never resumed. Any execution state associated with generator can be discarded at this point.c. Set state to completed.3. If state is completed, thena. If abruptCompletion.[[Type]] is return, theni. Return CreateIterResultObject(abruptCompletion.[[Value]], true).b. Return ?\u00a0abruptCompletion.4. Assert: state is suspendedYield.5. Let genContext be generator.[[GeneratorContext]].6. Let methodContext be the running execution context.7. Suspend methodContext.8. Set generator.[[GeneratorState]] to executing.9. Push genContext onto the execution context stack; genContext is now the running execution context.10. Resume the suspended evaluation of genContext using abruptCompletion as the result of the operation that suspended it. Let result be the Completion Record returned by the resumed computation.11. Assert: When we return here, genContext has already been removed from the execution context stack and methodContext is the currently running execution context.12. Return ?\u00a0result.\n\n\n27.5.3.5 GetGeneratorKind ( )\nThe abstract operation GetGeneratorKind takes no arguments and returns non-generator, sync, or async. It performs the following steps when called:\n1. Let genContext be the running execution context.2. If genContext does not have a Generator component, return non-generator.3. Let generator be the Generator component of genContext.4. If generator has an [[AsyncGeneratorState]] internal slot, return async.5. Else, return sync.\n\n\n27.5.3.6 GeneratorYield ( iterNextObj )\nThe abstract operation GeneratorYield takes argument iterNextObj (an Object that conforms to the IteratorResult interface) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let genContext be the running execution context.2. Assert: genContext is the execution context of a generator.3. Let generator be the value of the Generator component of genContext.4. Assert: GetGeneratorKind() is sync.5. Set generator.[[GeneratorState]] to suspendedYield.6. Remove genContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.7. Set the code evaluation state of genContext such that when evaluation is resumed with a Completion Record resumptionValue the following steps will be performed:a. Return resumptionValue.b. NOTE: This returns to the evaluation of the YieldExpression that originally called this abstract operation.8. Return iterNextObj.9. NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of genContext.\n\n\n27.5.3.7 Yield ( value )\nThe abstract operation Yield takes argument value (an ECMAScript language value) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let generatorKind be GetGeneratorKind().2. If generatorKind is async, return ?\u00a0AsyncGeneratorYield(value).3. Otherwise, return ?\u00a0GeneratorYield(CreateIterResultObject(value, false)).\n\n\n27.5.3.8 CreateIteratorFromClosure ( closure, generatorBrand, generatorPrototype )\nThe abstract operation CreateIteratorFromClosure takes arguments closure (an Abstract Closure with no parameters), generatorBrand, and generatorPrototype (an Object) and returns a Generator. It performs the following steps when called:\n1. NOTE: closure can contain uses of the Yield shorthand to yield an IteratorResult object.2. Let internalSlotsList be \u00ab [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] \u00bb.3. Let generator be OrdinaryObjectCreate(generatorPrototype, internalSlotsList).4. Set generator.[[GeneratorBrand]] to generatorBrand.5. Set generator.[[GeneratorState]] to undefined.6. Let callerContext be the running execution context.7. Let calleeContext be a new execution context.8. Set the Function of calleeContext to null.9. Set the Realm of calleeContext to the current Realm Record.10. Set the ScriptOrModule of calleeContext to callerContext's ScriptOrModule.11. If callerContext is not already suspended, suspend callerContext.12. Push calleeContext onto the execution context stack; calleeContext is now the running execution context.13. Perform GeneratorStart(generator, closure).14. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.15. Return generator.\n\n\n\n\n27.6 AsyncGenerator Objects\nAn AsyncGenerator is an instance of an async generator function \nand conforms to both the AsyncIterator and AsyncIterable interfaces.\nAsyncGenerator instances directly inherit properties from the object that is the initial value of the \"prototype\"\n property of the AsyncGenerator function that created the instance. \nAsyncGenerator instances indirectly inherit properties from the \nAsyncGenerator Prototype intrinsic, %AsyncGeneratorFunction.prototype.prototype%.\n\n27.6.1 Properties of the AsyncGenerator Prototype Object\nThe AsyncGenerator prototype object:\n\nis %AsyncGeneratorFunction.prototype.prototype%.\nis an ordinary object.\nis not an AsyncGenerator instance and does not have an [[AsyncGeneratorState]] internal slot.\nhas a [[Prototype]] internal slot whose value is %AsyncIteratorPrototype%.\nhas properties that are indirectly inherited by all AsyncGenerator instances.\n\n\n27.6.1.1 AsyncGenerator.prototype.constructor\nThe initial value of AsyncGenerator.prototype.constructor is %AsyncGeneratorFunction.prototype%.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.6.1.2 AsyncGenerator.prototype.next ( value )\n1. Let generator be the this value.2. Let promiseCapability be !\u00a0NewPromiseCapability(%Promise%).3. Let result be Completion(AsyncGeneratorValidate(generator, empty)).4. IfAbruptRejectPromise(result, promiseCapability).5. Let state be generator.[[AsyncGeneratorState]].6. If state is completed, thena. Let iteratorResult be CreateIterResultObject(undefined, true).b. Perform !\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab iteratorResult \u00bb).c. Return promiseCapability.[[Promise]].7. Let completion be NormalCompletion(value).8. Perform AsyncGeneratorEnqueue(generator, completion, promiseCapability).9. If state is either suspendedStart or suspendedYield, thena. Perform AsyncGeneratorResume(generator, completion).10. Else,a. Assert: state is either executing or awaiting-return.11. Return promiseCapability.[[Promise]].\n\n\n27.6.1.3 AsyncGenerator.prototype.return ( value )\n1. Let generator be the this value.2. Let promiseCapability be !\u00a0NewPromiseCapability(%Promise%).3. Let result be Completion(AsyncGeneratorValidate(generator, empty)).4. IfAbruptRejectPromise(result, promiseCapability).5. Let completion be Completion Record { [[Type]]: return, [[Value]]: value, [[Target]]: empty }.6. Perform AsyncGeneratorEnqueue(generator, completion, promiseCapability).7. Let state be generator.[[AsyncGeneratorState]].8. If state is either suspendedStart or completed, thena. Set generator.[[AsyncGeneratorState]] to awaiting-return.b. Perform !\u00a0AsyncGeneratorAwaitReturn(generator).9. Else if state is suspendedYield, thena. Perform AsyncGeneratorResume(generator, completion).10. Else,a. Assert: state is either executing or awaiting-return.11. Return promiseCapability.[[Promise]].\n\n\n27.6.1.4 AsyncGenerator.prototype.throw ( exception )\n1. Let generator be the this value.2. Let promiseCapability be !\u00a0NewPromiseCapability(%Promise%).3. Let result be Completion(AsyncGeneratorValidate(generator, empty)).4. IfAbruptRejectPromise(result, promiseCapability).5. Let state be generator.[[AsyncGeneratorState]].6. If state is suspendedStart, thena. Set generator.[[AsyncGeneratorState]] to completed.b. Set state to completed.7. If state is completed, thena. Perform !\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab exception \u00bb).b. Return promiseCapability.[[Promise]].8. Let completion be ThrowCompletion(exception).9. Perform AsyncGeneratorEnqueue(generator, completion, promiseCapability).10. If state is suspendedYield, thena. Perform AsyncGeneratorResume(generator, completion).11. Else,a. Assert: state is either executing or awaiting-return.12. Return promiseCapability.[[Promise]].\n\n\n27.6.1.5 AsyncGenerator.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"AsyncGenerator\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n27.6.2 Properties of AsyncGenerator Instances\nAsyncGenerator instances are initially created with the internal slots described below:\nTable 85: Internal Slots of AsyncGenerator Instances\n\n\nInternal Slot\nType\nDescription\n\n\n[[AsyncGeneratorState]]\nundefined, suspendedStart, suspendedYield, executing, awaiting-return, or completed\nThe current execution state of the async generator.\n\n\n[[AsyncGeneratorContext]]\nan execution context\nThe execution context that is used when executing the code of this async generator.\n\n\n[[AsyncGeneratorQueue]]\na List of AsyncGeneratorRequest Records\nRecords\n which represent requests to resume the async generator. Except during \nstate transitions, it is nonempty if and only if [[AsyncGeneratorState]]\n is either executing or awaiting-return.\n\n\n[[GeneratorBrand]]\na String or empty\nA brand used to distinguish different kinds of async \ngenerators. The [[GeneratorBrand]] of async generators declared by \nECMAScript source text is always empty.\n\n\n\n\n\n27.6.3 AsyncGenerator Abstract Operations\n\n27.6.3.1 AsyncGeneratorRequest Records\nAn AsyncGeneratorRequest is a Record\n value used to store information about how an async generator should be \nresumed and contains capabilities for fulfilling or rejecting the \ncorresponding promise.\nThey have the following fields:\nTable 86: AsyncGeneratorRequest Record Fields\n\n\nField Name\nValue\nMeaning\n\n\n[[Completion]]\na Completion Record\nThe Completion Record which should be used to resume the async generator.\n\n\n[[Capability]]\na PromiseCapability Record\nThe promise capabilities associated with this request.\n\n\n\n\n\n27.6.3.2 AsyncGeneratorStart ( generator, generatorBody )\nThe abstract operation AsyncGeneratorStart takes arguments generator (an AsyncGenerator) and generatorBody (a FunctionBody Parse Node or an Abstract Closure with no parameters) and returns unused. It performs the following steps when called:\n1. Assert: generator.[[AsyncGeneratorState]] is undefined.2. Let genContext be the running execution context.3. Set the Generator component of genContext to generator.4. Set the code evaluation state of genContext such that when evaluation is resumed for that execution context the following steps will be performed:a. If generatorBody is a Parse Node, theni. Let result be the result of evaluating generatorBody.b. Else,i. Assert: generatorBody is an Abstract Closure with no parameters.ii. Let result be Completion(generatorBody()).c. Assert: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.d. Remove genContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.e. Set generator.[[AsyncGeneratorState]] to completed.f. If result.[[Type]] is normal, set result to NormalCompletion(undefined).g. If result.[[Type]] is return, set result to NormalCompletion(result.[[Value]]).h. Perform AsyncGeneratorCompleteStep(generator, result, true).i. Perform AsyncGeneratorDrainQueue(generator).j. Return undefined.5. Set generator.[[AsyncGeneratorContext]] to genContext.6. Set generator.[[AsyncGeneratorState]] to suspendedStart.7. Set generator.[[AsyncGeneratorQueue]] to a new empty List.8. Return unused.\n\n\n27.6.3.3 AsyncGeneratorValidate ( generator, generatorBrand )\nThe abstract operation AsyncGeneratorValidate takes arguments generator and generatorBrand and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Perform ?\u00a0RequireInternalSlot(generator, [[AsyncGeneratorContext]]).2. Perform ?\u00a0RequireInternalSlot(generator, [[AsyncGeneratorState]]).3. Perform ?\u00a0RequireInternalSlot(generator, [[AsyncGeneratorQueue]]).4. If generator.[[GeneratorBrand]] is not the same value as generatorBrand, throw a TypeError exception.5. Return unused.\n\n\n27.6.3.4 AsyncGeneratorEnqueue ( generator, completion, promiseCapability )\nThe abstract operation AsyncGeneratorEnqueue takes arguments generator (an AsyncGenerator), completion (a Completion Record), and promiseCapability (a PromiseCapability Record) and returns unused. It performs the following steps when called:\n1. Let request be AsyncGeneratorRequest { [[Completion]]: completion, [[Capability]]: promiseCapability }.2. Append request to the end of generator.[[AsyncGeneratorQueue]].3. Return unused.\n\n\n27.6.3.5 AsyncGeneratorCompleteStep ( generator, completion, done [ , realm ] )\nThe abstract operation AsyncGeneratorCompleteStep takes arguments generator (an AsyncGenerator), completion (a Completion Record), and done (a Boolean) and optional argument realm (a Realm Record) and returns unused. It performs the following steps when called:\n1. Let queue be generator.[[AsyncGeneratorQueue]].2. Assert: queue is not empty.3. Let next be the first element of queue.4. Remove the first element from queue.5. Let promiseCapability be next.[[Capability]].6. Let value be completion.[[Value]].7. If completion.[[Type]] is throw, thena. Perform !\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab value \u00bb).8. Else,a. Assert: completion.[[Type]] is normal.b. If realm is present, theni. Let oldRealm be the running execution context's Realm.ii. Set the running execution context's Realm to realm.iii. Let iteratorResult be CreateIterResultObject(value, done).iv. Set the running execution context's Realm to oldRealm.c. Else,i. Let iteratorResult be CreateIterResultObject(value, done).d. Perform !\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab iteratorResult \u00bb).9. Return unused.\n\n\n27.6.3.6 AsyncGeneratorResume ( generator, completion )\nThe abstract operation AsyncGeneratorResume takes arguments generator (an AsyncGenerator) and completion (a Completion Record) and returns unused. It performs the following steps when called:\n1. Assert: generator.[[AsyncGeneratorState]] is either suspendedStart or suspendedYield.2. Let genContext be generator.[[AsyncGeneratorContext]].3. Let callerContext be the running execution context.4. Suspend callerContext.5. Set generator.[[AsyncGeneratorState]] to executing.6. Push genContext onto the execution context stack; genContext is now the running execution context.7. Resume the suspended evaluation of genContext using completion as the result of the operation that suspended it. Let result be the Completion Record returned by the resumed computation.8. Assert: result is never an abrupt completion.9. Assert: When we return here, genContext has already been removed from the execution context stack and callerContext is the currently running execution context.10. Return unused.\n\n\n27.6.3.7 AsyncGeneratorUnwrapYieldResumption ( resumptionValue )\nThe abstract operation AsyncGeneratorUnwrapYieldResumption takes argument resumptionValue (a Completion Record) and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. If resumptionValue.[[Type]] is not return, return ?\u00a0resumptionValue.2. Let awaited be Completion(Await(resumptionValue.[[Value]])).3. If awaited.[[Type]] is throw, return ?\u00a0awaited.4. Assert: awaited.[[Type]] is normal.5. Return Completion Record { [[Type]]: return, [[Value]]: awaited.[[Value]], [[Target]]: empty }.\n\n\n27.6.3.8 AsyncGeneratorYield ( value )\nThe abstract operation AsyncGeneratorYield takes argument value and returns either a normal completion containing an ECMAScript language value or an abrupt completion. It performs the following steps when called:\n1. Let genContext be the running execution context.2. Assert: genContext is the execution context of a generator.3. Let generator be the value of the Generator component of genContext.4. Assert: GetGeneratorKind() is async.5. Set value to ?\u00a0Await(value).6. Let completion be NormalCompletion(value).7. Assert: The execution context stack has at least two elements.8. Let previousContext be the second to top element of the execution context stack.9. Let previousRealm be previousContext's Realm.10. Perform AsyncGeneratorCompleteStep(generator, completion, false, previousRealm).11. Let queue be generator.[[AsyncGeneratorQueue]].12. If queue is not empty, thena. NOTE: Execution continues without suspending the generator.b. Let toYield be the first element of queue.c. Let resumptionValue be Completion(toYield.[[Completion]]).d. Return ?\u00a0AsyncGeneratorUnwrapYieldResumption(resumptionValue).13. Else,a. Set generator.[[AsyncGeneratorState]] to suspendedYield.b. Remove genContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.c. Set the code evaluation state of genContext such that when evaluation is resumed with a Completion Record resumptionValue the following steps will be performed:i. Return ?\u00a0AsyncGeneratorUnwrapYieldResumption(resumptionValue).ii. NOTE: When the above step returns, it returns to the evaluation of the YieldExpression production that originally called this abstract operation.d. Return undefined.e. NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of genContext.\n\n\n27.6.3.9 AsyncGeneratorAwaitReturn ( generator )\nThe abstract operation AsyncGeneratorAwaitReturn takes argument generator (an AsyncGenerator) and returns either a normal completion containing unused or an abrupt completion. It performs the following steps when called:\n1. Let queue be generator.[[AsyncGeneratorQueue]].2. Assert: queue is not empty.3. Let next be the first element of queue.4. Let completion be Completion(next.[[Completion]]).5. Assert: completion.[[Type]] is return.6. Let promise be ?\u00a0PromiseResolve(%Promise%, completion.[[Value]]).7. Let fulfilledClosure be a new Abstract Closure with parameters (value) that captures generator and performs the following steps when called:a. Set generator.[[AsyncGeneratorState]] to completed.b. Let result be NormalCompletion(value).c. Perform AsyncGeneratorCompleteStep(generator, result, true).d. Perform AsyncGeneratorDrainQueue(generator).e. Return undefined.8. Let onFulfilled be CreateBuiltinFunction(fulfilledClosure, 1, \"\", \u00ab \u00bb).9. Let rejectedClosure be a new Abstract Closure with parameters (reason) that captures generator and performs the following steps when called:a. Set generator.[[AsyncGeneratorState]] to completed.b. Let result be ThrowCompletion(reason).c. Perform AsyncGeneratorCompleteStep(generator, result, true).d. Perform AsyncGeneratorDrainQueue(generator).e. Return undefined.10. Let onRejected be CreateBuiltinFunction(rejectedClosure, 1, \"\", \u00ab \u00bb).11. Perform PerformPromiseThen(promise, onFulfilled, onRejected).12. Return unused.\n\n\n27.6.3.10 AsyncGeneratorDrainQueue ( generator )\nThe abstract operation AsyncGeneratorDrainQueue takes argument generator (an AsyncGenerator) and returns unused. It drains the generator's AsyncGeneratorQueue until it encounters an AsyncGeneratorRequest which holds a return completion. It performs the following steps when called:\n1. Assert: generator.[[AsyncGeneratorState]] is completed.2. Let queue be generator.[[AsyncGeneratorQueue]].3. If queue is empty, return unused.4. Let done be false.5. Repeat, while done is false,a. Let next be the first element of queue.b. Let completion be Completion(next.[[Completion]]).c. If completion.[[Type]] is return, theni. Set generator.[[AsyncGeneratorState]] to awaiting-return.ii. Perform !\u00a0AsyncGeneratorAwaitReturn(generator).iii. Set done to true.d. Else,i. If completion.[[Type]] is normal, then1. Set completion to NormalCompletion(undefined).ii. Perform AsyncGeneratorCompleteStep(generator, completion, true).iii. If queue is empty, set done to true.6. Return unused.\n\n\n27.6.3.11 CreateAsyncIteratorFromClosure ( closure, generatorBrand, generatorPrototype )\nThe abstract operation CreateAsyncIteratorFromClosure takes arguments closure (an Abstract Closure with no parameters), generatorBrand, and generatorPrototype (an Object) and returns an AsyncGenerator. It performs the following steps when called:\n1. NOTE: closure can contain uses of the Await shorthand and uses of the Yield shorthand to yield an IteratorResult object.2. Let internalSlotsList be \u00ab [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]], [[GeneratorBrand]] \u00bb.3. Let generator be OrdinaryObjectCreate(generatorPrototype, internalSlotsList).4. Set generator.[[GeneratorBrand]] to generatorBrand.5. Set generator.[[AsyncGeneratorState]] to undefined.6. Let callerContext be the running execution context.7. Let calleeContext be a new execution context.8. Set the Function of calleeContext to null.9. Set the Realm of calleeContext to the current Realm Record.10. Set the ScriptOrModule of calleeContext to callerContext's ScriptOrModule.11. If callerContext is not already suspended, suspend callerContext.12. Push calleeContext onto the execution context stack; calleeContext is now the running execution context.13. Perform AsyncGeneratorStart(generator, closure).14. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.15. Return generator.\n\n\n\n\n27.7 AsyncFunction Objects\nAsyncFunctions are functions that are usually created by evaluating AsyncFunctionDeclarations, AsyncFunctionExpressions, AsyncMethods, and AsyncArrowFunctions. They may also be created by calling the %AsyncFunction% intrinsic.\n\n27.7.1 The AsyncFunction Constructor\nThe AsyncFunction constructor:\n\nis %AsyncFunction%.\nis a subclass of Function.\ncreates and initializes a new AsyncFunction when called as a function rather than as a constructor. Thus the function call AsyncFunction(\u2026) is equivalent to the object creation expression new AsyncFunction(\u2026) with the same arguments.\nmay be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified AsyncFunction behaviour must include a super call to the AsyncFunction constructor\n to create and initialize a subclass instance with the internal slots \nnecessary for built-in async function behaviour. All ECMAScript \nsyntactic forms for defining async function objects create direct instances of AsyncFunction. There is no syntactic means to create instances of AsyncFunction subclasses.\n\n\n27.7.1.1 AsyncFunction ( p1, p2, \u2026 , pn, body )\nThe last argument specifies the body (executable code) of an async function. Any preceding arguments specify formal parameters.\nWhen the AsyncFunction function is called with some arguments p1, p2, \u2026 , pn, body (where n might be 0, that is, there are no p arguments, and where body might also not be provided), the following steps are taken:\n1. Let C be the active function object.2. Let args be the argumentsList that was passed to this function by [[Call]] or [[Construct]].3. Return ?\u00a0CreateDynamicFunction(C, NewTarget, async, args).\nNoteSee NOTE for 20.2.1.1.\n\n\n\n27.7.2 Properties of the AsyncFunction Constructor\nThe AsyncFunction constructor:\n\nis a standard built-in function object that inherits from the Function constructor.\nhas a [[Prototype]] internal slot whose value is %Function%.\nhas a \"name\" property whose value is \"AsyncFunction\".\nhas the following properties:\n\n\n27.7.2.1 AsyncFunction.length\nThis is a data property with a value of 1. This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.7.2.2 AsyncFunction.prototype\nThe initial value of AsyncFunction.prototype is the AsyncFunction prototype object.\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n27.7.3 Properties of the AsyncFunction Prototype Object\nThe AsyncFunction prototype object:\n\nis %AsyncFunction.prototype%.\nis an ordinary object.\nis not a function object and does not have an [[ECMAScriptCode]] internal slot or any other of the internal slots listed in Table 33.\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\n\n\n27.7.3.1 AsyncFunction.prototype.constructor\nThe initial value of AsyncFunction.prototype.constructor is %AsyncFunction%\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n27.7.3.2 AsyncFunction.prototype [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"AsyncFunction\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n27.7.4 AsyncFunction Instances\nEvery AsyncFunction instance is an ECMAScript function object and has the internal slots listed in Table 33. The value of the [[IsClassConstructor]] internal slot for all such instances is false. AsyncFunction instances are not constructors\n and do not have a [[Construct]] internal method. AsyncFunction \ninstances do not have a prototype property as they are not \nconstructible.\nEach AsyncFunction instance has the following own properties:\n\n27.7.4.1 length\nThe specification for the \"length\" property of Function instances given in 20.2.4.1 also applies to AsyncFunction instances.\n\n\n27.7.4.2 name\nThe specification for the \"name\" property of Function instances given in 20.2.4.2 also applies to AsyncFunction instances.\n\n\n\n27.7.5 Async Functions Abstract Operations\n\n27.7.5.1 AsyncFunctionStart ( promiseCapability, asyncFunctionBody )\nThe abstract operation AsyncFunctionStart takes arguments promiseCapability (a PromiseCapability Record) and asyncFunctionBody and returns unused. It performs the following steps when called:\n1. Let runningContext be the running execution context.2. Let asyncContext be a copy of runningContext.3. NOTE: Copying the execution state is required for AsyncBlockStart to resume its execution. It is ill-defined to resume a currently executing context.4. Perform AsyncBlockStart(promiseCapability, asyncFunctionBody, asyncContext).5. Return unused.\n\n\n27.7.5.2 AsyncBlockStart ( promiseCapability, asyncBody, asyncContext )\nThe abstract operation AsyncBlockStart takes arguments promiseCapability (a PromiseCapability Record), asyncBody (a Parse Node), and asyncContext (an execution context) and returns unused. It performs the following steps when called:\n1. Assert: promiseCapability is a PromiseCapability Record.2. Let runningContext be the running execution context.3. Set the code evaluation state of asyncContext such that when evaluation is resumed for that execution context the following steps will be performed:a. Let result be the result of evaluating asyncBody.b. Assert:\n If we return here, the async function either threw an exception or \nperformed an implicit or explicit return; all awaiting is done.c. Remove asyncContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.d. If result.[[Type]] is normal, theni. Perform !\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab undefined \u00bb).e. Else if result.[[Type]] is return, theni. Perform !\u00a0Call(promiseCapability.[[Resolve]], undefined, \u00ab result.[[Value]] \u00bb).f. Else,i. Assert: result.[[Type]] is throw.ii. Perform !\u00a0Call(promiseCapability.[[Reject]], undefined, \u00ab result.[[Value]] \u00bb).g. Return unused.4. Push asyncContext onto the execution context stack; asyncContext is now the running execution context.5. Resume the suspended evaluation of asyncContext. Let result be the value returned by the resumed computation.6. Assert: When we return here, asyncContext has already been removed from the execution context stack and runningContext is the currently running execution context.7. Assert: result is a normal completion with a value of unused. The possible sources of this value are Await or, if the async function doesn't await anything, step 3.g above.8. Return unused.\n\n\n\n\n\n28 Reflection\n\n28.1 The Reflect Object\nThe Reflect object:\n\nis %Reflect%.\nis the initial value of the \"Reflect\" property of the global object.\nis an ordinary object.\nhas a [[Prototype]] internal slot whose value is %Object.prototype%.\nis not a function object.\ndoes not have a [[Construct]] internal method; it cannot be used as a constructor with the new operator.\ndoes not have a [[Call]] internal method; it cannot be invoked as a function.\n\n\n28.1.1 Reflect.apply ( target, thisArgument, argumentsList )\nWhen the apply function is called with arguments target, thisArgument, and argumentsList, the following steps are taken:\n1. If IsCallable(target) is false, throw a TypeError exception.2. Let args be ?\u00a0CreateListFromArrayLike(argumentsList).3. Perform PrepareForTailCall().4. Return ?\u00a0Call(target, thisArgument, args).\n\n\n28.1.2 Reflect.construct ( target, argumentsList [ , newTarget ] )\nWhen the construct function is called with arguments target, argumentsList, and newTarget, the following steps are taken:\n1. If IsConstructor(target) is false, throw a TypeError exception.2. If newTarget is not present, set newTarget to target.3. Else if IsConstructor(newTarget) is false, throw a TypeError exception.4. Let args be ?\u00a0CreateListFromArrayLike(argumentsList).5. Return ?\u00a0Construct(target, args, newTarget).\n\n\n28.1.3 Reflect.defineProperty ( target, propertyKey, attributes )\nWhen the defineProperty function is called with arguments target, propertyKey, and attributes, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. Let key be ?\u00a0ToPropertyKey(propertyKey).3. Let desc be ?\u00a0ToPropertyDescriptor(attributes).4. Return ?\u00a0target.[[DefineOwnProperty]](key, desc).\n\n\n28.1.4 Reflect.deleteProperty ( target, propertyKey )\nWhen the deleteProperty function is called with arguments target and propertyKey, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. Let key be ?\u00a0ToPropertyKey(propertyKey).3. Return ?\u00a0target.[[Delete]](key).\n\n\n28.1.5 Reflect.get ( target, propertyKey [ , receiver ] )\nWhen the get function is called with arguments target, propertyKey, and receiver, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. Let key be ?\u00a0ToPropertyKey(propertyKey).3. If receiver is not present, thena. Set receiver to target.4. Return ?\u00a0target.[[Get]](key, receiver).\n\n\n28.1.6 Reflect.getOwnPropertyDescriptor ( target, propertyKey )\nWhen the getOwnPropertyDescriptor function is called with arguments target and propertyKey, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. Let key be ?\u00a0ToPropertyKey(propertyKey).3. Let desc be ?\u00a0target.[[GetOwnProperty]](key).4. Return FromPropertyDescriptor(desc).\n\n\n28.1.7 Reflect.getPrototypeOf ( target )\nWhen the getPrototypeOf function is called with argument target, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. Return ?\u00a0target.[[GetPrototypeOf]]().\n\n\n28.1.8 Reflect.has ( target, propertyKey )\nWhen the has function is called with arguments target and propertyKey, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. Let key be ?\u00a0ToPropertyKey(propertyKey).3. Return ?\u00a0target.[[HasProperty]](key).\n\n\n28.1.9 Reflect.isExtensible ( target )\nWhen the isExtensible function is called with argument target, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. Return ?\u00a0target.[[IsExtensible]]().\n\n\n28.1.10 Reflect.ownKeys ( target )\nWhen the ownKeys function is called with argument target, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. Let keys be ?\u00a0target.[[OwnPropertyKeys]]().3. Return CreateArrayFromList(keys).\n\n\n28.1.11 Reflect.preventExtensions ( target )\nWhen the preventExtensions function is called with argument target, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. Return ?\u00a0target.[[PreventExtensions]]().\n\n\n28.1.12 Reflect.set ( target, propertyKey, V [ , receiver ] )\nWhen the set function is called with arguments target, V, propertyKey, and receiver, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. Let key be ?\u00a0ToPropertyKey(propertyKey).3. If receiver is not present, thena. Set receiver to target.4. Return ?\u00a0target.[[Set]](key, V, receiver).\n\n\n28.1.13 Reflect.setPrototypeOf ( target, proto )\nWhen the setPrototypeOf function is called with arguments target and proto, the following steps are taken:\n1. If Type(target) is not Object, throw a TypeError exception.2. If Type(proto) is not Object and proto is not null, throw a TypeError exception.3. Return ?\u00a0target.[[SetPrototypeOf]](proto).\n\n\n28.1.14 Reflect [ @@toStringTag ]\nThe initial value of the @@toStringTag property is the String value \"Reflect\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n\n\n28.2 Proxy Objects\n\n28.2.1 The Proxy Constructor\nThe Proxy constructor:\n\nis %Proxy%.\nis the initial value of the \"Proxy\" property of the global object.\ncreates and initializes a new Proxy object when called as a constructor.\nis not intended to be called as a function and will throw an exception when called in that manner.\n\n\n28.2.1.1 Proxy ( target, handler )\nWhen Proxy is called with arguments target and handler, it performs the following steps:\n1. If NewTarget is undefined, throw a TypeError exception.2. Return ?\u00a0ProxyCreate(target, handler).\n\n\n\n28.2.2 Properties of the Proxy Constructor\nThe Proxy constructor:\n\nhas a [[Prototype]] internal slot whose value is %Function.prototype%.\ndoes not have a \"prototype\" property because Proxy objects do not have a [[Prototype]] internal slot that requires initialization.\nhas the following properties:\n\n\n28.2.2.1 Proxy.revocable ( target, handler )\nThe Proxy.revocable function is used to create a revocable Proxy object. When Proxy.revocable is called with arguments target and handler, the following steps are taken:\n1. Let p be ?\u00a0ProxyCreate(target, handler).2. Let revokerClosure be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:a. Let F be the active function object.b. Let p be F.[[RevocableProxy]].c. If p is null, return undefined.d. Set F.[[RevocableProxy]] to null.e. Assert: p is a Proxy object.f. Set p.[[ProxyTarget]] to null.g. Set p.[[ProxyHandler]] to null.h. Return undefined.3. Let revoker be CreateBuiltinFunction(revokerClosure, 0, \"\", \u00ab [[RevocableProxy]] \u00bb).4. Set revoker.[[RevocableProxy]] to p.5. Let result be OrdinaryObjectCreate(%Object.prototype%).6. Perform !\u00a0CreateDataPropertyOrThrow(result, \"proxy\", p).7. Perform !\u00a0CreateDataPropertyOrThrow(result, \"revoke\", revoker).8. Return result.\n\n\n\n\n28.3 Module Namespace Objects\nA Module Namespace Object is a module namespace exotic object that provides runtime property-based access to a module's exported bindings. There is no constructor function for Module Namespace Objects. Instead, such an object is created for each module that is imported by an ImportDeclaration that contains a NameSpaceImport.\nIn addition to the properties specified in 10.4.6 each Module Namespace Object has the following own property:\n\n28.3.1 @@toStringTag\nThe initial value of the @@toStringTag property is the String value \"Module\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n\n\n\n\n29 Memory Model\nThe memory consistency model, or memory model, specifies the possible orderings of Shared Data Block events,\n arising via accessing TypedArray instances backed by a \nSharedArrayBuffer and via methods on the Atomics object. When the \nprogram has no data races (defined below), the ordering of events \nappears as sequentially consistent, i.e., as an interleaving of actions \nfrom each agent.\n When the program has data races, shared memory operations may appear \nsequentially inconsistent. For example, programs may exhibit \ncausality-violating behaviour and other astonishments. These \nastonishments arise from compiler transforms and the design of CPUs \n(e.g., out-of-order execution and speculation). The memory model defines\n both the precise conditions under which a program exhibits sequentially\n consistent behaviour as well as the possible values read from data \nraces. To wit, there is no undefined behaviour.\nThe memory model is defined as relational constraints on events introduced by abstract operations on SharedArrayBuffer or by methods on the Atomics object during an evaluation.\nNote\nThis section provides an axiomatic model on events introduced by the abstract operations\n on SharedArrayBuffers. It bears stressing that the model is not \nexpressible algorithmically, unlike the rest of this specification. The \nnondeterministic introduction of events by abstract operations\n is the interface between the operational semantics of ECMAScript \nevaluation and the axiomatic semantics of the memory model. The \nsemantics of these events is defined by considering graphs of all events\n in an evaluation. These are neither Static Semantics nor Runtime \nSemantics. There is no demonstrated algorithmic implementation, but \ninstead a set of constraints that determine if a particular event graph \nis allowed or disallowed.\n\n\n29.1 Memory Model Fundamentals\nShared memory accesses (reads and writes) are divided into two \ngroups, atomic accesses and data accesses, defined below. Atomic \naccesses are sequentially consistent, i.e., there is a strict total \nordering of events agreed upon by all agents in an agent cluster. Non-atomic accesses do not have a strict total ordering agreed upon by all agents, i.e., unordered.\nNote 1\nNo orderings weaker than sequentially consistent and stronger than unordered, such as release-acquire, are supported.\n\nA Shared Data Block event is either a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory Record.\nTable 87: ReadSharedMemory Event Fields\n\n\nField Name\nValue\nMeaning\n\n\n[[Order]]\nSeqCst or Unordered\nThe weakest ordering guaranteed by the memory model for the event.\n\n\n[[NoTear]]\na Boolean\nWhether this event is allowed to read from multiple write events on equal range as this event.\n\n\n[[Block]]\na Shared Data Block\nThe block the event operates on.\n\n\n[[ByteIndex]]\na non-negative integer\nThe byte address of the read in [[Block]].\n\n\n[[ElementSize]]\na non-negative integer\nThe size of the read.\n\n\n\nTable 88: WriteSharedMemory Event Fields\n\n\nField Name\nValue\nMeaning\n\n\n[[Order]]\nSeqCst, Unordered, or Init\nThe weakest ordering guaranteed by the memory model for the event.\n\n\n[[NoTear]]\na Boolean\nWhether this event is allowed to be read from multiple read events with equal range as this event.\n\n\n[[Block]]\na Shared Data Block\nThe block the event operates on.\n\n\n[[ByteIndex]]\na non-negative integer\nThe byte address of the write in [[Block]].\n\n\n[[ElementSize]]\na non-negative integer\nThe size of the write.\n\n\n[[Payload]]\na List\nThe List of byte values to be read by other events.\n\n\n\nTable 89: ReadModifyWriteSharedMemory Event Fields\n\n\nField Name\nValue\nMeaning\n\n\n[[Order]]\nSeqCst\nRead-modify-write events are always sequentially consistent.\n\n\n[[NoTear]]\ntrue\nRead-modify-write events cannot tear.\n\n\n[[Block]]\na Shared Data Block\nThe block the event operates on.\n\n\n[[ByteIndex]]\na non-negative integer\nThe byte address of the read-modify-write in [[Block]].\n\n\n[[ElementSize]]\na non-negative integer\nThe size of the read-modify-write.\n\n\n[[Payload]]\na List\nThe List of byte values to be passed to [[ModifyOp]].\n\n\n[[ModifyOp]]\na read-modify-write modification function\nAn abstract closure that returns a modified List of byte values from a read List of byte values and [[Payload]].\n\n\n\nThese events are introduced by abstract operations or by methods on the Atomics object.\nSome operations may also introduce Synchronize events. A Synchronize event has no fields, and exists purely to directly constrain the permitted orderings of other events.\nIn addition to Shared Data Block and Synchronize events, there are host-specific events.\nLet the range of a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event be the Set of contiguous integers\n from its [[ByteIndex]] to [[ByteIndex]] + [[ElementSize]] - 1. Two \nevents' ranges are equal when the events have the same [[Block]], and \nthe ranges are element-wise equal. Two events' ranges are overlapping \nwhen the events have the same [[Block]], the ranges are not equal and \ntheir intersection is non-empty. Two events' ranges are disjoint when \nthe events do not have the same [[Block]] or their ranges are neither \nequal nor overlapping.\nNote 2\nExamples of host-specific synchronizing events that should be accounted for are: sending a SharedArrayBuffer from one agent to another (e.g., by postMessage in a browser), starting and stopping agents, and communicating within the agent cluster via channels other than shared memory. It is assumed those events are appended to agent-order during evaluation like the other SharedArrayBuffer events.\n\nEvents are ordered within candidate executions by the relations defined below.\n\n\n29.2 Agent Events Records\nAn Agent Events Record is a Record with the following fields.\nTable 90: Agent Events Record Fields\n\n\nField Name\nValue\nMeaning\n\n\n[[AgentSignifier]]\nan agent signifier\nThe agent whose evaluation resulted in this ordering.\n\n\n[[EventList]]\na List of events\nEvents are appended to the list during evaluation.\n\n\n[[AgentSynchronizesWith]]\na List of pairs of Synchronize events\nSynchronize relationships introduced by the operational semantics.\n\n\n\n\n\n29.3 Chosen Value Records\nA Chosen Value Record is a Record with the following fields.\nTable 91: Chosen Value Record Fields\n\n\nField Name\nValue\nMeaning\n\n\n[[Event]]\na Shared Data Block event\nThe ReadSharedMemory or ReadModifyWriteSharedMemory event that was introduced for this chosen value.\n\n\n[[ChosenValue]]\na List of byte values\nThe bytes that were nondeterministically chosen during evaluation.\n\n\n\n\n\n29.4 Candidate Executions\nA candidate execution of the evaluation of an agent cluster is a Record with the following fields.\nTable 92: Candidate Execution Record Fields\n\n\nField Name\nValue\nMeaning\n\n\n[[EventsRecords]]\na List of Agent Events Records\nMaps an agent to Lists of events appended during the evaluation.\n\n\n[[ChosenValues]]\na List of Chosen Value Records\nMaps ReadSharedMemory or ReadModifyWriteSharedMemory events to the List of byte values chosen during the evaluation.\n\n\n[[AgentOrder]]\nan agent-order Relation\nDefined below.\n\n\n[[ReadsBytesFrom]]\na reads-bytes-from mathematical function\nDefined below.\n\n\n[[ReadsFrom]]\na reads-from Relation\nDefined below.\n\n\n[[HostSynchronizesWith]]\na host-synchronizes-with Relation\nDefined below.\n\n\n[[SynchronizesWith]]\na synchronizes-with Relation\nDefined below.\n\n\n[[HappensBefore]]\na happens-before Relation\nDefined below.\n\n\n\nAn empty candidate execution is a candidate execution Record whose fields are empty Lists and Relations.\n\n\n29.5 Abstract Operations for the Memory Model\n\n29.5.1 EventSet ( execution )\nThe abstract operation EventSet takes argument execution (a candidate execution) and returns a Set of events. It performs the following steps when called:\n1. Let events be an empty Set.2. For each Agent Events Record aer of execution.[[EventsRecords]], doa. For each event E of aer.[[EventList]], doi. Add E to events.3. Return events.\n\n\n29.5.2 SharedDataBlockEventSet ( execution )\nThe abstract operation SharedDataBlockEventSet takes argument execution (a candidate execution) and returns a Set of events. It performs the following steps when called:\n1. Let events be an empty Set.2. For each event E of EventSet(execution), doa. If E is a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event, add E to events.3. Return events.\n\n\n29.5.3 HostEventSet ( execution )\nThe abstract operation HostEventSet takes argument execution (a candidate execution) and returns a Set of events. It performs the following steps when called:\n1. Let events be an empty Set.2. For each event E of EventSet(execution), doa. If E is not in SharedDataBlockEventSet(execution), add E to events.3. Return events.\n\n\n29.5.4 ComposeWriteEventBytes ( execution, byteIndex, Ws )\nThe abstract operation ComposeWriteEventBytes takes arguments execution (a candidate execution), byteIndex (a non-negative integer), and Ws (a List of either WriteSharedMemory or ReadModifyWriteSharedMemory events) and returns a List of byte values. It performs the following steps when called:\n1. Let byteLocation be byteIndex.2. Let bytesRead be a new empty List.3. For each element W of Ws, doa. Assert: W has byteLocation in its range.b. Let payloadIndex be byteLocation - W.[[ByteIndex]].c. If W is a WriteSharedMemory event, theni. Let byte be W.[[Payload]][payloadIndex].d. Else,i. Assert: W is a ReadModifyWriteSharedMemory event.ii. Let bytes be ValueOfReadEvent(execution, W).iii. Let bytesModified be W.[[ModifyOp]](bytes, W.[[Payload]]).iv. Let byte be bytesModified[payloadIndex].e. Append byte to bytesRead.f. Set byteLocation to byteLocation + 1.4. Return bytesRead.\nNote 1\nThe read-modify-write modification [[ModifyOp]] is given by the function properties on the Atomics object that introduce ReadModifyWriteSharedMemory events.\n\nNote 2\nThis abstract operation composes a List of write events into a List of byte values. It is used in the event semantics of ReadSharedMemory and ReadModifyWriteSharedMemory events.\n\n\n\n29.5.5 ValueOfReadEvent ( execution, R )\nThe abstract operation ValueOfReadEvent takes arguments execution (a candidate execution) and R (a ReadSharedMemory or ReadModifyWriteSharedMemory event) and returns a List of byte values. It performs the following steps when called:\n1. Let Ws be execution.[[ReadsBytesFrom]](R).2. Assert: Ws is a List of WriteSharedMemory or ReadModifyWriteSharedMemory events with length equal to R.[[ElementSize]].3. Return ComposeWriteEventBytes(execution, R.[[ByteIndex]], Ws).\n\n\n\n29.6 Relations of Candidate Executions\n\n29.6.1 agent-order\nFor a candidate execution execution, execution.[[AgentOrder]] is a Relation on events that satisfies the following.\n\nFor each pair (E, D) in EventSet(execution), (E, D) is in execution.[[AgentOrder]] if there is some Agent Events Record aer in execution.[[EventsRecords]] such that E and D are in aer.[[EventList]] and E is before D in List order of aer.[[EventList]].\n\nNote\nEach agent introduces events in a per-agent strict total order during the evaluation. This is the union of those strict total orders.\n\n\n\n29.6.2 reads-bytes-from\nFor a candidate execution execution, execution.[[ReadsBytesFrom]] is a mathematical function mapping events in SharedDataBlockEventSet(execution) to Lists of events in SharedDataBlockEventSet(execution) that satisfies the following conditions.\n\n\nFor each ReadSharedMemory or ReadModifyWriteSharedMemory event R in SharedDataBlockEventSet(execution), execution.[[ReadsBytesFrom]](R) is a List of length R.[[ElementSize]] whose elements are WriteSharedMemory or ReadModifyWriteSharedMemory events Ws such that all of the following are true.\n\nEach event W with index i in Ws has R.[[ByteIndex]] + i in its range.\nR is not in Ws.\n\n\n\n\n\n29.6.3 reads-from\nFor a candidate execution execution, execution.[[ReadsFrom]] is the least Relation on events that satisfies the following.\n\nFor each pair (R, W) in SharedDataBlockEventSet(execution), (R, W) is in execution.[[ReadsFrom]] if W is in execution.[[ReadsBytesFrom]](R).\n\n\n\n29.6.4 host-synchronizes-with\nFor a candidate execution execution, execution.[[HostSynchronizesWith]] is a host-provided strict partial order on host-specific events that satisfies at least the following.\n\nIf (E, D) is in execution.[[HostSynchronizesWith]], E and D are in HostEventSet(execution).\nThere is no cycle in the union of execution.[[HostSynchronizesWith]] and execution.[[AgentOrder]].\n\nNote 1\nFor two host-specific events E and D, E host-synchronizes-with D implies E happens-before D.\n\nNote 2\nThe host-synchronizes-with relation allows the host to provide additional synchronization mechanisms, such as postMessage between HTML workers.\n\n\n\n29.6.5 synchronizes-with\nFor a candidate execution execution, execution.[[SynchronizesWith]] is the least Relation on events that satisfies the following.\n\n\n          For each pair (R, W) in execution.[[ReadsFrom]], (W, R) is in execution.[[SynchronizesWith]] if R.[[Order]] is SeqCst, W.[[Order]] is SeqCst, and R and W have equal ranges.\n        \n\n          For each element eventsRecord of execution.[[EventsRecords]], the following is true.\n          \nFor each pair (S, Sw) in eventsRecord.[[AgentSynchronizesWith]], (S, Sw) is in execution.[[SynchronizesWith]].\n\n\nFor each pair (E, D) in execution.[[HostSynchronizesWith]], (E, D) is in execution.[[SynchronizesWith]].\n\nNote 1\nOwing to convention, write events synchronizes-with read events, instead of read events synchronizes-with write events.\n\nNote 2\nInit events do not participate in synchronizes-with, and are instead constrained directly by happens-before.\n\nNote 3\nNot all SeqCst events related by reads-from are related by synchronizes-with. Only events that also have equal ranges are related by synchronizes-with.\n\nNote 4\nFor Shared Data Block events R and W such that W synchronizes-with R, R may reads-from other writes than W.\n\n\n\n29.6.6 happens-before\nFor a candidate execution execution, execution.[[HappensBefore]] is the least Relation on events that satisfies the following.\n\nFor each pair (E, D) in execution.[[AgentOrder]], (E, D) is in execution.[[HappensBefore]].\nFor each pair (E, D) in execution.[[SynchronizesWith]], (E, D) is in execution.[[HappensBefore]].\nFor each pair (E, D) in SharedDataBlockEventSet(execution), (E, D) is in execution.[[HappensBefore]] if E.[[Order]] is Init and E and D have overlapping ranges.\nFor each pair (E, D) in EventSet(execution), (E, D) is in execution.[[HappensBefore]] if there is an event F such that the pairs (E, F) and (F, D) are in execution.[[HappensBefore]].\n\nNote\nBecause happens-before is a superset of agent-order, candidate executions are consistent with the single-thread evaluation semantics of ECMAScript.\n\n\n\n\n29.7 Properties of Valid Executions\n\n29.7.1 Valid Chosen Reads\nA candidate execution execution has valid chosen reads if the following algorithm returns true.\n1. For each ReadSharedMemory or ReadModifyWriteSharedMemory event R of SharedDataBlockEventSet(execution), doa. Let chosenValueRecord be the element of execution.[[ChosenValues]] whose [[Event]] field is R.b. Let chosenValue be chosenValueRecord.[[ChosenValue]].c. Let readValue be ValueOfReadEvent(execution, R).d. Let chosenLen be the number of elements of chosenValue.e. Let readLen be the number of elements of readValue.f. If chosenLen \u2260 readLen, theni. Return false.g. If chosenValue[i] \u2260 readValue[i] for any integer value i in the range 0 through chosenLen, exclusive, theni. Return false.2. Return true.\n\n\n29.7.2 Coherent Reads\nA candidate execution execution has coherent reads if the following algorithm returns true.\n1. For each ReadSharedMemory or ReadModifyWriteSharedMemory event R of SharedDataBlockEventSet(execution), doa. Let Ws be execution.[[ReadsBytesFrom]](R).b. Let byteLocation be R.[[ByteIndex]].c. For each element W of Ws, doi. If (R, W) is in execution.[[HappensBefore]], then1. Return false.ii. If there is a WriteSharedMemory or ReadModifyWriteSharedMemory event V that has byteLocation in its range such that the pairs (W, V) and (V, R) are in execution.[[HappensBefore]], then1. Return false.iii. Set byteLocation to byteLocation + 1.2. Return true.\n\n\n29.7.3 Tear Free Reads\nA candidate execution execution has tear free reads if the following algorithm returns true.\n1. For each ReadSharedMemory or ReadModifyWriteSharedMemory event R of SharedDataBlockEventSet(execution), doa. If R.[[NoTear]] is true, theni. Assert: The remainder of dividing R.[[ByteIndex]] by R.[[ElementSize]] is 0.ii. For each event W such that (R, W) is in execution.[[ReadsFrom]] and W.[[NoTear]] is true, do1. If R and W have equal ranges, and there is an event V such that V and W have equal ranges, V.[[NoTear]] is true, W is not V, and (R, V) is in execution.[[ReadsFrom]], thena. Return false.2. Return true.\nNote\nAn event's [[NoTear]] field is true when that event was introduced via accessing an integer TypedArray, and false when introduced via accessing a floating point TypedArray or DataView.\nIntuitively, this requirement says when a memory range is accessed in an aligned fashion via an integer\n TypedArray, a single write event on that range must \"win\" when in a \ndata race with other write events with equal ranges. More precisely, \nthis requirement says an aligned read event cannot read a value composed\n of bytes from multiple, different write events all with equal ranges. \nIt is possible, however, for an aligned read event to read from multiple\n write events with overlapping ranges.\n\n\n\n29.7.4 Sequentially Consistent Atomics\nFor a candidate execution execution, memory-order is a strict total order of all events in EventSet(execution) that satisfies the following.\n\nFor each pair (E, D) in execution.[[HappensBefore]], (E, D) is in memory-order.\n\nFor each pair (R, W) in execution.[[ReadsFrom]], there is no WriteSharedMemory or ReadModifyWriteSharedMemory event V in SharedDataBlockEventSet(execution) such that V.[[Order]] is SeqCst, the pairs (W, V) and (V, R) are in memory-order, and any of the following conditions are true.\n\nThe pair (W, R) is in execution.[[SynchronizesWith]], and V and R have equal ranges.\nThe pairs (W, R) and (V, R) are in execution.[[HappensBefore]], W.[[Order]] is SeqCst, and W and V have equal ranges.\nThe pairs (W, R) and (W, V) are in execution.[[HappensBefore]], R.[[Order]] is SeqCst, and V and R have equal ranges.\n\nNote 1\nThis clause additionally constrains SeqCst events on equal ranges.\n\n\n\nFor each WriteSharedMemory or ReadModifyWriteSharedMemory event W in SharedDataBlockEventSet(execution), if W.[[Order]] is SeqCst, then it is not the case that there is an infinite number of ReadSharedMemory or ReadModifyWriteSharedMemory events in SharedDataBlockEventSet(execution) with equal range that is memory-order before W.\nNote 2\nThis clause together with the forward progress guarantee on agents ensure the liveness condition that SeqCst writes become visible to SeqCst reads with equal range in finite time.\n\n\n\nA candidate execution has sequentially consistent atomics if a memory-order exists.\nNote 3\nWhile memory-order includes all events in EventSet(execution), those that are not constrained by happens-before or synchronizes-with are allowed to occur anywhere in the order.\n\n\n\n29.7.5 Valid Executions\nA candidate execution execution is a valid execution (or simply an execution) if all of the following are true.\n\nThe host provides a host-synchronizes-with Relation for execution.[[HostSynchronizesWith]].\nexecution.[[HappensBefore]] is a strict partial order.\nexecution has valid chosen reads.\nexecution has coherent reads.\nexecution has tear free reads.\nexecution has sequentially consistent atomics.\n\nAll programs have at least one valid execution.\n\n\n\n29.8 Races\nFor an execution execution, two events E and D in SharedDataBlockEventSet(execution) are in a race if the following algorithm returns true.\n1. If E is not D, thena. If the pairs (E, D) and (D, E) are not in execution.[[HappensBefore]], theni. If E and D are both WriteSharedMemory or ReadModifyWriteSharedMemory events and E and D do not have disjoint ranges, then1. Return true.ii. If either (E, D) or (D, E) is in execution.[[ReadsFrom]], then1. Return true.2. Return false.\n\n\n29.9 Data Races\nFor an execution execution, two events E and D in SharedDataBlockEventSet(execution) are in a data race if the following algorithm returns true.\n1. If E and D are in a race in execution, thena. If E.[[Order]] is not SeqCst or D.[[Order]] is not SeqCst, theni. Return true.b. If E and D have overlapping ranges, theni. Return true.2. Return false.\n\n\n29.10 Data Race Freedom\nAn execution execution is data race free if there are no two events in SharedDataBlockEventSet(execution) that are in a data race.\nA program is data race free if all its executions are data race free.\nThe memory model guarantees sequential consistency of all events for data race free programs.\n\n\n29.11 Shared Memory Guidelines\nNote 1\nThe following are guidelines for ECMAScript programmers working with shared memory.\nWe recommend programs be kept data race free, i.e., make it so \nthat it is impossible for there to be concurrent non-atomic operations \non the same memory location. Data race free programs have interleaving \nsemantics where each step in the evaluation semantics of each agent are interleaved with each other. For data race free programs, it is not necessary to understand the details of the memory model. The details are unlikely to build intuition that will help one to better write ECMAScript.\nMore generally, even if a program is not data race free it may \nhave predictable behaviour, so long as atomic operations are not \ninvolved in any data races and the operations that race all have the \nsame access size. The simplest way to arrange for atomics not to be \ninvolved in races is to ensure that different memory cells are used by \natomic and non-atomic operations and that atomic accesses of different \nsizes are not used to access the same cells at the same time. \nEffectively, the program should treat shared memory as strongly typed as\n much as possible. One still cannot depend on the ordering and timing of\n non-atomic accesses that race, but if memory is treated as strongly \ntyped the racing accesses will not \"tear\" (bits of their values will not\n be mixed).\n\nNote 2\nThe following are guidelines for ECMAScript implementers writing compiler transformations for programs using shared memory.\nIt is desirable to allow most program transformations that are valid in a single-agent setting in a multi-agent setting, to ensure that the performance of each agent in a multi-agent program is as good as it would be in a single-agent\n setting. Frequently these transformations are hard to judge. We outline\n some rules about program transformations that are intended to be taken \nas normative (in that they are implied by the memory model or stronger than what the memory model\n implies) but which are likely not exhaustive. These rules are intended \nto apply to program transformations that precede the introductions of \nthe events that make up the agent-order.\nLet an agent-order slice be the subset of the agent-order pertaining to a single agent.\nLet possible read values of a read event be the set of all values of ValueOfReadEvent for that event across all valid executions.\nAny transformation of an agent-order slice that is valid in the\n absence of shared memory is valid in the presence of shared memory, \nwith the following exceptions.\n\n\nAtomics are carved in stone: Program transformations must not cause the SeqCst events in an agent-order slice to be reordered with its Unordered operations, nor its SeqCst operations to be reordered with each other, nor may a program transformation remove a SeqCst operation from the agent-order.\n(In practice, the prohibition on reorderings forces a compiler to assume that every SeqCst operation is a synchronization and included in the final memory-order, which it would usually have to assume anyway in the absence of inter-agent program analysis. It also forces the compiler to assume that every call where the callee's effects on the memory-order are unknown may contain SeqCst operations.)\n\n\nReads must be stable: Any given shared memory read must only observe a single value in an execution.\n(For example, if what is semantically a single read in the \nprogram is executed multiple times then the program is subsequently \nallowed to observe only one of the values read. A transformation known \nas rematerialization can violate this rule.)\n\n\nWrites must be stable: All observable writes to shared memory must follow from program semantics in an execution.\n(For example, a transformation may not introduce certain \nobservable writes, such as by using read-modify-write operations on a \nlarger location to write a smaller datum, writing a value to memory that\n the program could not have written, or writing a just-read value back \nto the location it was read from, if that location could have been \noverwritten by another agent after the read.)\n\n\nPossible read values must be nonempty: Program transformations cannot cause the possible read values of a shared memory read to become empty.\n(Counterintuitively, this rule in effect restricts transformations on writes, because writes have force in memory model insofar as to be read by read events. For example, writes may be moved and coalesced and sometimes reordered between two SeqCst operations, but the transformation may not remove every write that updates a location; some write must be preserved.)\n\n\nExamples of transformations that remain valid are: merging \nmultiple non-atomic reads from the same location, reordering non-atomic \nreads, introducing speculative non-atomic reads, merging multiple \nnon-atomic writes to the same location, reordering non-atomic writes to \ndifferent locations, and hoisting non-atomic reads out of loops even if \nthat affects termination. Note in general that aliased TypedArrays make \nit hard to prove that locations are different.\n\nNote 3\nThe following are guidelines for ECMAScript implementers generating machine code for shared memory accesses.\nFor architectures with memory models no weaker than those of \nARM or Power, non-atomic stores and loads may be compiled to bare stores\n and loads on the target architecture. Atomic stores and loads may be \ncompiled down to instructions that guarantee sequential consistency. If \nno such instructions exist, memory barriers are to be employed, such as \nplacing barriers on both sides of a bare store or load. \nRead-modify-write operations may be compiled to read-modify-write \ninstructions on the target architecture, such as LOCK-prefixed\n instructions on x86, load-exclusive/store-exclusive instructions on \nARM, and load-link/store-conditional instructions on Power.\nSpecifically, the memory model is intended to allow code generation as follows.\n\nEvery atomic operation in the program is assumed to be necessary.\nAtomic operations are never rearranged with each other or with non-atomic operations.\nFunctions are always assumed to perform atomic operations.\nAtomic operations are never implemented as read-modify-write\n operations on larger data, but as non-lock-free atomics if the platform\n does not have atomic operations of the appropriate size. (We already \nassume that every platform has normal memory access operations of every \ninteresting size.)\n\nNaive code generation uses these patterns:\n\nRegular loads and stores compile to single load and store instructions.\nLock-free atomic loads and stores compile to a full (sequentially consistent) fence, a regular load or store, and a full fence.\nLock-free atomic read-modify-write accesses compile to a \nfull fence, an atomic read-modify-write instruction sequence, and a full\n fence.\nNon-lock-free atomics compile to a spinlock acquire, a full \nfence, a series of non-atomic load and store instructions, a full fence,\n and a spinlock release.\n\nThat mapping is correct so long as an atomic operation on an \naddress range does not race with a non-atomic write or with an atomic \noperation of different size. However, that is all we need: the memory model\n effectively demotes the atomic operations involved in a race to \nnon-atomic status. On the other hand, the naive mapping is quite strong:\n it allows atomic operations to be used as sequentially consistent \nfences, which the memory model does not actually guarantee.\nA number of local improvements to those basic patterns are also intended to be legal:\n\nThere are obvious platform-dependent improvements that \nremove redundant fences. For example, on x86 the fences around lock-free\n atomic loads and stores can always be omitted except for the fence \nfollowing a store, and no fence is needed for lock-free \nread-modify-write instructions, as these all use LOCK-prefixed\n instructions. On many platforms there are fences of several strengths, \nand weaker fences can be used in certain contexts without destroying \nsequential consistency.\nMost modern platforms support lock-free atomics for all the \ndata sizes required by ECMAScript atomics. Should non-lock-free atomics \nbe needed, the fences surrounding the body of the atomic operation can \nusually be folded into the lock and unlock steps. The simplest solution \nfor non-lock-free atomics is to have a single lock word per \nSharedArrayBuffer.\nThere are also more complicated platform-dependent local \nimprovements, requiring some code analysis. For example, two \nback-to-back fences often have the same effect as a single fence, so if \ncode is generated for two atomic operations in sequence, only a single \nfence need separate them. On x86, even a single fence separating atomic \nstores can be omitted, as the fence following a store is only needed to \nseparate the store from a subsequent load.\n\n\n\n\n\nA Grammar Summary\n\nA.1 Lexical Grammar\n\nSourceCharacter :: \nany Unicode code point\n\n\n\nInputElementDiv :: \nWhiteSpace\n\n\nLineTerminator\n\n\nComment\n\n\nCommonToken\n\n\nDivPunctuator\n\n\nRightBracePunctuator\n\n\n\nInputElementRegExp :: \nWhiteSpace\n\n\nLineTerminator\n\n\nComment\n\n\nCommonToken\n\n\nRightBracePunctuator\n\n\nRegularExpressionLiteral\n\n\n\nInputElementRegExpOrTemplateTail :: \nWhiteSpace\n\n\nLineTerminator\n\n\nComment\n\n\nCommonToken\n\n\nRegularExpressionLiteral\n\n\nTemplateSubstitutionTail\n\n\n\nInputElementTemplateTail :: \nWhiteSpace\n\n\nLineTerminator\n\n\nComment\n\n\nCommonToken\n\n\nDivPunctuator\n\n\nTemplateSubstitutionTail\n\n\n\nWhiteSpace :: \n<TAB>\n\n\n<VT>\n\n\n<FF>\n\n\n<ZWNBSP>\n\n\n<USP>\n\n\n\nLineTerminator :: \n<LF>\n\n\n<CR>\n\n\n<LS>\n\n\n<PS>\n\n\n\nLineTerminatorSequence :: \n<LF>\n\n\n<CR>\n[lookahead \u2260 <LF>]\n\n\n<LS>\n\n\n<PS>\n\n\n<CR>\n<LF>\n\n\n\nComment :: \nMultiLineComment\n\n\nSingleLineComment\n\n\n\nMultiLineComment :: \n/*\nMultiLineCommentCharsopt\n*/\n\n\n\nMultiLineCommentChars :: \nMultiLineNotAsteriskChar\nMultiLineCommentCharsopt\n\n\n*\nPostAsteriskCommentCharsopt\n\n\n\nPostAsteriskCommentChars :: \nMultiLineNotForwardSlashOrAsteriskChar\nMultiLineCommentCharsopt\n\n\n*\nPostAsteriskCommentCharsopt\n\n\n\nMultiLineNotAsteriskChar :: \nSourceCharacter but not *\n\n\n\nMultiLineNotForwardSlashOrAsteriskChar :: \nSourceCharacter but not one of / or *\n\n\n\nSingleLineComment :: \n//\nSingleLineCommentCharsopt\n\n\n\nSingleLineCommentChars :: \nSingleLineCommentChar\nSingleLineCommentCharsopt\n\n\n\nSingleLineCommentChar :: \nSourceCharacter but not LineTerminator\n\n\n\nCommonToken :: \nIdentifierName\n\n\nPrivateIdentifier\n\n\nPunctuator\n\n\nNumericLiteral\n\n\nStringLiteral\n\n\nTemplate\n\n\n\nPrivateIdentifier :: \n#\nIdentifierName\n\n\n\nIdentifierName :: \nIdentifierStart\n\n\nIdentifierName\nIdentifierPart\n\n\n\nIdentifierStart :: \nIdentifierStartChar\n\n\n\\\nUnicodeEscapeSequence\n\n\n\nIdentifierPart :: \nIdentifierPartChar\n\n\n\\\nUnicodeEscapeSequence\n\n\n\nIdentifierStartChar :: \nUnicodeIDStart\n\n\n$\n\n\n_\n\n\n\nIdentifierPartChar :: \nUnicodeIDContinue\n\n\n$\n\n\n<ZWNJ>\n\n\n<ZWJ>\n\n\n\nUnicodeIDStart :: \nany Unicode code point with the Unicode property \u201cID_Start\u201d\n\n\n\nUnicodeIDContinue :: \nany Unicode code point with the Unicode property \u201cID_Continue\u201d\n\n\n\nReservedWord :: one of await break case catch class const continue debugger default delete do else enum export extends false finally for function if import in instanceof new null return super switch this throw true try typeof var void while with yield\n\n\nPunctuator :: \nOptionalChainingPunctuator\n\n\nOtherPunctuator\n\n\n\nOptionalChainingPunctuator :: \n?.\n[lookahead \u2209 DecimalDigit]\n\n\n\nOtherPunctuator :: one of { ( ) [ ] . ... ; , < > <= >= == != === !== + - * % ** ++ -- << >> >>> & | ^ ! ~ && || ?? ? : = += -= *= %= **= <<= >>= >>>= &= |= ^= &&= ||= ??= =>\n\n\nDivPunctuator :: \n/\n\n\n/=\n\n\n\nRightBracePunctuator :: \n}\n\n\n\nNullLiteral :: \nnull\n\n\n\nBooleanLiteral :: \ntrue\n\n\nfalse\n\n\n\nNumericLiteralSeparator :: \n_\n\n\n\nNumericLiteral :: \nDecimalLiteral\n\n\nDecimalBigIntegerLiteral\n\n\nNonDecimalIntegerLiteral[+Sep]\n\n\nNonDecimalIntegerLiteral[+Sep]\nBigIntLiteralSuffix\n\n\nLegacyOctalIntegerLiteral\n\n\n\nDecimalBigIntegerLiteral :: \n0\nBigIntLiteralSuffix\n\n\nNonZeroDigit\nDecimalDigits[+Sep]opt\nBigIntLiteralSuffix\n\n\nNonZeroDigit\nNumericLiteralSeparator\nDecimalDigits[+Sep]\nBigIntLiteralSuffix\n\n\n\nNonDecimalIntegerLiteral[Sep] :: \nBinaryIntegerLiteral[?Sep]\n\n\nOctalIntegerLiteral[?Sep]\n\n\nHexIntegerLiteral[?Sep]\n\n\n\nBigIntLiteralSuffix :: \nn\n\n\n\nDecimalLiteral :: \nDecimalIntegerLiteral\n.\nDecimalDigits[+Sep]opt\nExponentPart[+Sep]opt\n\n\n.\nDecimalDigits[+Sep]\nExponentPart[+Sep]opt\n\n\nDecimalIntegerLiteral\nExponentPart[+Sep]opt\n\n\n\nDecimalIntegerLiteral :: \n0\n\n\nNonZeroDigit\n\n\nNonZeroDigit\nNumericLiteralSeparatoropt\nDecimalDigits[+Sep]\n\n\nNonOctalDecimalIntegerLiteral\n\n\n\nDecimalDigits[Sep] :: \nDecimalDigit\n\n\nDecimalDigits[?Sep]\nDecimalDigit\n\n[+Sep]\nDecimalDigits[+Sep]\nNumericLiteralSeparator\nDecimalDigit\n\n\n\nDecimalDigit :: one of 0 1 2 3 4 5 6 7 8 9\n\n\nNonZeroDigit :: one of 1 2 3 4 5 6 7 8 9\n\n\nExponentPart[Sep] :: \nExponentIndicator\nSignedInteger[?Sep]\n\n\n\nExponentIndicator :: one of e E\n\n\nSignedInteger[Sep] :: \nDecimalDigits[?Sep]\n\n\n+\nDecimalDigits[?Sep]\n\n\n-\nDecimalDigits[?Sep]\n\n\n\nBinaryIntegerLiteral[Sep] :: \n0b\nBinaryDigits[?Sep]\n\n\n0B\nBinaryDigits[?Sep]\n\n\n\nBinaryDigits[Sep] :: \nBinaryDigit\n\n\nBinaryDigits[?Sep]\nBinaryDigit\n\n[+Sep]\nBinaryDigits[+Sep]\nNumericLiteralSeparator\nBinaryDigit\n\n\n\nBinaryDigit :: one of 0 1\n\n\nOctalIntegerLiteral[Sep] :: \n0o\nOctalDigits[?Sep]\n\n\n0O\nOctalDigits[?Sep]\n\n\n\nOctalDigits[Sep] :: \nOctalDigit\n\n\nOctalDigits[?Sep]\nOctalDigit\n\n[+Sep]\nOctalDigits[+Sep]\nNumericLiteralSeparator\nOctalDigit\n\n\n\nLegacyOctalIntegerLiteral :: \n0\nOctalDigit\n\n\nLegacyOctalIntegerLiteral\nOctalDigit\n\n\n\nNonOctalDecimalIntegerLiteral :: \n0\nNonOctalDigit\n\n\nLegacyOctalLikeDecimalIntegerLiteral\nNonOctalDigit\n\n\nNonOctalDecimalIntegerLiteral\nDecimalDigit\n\n\n\nLegacyOctalLikeDecimalIntegerLiteral :: \n0\nOctalDigit\n\n\nLegacyOctalLikeDecimalIntegerLiteral\nOctalDigit\n\n\n\nOctalDigit :: one of 0 1 2 3 4 5 6 7\n\n\nNonOctalDigit :: one of 8 9\n\n\nHexIntegerLiteral[Sep] :: \n0x\nHexDigits[?Sep]\n\n\n0X\nHexDigits[?Sep]\n\n\n\nHexDigits[Sep] :: \nHexDigit\n\n\nHexDigits[?Sep]\nHexDigit\n\n[+Sep]\nHexDigits[+Sep]\nNumericLiteralSeparator\nHexDigit\n\n\n\nHexDigit :: one of 0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n\nStringLiteral :: \n\"\nDoubleStringCharactersopt\n\"\n\n\n'\nSingleStringCharactersopt\n'\n\n\n\nDoubleStringCharacters :: \nDoubleStringCharacter\nDoubleStringCharactersopt\n\n\n\nSingleStringCharacters :: \nSingleStringCharacter\nSingleStringCharactersopt\n\n\n\nDoubleStringCharacter :: \nSourceCharacter but not one of \" or \\ or LineTerminator\n\n\n<LS>\n\n\n<PS>\n\n\n\\\nEscapeSequence\n\n\nLineContinuation\n\n\n\nSingleStringCharacter :: \nSourceCharacter but not one of ' or \\ or LineTerminator\n\n\n<LS>\n\n\n<PS>\n\n\n\\\nEscapeSequence\n\n\nLineContinuation\n\n\n\nLineContinuation :: \n\\\nLineTerminatorSequence\n\n\n\nEscapeSequence :: \nCharacterEscapeSequence\n\n\n0\n[lookahead \u2209 DecimalDigit]\n\n\nLegacyOctalEscapeSequence\n\n\nNonOctalDecimalEscapeSequence\n\n\nHexEscapeSequence\n\n\nUnicodeEscapeSequence\n\n\n\nCharacterEscapeSequence :: \nSingleEscapeCharacter\n\n\nNonEscapeCharacter\n\n\n\nSingleEscapeCharacter :: one of ' \" \\ b f n r t v\n\n\nNonEscapeCharacter :: \nSourceCharacter but not one of EscapeCharacter or LineTerminator\n\n\n\nEscapeCharacter :: \nSingleEscapeCharacter\n\n\nDecimalDigit\n\n\nx\n\n\nu\n\n\n\nLegacyOctalEscapeSequence :: \n0\n[lookahead \u2208 { 8, 9 }]\n\n\nNonZeroOctalDigit\n[lookahead \u2209 OctalDigit]\n\n\nZeroToThree\nOctalDigit\n[lookahead \u2209 OctalDigit]\n\n\nFourToSeven\nOctalDigit\n\n\nZeroToThree\nOctalDigit\nOctalDigit\n\n\n\nNonZeroOctalDigit :: \nOctalDigit but not 0\n\n\n\nZeroToThree :: one of 0 1 2 3\n\n\nFourToSeven :: one of 4 5 6 7\n\n\nNonOctalDecimalEscapeSequence :: one of 8 9\n\n\nHexEscapeSequence :: \nx\nHexDigit\nHexDigit\n\n\n\nUnicodeEscapeSequence :: \nu\nHex4Digits\n\n\nu{\nCodePoint\n}\n\n\n\nHex4Digits :: \nHexDigit\nHexDigit\nHexDigit\nHexDigit\n\n\n\nRegularExpressionLiteral :: \n/\nRegularExpressionBody\n/\nRegularExpressionFlags\n\n\n\nRegularExpressionBody :: \nRegularExpressionFirstChar\nRegularExpressionChars\n\n\n\nRegularExpressionChars :: \n[empty]\n\n\nRegularExpressionChars\nRegularExpressionChar\n\n\n\nRegularExpressionFirstChar :: \nRegularExpressionNonTerminator but not one of * or \\ or / or [\n\n\nRegularExpressionBackslashSequence\n\n\nRegularExpressionClass\n\n\n\nRegularExpressionChar :: \nRegularExpressionNonTerminator but not one of \\ or / or [\n\n\nRegularExpressionBackslashSequence\n\n\nRegularExpressionClass\n\n\n\nRegularExpressionBackslashSequence :: \n\\\nRegularExpressionNonTerminator\n\n\n\nRegularExpressionNonTerminator :: \nSourceCharacter but not LineTerminator\n\n\n\nRegularExpressionClass :: \n[\nRegularExpressionClassChars\n]\n\n\n\nRegularExpressionClassChars :: \n[empty]\n\n\nRegularExpressionClassChars\nRegularExpressionClassChar\n\n\n\nRegularExpressionClassChar :: \nRegularExpressionNonTerminator but not one of ] or \\\n\n\nRegularExpressionBackslashSequence\n\n\n\nRegularExpressionFlags :: \n[empty]\n\n\nRegularExpressionFlags\nIdentifierPartChar\n\n\n\nTemplate :: \nNoSubstitutionTemplate\n\n\nTemplateHead\n\n\n\nNoSubstitutionTemplate :: \n`\nTemplateCharactersopt\n`\n\n\n\nTemplateHead :: \n`\nTemplateCharactersopt\n${\n\n\n\nTemplateSubstitutionTail :: \nTemplateMiddle\n\n\nTemplateTail\n\n\n\nTemplateMiddle :: \n}\nTemplateCharactersopt\n${\n\n\n\nTemplateTail :: \n}\nTemplateCharactersopt\n`\n\n\n\nTemplateCharacters :: \nTemplateCharacter\nTemplateCharactersopt\n\n\n\nTemplateCharacter :: \n$\n[lookahead \u2260 {]\n\n\n\\\nTemplateEscapeSequence\n\n\n\\\nNotEscapeSequence\n\n\nLineContinuation\n\n\nLineTerminatorSequence\n\n\nSourceCharacter but not one of ` or \\ or $ or LineTerminator\n\n\n\nTemplateEscapeSequence :: \nCharacterEscapeSequence\n\n\n0\n[lookahead \u2209 DecimalDigit]\n\n\nHexEscapeSequence\n\n\nUnicodeEscapeSequence\n\n\n\nNotEscapeSequence :: \n0\nDecimalDigit\n\n\nDecimalDigit but not 0\n\n\nx\n[lookahead \u2209 HexDigit]\n\n\nx\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\nu\n[lookahead \u2209 HexDigit]\n[lookahead \u2260 {]\n\n\nu\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\nu\nHexDigit\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\nu\nHexDigit\nHexDigit\nHexDigit\n[lookahead \u2209 HexDigit]\n\n\nu\n{\n[lookahead \u2209 HexDigit]\n\n\nu\n{\nNotCodePoint\n[lookahead \u2209 HexDigit]\n\n\nu\n{\nCodePoint\n[lookahead \u2209 HexDigit]\n[lookahead \u2260 }]\n\n\n\nNotCodePoint :: \nHexDigits[~Sep]\nbut only if MV of HexDigits > 0x10FFFF\n\n\n\nCodePoint :: \nHexDigits[~Sep]\nbut only if MV of HexDigits \u2264 0x10FFFF\n\n\n\n\nA.2 Expressions\n\nIdentifierReference[Yield, Await] : \nIdentifier\n\n[~Yield]\nyield\n\n[~Await]\nawait\n\n\n\nBindingIdentifier[Yield, Await] : \nIdentifier\n\n\nyield\n\n\nawait\n\n\n\nLabelIdentifier[Yield, Await] : \nIdentifier\n\n[~Yield]\nyield\n\n[~Await]\nawait\n\n\n\nIdentifier : \nIdentifierName but not ReservedWord\n\n\n\nPrimaryExpression[Yield, Await] : \nthis\n\n\nIdentifierReference[?Yield, ?Await]\n\n\nLiteral\n\n\nArrayLiteral[?Yield, ?Await]\n\n\nObjectLiteral[?Yield, ?Await]\n\n\nFunctionExpression\n\n\nClassExpression[?Yield, ?Await]\n\n\nGeneratorExpression\n\n\nAsyncFunctionExpression\n\n\nAsyncGeneratorExpression\n\n\nRegularExpressionLiteral\n\n\nTemplateLiteral[?Yield, ?Await, ~Tagged]\n\n\nCoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]\n\n\n\nCoverParenthesizedExpressionAndArrowParameterList[Yield, Await] : \n(\nExpression[+In, ?Yield, ?Await]\n)\n\n\n(\nExpression[+In, ?Yield, ?Await]\n,\n)\n\n\n(\n)\n\n\n(\n...\nBindingIdentifier[?Yield, ?Await]\n)\n\n\n(\n...\nBindingPattern[?Yield, ?Await]\n)\n\n\n(\nExpression[+In, ?Yield, ?Await]\n,\n...\nBindingIdentifier[?Yield, ?Await]\n)\n\n\n(\nExpression[+In, ?Yield, ?Await]\n,\n...\nBindingPattern[?Yield, ?Await]\n)\n\n\n\n      When processing an instance of the production\n\nPrimaryExpression[Yield, Await] : \nCoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]\n\n      the interpretation of CoverParenthesizedExpressionAndArrowParameterList is refined using the following grammar:\n    \n\nParenthesizedExpression[Yield, Await] : \n(\nExpression[+In, ?Yield, ?Await]\n)\n\n\n\u00a0\n\nLiteral : \nNullLiteral\n\n\nBooleanLiteral\n\n\nNumericLiteral\n\n\nStringLiteral\n\n\n\nArrayLiteral[Yield, Await] : \n[\nElisionopt\n]\n\n\n[\nElementList[?Yield, ?Await]\n]\n\n\n[\nElementList[?Yield, ?Await]\n,\nElisionopt\n]\n\n\n\nElementList[Yield, Await] : \nElisionopt\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\nElisionopt\nSpreadElement[?Yield, ?Await]\n\n\nElementList[?Yield, ?Await]\n,\nElisionopt\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\nElementList[?Yield, ?Await]\n,\nElisionopt\nSpreadElement[?Yield, ?Await]\n\n\n\nElision : \n,\n\n\nElision\n,\n\n\n\nSpreadElement[Yield, Await] : \n...\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\n\nObjectLiteral[Yield, Await] : \n{\n}\n\n\n{\nPropertyDefinitionList[?Yield, ?Await]\n}\n\n\n{\nPropertyDefinitionList[?Yield, ?Await]\n,\n}\n\n\n\nPropertyDefinitionList[Yield, Await] : \nPropertyDefinition[?Yield, ?Await]\n\n\nPropertyDefinitionList[?Yield, ?Await]\n,\nPropertyDefinition[?Yield, ?Await]\n\n\n\nPropertyDefinition[Yield, Await] : \nIdentifierReference[?Yield, ?Await]\n\n\nCoverInitializedName[?Yield, ?Await]\n\n\nPropertyName[?Yield, ?Await]\n:\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\nMethodDefinition[?Yield, ?Await]\n\n\n...\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\n\nPropertyName[Yield, Await] : \nLiteralPropertyName\n\n\nComputedPropertyName[?Yield, ?Await]\n\n\n\nLiteralPropertyName : \nIdentifierName\n\n\nStringLiteral\n\n\nNumericLiteral\n\n\n\nComputedPropertyName[Yield, Await] : \n[\nAssignmentExpression[+In, ?Yield, ?Await]\n]\n\n\n\nCoverInitializedName[Yield, Await] : \nIdentifierReference[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]\n\n\n\nInitializer[In, Yield, Await] : \n=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\n\nTemplateLiteral[Yield, Await, Tagged] : \nNoSubstitutionTemplate\n\n\nSubstitutionTemplate[?Yield, ?Await, ?Tagged]\n\n\n\nSubstitutionTemplate[Yield, Await, Tagged] : \nTemplateHead\nExpression[+In, ?Yield, ?Await]\nTemplateSpans[?Yield, ?Await, ?Tagged]\n\n\n\nTemplateSpans[Yield, Await, Tagged] : \nTemplateTail\n\n\nTemplateMiddleList[?Yield, ?Await, ?Tagged]\nTemplateTail\n\n\n\nTemplateMiddleList[Yield, Await, Tagged] : \nTemplateMiddle\nExpression[+In, ?Yield, ?Await]\n\n\nTemplateMiddleList[?Yield, ?Await, ?Tagged]\nTemplateMiddle\nExpression[+In, ?Yield, ?Await]\n\n\n\nMemberExpression[Yield, Await] : \nPrimaryExpression[?Yield, ?Await]\n\n\nMemberExpression[?Yield, ?Await]\n[\nExpression[+In, ?Yield, ?Await]\n]\n\n\nMemberExpression[?Yield, ?Await]\n.\nIdentifierName\n\n\nMemberExpression[?Yield, ?Await]\nTemplateLiteral[?Yield, ?Await, +Tagged]\n\n\nSuperProperty[?Yield, ?Await]\n\n\nMetaProperty\n\n\nnew\nMemberExpression[?Yield, ?Await]\nArguments[?Yield, ?Await]\n\n\nMemberExpression[?Yield, ?Await]\n.\nPrivateIdentifier\n\n\n\nSuperProperty[Yield, Await] : \nsuper\n[\nExpression[+In, ?Yield, ?Await]\n]\n\n\nsuper\n.\nIdentifierName\n\n\n\nMetaProperty : \nNewTarget\n\n\nImportMeta\n\n\n\nNewTarget : \nnew\n.\ntarget\n\n\n\nImportMeta : \nimport\n.\nmeta\n\n\n\nNewExpression[Yield, Await] : \nMemberExpression[?Yield, ?Await]\n\n\nnew\nNewExpression[?Yield, ?Await]\n\n\n\nCallExpression[Yield, Await] : \nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\n\n\nSuperCall[?Yield, ?Await]\n\n\nImportCall[?Yield, ?Await]\n\n\nCallExpression[?Yield, ?Await]\nArguments[?Yield, ?Await]\n\n\nCallExpression[?Yield, ?Await]\n[\nExpression[+In, ?Yield, ?Await]\n]\n\n\nCallExpression[?Yield, ?Await]\n.\nIdentifierName\n\n\nCallExpression[?Yield, ?Await]\nTemplateLiteral[?Yield, ?Await, +Tagged]\n\n\nCallExpression[?Yield, ?Await]\n.\nPrivateIdentifier\n\n\n\n      When processing an instance of the production\n\nCallExpression[Yield, Await] : \nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\n\n      the interpretation of CoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\n    \n\nCallMemberExpression[Yield, Await] : \nMemberExpression[?Yield, ?Await]\nArguments[?Yield, ?Await]\n\n\n\u00a0\n\nSuperCall[Yield, Await] : \nsuper\nArguments[?Yield, ?Await]\n\n\n\nImportCall[Yield, Await] : \nimport\n(\nAssignmentExpression[+In, ?Yield, ?Await]\n)\n\n\n\nArguments[Yield, Await] : \n(\n)\n\n\n(\nArgumentList[?Yield, ?Await]\n)\n\n\n(\nArgumentList[?Yield, ?Await]\n,\n)\n\n\n\nArgumentList[Yield, Await] : \nAssignmentExpression[+In, ?Yield, ?Await]\n\n\n...\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\nArgumentList[?Yield, ?Await]\n,\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\nArgumentList[?Yield, ?Await]\n,\n...\nAssignmentExpression[+In, ?Yield, ?Await]\n\n\n\nOptionalExpression[Yield, Await] : \nMemberExpression[?Yield, ?Await]\nOptionalChain[?Yield, ?Await]\n\n\nCallExpression[?Yield, ?Await]\nOptionalChain[?Yield, ?Await]\n\n\nOptionalExpression[?Yield, ?Await]\nOptionalChain[?Yield, ?Await]\n\n\n\nOptionalChain[Yield, Await] : \n?.\nArguments[?Yield, ?Await]\n\n\n?.\n[\nExpression[+In, ?Yield, ?Await]\n]\n\n\n?.\nIdentifierName\n\n\n?.\nTemplateLiteral[?Yield, ?Await, +Tagged]\n\n\n?.\nPrivateIdentifier\n\n\nOptionalChain[?Yield, ?Await]\nArguments[?Yield, ?Await]\n\n\nOptionalChain[?Yield, ?Await]\n[\nExpression[+In, ?Yield, ?Await]\n]\n\n\nOptionalChain[?Yield, ?Await]\n.\nIdentifierName\n\n\nOptionalChain[?Yield, ?Await]\nTemplateLiteral[?Yield, ?Await, +Tagged]\n\n\nOptionalChain[?Yield, ?Await]\n.\nPrivateIdentifier\n\n\n\nLeftHandSideExpression[Yield, Await] : \nNewExpression[?Yield, ?Await]\n\n\nCallExpression[?Yield, ?Await]\n\n\nOptionalExpression[?Yield, ?Await]\n\n\n\nUpdateExpression[Yield, Await] : \nLeftHandSideExpression[?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\n[no LineTerminator here]\n++\n\n\nLeftHandSideExpression[?Yield, ?Await]\n[no LineTerminator here]\n--\n\n\n++\nUnaryExpression[?Yield, ?Await]\n\n\n--\nUnaryExpression[?Yield, ?Await]\n\n\n\nUnaryExpression[Yield, Await] : \nUpdateExpression[?Yield, ?Await]\n\n\ndelete\nUnaryExpression[?Yield, ?Await]\n\n\nvoid\nUnaryExpression[?Yield, ?Await]\n\n\ntypeof\nUnaryExpression[?Yield, ?Await]\n\n\n+\nUnaryExpression[?Yield, ?Await]\n\n\n-\nUnaryExpression[?Yield, ?Await]\n\n\n~\nUnaryExpression[?Yield, ?Await]\n\n\n!\nUnaryExpression[?Yield, ?Await]\n\n[+Await]\nAwaitExpression[?Yield]\n\n\n\nExponentiationExpression[Yield, Await] : \nUnaryExpression[?Yield, ?Await]\n\n\nUpdateExpression[?Yield, ?Await]\n**\nExponentiationExpression[?Yield, ?Await]\n\n\n\nMultiplicativeExpression[Yield, Await] : \nExponentiationExpression[?Yield, ?Await]\n\n\nMultiplicativeExpression[?Yield, ?Await]\nMultiplicativeOperator\nExponentiationExpression[?Yield, ?Await]\n\n\n\nMultiplicativeOperator : one of * / %\n\n\nAdditiveExpression[Yield, Await] : \nMultiplicativeExpression[?Yield, ?Await]\n\n\nAdditiveExpression[?Yield, ?Await]\n+\nMultiplicativeExpression[?Yield, ?Await]\n\n\nAdditiveExpression[?Yield, ?Await]\n-\nMultiplicativeExpression[?Yield, ?Await]\n\n\n\nShiftExpression[Yield, Await] : \nAdditiveExpression[?Yield, ?Await]\n\n\nShiftExpression[?Yield, ?Await]\n<<\nAdditiveExpression[?Yield, ?Await]\n\n\nShiftExpression[?Yield, ?Await]\n>>\nAdditiveExpression[?Yield, ?Await]\n\n\nShiftExpression[?Yield, ?Await]\n>>>\nAdditiveExpression[?Yield, ?Await]\n\n\n\nRelationalExpression[In, Yield, Await] : \nShiftExpression[?Yield, ?Await]\n\n\nRelationalExpression[?In, ?Yield, ?Await]\n<\nShiftExpression[?Yield, ?Await]\n\n\nRelationalExpression[?In, ?Yield, ?Await]\n>\nShiftExpression[?Yield, ?Await]\n\n\nRelationalExpression[?In, ?Yield, ?Await]\n<=\nShiftExpression[?Yield, ?Await]\n\n\nRelationalExpression[?In, ?Yield, ?Await]\n>=\nShiftExpression[?Yield, ?Await]\n\n\nRelationalExpression[?In, ?Yield, ?Await]\ninstanceof\nShiftExpression[?Yield, ?Await]\n\n[+In]\nRelationalExpression[+In, ?Yield, ?Await]\nin\nShiftExpression[?Yield, ?Await]\n\n[+In]\nPrivateIdentifier\nin\nShiftExpression[?Yield, ?Await]\n\n\n\nEqualityExpression[In, Yield, Await] : \nRelationalExpression[?In, ?Yield, ?Await]\n\n\nEqualityExpression[?In, ?Yield, ?Await]\n==\nRelationalExpression[?In, ?Yield, ?Await]\n\n\nEqualityExpression[?In, ?Yield, ?Await]\n!=\nRelationalExpression[?In, ?Yield, ?Await]\n\n\nEqualityExpression[?In, ?Yield, ?Await]\n===\nRelationalExpression[?In, ?Yield, ?Await]\n\n\nEqualityExpression[?In, ?Yield, ?Await]\n!==\nRelationalExpression[?In, ?Yield, ?Await]\n\n\n\nBitwiseANDExpression[In, Yield, Await] : \nEqualityExpression[?In, ?Yield, ?Await]\n\n\nBitwiseANDExpression[?In, ?Yield, ?Await]\n&\nEqualityExpression[?In, ?Yield, ?Await]\n\n\n\nBitwiseXORExpression[In, Yield, Await] : \nBitwiseANDExpression[?In, ?Yield, ?Await]\n\n\nBitwiseXORExpression[?In, ?Yield, ?Await]\n^\nBitwiseANDExpression[?In, ?Yield, ?Await]\n\n\n\nBitwiseORExpression[In, Yield, Await] : \nBitwiseXORExpression[?In, ?Yield, ?Await]\n\n\nBitwiseORExpression[?In, ?Yield, ?Await]\n|\nBitwiseXORExpression[?In, ?Yield, ?Await]\n\n\n\nLogicalANDExpression[In, Yield, Await] : \nBitwiseORExpression[?In, ?Yield, ?Await]\n\n\nLogicalANDExpression[?In, ?Yield, ?Await]\n&&\nBitwiseORExpression[?In, ?Yield, ?Await]\n\n\n\nLogicalORExpression[In, Yield, Await] : \nLogicalANDExpression[?In, ?Yield, ?Await]\n\n\nLogicalORExpression[?In, ?Yield, ?Await]\n||\nLogicalANDExpression[?In, ?Yield, ?Await]\n\n\n\nCoalesceExpression[In, Yield, Await] : \nCoalesceExpressionHead[?In, ?Yield, ?Await]\n??\nBitwiseORExpression[?In, ?Yield, ?Await]\n\n\n\nCoalesceExpressionHead[In, Yield, Await] : \nCoalesceExpression[?In, ?Yield, ?Await]\n\n\nBitwiseORExpression[?In, ?Yield, ?Await]\n\n\n\nShortCircuitExpression[In, Yield, Await] : \nLogicalORExpression[?In, ?Yield, ?Await]\n\n\nCoalesceExpression[?In, ?Yield, ?Await]\n\n\n\nConditionalExpression[In, Yield, Await] : \nShortCircuitExpression[?In, ?Yield, ?Await]\n\n\nShortCircuitExpression[?In, ?Yield, ?Await]\n?\nAssignmentExpression[+In, ?Yield, ?Await]\n:\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\n\nAssignmentExpression[In, Yield, Await] : \nConditionalExpression[?In, ?Yield, ?Await]\n\n[+Yield]\nYieldExpression[?In, ?Await]\n\n\nArrowFunction[?In, ?Yield, ?Await]\n\n\nAsyncArrowFunction[?In, ?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\n=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\nAssignmentOperator\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\n&&=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\n||=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\nLeftHandSideExpression[?Yield, ?Await]\n??=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\n\nAssignmentOperator : one of *= /= %= += -= <<= >>= >>>= &= ^= |= **=\n\n\n      In certain circumstances when processing an instance of the production\n\nAssignmentExpression[In, Yield, Await] : \nLeftHandSideExpression[?Yield, ?Await]\n=\nAssignmentExpression[?In, ?Yield, ?Await]\n\n      the interpretation of LeftHandSideExpression is refined using the following grammar:\n    \n\nAssignmentPattern[Yield, Await] : \nObjectAssignmentPattern[?Yield, ?Await]\n\n\nArrayAssignmentPattern[?Yield, ?Await]\n\n\n\nObjectAssignmentPattern[Yield, Await] : \n{\n}\n\n\n{\nAssignmentRestProperty[?Yield, ?Await]\n}\n\n\n{\nAssignmentPropertyList[?Yield, ?Await]\n}\n\n\n{\nAssignmentPropertyList[?Yield, ?Await]\n,\nAssignmentRestProperty[?Yield, ?Await]opt\n}\n\n\n\nArrayAssignmentPattern[Yield, Await] : \n[\nElisionopt\nAssignmentRestElement[?Yield, ?Await]opt\n]\n\n\n[\nAssignmentElementList[?Yield, ?Await]\n]\n\n\n[\nAssignmentElementList[?Yield, ?Await]\n,\nElisionopt\nAssignmentRestElement[?Yield, ?Await]opt\n]\n\n\n\nAssignmentRestProperty[Yield, Await] : \n...\nDestructuringAssignmentTarget[?Yield, ?Await]\n\n\n\nAssignmentPropertyList[Yield, Await] : \nAssignmentProperty[?Yield, ?Await]\n\n\nAssignmentPropertyList[?Yield, ?Await]\n,\nAssignmentProperty[?Yield, ?Await]\n\n\n\nAssignmentElementList[Yield, Await] : \nAssignmentElisionElement[?Yield, ?Await]\n\n\nAssignmentElementList[?Yield, ?Await]\n,\nAssignmentElisionElement[?Yield, ?Await]\n\n\n\nAssignmentElisionElement[Yield, Await] : \nElisionopt\nAssignmentElement[?Yield, ?Await]\n\n\n\nAssignmentProperty[Yield, Await] : \nIdentifierReference[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]opt\n\n\nPropertyName[?Yield, ?Await]\n:\nAssignmentElement[?Yield, ?Await]\n\n\n\nAssignmentElement[Yield, Await] : \nDestructuringAssignmentTarget[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]opt\n\n\n\nAssignmentRestElement[Yield, Await] : \n...\nDestructuringAssignmentTarget[?Yield, ?Await]\n\n\n\nDestructuringAssignmentTarget[Yield, Await] : \nLeftHandSideExpression[?Yield, ?Await]\n\n\n\u00a0\n\nExpression[In, Yield, Await] : \nAssignmentExpression[?In, ?Yield, ?Await]\n\n\nExpression[?In, ?Yield, ?Await]\n,\nAssignmentExpression[?In, ?Yield, ?Await]\n\n\n\n\nA.3 Statements\n\nStatement[Yield, Await, Return] : \nBlockStatement[?Yield, ?Await, ?Return]\n\n\nVariableStatement[?Yield, ?Await]\n\n\nEmptyStatement\n\n\nExpressionStatement[?Yield, ?Await]\n\n\nIfStatement[?Yield, ?Await, ?Return]\n\n\nBreakableStatement[?Yield, ?Await, ?Return]\n\n\nContinueStatement[?Yield, ?Await]\n\n\nBreakStatement[?Yield, ?Await]\n\n[+Return]\nReturnStatement[?Yield, ?Await]\n\n\nWithStatement[?Yield, ?Await, ?Return]\n\n\nLabelledStatement[?Yield, ?Await, ?Return]\n\n\nThrowStatement[?Yield, ?Await]\n\n\nTryStatement[?Yield, ?Await, ?Return]\n\n\nDebuggerStatement\n\n\n\nDeclaration[Yield, Await] : \nHoistableDeclaration[?Yield, ?Await, ~Default]\n\n\nClassDeclaration[?Yield, ?Await, ~Default]\n\n\nLexicalDeclaration[+In, ?Yield, ?Await]\n\n\n\nHoistableDeclaration[Yield, Await, Default] : \nFunctionDeclaration[?Yield, ?Await, ?Default]\n\n\nGeneratorDeclaration[?Yield, ?Await, ?Default]\n\n\nAsyncFunctionDeclaration[?Yield, ?Await, ?Default]\n\n\nAsyncGeneratorDeclaration[?Yield, ?Await, ?Default]\n\n\n\nBreakableStatement[Yield, Await, Return] : \nIterationStatement[?Yield, ?Await, ?Return]\n\n\nSwitchStatement[?Yield, ?Await, ?Return]\n\n\n\nBlockStatement[Yield, Await, Return] : \nBlock[?Yield, ?Await, ?Return]\n\n\n\nBlock[Yield, Await, Return] : \n{\nStatementList[?Yield, ?Await, ?Return]opt\n}\n\n\n\nStatementList[Yield, Await, Return] : \nStatementListItem[?Yield, ?Await, ?Return]\n\n\nStatementList[?Yield, ?Await, ?Return]\nStatementListItem[?Yield, ?Await, ?Return]\n\n\n\nStatementListItem[Yield, Await, Return] : \nStatement[?Yield, ?Await, ?Return]\n\n\nDeclaration[?Yield, ?Await]\n\n\n\nLexicalDeclaration[In, Yield, Await] : \nLetOrConst\nBindingList[?In, ?Yield, ?Await]\n;\n\n\n\nLetOrConst : \nlet\n\n\nconst\n\n\n\nBindingList[In, Yield, Await] : \nLexicalBinding[?In, ?Yield, ?Await]\n\n\nBindingList[?In, ?Yield, ?Await]\n,\nLexicalBinding[?In, ?Yield, ?Await]\n\n\n\nLexicalBinding[In, Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\nInitializer[?In, ?Yield, ?Await]opt\n\n\nBindingPattern[?Yield, ?Await]\nInitializer[?In, ?Yield, ?Await]\n\n\n\nVariableStatement[Yield, Await] : \nvar\nVariableDeclarationList[+In, ?Yield, ?Await]\n;\n\n\n\nVariableDeclarationList[In, Yield, Await] : \nVariableDeclaration[?In, ?Yield, ?Await]\n\n\nVariableDeclarationList[?In, ?Yield, ?Await]\n,\nVariableDeclaration[?In, ?Yield, ?Await]\n\n\n\nVariableDeclaration[In, Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\nInitializer[?In, ?Yield, ?Await]opt\n\n\nBindingPattern[?Yield, ?Await]\nInitializer[?In, ?Yield, ?Await]\n\n\n\nBindingPattern[Yield, Await] : \nObjectBindingPattern[?Yield, ?Await]\n\n\nArrayBindingPattern[?Yield, ?Await]\n\n\n\nObjectBindingPattern[Yield, Await] : \n{\n}\n\n\n{\nBindingRestProperty[?Yield, ?Await]\n}\n\n\n{\nBindingPropertyList[?Yield, ?Await]\n}\n\n\n{\nBindingPropertyList[?Yield, ?Await]\n,\nBindingRestProperty[?Yield, ?Await]opt\n}\n\n\n\nArrayBindingPattern[Yield, Await] : \n[\nElisionopt\nBindingRestElement[?Yield, ?Await]opt\n]\n\n\n[\nBindingElementList[?Yield, ?Await]\n]\n\n\n[\nBindingElementList[?Yield, ?Await]\n,\nElisionopt\nBindingRestElement[?Yield, ?Await]opt\n]\n\n\n\nBindingRestProperty[Yield, Await] : \n...\nBindingIdentifier[?Yield, ?Await]\n\n\n\nBindingPropertyList[Yield, Await] : \nBindingProperty[?Yield, ?Await]\n\n\nBindingPropertyList[?Yield, ?Await]\n,\nBindingProperty[?Yield, ?Await]\n\n\n\nBindingElementList[Yield, Await] : \nBindingElisionElement[?Yield, ?Await]\n\n\nBindingElementList[?Yield, ?Await]\n,\nBindingElisionElement[?Yield, ?Await]\n\n\n\nBindingElisionElement[Yield, Await] : \nElisionopt\nBindingElement[?Yield, ?Await]\n\n\n\nBindingProperty[Yield, Await] : \nSingleNameBinding[?Yield, ?Await]\n\n\nPropertyName[?Yield, ?Await]\n:\nBindingElement[?Yield, ?Await]\n\n\n\nBindingElement[Yield, Await] : \nSingleNameBinding[?Yield, ?Await]\n\n\nBindingPattern[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]opt\n\n\n\nSingleNameBinding[Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]opt\n\n\n\nBindingRestElement[Yield, Await] : \n...\nBindingIdentifier[?Yield, ?Await]\n\n\n...\nBindingPattern[?Yield, ?Await]\n\n\n\nEmptyStatement : \n;\n\n\n\nExpressionStatement[Yield, Await] : \n[lookahead \u2209 { {, function, async\n[no LineTerminator here]\nfunction, class, let\n[ }]\nExpression[+In, ?Yield, ?Await]\n;\n\n\n\nIfStatement[Yield, Await, Return] : \nif\n(\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\nelse\nStatement[?Yield, ?Await, ?Return]\n\n\nif\n(\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n[lookahead \u2260 else]\n\n\n\nIterationStatement[Yield, Await, Return] : \nDoWhileStatement[?Yield, ?Await, ?Return]\n\n\nWhileStatement[?Yield, ?Await, ?Return]\n\n\nForStatement[?Yield, ?Await, ?Return]\n\n\nForInOfStatement[?Yield, ?Await, ?Return]\n\n\n\nDoWhileStatement[Yield, Await, Return] : \ndo\nStatement[?Yield, ?Await, ?Return]\nwhile\n(\nExpression[+In, ?Yield, ?Await]\n)\n;\n\n\n\nWhileStatement[Yield, Await, Return] : \nwhile\n(\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\n\nForStatement[Yield, Await, Return] : \nfor\n(\n[lookahead \u2260 let\n[]\nExpression[~In, ?Yield, ?Await]opt\n;\nExpression[+In, ?Yield, ?Await]opt\n;\nExpression[+In, ?Yield, ?Await]opt\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nvar\nVariableDeclarationList[~In, ?Yield, ?Await]\n;\nExpression[+In, ?Yield, ?Await]opt\n;\nExpression[+In, ?Yield, ?Await]opt\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nLexicalDeclaration[~In, ?Yield, ?Await]\nExpression[+In, ?Yield, ?Await]opt\n;\nExpression[+In, ?Yield, ?Await]opt\n)\nStatement[?Yield, ?Await, ?Return]\n\n\n\nForInOfStatement[Yield, Await, Return] : \nfor\n(\n[lookahead \u2260 let\n[]\nLeftHandSideExpression[?Yield, ?Await]\nin\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nvar\nForBinding[?Yield, ?Await]\nin\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nForDeclaration[?Yield, ?Await]\nin\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\n[lookahead \u2209 { let, async\nof }]\nLeftHandSideExpression[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nvar\nForBinding[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\nfor\n(\nForDeclaration[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n[+Await]\nfor\nawait\n(\n[lookahead \u2260 let]\nLeftHandSideExpression[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n[+Await]\nfor\nawait\n(\nvar\nForBinding[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n[+Await]\nfor\nawait\n(\nForDeclaration[?Yield, ?Await]\nof\nAssignmentExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\n\nForDeclaration[Yield, Await] : \nLetOrConst\nForBinding[?Yield, ?Await]\n\n\n\nForBinding[Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\n\n\nBindingPattern[?Yield, ?Await]\n\n\n\nContinueStatement[Yield, Await] : \ncontinue\n;\n\n\ncontinue\n[no LineTerminator here]\nLabelIdentifier[?Yield, ?Await]\n;\n\n\n\nBreakStatement[Yield, Await] : \nbreak\n;\n\n\nbreak\n[no LineTerminator here]\nLabelIdentifier[?Yield, ?Await]\n;\n\n\n\nReturnStatement[Yield, Await] : \nreturn\n;\n\n\nreturn\n[no LineTerminator here]\nExpression[+In, ?Yield, ?Await]\n;\n\n\n\nWithStatement[Yield, Await, Return] : \nwith\n(\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\n\nSwitchStatement[Yield, Await, Return] : \nswitch\n(\nExpression[+In, ?Yield, ?Await]\n)\nCaseBlock[?Yield, ?Await, ?Return]\n\n\n\nCaseBlock[Yield, Await, Return] : \n{\nCaseClauses[?Yield, ?Await, ?Return]opt\n}\n\n\n{\nCaseClauses[?Yield, ?Await, ?Return]opt\nDefaultClause[?Yield, ?Await, ?Return]\nCaseClauses[?Yield, ?Await, ?Return]opt\n}\n\n\n\nCaseClauses[Yield, Await, Return] : \nCaseClause[?Yield, ?Await, ?Return]\n\n\nCaseClauses[?Yield, ?Await, ?Return]\nCaseClause[?Yield, ?Await, ?Return]\n\n\n\nCaseClause[Yield, Await, Return] : \ncase\nExpression[+In, ?Yield, ?Await]\n:\nStatementList[?Yield, ?Await, ?Return]opt\n\n\n\nDefaultClause[Yield, Await, Return] : \ndefault\n:\nStatementList[?Yield, ?Await, ?Return]opt\n\n\n\nLabelledStatement[Yield, Await, Return] : \nLabelIdentifier[?Yield, ?Await]\n:\nLabelledItem[?Yield, ?Await, ?Return]\n\n\n\nLabelledItem[Yield, Await, Return] : \nStatement[?Yield, ?Await, ?Return]\n\n\nFunctionDeclaration[?Yield, ?Await, ~Default]\n\n\n\nThrowStatement[Yield, Await] : \nthrow\n[no LineTerminator here]\nExpression[+In, ?Yield, ?Await]\n;\n\n\n\nTryStatement[Yield, Await, Return] : \ntry\nBlock[?Yield, ?Await, ?Return]\nCatch[?Yield, ?Await, ?Return]\n\n\ntry\nBlock[?Yield, ?Await, ?Return]\nFinally[?Yield, ?Await, ?Return]\n\n\ntry\nBlock[?Yield, ?Await, ?Return]\nCatch[?Yield, ?Await, ?Return]\nFinally[?Yield, ?Await, ?Return]\n\n\n\nCatch[Yield, Await, Return] : \ncatch\n(\nCatchParameter[?Yield, ?Await]\n)\nBlock[?Yield, ?Await, ?Return]\n\n\ncatch\nBlock[?Yield, ?Await, ?Return]\n\n\n\nFinally[Yield, Await, Return] : \nfinally\nBlock[?Yield, ?Await, ?Return]\n\n\n\nCatchParameter[Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\n\n\nBindingPattern[?Yield, ?Await]\n\n\n\nDebuggerStatement : \ndebugger\n;\n\n\n\n\nA.4 Functions and Classes\n\nUniqueFormalParameters[Yield, Await] : \nFormalParameters[?Yield, ?Await]\n\n\n\nFormalParameters[Yield, Await] : \n[empty]\n\n\nFunctionRestParameter[?Yield, ?Await]\n\n\nFormalParameterList[?Yield, ?Await]\n\n\nFormalParameterList[?Yield, ?Await]\n,\n\n\nFormalParameterList[?Yield, ?Await]\n,\nFunctionRestParameter[?Yield, ?Await]\n\n\n\nFormalParameterList[Yield, Await] : \nFormalParameter[?Yield, ?Await]\n\n\nFormalParameterList[?Yield, ?Await]\n,\nFormalParameter[?Yield, ?Await]\n\n\n\nFunctionRestParameter[Yield, Await] : \nBindingRestElement[?Yield, ?Await]\n\n\n\nFormalParameter[Yield, Await] : \nBindingElement[?Yield, ?Await]\n\n\n\nFunctionDeclaration[Yield, Await, Default] : \nfunction\nBindingIdentifier[?Yield, ?Await]\n(\nFormalParameters[~Yield, ~Await]\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n[+Default]\nfunction\n(\nFormalParameters[~Yield, ~Await]\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\n\nFunctionExpression : \nfunction\nBindingIdentifier[~Yield, ~Await]opt\n(\nFormalParameters[~Yield, ~Await]\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\n\nFunctionBody[Yield, Await] : \nFunctionStatementList[?Yield, ?Await]\n\n\n\nFunctionStatementList[Yield, Await] : \nStatementList[?Yield, ?Await, +Return]opt\n\n\n\nArrowFunction[In, Yield, Await] : \nArrowParameters[?Yield, ?Await]\n[no LineTerminator here]\n=>\nConciseBody[?In]\n\n\n\nArrowParameters[Yield, Await] : \nBindingIdentifier[?Yield, ?Await]\n\n\nCoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]\n\n\n\nConciseBody[In] : \n[lookahead \u2260 {]\nExpressionBody[?In, ~Await]\n\n\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\n\nExpressionBody[In, Await] : \nAssignmentExpression[?In, ~Yield, ?Await]\n\n\n\n      When processing an instance of the production\n\nArrowParameters[Yield, Await] : \nCoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]\n\n      the interpretation of CoverParenthesizedExpressionAndArrowParameterList is refined using the following grammar:\n    \n\nArrowFormalParameters[Yield, Await] : \n(\nUniqueFormalParameters[?Yield, ?Await]\n)\n\n\n\u00a0\n\nAsyncArrowFunction[In, Yield, Await] : \nasync\n[no LineTerminator here]\nAsyncArrowBindingIdentifier[?Yield]\n[no LineTerminator here]\n=>\nAsyncConciseBody[?In]\n\n\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\n[no LineTerminator here]\n=>\nAsyncConciseBody[?In]\n\n\n\nAsyncConciseBody[In] : \n[lookahead \u2260 {]\nExpressionBody[?In, +Await]\n\n\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncArrowBindingIdentifier[Yield] : \nBindingIdentifier[?Yield, +Await]\n\n\n\nCoverCallExpressionAndAsyncArrowHead[Yield, Await] : \nMemberExpression[?Yield, ?Await]\nArguments[?Yield, ?Await]\n\n\n\n      When processing an instance of the production\n\nAsyncArrowFunction[In, Yield, Await] : \nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\n[no LineTerminator here]\n=>\nAsyncConciseBody[?In]\n\n      the interpretation of CoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\n    \n\nAsyncArrowHead : \nasync\n[no LineTerminator here]\nArrowFormalParameters[~Yield, +Await]\n\n\n\u00a0\n\nMethodDefinition[Yield, Await] : \nClassElementName[?Yield, ?Await]\n(\nUniqueFormalParameters[~Yield, ~Await]\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\nGeneratorMethod[?Yield, ?Await]\n\n\nAsyncMethod[?Yield, ?Await]\n\n\nAsyncGeneratorMethod[?Yield, ?Await]\n\n\nget\nClassElementName[?Yield, ?Await]\n(\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\nset\nClassElementName[?Yield, ?Await]\n(\nPropertySetParameterList\n)\n{\nFunctionBody[~Yield, ~Await]\n}\n\n\n\nPropertySetParameterList : \nFormalParameter[~Yield, ~Await]\n\n\n\nGeneratorDeclaration[Yield, Await, Default] : \nfunction\n*\nBindingIdentifier[?Yield, ?Await]\n(\nFormalParameters[+Yield, ~Await]\n)\n{\nGeneratorBody\n}\n\n[+Default]\nfunction\n*\n(\nFormalParameters[+Yield, ~Await]\n)\n{\nGeneratorBody\n}\n\n\n\nGeneratorExpression : \nfunction\n*\nBindingIdentifier[+Yield, ~Await]opt\n(\nFormalParameters[+Yield, ~Await]\n)\n{\nGeneratorBody\n}\n\n\n\nGeneratorMethod[Yield, Await] : \n*\nClassElementName[?Yield, ?Await]\n(\nUniqueFormalParameters[+Yield, ~Await]\n)\n{\nGeneratorBody\n}\n\n\n\nGeneratorBody : \nFunctionBody[+Yield, ~Await]\n\n\n\nYieldExpression[In, Await] : \nyield\n\n\nyield\n[no LineTerminator here]\nAssignmentExpression[?In, +Yield, ?Await]\n\n\nyield\n[no LineTerminator here]\n*\nAssignmentExpression[?In, +Yield, ?Await]\n\n\n\nAsyncGeneratorDeclaration[Yield, Await, Default] : \nasync\n[no LineTerminator here]\nfunction\n*\nBindingIdentifier[?Yield, ?Await]\n(\nFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n[+Default]\nasync\n[no LineTerminator here]\nfunction\n*\n(\nFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorExpression : \nasync\n[no LineTerminator here]\nfunction\n*\nBindingIdentifier[+Yield, +Await]opt\n(\nFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorMethod[Yield, Await] : \nasync\n[no LineTerminator here]\n*\nClassElementName[?Yield, ?Await]\n(\nUniqueFormalParameters[+Yield, +Await]\n)\n{\nAsyncGeneratorBody\n}\n\n\n\nAsyncGeneratorBody : \nFunctionBody[+Yield, +Await]\n\n\n\nAsyncFunctionDeclaration[Yield, Await, Default] : \nasync\n[no LineTerminator here]\nfunction\nBindingIdentifier[?Yield, ?Await]\n(\nFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n[+Default]\nasync\n[no LineTerminator here]\nfunction\n(\nFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncFunctionExpression : \nasync\n[no LineTerminator here]\nfunction\nBindingIdentifier[~Yield, +Await]opt\n(\nFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncMethod[Yield, Await] : \nasync\n[no LineTerminator here]\nClassElementName[?Yield, ?Await]\n(\nUniqueFormalParameters[~Yield, +Await]\n)\n{\nAsyncFunctionBody\n}\n\n\n\nAsyncFunctionBody : \nFunctionBody[~Yield, +Await]\n\n\n\nAwaitExpression[Yield] : \nawait\nUnaryExpression[?Yield, +Await]\n\n\n\nClassDeclaration[Yield, Await, Default] : \nclass\nBindingIdentifier[?Yield, ?Await]\nClassTail[?Yield, ?Await]\n\n[+Default]\nclass\nClassTail[?Yield, ?Await]\n\n\n\nClassExpression[Yield, Await] : \nclass\nBindingIdentifier[?Yield, ?Await]opt\nClassTail[?Yield, ?Await]\n\n\n\nClassTail[Yield, Await] : \nClassHeritage[?Yield, ?Await]opt\n{\nClassBody[?Yield, ?Await]opt\n}\n\n\n\nClassHeritage[Yield, Await] : \nextends\nLeftHandSideExpression[?Yield, ?Await]\n\n\n\nClassBody[Yield, Await] : \nClassElementList[?Yield, ?Await]\n\n\n\nClassElementList[Yield, Await] : \nClassElement[?Yield, ?Await]\n\n\nClassElementList[?Yield, ?Await]\nClassElement[?Yield, ?Await]\n\n\n\nClassElement[Yield, Await] : \nMethodDefinition[?Yield, ?Await]\n\n\nstatic\nMethodDefinition[?Yield, ?Await]\n\n\nFieldDefinition[?Yield, ?Await]\n;\n\n\nstatic\nFieldDefinition[?Yield, ?Await]\n;\n\n\nClassStaticBlock\n\n\n;\n\n\n\nFieldDefinition[Yield, Await] : \nClassElementName[?Yield, ?Await]\nInitializer[+In, ?Yield, ?Await]opt\n\n\n\nClassElementName[Yield, Await] : \nPropertyName[?Yield, ?Await]\n\n\nPrivateIdentifier\n\n\n\nClassStaticBlock : \nstatic\n{\nClassStaticBlockBody\n}\n\n\n\nClassStaticBlockBody : \nClassStaticBlockStatementList\n\n\n\nClassStaticBlockStatementList : \nStatementList[~Yield, +Await, ~Return]opt\n\n\n\n\nA.5 Scripts and Modules\n\nScript : \nScriptBodyopt\n\n\n\nScriptBody : \nStatementList[~Yield, ~Await, ~Return]\n\n\n\nModule : \nModuleBodyopt\n\n\n\nModuleBody : \nModuleItemList\n\n\n\nModuleItemList : \nModuleItem\n\n\nModuleItemList\nModuleItem\n\n\n\nModuleItem : \nImportDeclaration\n\n\nExportDeclaration\n\n\nStatementListItem[~Yield, +Await, ~Return]\n\n\n\nModuleExportName : \nIdentifierName\n\n\nStringLiteral\n\n\n\nImportDeclaration : \nimport\nImportClause\nFromClause\n;\n\n\nimport\nModuleSpecifier\n;\n\n\n\nImportClause : \nImportedDefaultBinding\n\n\nNameSpaceImport\n\n\nNamedImports\n\n\nImportedDefaultBinding\n,\nNameSpaceImport\n\n\nImportedDefaultBinding\n,\nNamedImports\n\n\n\nImportedDefaultBinding : \nImportedBinding\n\n\n\nNameSpaceImport : \n*\nas\nImportedBinding\n\n\n\nNamedImports : \n{\n}\n\n\n{\nImportsList\n}\n\n\n{\nImportsList\n,\n}\n\n\n\nFromClause : \nfrom\nModuleSpecifier\n\n\n\nImportsList : \nImportSpecifier\n\n\nImportsList\n,\nImportSpecifier\n\n\n\nImportSpecifier : \nImportedBinding\n\n\nModuleExportName\nas\nImportedBinding\n\n\n\nModuleSpecifier : \nStringLiteral\n\n\n\nImportedBinding : \nBindingIdentifier[~Yield, +Await]\n\n\n\nExportDeclaration : \nexport\nExportFromClause\nFromClause\n;\n\n\nexport\nNamedExports\n;\n\n\nexport\nVariableStatement[~Yield, +Await]\n\n\nexport\nDeclaration[~Yield, +Await]\n\n\nexport\ndefault\nHoistableDeclaration[~Yield, +Await, +Default]\n\n\nexport\ndefault\nClassDeclaration[~Yield, +Await, +Default]\n\n\nexport\ndefault\n[lookahead \u2209 { function, async\n[no LineTerminator here]\nfunction, class }]\nAssignmentExpression[+In, ~Yield, +Await]\n;\n\n\n\nExportFromClause : \n*\n\n\n*\nas\nModuleExportName\n\n\nNamedExports\n\n\n\nNamedExports : \n{\n}\n\n\n{\nExportsList\n}\n\n\n{\nExportsList\n,\n}\n\n\n\nExportsList : \nExportSpecifier\n\n\nExportsList\n,\nExportSpecifier\n\n\n\nExportSpecifier : \nModuleExportName\n\n\nModuleExportName\nas\nModuleExportName\n\n\n\n\nA.6 Number Conversions\n\nStringNumericLiteral ::: \nStrWhiteSpaceopt\n\n\nStrWhiteSpaceopt\nStrNumericLiteral\nStrWhiteSpaceopt\n\n\n\nStrWhiteSpace ::: \nStrWhiteSpaceChar\nStrWhiteSpaceopt\n\n\n\nStrWhiteSpaceChar ::: \nWhiteSpace\n\n\nLineTerminator\n\n\n\nStrNumericLiteral ::: \nStrDecimalLiteral\n\n\nNonDecimalIntegerLiteral[~Sep]\n\n\n\nStrDecimalLiteral ::: \nStrUnsignedDecimalLiteral\n\n\n+\nStrUnsignedDecimalLiteral\n\n\n-\nStrUnsignedDecimalLiteral\n\n\n\nStrUnsignedDecimalLiteral ::: \nInfinity\n\n\nDecimalDigits[~Sep]\n.\nDecimalDigits[~Sep]opt\nExponentPart[~Sep]opt\n\n\n.\nDecimalDigits[~Sep]\nExponentPart[~Sep]opt\n\n\nDecimalDigits[~Sep]\nExponentPart[~Sep]opt\n\n\nAll grammar symbols not explicitly defined by the StringNumericLiteral grammar have the definitions used in the Lexical Grammar for numeric literals.\n\nStringIntegerLiteral ::: \nStrWhiteSpaceopt\n\n\nStrWhiteSpaceopt\nStrIntegerLiteral\nStrWhiteSpaceopt\n\n\n\nStrIntegerLiteral ::: \nSignedInteger[~Sep]\n\n\nNonDecimalIntegerLiteral[~Sep]\n\n\n\n\nA.7 Universal Resource Identifier Character Classes\n\nuri ::: \nuriCharactersopt\n\n\n\nuriCharacters ::: \nuriCharacter\nuriCharactersopt\n\n\n\nuriCharacter ::: \nuriReserved\n\n\nuriUnescaped\n\n\nuriEscaped\n\n\n\nuriReserved ::: one of ; / ? : @ & = + $ ,\n\n\nuriUnescaped ::: \nuriAlpha\n\n\nDecimalDigit\n\n\nuriMark\n\n\n\nuriEscaped ::: \n%\nHexDigit\nHexDigit\n\n\n\nuriAlpha ::: one of a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\nuriMark ::: one of - _ . ! ~ * ' ( )\n\n\n\nA.8 Regular Expressions\n\nPattern[UnicodeMode, N] :: \nDisjunction[?UnicodeMode, ?N]\n\n\n\nDisjunction[UnicodeMode, N] :: \nAlternative[?UnicodeMode, ?N]\n\n\nAlternative[?UnicodeMode, ?N]\n|\nDisjunction[?UnicodeMode, ?N]\n\n\n\nAlternative[UnicodeMode, N] :: \n[empty]\n\n\nAlternative[?UnicodeMode, ?N]\nTerm[?UnicodeMode, ?N]\n\n\n\nTerm[UnicodeMode, N] :: \nAssertion[?UnicodeMode, ?N]\n\n\nAtom[?UnicodeMode, ?N]\n\n\nAtom[?UnicodeMode, ?N]\nQuantifier\n\n\n\nAssertion[UnicodeMode, N] :: \n^\n\n\n$\n\n\n\\\nb\n\n\n\\\nB\n\n\n(\n?\n=\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n(\n?\n!\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n(\n?\n<=\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n(\n?\n<!\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n\nQuantifier :: \nQuantifierPrefix\n\n\nQuantifierPrefix\n?\n\n\n\nQuantifierPrefix :: \n*\n\n\n+\n\n\n?\n\n\n{\nDecimalDigits[~Sep]\n}\n\n\n{\nDecimalDigits[~Sep]\n,\n}\n\n\n{\nDecimalDigits[~Sep]\n,\nDecimalDigits[~Sep]\n}\n\n\n\nAtom[UnicodeMode, N] :: \nPatternCharacter\n\n\n.\n\n\n\\\nAtomEscape[?UnicodeMode, ?N]\n\n\nCharacterClass[?UnicodeMode]\n\n\n(\nGroupSpecifier[?UnicodeMode]\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n(\n?\n:\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n\nSyntaxCharacter :: one of ^ $ \\ . * + ? ( ) [ ] { } |\n\n\nPatternCharacter :: \nSourceCharacter but not SyntaxCharacter\n\n\n\nAtomEscape[UnicodeMode, N] :: \nDecimalEscape\n\n\nCharacterClassEscape[?UnicodeMode]\n\n\nCharacterEscape[?UnicodeMode]\n\n[+N]\nk\nGroupName[?UnicodeMode]\n\n\n\nCharacterEscape[UnicodeMode] :: \nControlEscape\n\n\nc\nControlLetter\n\n\n0\n[lookahead \u2209 DecimalDigit]\n\n\nHexEscapeSequence\n\n\nRegExpUnicodeEscapeSequence[?UnicodeMode]\n\n\nIdentityEscape[?UnicodeMode]\n\n\n\nControlEscape :: one of f n r t v\n\n\nControlLetter :: one of a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\nGroupSpecifier[UnicodeMode] :: \n[empty]\n\n\n?\nGroupName[?UnicodeMode]\n\n\n\nGroupName[UnicodeMode] :: \n<\nRegExpIdentifierName[?UnicodeMode]\n>\n\n\n\nRegExpIdentifierName[UnicodeMode] :: \nRegExpIdentifierStart[?UnicodeMode]\n\n\nRegExpIdentifierName[?UnicodeMode]\nRegExpIdentifierPart[?UnicodeMode]\n\n\n\nRegExpIdentifierStart[UnicodeMode] :: \nIdentifierStartChar\n\n\n\\\nRegExpUnicodeEscapeSequence[+UnicodeMode]\n\n[~UnicodeMode]\nUnicodeLeadSurrogate\nUnicodeTrailSurrogate\n\n\n\nRegExpIdentifierPart[UnicodeMode] :: \nIdentifierPartChar\n\n\n\\\nRegExpUnicodeEscapeSequence[+UnicodeMode]\n\n[~UnicodeMode]\nUnicodeLeadSurrogate\nUnicodeTrailSurrogate\n\n\n\nRegExpUnicodeEscapeSequence[UnicodeMode] :: [+UnicodeMode]\nu\nHexLeadSurrogate\n\\u\nHexTrailSurrogate\n\n[+UnicodeMode]\nu\nHexLeadSurrogate\n\n[+UnicodeMode]\nu\nHexTrailSurrogate\n\n[+UnicodeMode]\nu\nHexNonSurrogate\n\n[~UnicodeMode]\nu\nHex4Digits\n\n[+UnicodeMode]\nu{\nCodePoint\n}\n\n\n\nUnicodeLeadSurrogate :: \nany Unicode code point in the inclusive range 0xD800 to 0xDBFF\n\n\n\nUnicodeTrailSurrogate :: \nany Unicode code point in the inclusive range 0xDC00 to 0xDFFF\n\n\nEach \\u HexTrailSurrogate for which the choice of associated u HexLeadSurrogate is ambiguous shall be associated with the nearest possible u HexLeadSurrogate that would otherwise have no corresponding \\u HexTrailSurrogate.\n\u00a0\n\nHexLeadSurrogate :: \nHex4Digits\nbut only if the MV of Hex4Digits is in the inclusive range 0xD800 to 0xDBFF\n\n\n\nHexTrailSurrogate :: \nHex4Digits\nbut only if the MV of Hex4Digits is in the inclusive range 0xDC00 to 0xDFFF\n\n\n\nHexNonSurrogate :: \nHex4Digits\nbut only if the MV of Hex4Digits is not in the inclusive range 0xD800 to 0xDFFF\n\n\n\nIdentityEscape[UnicodeMode] :: [+UnicodeMode]\nSyntaxCharacter\n\n[+UnicodeMode]\n/\n\n[~UnicodeMode]\nSourceCharacter but not UnicodeIDContinue\n\n\n\nDecimalEscape :: \nNonZeroDigit\nDecimalDigits[~Sep]opt\n[lookahead \u2209 DecimalDigit]\n\n\n\nCharacterClassEscape[UnicodeMode] :: \nd\n\n\nD\n\n\ns\n\n\nS\n\n\nw\n\n\nW\n\n[+UnicodeMode]\np{\nUnicodePropertyValueExpression\n}\n\n[+UnicodeMode]\nP{\nUnicodePropertyValueExpression\n}\n\n\n\nUnicodePropertyValueExpression :: \nUnicodePropertyName\n=\nUnicodePropertyValue\n\n\nLoneUnicodePropertyNameOrValue\n\n\n\nUnicodePropertyName :: \nUnicodePropertyNameCharacters\n\n\n\nUnicodePropertyNameCharacters :: \nUnicodePropertyNameCharacter\nUnicodePropertyNameCharactersopt\n\n\n\nUnicodePropertyValue :: \nUnicodePropertyValueCharacters\n\n\n\nLoneUnicodePropertyNameOrValue :: \nUnicodePropertyValueCharacters\n\n\n\nUnicodePropertyValueCharacters :: \nUnicodePropertyValueCharacter\nUnicodePropertyValueCharactersopt\n\n\n\nUnicodePropertyValueCharacter :: \nUnicodePropertyNameCharacter\n\n\nDecimalDigit\n\n\n\nUnicodePropertyNameCharacter :: \nControlLetter\n\n\n_\n\n\n\nCharacterClass[UnicodeMode] :: \n[\n[lookahead \u2260 ^]\nClassRanges[?UnicodeMode]\n]\n\n\n[\n^\nClassRanges[?UnicodeMode]\n]\n\n\n\nClassRanges[UnicodeMode] :: \n[empty]\n\n\nNonemptyClassRanges[?UnicodeMode]\n\n\n\nNonemptyClassRanges[UnicodeMode] :: \nClassAtom[?UnicodeMode]\n\n\nClassAtom[?UnicodeMode]\nNonemptyClassRangesNoDash[?UnicodeMode]\n\n\nClassAtom[?UnicodeMode]\n-\nClassAtom[?UnicodeMode]\nClassRanges[?UnicodeMode]\n\n\n\nNonemptyClassRangesNoDash[UnicodeMode] :: \nClassAtom[?UnicodeMode]\n\n\nClassAtomNoDash[?UnicodeMode]\nNonemptyClassRangesNoDash[?UnicodeMode]\n\n\nClassAtomNoDash[?UnicodeMode]\n-\nClassAtom[?UnicodeMode]\nClassRanges[?UnicodeMode]\n\n\n\nClassAtom[UnicodeMode] :: \n-\n\n\nClassAtomNoDash[?UnicodeMode]\n\n\n\nClassAtomNoDash[UnicodeMode] :: \nSourceCharacter but not one of \\ or ] or -\n\n\n\\\nClassEscape[?UnicodeMode]\n\n\n\nClassEscape[UnicodeMode] :: \nb\n\n[+UnicodeMode]\n-\n\n\nCharacterClassEscape[?UnicodeMode]\n\n\nCharacterEscape[?UnicodeMode]\n\n\n\n\n\nB Additional ECMAScript Features for Web Browsers\nThe ECMAScript language syntax and semantics defined in this annex are required when the ECMAScript host is a web browser. The content of this annex is normative but optional if the ECMAScript host is not a web browser.\nNote\nThis annex describes various legacy features and other characteristics of web browser ECMAScript hosts.\n All of the language features and behaviours specified in this annex \nhave one or more undesirable characteristics and in the absence of \nlegacy usage would be removed from this specification. However, the \nusage of these features by large numbers of existing web pages means \nthat web browsers must continue to support them. The specifications in \nthis annex define the requirements for interoperable implementations of \nthese legacy features.\nThese features are not considered part of the core ECMAScript \nlanguage. Programmers should not use or assume the existence of these \nfeatures and behaviours when writing new ECMAScript code. ECMAScript \nimplementations are discouraged from implementing these features unless \nthe implementation is part of a web browser or is required to run the \nsame legacy ECMAScript code that web browsers encounter.\n\n\nB.1 Additional Syntax\n\nB.1.1 HTML-like Comments\nThe syntax and semantics of 12.4 is extended as follows except that this extension is not allowed when parsing source text using the goal symbol Module:\nSyntax\n\nComment :: \nMultiLineComment\n\n\nSingleLineComment\n\n\nSingleLineHTMLOpenComment\n\n\nSingleLineHTMLCloseComment\n\n\nSingleLineDelimitedComment\n\n\n\nMultiLineComment :: \n/*\nFirstCommentLineopt\nLineTerminator\nMultiLineCommentCharsopt\n*/\nHTMLCloseCommentopt\n\n\n\nFirstCommentLine :: \nSingleLineDelimitedCommentChars\n\n\n\nSingleLineHTMLOpenComment :: \n<!--\nSingleLineCommentCharsopt\n\n\n\nSingleLineHTMLCloseComment :: \nLineTerminatorSequence\nHTMLCloseComment\n\n\n\nSingleLineDelimitedComment :: \n/*\nSingleLineDelimitedCommentCharsopt\n*/\n\n\n\nHTMLCloseComment :: \nWhiteSpaceSequenceopt\nSingleLineDelimitedCommentSequenceopt\n-->\nSingleLineCommentCharsopt\n\n\n\nSingleLineDelimitedCommentChars :: \nSingleLineNotAsteriskChar\nSingleLineDelimitedCommentCharsopt\n\n\n*\nSingleLinePostAsteriskCommentCharsopt\n\n\n\nSingleLineNotAsteriskChar :: \nSourceCharacter but not one of * or LineTerminator\n\n\n\nSingleLinePostAsteriskCommentChars :: \nSingleLineNotForwardSlashOrAsteriskChar\nSingleLineDelimitedCommentCharsopt\n\n\n*\nSingleLinePostAsteriskCommentCharsopt\n\n\n\nSingleLineNotForwardSlashOrAsteriskChar :: \nSourceCharacter but not one of / or * or LineTerminator\n\n\n\nWhiteSpaceSequence :: \nWhiteSpace\nWhiteSpaceSequenceopt\n\n\n\nSingleLineDelimitedCommentSequence :: \nSingleLineDelimitedComment\nWhiteSpaceSequenceopt\nSingleLineDelimitedCommentSequenceopt\n\n\n\nSimilar to a MultiLineComment that contains a line terminator code point, a SingleLineHTMLCloseComment is considered to be a LineTerminator for purposes of parsing by the syntactic grammar.\n\n\nB.1.2 Regular Expressions Patterns\nThe syntax of 22.2.1\n is modified and extended as follows. These changes introduce \nambiguities that are broken by the ordering of grammar productions and \nby contextual information. When parsing using the following grammar, \neach alternative is considered only if previous production alternatives \ndo not match.\nThis alternative pattern grammar and semantics only changes the\n syntax and semantics of BMP patterns. The following grammar extensions \ninclude productions parameterized with the [UnicodeMode] parameter. \nHowever, none of these extensions change the syntax of Unicode patterns \nrecognized when parsing with the [UnicodeMode] parameter present on the goal symbol.\nSyntax\n\nTerm[UnicodeMode, N] :: [+UnicodeMode]\nAssertion[+UnicodeMode, ?N]\n\n[+UnicodeMode]\nAtom[+UnicodeMode, ?N]\nQuantifier\n\n[+UnicodeMode]\nAtom[+UnicodeMode, ?N]\n\n[~UnicodeMode]\nQuantifiableAssertion[?N]\nQuantifier\n\n[~UnicodeMode]\nAssertion[~UnicodeMode, ?N]\n\n[~UnicodeMode]\nExtendedAtom[?N]\nQuantifier\n\n[~UnicodeMode]\nExtendedAtom[?N]\n\n\n\nAssertion[UnicodeMode, N] :: \n^\n\n\n$\n\n\n\\\nb\n\n\n\\\nB\n\n[+UnicodeMode]\n(\n?\n=\nDisjunction[+UnicodeMode, ?N]\n)\n\n[+UnicodeMode]\n(\n?\n!\nDisjunction[+UnicodeMode, ?N]\n)\n\n[~UnicodeMode]\nQuantifiableAssertion[?N]\n\n\n(\n?\n<=\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n(\n?\n<!\nDisjunction[?UnicodeMode, ?N]\n)\n\n\n\nQuantifiableAssertion[N] :: \n(\n?\n=\nDisjunction[~UnicodeMode, ?N]\n)\n\n\n(\n?\n!\nDisjunction[~UnicodeMode, ?N]\n)\n\n\n\nExtendedAtom[N] :: \n.\n\n\n\\\nAtomEscape[~UnicodeMode, ?N]\n\n\n\\\n[lookahead = c]\n\n\nCharacterClass[~UnicodeMode]\n\n\n(\nDisjunction[~UnicodeMode, ?N]\n)\n\n\n(\n?\n:\nDisjunction[~UnicodeMode, ?N]\n)\n\n\nInvalidBracedQuantifier\n\n\nExtendedPatternCharacter\n\n\n\nInvalidBracedQuantifier :: \n{\nDecimalDigits[~Sep]\n}\n\n\n{\nDecimalDigits[~Sep]\n,\n}\n\n\n{\nDecimalDigits[~Sep]\n,\nDecimalDigits[~Sep]\n}\n\n\n\nExtendedPatternCharacter :: \nSourceCharacter but not one of ^\n$\n\\\n.\n*\n+\n?\n(\n)\n[\n|\n\n\n\nAtomEscape[UnicodeMode, N] :: [+UnicodeMode]\nDecimalEscape\n\n[~UnicodeMode]\nDecimalEscape\nbut only if the CapturingGroupNumber of DecimalEscape is \u2264 NcapturingParens\n\n\nCharacterClassEscape[?UnicodeMode]\n\n\nCharacterEscape[?UnicodeMode, ?N]\n\n[+N]\nk\nGroupName[?UnicodeMode]\n\n\n\nCharacterEscape[UnicodeMode, N] :: \nControlEscape\n\n\nc\nControlLetter\n\n\n0\n[lookahead \u2209 DecimalDigit]\n\n\nHexEscapeSequence\n\n\nRegExpUnicodeEscapeSequence[?UnicodeMode]\n\n[~UnicodeMode]\nLegacyOctalEscapeSequence\n\n\nIdentityEscape[?UnicodeMode, ?N]\n\n\n\nIdentityEscape[UnicodeMode, N] :: [+UnicodeMode]\nSyntaxCharacter\n\n[+UnicodeMode]\n/\n\n[~UnicodeMode]\nSourceCharacterIdentityEscape[?N]\n\n\n\nSourceCharacterIdentityEscape[N] :: [~N]\nSourceCharacter but not c\n\n[+N]\nSourceCharacter but not one of c or k\n\n\n\nClassAtomNoDash[UnicodeMode, N] :: \nSourceCharacter but not one of \\ or ] or -\n\n\n\\\nClassEscape[?UnicodeMode, ?N]\n\n\n\\\n[lookahead = c]\n\n\n\nClassEscape[UnicodeMode, N] :: \nb\n\n[+UnicodeMode]\n-\n\n[~UnicodeMode]\nc\nClassControlLetter\n\n\nCharacterClassEscape[?UnicodeMode]\n\n\nCharacterEscape[?UnicodeMode, ?N]\n\n\n\nClassControlLetter :: \nDecimalDigit\n\n\n_\n\n\n\nNote\nWhen the same left-hand sides occurs with both [+UnicodeMode]\n and [~UnicodeMode] guards it is to control the disambiguation priority.\n\n\nB.1.2.1 Static Semantics: Early Errors\nThe semantics of 22.2.1.1 is extended as follows:\n\nExtendedAtom :: InvalidBracedQuantifier\n\n\n\n\n            It is a Syntax Error if any source text is matched by this production.\n          \n\nAdditionally, the rules for the following productions are modified with the addition of the highlighted text:\n\nNonemptyClassRanges :: \nClassAtom\n-\nClassAtom\nClassRanges\n\n\n\n\n\n            It is a Syntax Error if IsCharacterClass of the first ClassAtom is true or IsCharacterClass of the second ClassAtom is true and this production has a [UnicodeMode] parameter.\n          \n\n            It is a Syntax Error if IsCharacterClass of the first ClassAtom is false and IsCharacterClass of the second ClassAtom is false and the CharacterValue of the first ClassAtom is larger than the CharacterValue of the second ClassAtom.\n          \n\n\nNonemptyClassRangesNoDash :: \nClassAtomNoDash\n-\nClassAtom\nClassRanges\n\n\n\n\n\n            It is a Syntax Error if IsCharacterClass of ClassAtomNoDash is true or IsCharacterClass of ClassAtom is true and this production has a [UnicodeMode] parameter.\n          \n\n            It is a Syntax Error if IsCharacterClass of ClassAtomNoDash is false and IsCharacterClass of ClassAtom is false and the CharacterValue of ClassAtomNoDash is larger than the CharacterValue of ClassAtom.\n          \n\n\n\nB.1.2.2 Static Semantics: IsCharacterClass\nThe semantics of 22.2.1.3 is extended as follows:\n\nClassAtomNoDash :: \n\\\n[lookahead = c]\n\n\n\n1. Return false.\n\n\nB.1.2.3 Static Semantics: CharacterValue\nThe semantics of 22.2.1.4 is extended as follows:\n\nClassAtomNoDash :: \n\\\n[lookahead = c]\n\n\n\n1. Return the numeric value of U+005C (REVERSE SOLIDUS).\n\nClassEscape :: \nc\nClassControlLetter\n\n\n\n1. Let ch be the code point matched by ClassControlLetter.2. Let i be the numeric value of ch.3. Return the remainder of dividing i by 32.\n\nCharacterEscape :: LegacyOctalEscapeSequence\n\n\n1. Return the MV of LegacyOctalEscapeSequence (see 12.8.4.3).\n\n\nB.1.2.4 Runtime Semantics: CompileSubpattern\nThe semantics of CompileSubpattern is extended as follows:\nWithin the rule for \nTerm :: \nAtom\nQuantifier\n\n\n, references to \u201c\nAtom :: \n(\nGroupSpecifier\nDisjunction\n)\n\n\n \u201d are to be interpreted as meaning \u201c\nAtom :: \n(\nGroupSpecifier\nDisjunction\n)\n\n\n \u201d or \u201c\nExtendedAtom :: \n(\nDisjunction\n)\n\n\n \u201d.\nThe rule for \nTerm :: \nQuantifiableAssertion\nQuantifier\n\n\n is the same as for \nTerm :: \nAtom\nQuantifier\n\n\n but with QuantifiableAssertion substituted for Atom.\nThe rule for \nTerm :: \nExtendedAtom\nQuantifier\n\n\n is the same as for \nTerm :: \nAtom\nQuantifier\n\n\n but with ExtendedAtom substituted for Atom.\nThe rule for \nTerm :: ExtendedAtom\n\n is the same as for \nTerm :: Atom\n\n but with ExtendedAtom substituted for Atom.\n\n\nB.1.2.5 Runtime Semantics: CompileAssertion\nCompileAssertion rules for the \nAssertion :: \n(\n?\n=\nDisjunction\n)\n\n\n and \nAssertion :: \n(\n?\n!\nDisjunction\n)\n\n\n productions are also used for the QuantifiableAssertion productions, but with QuantifiableAssertion substituted for Assertion.\n\n\nB.1.2.6 Runtime Semantics: CompileAtom\nCompileAtom rules for the Atom productions except for \nAtom :: PatternCharacter\n\n are also used for the ExtendedAtom productions, but with ExtendedAtom substituted for Atom. The following rules, with parameter direction, are also added:\n\nExtendedAtom :: \n\\\n[lookahead = c]\n\n\n\n1. Let A be the CharSet containing the single character \\ U+005C (REVERSE SOLIDUS).2. Return CharacterSetMatcher(A, false, direction).\n\nExtendedAtom :: ExtendedPatternCharacter\n\n\n1. Let ch be the character represented by ExtendedPatternCharacter.2. Let A be a one-element CharSet containing the character ch.3. Return CharacterSetMatcher(A, false, direction).\n\n\nB.1.2.7 Runtime Semantics: CompileToCharSet\nThe semantics of 22.2.2.9 is extended as follows:\nThe following two rules replace the corresponding rules of CompileToCharSet.\n\nNonemptyClassRanges :: \nClassAtom\n-\nClassAtom\nClassRanges\n\n\n\n1. Let A be CompileToCharSet of the first ClassAtom.2. Let B be CompileToCharSet of the second ClassAtom.3. Let C be CompileToCharSet of ClassRanges.4. Let D be CharacterRangeOrUnion(A, B).5. Return the union of D and C.\n\nNonemptyClassRangesNoDash :: \nClassAtomNoDash\n-\nClassAtom\nClassRanges\n\n\n\n1. Let A be CompileToCharSet of ClassAtomNoDash.2. Let B be CompileToCharSet of ClassAtom.3. Let C be CompileToCharSet of ClassRanges.4. Let D be CharacterRangeOrUnion(A, B).5. Return the union of D and C.\nIn addition, the following rules are added to CompileToCharSet.\n\nClassEscape :: \nc\nClassControlLetter\n\n\n\n1. Let cv be the CharacterValue of this ClassEscape.2. Let c be the character whose character value is cv.3. Return the CharSet containing the single character c.\n\nClassAtomNoDash :: \n\\\n[lookahead = c]\n\n\n\n1. Return the CharSet containing the single character \\ U+005C (REVERSE SOLIDUS).\nNoteThis production can only be reached from the sequence \\c within a character class where it is not followed by an acceptable control character.\n\nB.1.2.7.1 CharacterRangeOrUnion ( A, B )\nThe abstract operation CharacterRangeOrUnion takes arguments A (a CharSet) and B (a CharSet) and returns a CharSet. It performs the following steps when called:\n1. If Unicode is false, thena. If A does not contain exactly one character or B does not contain exactly one character, theni. Let C be the CharSet containing the single character - U+002D (HYPHEN-MINUS).ii. Return the union of CharSets A, B and C.2. Return CharacterRange(A, B).\n\n\n\n\n\nB.2 Additional Built-in Properties\nWhen the ECMAScript host is a web browser the following additional properties of the standard built-in objects are defined.\n\nB.2.1 Additional Properties of the Global Object\nThe entries in Table 93 are added to Table 6.\nTable 93: Additional Well-known Intrinsic Objects\n\n\n\n              Intrinsic Name\n            \n\n              Global Name\n            \n\n              ECMAScript Language Association\n            \n\n\n\n%escape%\n\n\nescape\n\n\n              The escape function (B.2.1.1)\n            \n\n\n\n%unescape%\n\n\nunescape\n\n\n              The unescape function (B.2.1.2)\n            \n\n\n\n\nB.2.1.1 escape ( string )\nThe escape function is a property of the global object. It computes a new version of a String value in which certain code units have been replaced by a hexadecimal escape sequence.\nFor those code units being replaced whose value is 0x00FF or less, a two-digit escape sequence of the form %xx is used. For those characters being replaced whose code unit value is greater than 0x00FF, a four-digit escape sequence of the form %uxxxx is used.\nThe escape function is the %escape% intrinsic object. When the escape function is called with one argument string, the following steps are taken:\n1. Set string to ?\u00a0ToString(string).2. Let length be the number of code units in string.3. Let R be the empty String.4. Let k be 0.5. Repeat, while k < length,a. Let char be the code unit (represented as a 16-bit unsigned integer) at index k within string.b. If char is one of the code units in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@*_+-./\", theni. Let S be the String value containing the single code unit char.c. Else if char \u2265 256, theni. Let n be the numeric value of char.ii. Let S be the string-concatenation of:\"%u\"the String representation of n, formatted as a four-digit uppercase hexadecimal number, padded to the left with zeroes if necessaryd. Else,i. Assert: char < 256.ii. Let n be the numeric value of char.iii. Let S be the string-concatenation of:\"%\"the String representation of n, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessarye. Set R to the string-concatenation of R and S.f. Set k to k + 1.6. Return R.\nNote\nThe encoding is partly based on the encoding described in \nRFC 1738, but the entire encoding specified in this standard is \ndescribed above without regard to the contents of RFC 1738. This \nencoding does not reflect changes to RFC 1738 made by RFC 3986.\n\n\n\nB.2.1.2 unescape ( string )\nThe unescape function is a property of the global object. It computes a new version of a String value in which each escape sequence of the sort that might be introduced by the escape function is replaced with the code unit that it represents.\nThe unescape function is the %unescape% intrinsic object. When the unescape function is called with one argument string, the following steps are taken:\n1. Set string to ?\u00a0ToString(string).2. Let length be the number of code units in string.3. Let R be the empty String.4. Let k be 0.5. Repeat, while k \u2260 length,a. Let c be the code unit at index k within string.b. If c is the code unit 0x0025 (PERCENT SIGN), theni. Let hexEscape be the empty String.ii. Let skip be 0.iii. If k \u2264 length - 6 and the code unit at index k + 1 within string is the code unit 0x0075 (LATIN SMALL LETTER U), then1. Set hexEscape to the substring of string from k + 2 to k + 6.2. Set skip to 5.iv. Else if k \u2264 length - 3, then1. Set hexEscape to the substring of string from k + 1 to k + 3.2. Set skip to 2.v. If hexEscape can be interpreted as an expansion of HexDigits[~Sep], then1. Let hexIntegerLiteral be the string-concatenation of \"0x\" and hexEscape.2. Let n be !\u00a0ToNumber(hexIntegerLiteral).3. Set c to the code unit whose value is \u211d(n).4. Set k to k + skip.c. Set R to the string-concatenation of R and c.d. Set k to k + 1.6. Return R.\n\n\n\nB.2.2 Additional Properties of the String.prototype Object\n\nB.2.2.1 String.prototype.substr ( start, length )\nThe substr method takes two arguments, start and length, and returns a substring of the result of converting the this value to a String, starting from index start and running for length code units (or through the end of the String if length is undefined). If start is negative, it is treated as sourceLength + start where sourceLength is the length of the String. The result is a String value, not a String object. The following steps are taken:\n1. Let O be ?\u00a0RequireObjectCoercible(this value).2. Let S be ?\u00a0ToString(O).3. Let size be the length of S.4. Let intStart be ?\u00a0ToIntegerOrInfinity(start).5. If intStart is -\u221e, set intStart to 0.6. Else if intStart < 0, set intStart to max(size + intStart, 0).7. If length is undefined, let intLength be size; otherwise let intLength be ?\u00a0ToIntegerOrInfinity(length).8. If intStart is +\u221e, intLength \u2264 0, or intLength is +\u221e, return the empty String.9. Let intEnd be min(intStart + intLength, size).10. If intStart \u2265 intEnd, return the empty String.11. Return the substring of S from intStart to intEnd.\nNote\nThe substr function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n\n\n\nB.2.2.2 String.prototype.anchor ( name )\nWhen the anchor method is called with argument name, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"a\", \"name\", name).\n\nB.2.2.2.1 CreateHTML ( string, tag, attribute, value )\nThe abstract operation CreateHTML takes arguments string, tag (a String), attribute (a String), and value and returns either a normal completion containing a String or an abrupt completion. It performs the following steps when called:\n1. Let str be ?\u00a0RequireObjectCoercible(string).2. Let S be ?\u00a0ToString(str).3. Let p1 be the string-concatenation of \"<\" and tag.4. If attribute is not the empty String, thena. Let V be ?\u00a0ToString(value).b. Let escapedV be the String value that is the same as V except that each occurrence of the code unit 0x0022 (QUOTATION MARK) in V has been replaced with the six code unit sequence \"&quot;\".c. Set p1 to the string-concatenation of:p1the code unit 0x0020 (SPACE)attributethe code unit 0x003D (EQUALS SIGN)the code unit 0x0022 (QUOTATION MARK)escapedVthe code unit 0x0022 (QUOTATION MARK)5. Let p2 be the string-concatenation of p1 and \">\".6. Let p3 be the string-concatenation of p2 and S.7. Let p4 be the string-concatenation of p3, \"</\", tag, and \">\".8. Return p4.\n\n\n\nB.2.2.3 String.prototype.big ( )\nWhen the big method is called with no arguments, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"big\", \"\", \"\").\n\n\nB.2.2.4 String.prototype.blink ( )\nWhen the blink method is called with no arguments, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"blink\", \"\", \"\").\n\n\nB.2.2.5 String.prototype.bold ( )\nWhen the bold method is called with no arguments, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"b\", \"\", \"\").\n\n\nB.2.2.6 String.prototype.fixed ( )\nWhen the fixed method is called with no arguments, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"tt\", \"\", \"\").\n\n\nB.2.2.7 String.prototype.fontcolor ( color )\nWhen the fontcolor method is called with argument color, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"font\", \"color\", color).\n\n\nB.2.2.8 String.prototype.fontsize ( size )\nWhen the fontsize method is called with argument size, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"font\", \"size\", size).\n\n\nB.2.2.9 String.prototype.italics ( )\nWhen the italics method is called with no arguments, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"i\", \"\", \"\").\n\n\nB.2.2.10 String.prototype.link ( url )\nWhen the link method is called with argument url, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"a\", \"href\", url).\n\n\nB.2.2.11 String.prototype.small ( )\nWhen the small method is called with no arguments, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"small\", \"\", \"\").\n\n\nB.2.2.12 String.prototype.strike ( )\nWhen the strike method is called with no arguments, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"strike\", \"\", \"\").\n\n\nB.2.2.13 String.prototype.sub ( )\nWhen the sub method is called with no arguments, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"sub\", \"\", \"\").\n\n\nB.2.2.14 String.prototype.sup ( )\nWhen the sup method is called with no arguments, the following steps are taken:\n1. Let S be the this value.2. Return ?\u00a0CreateHTML(S, \"sup\", \"\", \"\").\n\n\nB.2.2.15 String.prototype.trimLeft ( )\nNote\nThe property \"trimStart\" is preferred. The \"trimLeft\" property is provided principally for compatibility with old code. It is recommended that the \"trimStart\" property be used in new ECMAScript code.\n\nThe initial value of the \"trimLeft\" property is %String.prototype.trimStart%, defined in 22.1.3.32.\n\n\nB.2.2.16 String.prototype.trimRight ( )\nNote\nThe property \"trimEnd\" is preferred. The \"trimRight\" property is provided principally for compatibility with old code. It is recommended that the \"trimEnd\" property be used in new ECMAScript code.\n\nThe initial value of the \"trimRight\" property is %String.prototype.trimEnd%, defined in 22.1.3.31.\n\n\n\nB.2.3 Additional Properties of the Date.prototype Object\n\nB.2.3.1 Date.prototype.getYear ( )\nNote\nThe getFullYear method is preferred for nearly all purposes, because it avoids the \u201cyear 2000 problem.\u201d\n\nWhen the getYear method is called with no arguments, the following steps are taken:\n1. Let t be ?\u00a0thisTimeValue(this value).2. If t is NaN, return NaN.3. Return YearFromTime(LocalTime(t)) - 1900\ud835\udd3d.\n\n\nB.2.3.2 Date.prototype.setYear ( year )\nNote\nThe setFullYear method is preferred for nearly all purposes, because it avoids the \u201cyear 2000 problem.\u201d\n\nWhen the setYear method is called with one argument year, the following steps are taken:\n1. Let t be ?\u00a0thisTimeValue(this value).2. Let y be ?\u00a0ToNumber(year).3. If t is NaN, set t to +0\ud835\udd3d; otherwise, set t to LocalTime(t).4. If y is NaN, thena. Set the [[DateValue]] internal slot of this Date object to NaN.b. Return NaN.5. Let yi be !\u00a0ToIntegerOrInfinity(y).6. If 0 \u2264 yi \u2264 99, let yyyy be 1900\ud835\udd3d + \ud835\udd3d(yi).7. Else, let yyyy be y.8. Let d be MakeDay(yyyy, MonthFromTime(t), DateFromTime(t)).9. Let date be UTC(MakeDate(d, TimeWithinDay(t))).10. Set the [[DateValue]] internal slot of this Date object to TimeClip(date).11. Return the value of the [[DateValue]] internal slot of this Date object.\n\n\nB.2.3.3 Date.prototype.toGMTString ( )\nNote\nThe toUTCString method is preferred. The toGMTString method is provided principally for compatibility with old code.\n\nThe initial value of the \"toGMTString\" property is %Date.prototype.toUTCString%, defined in 21.4.4.43.\n\n\n\nB.2.4 Additional Properties of the RegExp.prototype Object\n\nB.2.4.1 RegExp.prototype.compile ( pattern, flags )\nWhen the compile method is called with arguments pattern and flags, the following steps are taken:\n1. Let O be the this value.2. Perform ?\u00a0RequireInternalSlot(O, [[RegExpMatcher]]).3. If Type(pattern) is Object and pattern has a [[RegExpMatcher]] internal slot, thena. If flags is not undefined, throw a TypeError exception.b. Let P be pattern.[[OriginalSource]].c. Let F be pattern.[[OriginalFlags]].4. Else,a. Let P be pattern.b. Let F be flags.5. Return ?\u00a0RegExpInitialize(O, P, F).\nNote\nThe compile method completely reinitializes the this\n value RegExp with a new pattern and flags. An implementation may \ninterpret use of this method as an assertion that the resulting RegExp \nobject will be used multiple times and hence is a candidate for extra \noptimization.\n\n\n\n\n\nB.3 Other Additional Features\n\nB.3.1 Labelled Function Declarations\nPrior to ECMAScript 2015, the specification of LabelledStatement did not allow for the association of a statement label with a FunctionDeclaration. However, a labelled FunctionDeclaration was an allowable extension for non-strict code\n and most browser-hosted ECMAScript implementations supported that \nextension. In ECMAScript 2015 and later, the grammar production for LabelledStatement permits use of FunctionDeclaration as a LabelledItem but 14.13.1 includes an Early Error rule that produces a Syntax Error if that occurs. That rule is modified with the addition of the highlighted text:\n\nLabelledItem : FunctionDeclaration\n\n\n\n\n          It is a Syntax Error if any source text that is strict mode code is matched by this production.\n        \n\nNote\nThe early error rules for WithStatement, IfStatement, and IterationStatement prevent these statements from containing a labelled FunctionDeclaration in non-strict code.\n\n\n\nB.3.2 Block-Level Function Declarations Web Legacy Compatibility Semantics\nPrior to ECMAScript 2015, the ECMAScript specification did not define the occurrence of a FunctionDeclaration as an element of a Block statement's StatementList. However, support for that form of FunctionDeclaration\n was an allowable extension and most browser-hosted ECMAScript \nimplementations permitted them. Unfortunately, the semantics of such \ndeclarations differ among those implementations. Because of these \nsemantic differences, existing web ECMAScript code that uses Block\n level function declarations is only portable among browser \nimplementations if the usage only depends upon the semantic intersection\n of all of the browser implementations for such declarations. The \nfollowing are the use cases that fall within that intersection \nsemantics:\n\n\nA function is declared and only referenced within a single block.\n\n\n              One or more FunctionDeclarations whose BindingIdentifier is the name f occur within the function code of an enclosing function g and that declaration is nested within a Block.\n            \n\n              No other declaration of f that is not a var declaration occurs within the function code of g.\n            \n\n              All occurrences of f as an IdentifierReference are within the StatementList of the Block containing the declaration of f.\n            \n\n\n\nA function is declared and possibly used within a single Block but also referenced by an inner function definition that is not contained within that same Block.\n\n\n              One or more FunctionDeclarations whose BindingIdentifier is the name f occur within the function code of an enclosing function g and that declaration is nested within a Block.\n            \n\n              No other declaration of f that is not a var declaration occurs within the function code of g.\n            \n\n              There may be occurrences of f as an IdentifierReference within the StatementList of the Block containing the declaration of f.\n            \n\n              There is at least one occurrence of f as an IdentifierReference within another function h that is nested within g and no other declaration of f shadows the references to f from within h.\n            \n\n              All invocations of h occur after the declaration of f has been evaluated.\n            \n\n\n\nA function is declared and possibly used within a single block but also referenced within subsequent blocks.\n\n\n              One or more FunctionDeclaration whose BindingIdentifier is the name f occur within the function code of an enclosing function g and that declaration is nested within a Block.\n            \n\n              No other declaration of f that is not a var declaration occurs within the function code of g.\n            \n\n              There may be occurrences of f as an IdentifierReference within the StatementList of the Block containing the declaration of f.\n            \n\n              There is at least one occurrence of f as an IdentifierReference within the function code of g that lexically follows the Block containing the declaration of f.\n            \n\n\n\nThe first use case is interoperable with the semantics of Block\n level function declarations provided by ECMAScript 2015. Any \npre-existing ECMAScript code that employs that use case will operate \nusing the Block level function declarations semantics defined by clauses\n 10, 14, and 15.\nECMAScript 2015 interoperability for the second and third use cases requires the following extensions to the clause 10, clause 15, clause 19.2.1 and clause 16.1.7 semantics.\nIf an ECMAScript implementation has a mechanism for reporting \ndiagnostic warning messages, a warning should be produced when code \ncontains a FunctionDeclaration\n for which these compatibility semantics are applied and introduce \nobservable differences from non-compatibility semantics. For example, if\n a var binding is not introduced because its introduction would create \nan early error, a warning message should not be produced.\n\nB.3.2.1 Changes to FunctionDeclarationInstantiation\nDuring FunctionDeclarationInstantiation the following steps are performed in place of step 29:\n1. If strict is false, thena. For each FunctionDeclaration f that is directly contained in the StatementList of a Block, CaseClause, or DefaultClause, doi. Let F be StringValue of the BindingIdentifier of f.ii. If replacing the FunctionDeclaration f with a VariableStatement that has F as a BindingIdentifier would not produce any Early Errors for func and F is not an element of parameterNames, then1. NOTE: A var binding for F is only instantiated here if it is neither a VarDeclaredName, the name of a formal parameter, or another FunctionDeclaration.2. If initializedBindings does not contain F and F is not \"arguments\", thena. Perform !\u00a0varEnv.CreateMutableBinding(F, false).b. Perform !\u00a0varEnv.InitializeBinding(F, undefined).c. Append F to instantiatedVarNames.3. When the FunctionDeclaration f is evaluated, perform the following steps in place of the FunctionDeclaration Evaluation algorithm provided in 15.2.6:a. Let fenv be the running execution context's VariableEnvironment.b. Let benv be the running execution context's LexicalEnvironment.c. Let fobj be !\u00a0benv.GetBindingValue(F, false).d. Perform !\u00a0fenv.SetMutableBinding(F, fobj, false).e. Return unused.\n\n\nB.3.2.2 Changes to GlobalDeclarationInstantiation\nDuring GlobalDeclarationInstantiation the following steps are performed in place of step 12:\n1. Perform the following steps:a. Let strict be IsStrict of script.b. If strict is false, theni. Let declaredFunctionOrVarNames be the list-concatenation of declaredFunctionNames and declaredVarNames.ii. For each FunctionDeclaration f that is directly contained in the StatementList of a Block, CaseClause, or DefaultClause Contained within script, do1. Let F be StringValue of the BindingIdentifier of f.2. If replacing the FunctionDeclaration f with a VariableStatement that has F as a BindingIdentifier would not produce any Early Errors for script, thena. If env.HasLexicalDeclaration(F) is false, theni. Let fnDefinable be ?\u00a0env.CanDeclareGlobalVar(F).ii. If fnDefinable is true, theni. NOTE: A var binding for F is only instantiated here if it is neither a VarDeclaredName nor the name of another FunctionDeclaration.ii. If declaredFunctionOrVarNames does not contain F, theni. Perform ?\u00a0env.CreateGlobalVarBinding(F, false).ii. Append F to declaredFunctionOrVarNames.iii. When the FunctionDeclaration f is evaluated, perform the following steps in place of the FunctionDeclaration Evaluation algorithm provided in 15.2.6:i. Let genv be the running execution context's VariableEnvironment.ii. Let benv be the running execution context's LexicalEnvironment.iii. Let fobj be !\u00a0benv.GetBindingValue(F, false).iv. Perform ?\u00a0genv.SetMutableBinding(F, fobj, false).v. Return unused.\n\n\nB.3.2.3 Changes to EvalDeclarationInstantiation\nDuring EvalDeclarationInstantiation the following steps are performed in place of step 11:\n1. If strict is false, thena. Let declaredFunctionOrVarNames be the list-concatenation of declaredFunctionNames and declaredVarNames.b. For each FunctionDeclaration f that is directly contained in the StatementList of a Block, CaseClause, or DefaultClause Contained within body, doi. Let F be StringValue of the BindingIdentifier of f.ii. If replacing the FunctionDeclaration f with a VariableStatement that has F as a BindingIdentifier would not produce any Early Errors for body, then1. Let bindingExists be false.2. Let thisEnv be lexEnv.3. Assert: The following loop will terminate.4. Repeat, while thisEnv is not the same as varEnv,a. If thisEnv is not an object Environment Record, theni. If !\u00a0thisEnv.HasBinding(F) is true, theni. Let bindingExists be true.b. Set thisEnv to thisEnv.[[OuterEnv]].5. If bindingExists is false and varEnv is a global Environment Record, thena. If varEnv.HasLexicalDeclaration(F) is false, theni. Let fnDefinable be ?\u00a0varEnv.CanDeclareGlobalVar(F).b. Else,i. Let fnDefinable be false.6. Else,a. Let fnDefinable be true.7. If bindingExists is false and fnDefinable is true, thena. If declaredFunctionOrVarNames does not contain F, theni. If varEnv is a global Environment Record, theni. Perform ?\u00a0varEnv.CreateGlobalVarBinding(F, true).ii. Else,i. Let bindingExists be !\u00a0varEnv.HasBinding(F).ii. If bindingExists is false, theni. Perform !\u00a0varEnv.CreateMutableBinding(F, true).ii. Perform !\u00a0varEnv.InitializeBinding(F, undefined).iii. Append F to declaredFunctionOrVarNames.b. When the FunctionDeclaration f is evaluated, perform the following steps in place of the FunctionDeclaration Evaluation algorithm provided in 15.2.6:i. Let genv be the running execution context's VariableEnvironment.ii. Let benv be the running execution context's LexicalEnvironment.iii. Let fobj be !\u00a0benv.GetBindingValue(F, false).iv. Perform ?\u00a0genv.SetMutableBinding(F, fobj, false).v. Return unused.\n\n\nB.3.2.4 Changes to Block Static Semantics: Early Errors\nThe rules for the following production in 14.2.1 are modified with the addition of the highlighted text:\n\nBlock : \n{\nStatementList\n}\n\n\n\n\n\n            It is a Syntax Error if the LexicallyDeclaredNames of StatementList contains any duplicate entries, unless the source text matched by this production is not strict mode code and the duplicate entries are only bound by FunctionDeclarations.\n          \n\n            It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList also occurs in the VarDeclaredNames of StatementList.\n          \n\n\n\nB.3.2.5 Changes to switch Statement Static Semantics: Early Errors\nThe rules for the following production in 14.12.1 are modified with the addition of the highlighted text:\n\nSwitchStatement : \nswitch\n(\nExpression\n)\nCaseBlock\n\n\n\n\n\n            It is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any duplicate entries, unless the source text matched by this production is not strict mode code and the duplicate entries are only bound by FunctionDeclarations.\n          \n\n            It is a Syntax Error if any element of the LexicallyDeclaredNames of CaseBlock also occurs in the VarDeclaredNames of CaseBlock.\n          \n\n\n\nB.3.2.6 Changes to BlockDeclarationInstantiation\nDuring BlockDeclarationInstantiation the following steps are performed in place of step 3.a.ii.1:\n1. If !\u00a0env.HasBinding(dn) is false, thena. Perform !\u00a0env.CreateMutableBinding(dn, false).\nDuring BlockDeclarationInstantiation the following steps are performed in place of step 3.b.iii:\n1. Perform the following steps:a. If the binding for fn in env is an uninitialized binding, theni. Perform !\u00a0env.InitializeBinding(fn, fo).b. Else,i. Assert: d is a FunctionDeclaration.ii. Perform !\u00a0env.SetMutableBinding(fn, fo, false).\n\n\n\nB.3.3 FunctionDeclarations in IfStatement Statement Clauses\nThe following augments the IfStatement production in 14.6:\n\nIfStatement[Yield, Await, Return] : \nif\n(\nExpression[+In, ?Yield, ?Await]\n)\nFunctionDeclaration[?Yield, ?Await, ~Default]\nelse\nStatement[?Yield, ?Await, ?Return]\n\n\nif\n(\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\nelse\nFunctionDeclaration[?Yield, ?Await, ~Default]\n\n\nif\n(\nExpression[+In, ?Yield, ?Await]\n)\nFunctionDeclaration[?Yield, ?Await, ~Default]\nelse\nFunctionDeclaration[?Yield, ?Await, ~Default]\n\n\nif\n(\nExpression[+In, ?Yield, ?Await]\n)\nFunctionDeclaration[?Yield, ?Await, ~Default]\n[lookahead \u2260 else]\n\n\n\nThis production only applies when parsing non-strict code. Source text matched by this production is processed as if each matching occurrence of FunctionDeclaration[?Yield, ?Await, ~Default] was the sole StatementListItem of a BlockStatement occupying that position in the source text. The semantics of such a synthetic BlockStatement includes the web legacy compatibility semantics specified in B.3.2.\n\n\nB.3.4 VariableStatements in Catch Blocks\nThe content of subclause 14.15.1 is replaced with the following:\n\nCatch : \ncatch\n(\nCatchParameter\n)\nBlock\n\n\n\n\n\n          It is a Syntax Error if BoundNames of CatchParameter contains any duplicate elements.\n        \n\n          It is a Syntax Error if any element of the BoundNames of CatchParameter also occurs in the LexicallyDeclaredNames of Block.\n        \n\n          It is a Syntax Error if any element of the BoundNames of CatchParameter also occurs in the VarDeclaredNames of Block unless CatchParameter is \nCatchParameter : BindingIdentifier\n\n.\n        \n\nNote\nThe Block of a Catch clause may contain var declarations that bind a name that is also bound by the CatchParameter.\n At runtime, such bindings are instantiated in the \nVariableDeclarationEnvironment. They do not shadow the same-named \nbindings introduced by the CatchParameter and hence the Initializer for such var declarations will assign to the corresponding catch parameter rather than the var binding.\n\nThis modified behaviour also applies to var and function declarations introduced by direct eval calls contained within the Block of a Catch clause. This change is accomplished by modifying the algorithm of 19.2.1.3 as follows:\nStep 3.d.i.2.a.i is replaced by:\n1. If thisEnv is not the Environment Record for a Catch clause, throw a SyntaxError exception.\nStep 11.b.ii.4.a.i.i is replaced by:\n1. If thisEnv is not the Environment Record for a Catch clause, let bindingExists be true.\n\n\nB.3.5 Initializers in ForIn Statement Heads\nThe following augments the ForInOfStatement production in 14.7.5:\n\nForInOfStatement[Yield, Await, Return] : \nfor\n(\nvar\nBindingIdentifier[?Yield, ?Await]\nInitializer[~In, ?Yield, ?Await]\nin\nExpression[+In, ?Yield, ?Await]\n)\nStatement[?Yield, ?Await, ?Return]\n\n\n\nThis production only applies when parsing non-strict code.\nThe static semantics of ContainsDuplicateLabels in 8.2.1 are augmented with the following:\n\nForInOfStatement : \nfor\n(\nvar\nBindingIdentifier\nInitializer\nin\nExpression\n)\nStatement\n\n\n\n1. Return ContainsDuplicateLabels of Statement with argument labelSet.\nThe static semantics of ContainsUndefinedBreakTarget in 8.2.2 are augmented with the following:\n\nForInOfStatement : \nfor\n(\nvar\nBindingIdentifier\nInitializer\nin\nExpression\n)\nStatement\n\n\n\n1. Return ContainsUndefinedBreakTarget of Statement with argument labelSet.\nThe static semantics of ContainsUndefinedContinueTarget in 8.2.3 are augmented with the following:\n\nForInOfStatement : \nfor\n(\nvar\nBindingIdentifier\nInitializer\nin\nExpression\n)\nStatement\n\n\n\n1. Return ContainsUndefinedContinueTarget of Statement with arguments iterationSet and \u00ab \u00bb.\nThe static semantics of IsDestructuring in 14.7.5.2 are augmented with the following:\n\nBindingIdentifier : \nIdentifier\n\n\nyield\n\n\nawait\n\n\n\n1. Return false.\nThe static semantics of VarDeclaredNames in 8.1.6 are augmented with the following:\n\nForInOfStatement : \nfor\n(\nvar\nBindingIdentifier\nInitializer\nin\nExpression\n)\nStatement\n\n\n\n1. Let names1 be the BoundNames of BindingIdentifier.2. Let names2 be the VarDeclaredNames of Statement.3. Return the list-concatenation of names1 and names2.\nThe static semantics of VarScopedDeclarations in 8.1.7 are augmented with the following:\n\nForInOfStatement : \nfor\n(\nvar\nBindingIdentifier\nInitializer\nin\nExpression\n)\nStatement\n\n\n\n1. Let declarations1 be \u00ab BindingIdentifier \u00bb.2. Let declarations2 be the VarScopedDeclarations of Statement.3. Return the list-concatenation of declarations1 and declarations2.\nThe runtime semantics of ForInOfLoopEvaluation in 14.7.5.5 are augmented with the following:\n\nForInOfStatement : \nfor\n(\nvar\nBindingIdentifier\nInitializer\nin\nExpression\n)\nStatement\n\n\n\n1. Let bindingId be StringValue of BindingIdentifier.2. Let lhs be ?\u00a0ResolveBinding(bindingId).3. If IsAnonymousFunctionDefinition(Initializer) is true, thena. Let value be ?\u00a0NamedEvaluation of Initializer with argument bindingId.4. Else,a. Let rhs be the result of evaluating Initializer.b. Let value be ?\u00a0GetValue(rhs).5. Perform ?\u00a0PutValue(lhs, value).6. Let keyResult be ?\u00a0ForIn/OfHeadEvaluation(\u00ab \u00bb, Expression, enumerate).7. Return ?\u00a0ForIn/OfBodyEvaluation(BindingIdentifier, Statement, keyResult, enumerate, varBinding, labelSet).\n\n\nB.3.6 The [[IsHTMLDDA]] Internal Slot\nAn [[IsHTMLDDA]] internal slot may exist on host-defined objects. Objects with an [[IsHTMLDDA]] internal slot behave like undefined in the ToBoolean and IsLooselyEqual abstract operations and when used as an operand for the typeof operator.\nNote\nObjects with an [[IsHTMLDDA]] internal slot are never created by this specification. However, the document.all object in web browsers is a host-defined exotic object\n with this slot that exists for web compatibility purposes. There are no\n other known examples of this type of object and implementations should \nnot create any with the exception of document.all.\n\n\nB.3.6.1 Changes to ToBoolean\nThe result column in Table 12 for an argument type of Object is replaced with the following algorithm:\n1. If argument has an [[IsHTMLDDA]] internal slot, return false.2. Return true.\n\n\nB.3.6.2 Changes to IsLooselyEqual\nDuring IsLooselyEqual the following steps are performed in place of step 4:\n1. Perform the following steps:a. If Type(x) is Object and x has an [[IsHTMLDDA]] internal slot and y is either null or undefined, return true.b. If x is either null or undefined and Type(y) is Object and y has an [[IsHTMLDDA]] internal slot, return true.\n\n\nB.3.6.3 Changes to the typeof Operator\nThe following step replaces step 4 of the evaluation semantics for typeof:\n1. If Type(val) is Object and val has an [[IsHTMLDDA]] internal slot, return \"undefined\".\n\n\n\n\n\nC The Strict Mode of ECMAScript\nThe strict mode restriction and exceptions\n\n\nimplements, interface, let, package, private, protected, public, static, and yield are reserved words within strict mode code. (12.6.2).\n    \n\n      A conforming implementation, when processing strict mode code, must disallow instances of the productions \nNumericLiteral :: LegacyOctalIntegerLiteral\n\n and \nDecimalIntegerLiteral :: NonOctalDecimalIntegerLiteral\n\n.\n    \n\n      A conforming implementation, when processing strict mode code, must disallow instances of the productions \nEscapeSequence :: LegacyOctalEscapeSequence\n\n and \nEscapeSequence :: NonOctalDecimalEscapeSequence\n\n.\n    \n\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the global object. When a simple assignment occurs within strict mode code, its LeftHandSideExpression must not evaluate to an unresolvable Reference. If it does a ReferenceError exception is thrown (6.2.4.6). The LeftHandSideExpression also may not be a reference to a data property with the attribute value { [[Writable]]: false }, to an accessor property with the attribute value { [[Set]]: undefined }, nor to a non-existent property of an object whose [[Extensible]] internal slot is false. In these cases a TypeError exception is thrown (13.15).\n    \n\n      An IdentifierReference with the StringValue \"eval\" or \"arguments\" may not appear as the LeftHandSideExpression of an Assignment operator (13.15) or of an UpdateExpression (13.4) or as the UnaryExpression operated upon by a Prefix Increment (13.4.4) or a Prefix Decrement (13.4.5) operator.\n    \n\n      Arguments objects for strict functions define a non-configurable accessor property \"callee\" which throws a TypeError exception on access (10.4.4.6).\n    \n\n      Arguments objects for strict functions do not dynamically share their array-indexed property values with the corresponding formal parameter bindings of their functions. (10.4.4).\n    \n\n      For strict functions, if an arguments object is created the binding of the local identifier arguments to the arguments object is immutable and hence may not be the target of an assignment expression. (10.2.11).\n    \n\n      It is a SyntaxError if the StringValue of a BindingIdentifier is \"eval\" or \"arguments\" within strict mode code (13.1.1).\n    \n\n      Strict mode eval code cannot instantiate variables or functions in\n the variable environment of the caller to eval. Instead, a new variable\n environment is created and that environment is used for declaration \nbinding instantiation for the eval code (19.2.1).\n    \n\n      If this is evaluated within strict mode code, then the this value is not coerced to an object. A this value of undefined or null is not converted to the global object and primitive values are not converted to wrapper objects. The this value passed via a function call (including calls made using Function.prototype.apply and Function.prototype.call) do not coerce the passed this value to an object (10.2.1.2, 20.2.3.1, 20.2.3.3).\n    \n\n      When a delete operator occurs within strict mode code, a SyntaxError is thrown if its UnaryExpression is a direct reference to a variable, function argument, or function name (13.5.1.1).\n    \n\n      When a delete operator occurs within strict mode code, a TypeError is thrown if the property to be deleted has the attribute { [[Configurable]]: false } or otherwise cannot be deleted (13.5.1.2).\n    \n\nStrict mode code may not include a WithStatement. The occurrence of a WithStatement in such a context is a SyntaxError (14.11.1).\n    \n\n      It is a SyntaxError if a CatchParameter occurs within strict mode code and BoundNames of CatchParameter contains either eval or arguments (14.15.1).\n    \n\n      It is a SyntaxError if the same BindingIdentifier appears more than once in the FormalParameters of a strict function. An attempt to create such a function using a Function, Generator, or AsyncFunction constructor is a SyntaxError (15.2.1, 20.2.1.1.1).\n    \n\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named \"caller\" or \"arguments\" of function instances.\n    \n\n\n\nD Host Layering Points\nSee 4.2 for the definition of host.\n\nD.1 Host Hooks\nHostCallJobCallback(...)\nHostEnqueueFinalizationRegistryCleanupJob(...)\nHostEnqueuePromiseJob(...)\nHostEnsureCanCompileStrings(...)\nHostFinalizeImportMeta(...)\nHostGetImportMetaProperties(...)\nHostHasSourceTextAvailable(...)\nHostImportModuleDynamically(...)\nHostMakeJobCallback(...)\nHostPromiseRejectionTracker(...)\nHostResolveImportedModule(...)\nInitializeHostDefinedRealm(...)\n\n\nD.2 Host-defined Fields\n[[HostDefined]] on Realm Records: See Table 27.\n[[HostDefined]] on Script Records: See Table 43.\n[[HostDefined]] on Module Records: See Table 44.\n[[HostDefined]] on JobCallback Records: See Table 31.\n[[HostSynchronizesWith]] on Candidate Executions: See Table 92.\n[[IsHTMLDDA]]: See B.3.6.\n\n\nD.3 Host-defined Objects\nThe global object: See clause 19.\n\n\nD.4 Running Jobs\nPreparation steps before, and cleanup steps after, invocation of Job Abstract Closures. See 9.5.\n\n\nD.5 Internal Methods of Exotic Objects\nAny of the essential internal methods in Table 4 for any exotic object not specified within this specification.\n\n\nD.6 Built-in Objects and Methods\nAny built-in objects and methods not defined within this specification, except as restricted in 17.1.\n\n\n\nE Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact\n9.1.1.4.15-9.1.1.4.18 Edition 5 and 5.1 used a property existence test to determine whether a global object\n property corresponding to a new global declaration already existed. \nECMAScript 2015 uses an own property existence test. This corresponds to\n what has been most commonly implemented by web browsers.\n10.4.2.1: The 5th Edition moved the capture of the current array length prior to the integer conversion of the array index\n or new length value. However, the captured length value could become \ninvalid if the conversion process has the side-effect of changing the \narray length. ECMAScript 2015 specifies that the current array length \nmust be captured after the possible occurrence of such side-effects.\n21.4.1.14: Previous editions permitted the TimeClip abstract operation to return either +0\ud835\udd3d or -0\ud835\udd3d as the representation of a 0 time value. ECMAScript 2015 specifies that +0\ud835\udd3d always returned. This means that for ECMAScript 2015 the time value of a Date is never observably -0\ud835\udd3d and methods that return time values never return -0\ud835\udd3d.\n21.4.1.15:\n If a UTC offset representation is not present, the local time zone is \nused. Edition 5.1 incorrectly stated that a missing time zone should be \ninterpreted as \"z\".\n21.4.4.36: If the year cannot be represented using the Date Time String Format specified in 21.4.1.15 a RangeError exception is thrown. Previous editions did not specify the behaviour for that case.\n21.4.4.41: Previous editions did not specify the value returned by Date.prototype.toString when this time value is NaN. ECMAScript 2015 specifies the result to be the String value \"Invalid Date\".\n22.2.3.1, 22.2.3.2.5: Any LineTerminator code points in the value of the \"source\" property of a RegExp instance must be expressed using an escape sequence. Edition 5.1 only required the escaping of /.\n22.2.5.8, 22.2.5.11: In previous editions, the specifications for String.prototype.match and String.prototype.replace was incorrect for cases where the pattern argument was a RegExp value whose global flag is set. The previous specifications stated that for each attempt to match the pattern, if lastIndex did not change it should be incremented by 1. The correct behaviour is that lastIndex should be incremented by one only if the pattern matched the empty String.\n23.1.3.28: Previous editions did not specify how a NaN value returned by a comparefn was interpreted by Array.prototype.sort. ECMAScript 2015 specifies that such as value is treated as if +0\ud835\udd3d was returned from the comparefn. ECMAScript 2015 also specifies that ToNumber is applied to the result returned by a comparefn. In previous editions, the effect of a comparefn result that is not a Number value was implementation-defined. In practice, implementations call ToNumber.\n\n\nF Additions and Changes That Introduce Incompatibilities with Prior Editions\n6.2.4: In ECMAScript 2015, Function calls are not allowed to return a Reference Record.\n7.1.4.1: In ECMAScript 2015, ToNumber applied to a String value now recognizes and converts BinaryIntegerLiteral and OctalIntegerLiteral numeric strings. In previous editions such strings were converted to NaN.\n9.3: In ECMAScript 2018, Template objects are canonicalized based on Parse Node (source location), instead of across all occurrences of that template literal or tagged template in a Realm in previous editions.\n12.2:\n In ECMAScript 2016, Unicode 8.0.0 or higher is mandated, as opposed to \nECMAScript 2015 which mandated Unicode 5.1. In particular, this caused \nU+180E MONGOLIAN VOWEL SEPARATOR, which was in the Space_Separator (Zs) category and thus treated as whitespace in ECMAScript 2015, to be moved to the Format (Cf) category (as of Unicode 6.3.0). This causes whitespace-sensitive methods to behave differently. For example, \"\\u180E\".trim().length was 0 in previous editions, but 1 in ECMAScript 2016 and later. Additionally, ECMAScript 2017 mandated always using the latest version of the Unicode Standard.\n12.6: In ECMAScript 2015, the valid code points for an IdentifierName are specified in terms of the Unicode properties \u201cID_Start\u201d and \u201cID_Continue\u201d. In previous editions, the valid IdentifierName or Identifier code points were specified by enumerating various Unicode code point categories.\n12.9.1:\n In ECMAScript 2015, Automatic Semicolon Insertion adds a semicolon at \nthe end of a do-while statement if the semicolon is missing. This change\n aligns the specification with the actual behaviour of most existing \nimplementations.\n13.2.5.1: In ECMAScript 2015, it is no longer an early error to have duplicate property names in Object Initializers.\n13.15.1: In ECMAScript 2015, strict mode code containing an assignment to an immutable binding such as the function name of a FunctionExpression does not produce an early error. Instead it produces a runtime error.\n14.2: In ECMAScript 2015, a StatementList beginning with the token let followed by the input elements LineTerminator then Identifier is the start of a LexicalDeclaration. In previous editions, automatic semicolon insertion would always insert a semicolon before the Identifier input element.\n14.5: In ECMAScript 2015, a StatementListItem beginning with the token let followed by the token [ is the start of a LexicalDeclaration. In previous editions such a sequence would be the start of an ExpressionStatement.\n14.6.2: In ECMAScript 2015, the normal result of an IfStatement is never the value empty. If no Statement part is evaluated or if the evaluated Statement part produces a normal completion containing empty, the result of the IfStatement is undefined.\n14.7: In ECMAScript 2015, if the ( token of a for statement is immediately followed by the token sequence let [ then the let is treated as the start of a LexicalDeclaration. In previous editions such a token sequence would be the start of an Expression.\n14.7: In ECMAScript 2015, if the ( token of a for-in statement is immediately followed by the token sequence let [ then the let is treated as the start of a ForDeclaration. In previous editions such a token sequence would be the start of an LeftHandSideExpression.\n14.7: Prior to ECMAScript 2015, an initialization expression could appear as part of the VariableDeclaration that precedes the in keyword. In ECMAScript 2015, the ForBinding\n in that same position does not allow the occurrence of such an \ninitializer. In ECMAScript 2017, such an initializer is permitted only \nin non-strict code.\n14.7: In ECMAScript 2015, the result of evaluating an IterationStatement is never a normal completion whose [[Value]] is empty. If the Statement part of an IterationStatement is not evaluated or if the final evaluation of the Statement part produces a normal completion whose [[Value]] is empty, the result of evaluating the IterationStatement is a normal completion whose [[Value]] is undefined.\n14.11.2: In ECMAScript 2015, the result of evaluating a WithStatement is never a normal completion whose [[Value]] is empty. If evaluation of the Statement part of a WithStatement produces a normal completion whose [[Value]] is empty, the result of evaluating the WithStatement is a normal completion whose [[Value]] is undefined.\n14.12.4: In ECMAScript 2015, the result of evaluating a SwitchStatement is never a normal completion whose [[Value]] is empty. If evaluation of the CaseBlock part of a SwitchStatement produces a normal completion whose [[Value]] is empty, the result of evaluating the SwitchStatement is a normal completion whose [[Value]] is undefined.\n14.15: In ECMAScript 2015, it is an early error for a Catch clause to contain a var declaration for the same Identifier that appears as the Catch\n clause parameter. In previous editions, such a variable declaration \nwould be instantiated in the enclosing variable environment but the \ndeclaration's Initializer value would be assigned to the Catch parameter.\n14.15, 19.2.1.3: In ECMAScript 2015, a runtime SyntaxError is thrown if a Catch clause evaluates a non-strict direct eval whose eval code includes a var or FunctionDeclaration declaration that binds the same Identifier that appears as the Catch clause parameter.\n14.15.3: In ECMAScript 2015, the result of a TryStatement is never the value empty. If the Block part of a TryStatement evaluates to a normal completion containing empty, the result of the TryStatement is undefined. If the Block part of a TryStatement evaluates to a throw completion and it has a Catch part that evaluates to a normal completion containing empty, the result of the TryStatement is undefined if there is no Finally clause or if its Finally clause evaluates to an empty normal completion.\n15.4.5 In ECMAScript 2015, the function objects that are created as the values of the [[Get]] or [[Set]] attribute of accessor properties in an ObjectLiteral are not constructor functions and they do not have a \"prototype\" own property. In the previous edition, they were constructors and had a \"prototype\" property.\n20.1.2.6: In ECMAScript 2015, if the argument to Object.freeze is not an object it is treated as if it was a non-extensible ordinary object with no own properties. In the previous edition, a non-object argument always causes a TypeError to be thrown.\n20.1.2.8: In ECMAScript 2015, if the argument to Object.getOwnPropertyDescriptor is not an object an attempt is made to coerce the argument using ToObject.\n If the coercion is successful the result is used in place of the \noriginal argument value. In the previous edition, a non-object argument \nalways causes a TypeError to be thrown.\n20.1.2.10: In ECMAScript 2015, if the argument to Object.getOwnPropertyNames is not an object an attempt is made to coerce the argument using ToObject.\n If the coercion is successful the result is used in place of the \noriginal argument value. In the previous edition, a non-object argument \nalways causes a TypeError to be thrown.\n20.1.2.12: In ECMAScript 2015, if the argument to Object.getPrototypeOf is not an object an attempt is made to coerce the argument using ToObject.\n If the coercion is successful the result is used in place of the \noriginal argument value. In the previous edition, a non-object argument \nalways causes a TypeError to be thrown.\n20.1.2.15: In ECMAScript 2015, if the argument to Object.isExtensible is not an object it is treated as if it was a non-extensible ordinary object with no own properties. In the previous edition, a non-object argument always causes a TypeError to be thrown.\n20.1.2.16: In ECMAScript 2015, if the argument to Object.isFrozen is not an object it is treated as if it was a non-extensible ordinary object with no own properties. In the previous edition, a non-object argument always causes a TypeError to be thrown.\n20.1.2.17: In ECMAScript 2015, if the argument to Object.isSealed is not an object it is treated as if it was a non-extensible ordinary object with no own properties. In the previous edition, a non-object argument always causes a TypeError to be thrown.\n20.1.2.18: In ECMAScript 2015, if the argument to Object.keys is not an object an attempt is made to coerce the argument using ToObject.\n If the coercion is successful the result is used in place of the \noriginal argument value. In the previous edition, a non-object argument \nalways causes a TypeError to be thrown.\n20.1.2.19: In ECMAScript 2015, if the argument to Object.preventExtensions is not an object it is treated as if it was a non-extensible ordinary object with no own properties. In the previous edition, a non-object argument always causes a TypeError to be thrown.\n20.1.2.21: In ECMAScript 2015, if the argument to Object.seal is not an object it is treated as if it was a non-extensible ordinary object with no own properties. In the previous edition, a non-object argument always causes a TypeError to be thrown.\n20.2.3.2:\n In ECMAScript 2015, the [[Prototype]] internal slot of a bound function\n is set to the [[GetPrototypeOf]] value of its target function. In the \nprevious edition, [[Prototype]] was always set to %Function.prototype%.\n20.2.4.1: In ECMAScript 2015, the \"length\" property of function instances is configurable. In previous editions it was non-configurable.\n20.5.6.2: In ECMAScript 2015, the [[Prototype]] internal slot of a NativeError constructor is the Error constructor. In previous editions it was the Function prototype object.\n21.4.4 In ECMAScript 2015, the Date prototype object is not a Date instance. In previous editions it was a Date instance whose TimeValue was NaN.\n22.1.3.11 In ECMAScript 2015, the String.prototype.localeCompare\n function must treat Strings that are canonically equivalent according \nto the Unicode Standard as being identical. In previous editions \nimplementations were permitted to ignore canonical equivalence and could\n instead use a bit-wise comparison.\n22.1.3.27 and 22.1.3.29\n In ECMAScript 2015, lowercase/upper conversion processing operates on \ncode points. In previous editions such the conversion processing was \nonly applied to individual code units. The only affected code points are\n those in the Deseret block of Unicode.\n22.1.3.30 In ECMAScript 2015, the String.prototype.trim\n method is defined to recognize white space code points that may exist \noutside of the Unicode BMP. However, as of Unicode 7 no such code points\n are defined. In previous editions such code points would not have been \nrecognized as white space.\n22.2.3.1 In ECMAScript 2015, If the pattern argument is a RegExp instance and the flags argument is not undefined, a new RegExp instance is created just like pattern except that pattern's flags are replaced by the argument flags. In previous editions a TypeError exception was thrown when pattern was a RegExp instance and flags was not undefined.\n22.2.5 In ECMAScript 2015, the RegExp prototype object is not a RegExp instance. In previous editions it was a RegExp instance whose pattern is the empty String.\n22.2.5 In ECMAScript 2015, \"source\", \"global\", \"ignoreCase\", and \"multiline\" are accessor properties defined on the RegExp prototype object. In previous editions they were data properties defined on RegExp instances.\n25.4.13: In ECMAScript 2019, Atomics.wake has been renamed to Atomics.notify to prevent confusion with Atomics.wait.\n27.1.4.4, 27.6.3.6: In ECMAScript 2019, the number of Jobs enqueued by await was reduced, which could create an observable difference in resolution order between a then() call and an await expression.\n\n\nG Colophon\nThis specification is authored on GitHub in a plaintext source format called Ecmarkup.\n Ecmarkup is an HTML and Markdown dialect that provides a framework and \ntoolset for authoring ECMAScript specifications in plaintext and \nprocessing the specification into a full-featured HTML rendering that \nfollows the editorial conventions for this document. Ecmarkup builds on \nand integrates a number of other formats and technologies including Grammarkdown for defining syntax and Ecmarkdown for authoring algorithm steps. PDF renderings of this specification are produced by printing the HTML rendering to a PDF.\nPrior editions of this specification were authored using Word\u2014the \nEcmarkup source text that formed the basis of this edition was produced \nby converting the ECMAScript 2015 Word document to Ecmarkup using an \nautomated conversion tool.\n\n\nH Bibliography\n\n\nIEEE 754-2019: IEEE Standard for Floating-Point Arithmetic. Institute of Electrical and Electronic Engineers, New York (2019)\n      Note\nThere are no normative changes between IEEE 754-2008 and IEEE 754-2019 that affect the ECMA-262 specification.\n\n\n\nThe Unicode Standard, available at <https://unicode.org/versions/latest>\n    \n\nUnicode Technical Note #5: Canonical Equivalence in Applications, available at <https://unicode.org/notes/tn5/>\n    \n\nUnicode Technical Standard #10: Unicode Collation Algorithm, available at <https://unicode.org/reports/tr10/>\n    \n\nUnicode Standard Annex #15, Unicode Normalization Forms, available at <https://unicode.org/reports/tr15/>\n    \n\nUnicode Standard Annex #18: Unicode Regular Expressions, available at <https://unicode.org/reports/tr18/>\n    \n\nUnicode Standard Annex #24: Unicode Script Property, available at <https://unicode.org/reports/tr24/>\n    \n\nUnicode Standard Annex #31, Unicode Identifiers and Pattern Syntax, available at <https://unicode.org/reports/tr31/>\n    \n\nUnicode Standard Annex #44: Unicode Character Database, available at <https://unicode.org/reports/tr44/>\n    \n\nUnicode Technical Standard #51: Unicode Emoji, available at <https://unicode.org/reports/tr51/>\n    \n\nIANA Time Zone Database, available at <https://www.iana.org/time-zones>\n    \n\n      ISO 8601:2004(E) Data elements and interchange formats \u2014 Information interchange \u2014 Representation of dates and times\n\n\nRFC 1738 \u201cUniform Resource Locators (URL)\u201d, available at <https://tools.ietf.org/html/rfc1738>\n    \n\nRFC 2396 \u201cUniform Resource Identifiers (URI): Generic Syntax\u201d, available at <https://tools.ietf.org/html/rfc2396>\n    \n\nRFC 3629 \u201cUTF-8, a transformation format of ISO 10646\u201d, available at <https://tools.ietf.org/html/rfc3629>\n    \n\nRFC 7231 \u201cHypertext Transfer Protocol (HTTP/1.1): Semantics and Content\u201d, available at <https://tools.ietf.org/html/rfc7231>\n    \n\n\nI Copyright & Software License\nEcma International\nRue du Rhone 114\nCH-1204 Geneva\nTel: +41 22 849 6000\nFax: +41 22 849 6001\nWeb: https://ecma-international.org/\nAlternative Copyright Notice and Copyright License\n\u00a9 2022 Ecma International\nBy obtaining and/or copying this work, you (the licensee) agree that you have read, understood, and will comply with the following terms and conditions.\nPermission under Ecma\u2019s copyright to copy, modify, prepare derivative works of, and distribute this work, with or without modification, for any purpose and without fee or royalty is hereby granted, provided that you include the following on ALL copies of the work or portions thereof, including modifications:\n\n\nThis document may be copied, published and distributed to others, and certain derivative works of it may be prepared, copied, published, and distributed, in whole or in part, provided that the above copyright notice and this Copyright License and Disclaimer are included on all such copies and derivative works. The only derivative works that are permissible under this Copyright License and Disclaimer are:\n(i)The full text of this ALTERNATIVE COPYRIGHT NOTICE AND COPYRIGHT LICENSE in a location viewable to users of the redistributed or derivative work.\n(ii) Any pre-existing intellectual property disclaimers, notices, or terms and conditions. If none exist, the Ecma alternative copyright notice should be included.\n(iii) Notice of any changes or modifications, through a copyright statement on the document such as \u201cThis document includes material copied from or derived from [title and URI of the Ecma  document].\nCopyright \u00a9 Ecma International.\nDisclaimers\nTHIS WORK IS PROVIDED \u201cAS IS,\u201d AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE DOCUMENT WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.\nCOPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE DOCUMENT.\nThe name and trademarks of copyright holders may NOT be used in advertising or publicity pertaining to the work without specific, written prior permission. Title to copyright in this work will at all times remain with copyright holders.\u201d\nSoftware License\nAll Software contained in this document (\"Software\") is \nprotected by copyright and is being made available under the \"BSD \nLicense\", included below. This Software may be subject to third party \nrights (rights from parties other than Ecma International), including \npatent rights, and no licenses under such third party rights are granted\n under this license even if the third party concerned is a member of \nEcma International. SEE THE ECMA CODE OF CONDUCT IN PATENT MATTERS \nAVAILABLE AT https://ecma-international.org/memento/codeofconduct.htm \nFOR INFORMATION REGARDING THE LICENSING OF PATENT CLAIMS THAT ARE \nREQUIRED TO IMPLEMENT ECMA INTERNATIONAL STANDARDS.\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are \nmet:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright \nnotice, this list of conditions and the following disclaimer in the \ndocumentation and/or other materials provided with the distribution.\nNeither the name of the authors nor Ecma International may be used\n to endorse or promote products derived from this software without \nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE ECMA INTERNATIONAL \"AS IS\" AND ANY \nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR \nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ECMA INTERNATIONAL BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF \nTHE POSSIBILITY OF SUCH DAMAGE.\n\nSyntax-Directed OperationsPermalinkPin",
    "links": [
        "#sec-intro",
        "#sec-scope",
        "#sec-conformance",
        "#sec-conformance-normative-optional",
        "#sec-conformance-legacy",
        "#sec-conformance-legacy-normative-optional",
        "#sec-normative-references",
        "#sec-overview",
        "#sec-web-scripting",
        "#sec-hosts-and-implementations",
        "#sec-ecmascript-overview",
        "#sec-objects",
        "#sec-strict-variant-of-ecmascript",
        "#sec-terms-and-definitions",
        "#sec-terms-and-definitions-implementation-approximated",
        "#sec-terms-and-definitions-implementation-defined",
        "#sec-terms-and-definitions-host-defined",
        "#sec-type",
        "#sec-primitive-value",
        "#sec-terms-and-definitions-object",
        "#sec-constructor",
        "#sec-terms-and-definitions-prototype",
        "#sec-ordinary-object",
        "#sec-exotic-object",
        "#sec-standard-object",
        "#sec-built-in-object",
        "#sec-undefined-value",
        "#sec-terms-and-definitions-undefined-type",
        "#sec-null-value",
        "#sec-terms-and-definitions-null-type",
        "#sec-terms-and-definitions-boolean-value",
        "#sec-terms-and-definitions-boolean-type",
        "#sec-boolean-object",
        "#sec-terms-and-definitions-string-value",
        "#sec-terms-and-definitions-string-type",
        "#sec-string-object",
        "#sec-terms-and-definitions-number-value",
        "#sec-terms-and-definitions-number-type",
        "#sec-number-object",
        "#sec-terms-and-definitions-infinity",
        "#sec-terms-and-definitions-nan",
        "#sec-terms-and-definitions-bigint-value",
        "#sec-terms-and-definitions-bigint-type",
        "#sec-bigint-object",
        "#sec-symbol-value",
        "#sec-terms-and-definitions-symbol-type",
        "#sec-symbol-object",
        "#sec-terms-and-definitions-function",
        "#sec-built-in-function",
        "#sec-property",
        "#sec-method",
        "#sec-built-in-method",
        "#sec-attribute",
        "#sec-own-property",
        "#sec-inherited-property",
        "#sec-organization-of-this-specification",
        "#sec-notational-conventions",
        "#sec-syntactic-and-lexical-grammars",
        "#sec-context-free-grammars",
        "#sec-lexical-and-regexp-grammars",
        "#sec-numeric-string-grammar",
        "#sec-syntactic-grammar",
        "#sec-grammar-notation",
        "#sec-algorithm-conventions",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-algorithm-conventions-syntax-directed-operations",
        "#sec-runtime-semantics",
        "#sec-completion-ao",
        "#sec-throw-an-exception",
        "#sec-returnifabrupt",
        "#sec-returnifabrupt-shorthands",
        "#sec-implicit-normal-completion",
        "#sec-static-semantic-rules",
        "#sec-mathematical-operations",
        "#sec-value-notation",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types-undefined-type",
        "#sec-ecmascript-language-types-null-type",
        "#sec-ecmascript-language-types-boolean-type",
        "#sec-ecmascript-language-types-string-type",
        "#sec-stringindexof",
        "#sec-ecmascript-language-types-symbol-type",
        "#sec-well-known-symbols",
        "#sec-numeric-types",
        "#sec-ecmascript-language-types-number-type",
        "#sec-numeric-types-number-unaryMinus",
        "#sec-numeric-types-number-bitwiseNOT",
        "#sec-numeric-types-number-exponentiate",
        "#sec-numeric-types-number-multiply",
        "#sec-numeric-types-number-divide",
        "#sec-numeric-types-number-remainder",
        "#sec-numeric-types-number-add",
        "#sec-numeric-types-number-subtract",
        "#sec-numeric-types-number-leftShift",
        "#sec-numeric-types-number-signedRightShift",
        "#sec-numeric-types-number-unsignedRightShift",
        "#sec-numeric-types-number-lessThan",
        "#sec-numeric-types-number-equal",
        "#sec-numeric-types-number-sameValue",
        "#sec-numeric-types-number-sameValueZero",
        "#sec-numberbitwiseop",
        "#sec-numeric-types-number-bitwiseAND",
        "#sec-numeric-types-number-bitwiseXOR",
        "#sec-numeric-types-number-bitwiseOR",
        "#sec-numeric-types-number-tostring",
        "#sec-ecmascript-language-types-bigint-type",
        "#sec-numeric-types-bigint-unaryMinus",
        "#sec-numeric-types-bigint-bitwiseNOT",
        "#sec-numeric-types-bigint-exponentiate",
        "#sec-numeric-types-bigint-multiply",
        "#sec-numeric-types-bigint-divide",
        "#sec-numeric-types-bigint-remainder",
        "#sec-numeric-types-bigint-add",
        "#sec-numeric-types-bigint-subtract",
        "#sec-numeric-types-bigint-leftShift",
        "#sec-numeric-types-bigint-signedRightShift",
        "#sec-numeric-types-bigint-unsignedRightShift",
        "#sec-numeric-types-bigint-lessThan",
        "#sec-numeric-types-bigint-equal",
        "#sec-numeric-types-bigint-sameValue",
        "#sec-numeric-types-bigint-sameValueZero",
        "#sec-binaryand",
        "#sec-binaryor",
        "#sec-binaryxor",
        "#sec-bigintbitwiseop",
        "#sec-numeric-types-bigint-bitwiseAND",
        "#sec-numeric-types-bigint-bitwiseXOR",
        "#sec-numeric-types-bigint-bitwiseOR",
        "#sec-numeric-types-bigint-tostring",
        "#sec-object-type",
        "#sec-property-attributes",
        "#sec-object-internal-methods-and-internal-slots",
        "#sec-invariants-of-the-essential-internal-methods",
        "#sec-well-known-intrinsic-objects",
        "#sec-ecmascript-specification-types",
        "#sec-list-and-record-specification-type",
        "#sec-set-and-relation-specification-type",
        "#sec-completion-record-specification-type",
        "#await",
        "#sec-normalcompletion",
        "#sec-throwcompletion",
        "#sec-updateempty",
        "#sec-reference-record-specification-type",
        "#sec-ispropertyreference",
        "#sec-isunresolvablereference",
        "#sec-issuperreference",
        "#sec-isprivatereference",
        "#sec-getvalue",
        "#sec-putvalue",
        "#sec-getthisvalue",
        "#sec-initializereferencedbinding",
        "#sec-makeprivatereference",
        "#sec-property-descriptor-specification-type",
        "#sec-isaccessordescriptor",
        "#sec-isdatadescriptor",
        "#sec-isgenericdescriptor",
        "#sec-frompropertydescriptor",
        "#sec-topropertydescriptor",
        "#sec-completepropertydescriptor",
        "#sec-lexical-environment-and-environment-record-specification-types",
        "#sec-abstract-closure",
        "#sec-data-blocks",
        "#sec-createbytedatablock",
        "#sec-createsharedbytedatablock",
        "#sec-copydatablockbytes",
        "#sec-privateelement-specification-type",
        "#sec-classfielddefinition-record-specification-type",
        "#sec-private-names",
        "#sec-classstaticblockdefinition-record-specification-type",
        "#sec-abstract-operations",
        "#sec-type-conversion",
        "#sec-toprimitive",
        "#sec-ordinarytoprimitive",
        "#sec-toboolean",
        "#sec-tonumeric",
        "#sec-tonumber",
        "#sec-tonumber-applied-to-the-string-type",
        "#sec-stringtonumber",
        "#sec-runtime-semantics-stringnumericvalue",
        "#sec-roundmvresult",
        "#sec-tointegerorinfinity",
        "#sec-toint32",
        "#sec-touint32",
        "#sec-toint16",
        "#sec-touint16",
        "#sec-toint8",
        "#sec-touint8",
        "#sec-touint8clamp",
        "#sec-tobigint",
        "#sec-stringtobigint",
        "#sec-stringintegerliteral-grammar",
        "#sec-runtime-semantics-mv-for-stringintegerliteral",
        "#sec-tobigint64",
        "#sec-tobiguint64",
        "#sec-tostring",
        "#sec-toobject",
        "#sec-topropertykey",
        "#sec-tolength",
        "#sec-canonicalnumericindexstring",
        "#sec-toindex",
        "#sec-testing-and-comparison-operations",
        "#sec-requireobjectcoercible",
        "#sec-isarray",
        "#sec-iscallable",
        "#sec-isconstructor",
        "#sec-isextensible-o",
        "#sec-isintegralnumber",
        "#sec-ispropertykey",
        "#sec-isregexp",
        "#sec-isstringprefix",
        "#sec-isstringwellformedunicode",
        "#sec-samevalue",
        "#sec-samevaluezero",
        "#sec-samevaluenonnumeric",
        "#sec-islessthan",
        "#sec-islooselyequal",
        "#sec-isstrictlyequal",
        "#sec-operations-on-objects",
        "#sec-makebasicobject",
        "#sec-get-o-p",
        "#sec-getv",
        "#sec-set-o-p-v-throw",
        "#sec-createdataproperty",
        "#sec-createmethodproperty",
        "#sec-createdatapropertyorthrow",
        "#sec-createnonenumerabledatapropertyorthrow",
        "#sec-definepropertyorthrow",
        "#sec-deletepropertyorthrow",
        "#sec-getmethod",
        "#sec-hasproperty",
        "#sec-hasownproperty",
        "#sec-call",
        "#sec-construct",
        "#sec-setintegritylevel",
        "#sec-testintegritylevel",
        "#sec-createarrayfromlist",
        "#sec-lengthofarraylike",
        "#sec-createlistfromarraylike",
        "#sec-invoke",
        "#sec-ordinaryhasinstance",
        "#sec-speciesconstructor",
        "#sec-enumerableownpropertynames",
        "#sec-getfunctionrealm",
        "#sec-copydataproperties",
        "#sec-privateelementfind",
        "#sec-privatefieldadd",
        "#sec-privatemethodoraccessoradd",
        "#sec-privateget",
        "#sec-privateset",
        "#sec-definefield",
        "#sec-initializeinstanceelements",
        "#sec-operations-on-iterator-objects",
        "#sec-iterator-records",
        "#sec-getiterator",
        "#sec-iteratornext",
        "#sec-iteratorcomplete",
        "#sec-iteratorvalue",
        "#sec-iteratorstep",
        "#sec-iteratorclose",
        "#sec-ifabruptcloseiterator",
        "#sec-asynciteratorclose",
        "#sec-createiterresultobject",
        "#sec-createlistiteratorRecord",
        "#sec-iterabletolist",
        "#sec-syntax-directed-operations",
        "#sec-syntax-directed-operations-scope-analysis",
        "#sec-static-semantics-boundnames",
        "#sec-static-semantics-declarationpart",
        "#sec-static-semantics-isconstantdeclaration",
        "#sec-static-semantics-lexicallydeclarednames",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#sec-static-semantics-vardeclarednames",
        "#sec-static-semantics-varscopeddeclarations",
        "#sec-static-semantics-toplevellexicallydeclarednames",
        "#sec-static-semantics-toplevellexicallyscopeddeclarations",
        "#sec-static-semantics-toplevelvardeclarednames",
        "#sec-static-semantics-toplevelvarscopeddeclarations",
        "#sec-syntax-directed-operations-labels",
        "#sec-static-semantics-containsduplicatelabels",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#sec-syntax-directed-operations-function-name-inference",
        "#sec-static-semantics-hasname",
        "#sec-static-semantics-isfunctiondefinition",
        "#sec-isanonymousfunctiondefinition",
        "#sec-static-semantics-isidentifierref",
        "#sec-runtime-semantics-namedevaluation",
        "#sec-syntax-directed-operations-contains",
        "#sec-static-semantics-contains",
        "#sec-static-semantics-computedpropertycontains",
        "#sec-syntax-directed-operations-miscellaneous",
        "#sec-runtime-semantics-instantiatefunctionobject",
        "#sec-runtime-semantics-bindinginitialization",
        "#sec-initializeboundname",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#sec-static-semantics-assignmenttargettype",
        "#sec-static-semantics-propname",
        "#sec-executable-code-and-execution-contexts",
        "#sec-environment-records",
        "#sec-the-environment-record-type-hierarchy",
        "#sec-declarative-environment-records",
        "#sec-declarative-environment-records-hasbinding-n",
        "#sec-declarative-environment-records-createmutablebinding-n-d",
        "#sec-declarative-environment-records-createimmutablebinding-n-s",
        "#sec-declarative-environment-records-initializebinding-n-v",
        "#sec-declarative-environment-records-setmutablebinding-n-v-s",
        "#sec-declarative-environment-records-getbindingvalue-n-s",
        "#sec-declarative-environment-records-deletebinding-n",
        "#sec-declarative-environment-records-hasthisbinding",
        "#sec-declarative-environment-records-hassuperbinding",
        "#sec-declarative-environment-records-withbaseobject",
        "#sec-object-environment-records",
        "#sec-object-environment-records-hasbinding-n",
        "#sec-object-environment-records-createmutablebinding-n-d",
        "#sec-object-environment-records-createimmutablebinding-n-s",
        "#sec-object-environment-records-initializebinding-n-v",
        "#sec-object-environment-records-setmutablebinding-n-v-s",
        "#sec-object-environment-records-getbindingvalue-n-s",
        "#sec-object-environment-records-deletebinding-n",
        "#sec-object-environment-records-hasthisbinding",
        "#sec-object-environment-records-hassuperbinding",
        "#sec-object-environment-records-withbaseobject",
        "#sec-function-environment-records",
        "#sec-bindthisvalue",
        "#sec-function-environment-records-hasthisbinding",
        "#sec-function-environment-records-hassuperbinding",
        "#sec-function-environment-records-getthisbinding",
        "#sec-getsuperbase",
        "#sec-global-environment-records",
        "#sec-global-environment-records-hasbinding-n",
        "#sec-global-environment-records-createmutablebinding-n-d",
        "#sec-global-environment-records-createimmutablebinding-n-s",
        "#sec-global-environment-records-initializebinding-n-v",
        "#sec-global-environment-records-setmutablebinding-n-v-s",
        "#sec-global-environment-records-getbindingvalue-n-s",
        "#sec-global-environment-records-deletebinding-n",
        "#sec-global-environment-records-hasthisbinding",
        "#sec-global-environment-records-hassuperbinding",
        "#sec-global-environment-records-withbaseobject",
        "#sec-global-environment-records-getthisbinding",
        "#sec-hasvardeclaration",
        "#sec-haslexicaldeclaration",
        "#sec-hasrestrictedglobalproperty",
        "#sec-candeclareglobalvar",
        "#sec-candeclareglobalfunction",
        "#sec-createglobalvarbinding",
        "#sec-createglobalfunctionbinding",
        "#sec-module-environment-records",
        "#sec-module-environment-records-getbindingvalue-n-s",
        "#sec-module-environment-records-deletebinding-n",
        "#sec-module-environment-records-hasthisbinding",
        "#sec-module-environment-records-getthisbinding",
        "#sec-createimportbinding",
        "#sec-environment-record-operations",
        "#sec-getidentifierreference",
        "#sec-newdeclarativeenvironment",
        "#sec-newobjectenvironment",
        "#sec-newfunctionenvironment",
        "#sec-newglobalenvironment",
        "#sec-newmoduleenvironment",
        "#sec-privateenvironment-records",
        "#sec-privateenvironment-record-operations",
        "#sec-newprivateenvironment",
        "#sec-resolve-private-identifier",
        "#sec-code-realms",
        "#sec-createrealm",
        "#sec-createintrinsics",
        "#sec-setrealmglobalobject",
        "#sec-setdefaultglobalbindings",
        "#sec-execution-contexts",
        "#sec-getactivescriptormodule",
        "#sec-resolvebinding",
        "#sec-getthisenvironment",
        "#sec-resolvethisbinding",
        "#sec-getnewtarget",
        "#sec-getglobalobject",
        "#sec-jobs",
        "#sec-jobcallback-records",
        "#sec-hostmakejobcallback",
        "#sec-hostcalljobcallback",
        "#sec-hostenqueuepromisejob",
        "#sec-initializehostdefinedrealm",
        "#sec-agents",
        "#sec-agentsignifier",
        "#sec-agentcansuspend",
        "#sec-agent-clusters",
        "#sec-forward-progress",
        "#sec-weakref-processing-model",
        "#sec-weakref-invariants",
        "#sec-liveness",
        "#sec-weakref-execution",
        "#sec-weakref-host-hooks",
        "#sec-host-cleanup-finalization-registry",
        "#sec-clear-kept-objects",
        "#sec-addtokeptobjects",
        "#sec-cleanup-finalization-registry",
        "#sec-ordinary-and-exotic-objects-behaviours",
        "#sec-ordinary-object-internal-methods-and-internal-slots",
        "#sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof",
        "#sec-ordinarygetprototypeof",
        "#sec-ordinary-object-internal-methods-and-internal-slots-setprototypeof-v",
        "#sec-ordinarysetprototypeof",
        "#sec-ordinary-object-internal-methods-and-internal-slots-isextensible",
        "#sec-ordinaryisextensible",
        "#sec-ordinary-object-internal-methods-and-internal-slots-preventextensions",
        "#sec-ordinarypreventextensions",
        "#sec-ordinary-object-internal-methods-and-internal-slots-getownproperty-p",
        "#sec-ordinarygetownproperty",
        "#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc",
        "#sec-ordinarydefineownproperty",
        "#sec-iscompatiblepropertydescriptor",
        "#sec-validateandapplypropertydescriptor",
        "#sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p",
        "#sec-ordinaryhasproperty",
        "#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver",
        "#sec-ordinaryget",
        "#sec-ordinary-object-internal-methods-and-internal-slots-set-p-v-receiver",
        "#sec-ordinaryset",
        "#sec-ordinarysetwithowndescriptor",
        "#sec-ordinary-object-internal-methods-and-internal-slots-delete-p",
        "#sec-ordinarydelete",
        "#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys",
        "#sec-ordinaryownpropertykeys",
        "#sec-ordinaryobjectcreate",
        "#sec-ordinarycreatefromconstructor",
        "#sec-getprototypefromconstructor",
        "#sec-requireinternalslot",
        "#sec-ecmascript-function-objects",
        "#sec-ecmascript-function-objects-call-thisargument-argumentslist",
        "#sec-prepareforordinarycall",
        "#sec-ordinarycallbindthis",
        "#sec-runtime-semantics-evaluatebody",
        "#sec-ordinarycallevaluatebody",
        "#sec-ecmascript-function-objects-construct-argumentslist-newtarget",
        "#sec-ordinaryfunctioncreate",
        "#sec-addrestrictedfunctionproperties",
        "#sec-%throwtypeerror%",
        "#sec-makeconstructor",
        "#sec-makeclassconstructor",
        "#sec-makemethod",
        "#sec-definemethodproperty",
        "#sec-setfunctionname",
        "#sec-setfunctionlength",
        "#sec-functiondeclarationinstantiation",
        "#sec-built-in-function-objects",
        "#sec-built-in-function-objects-call-thisargument-argumentslist",
        "#sec-built-in-function-objects-construct-argumentslist-newtarget",
        "#sec-createbuiltinfunction",
        "#sec-built-in-exotic-object-internal-methods-and-slots",
        "#sec-bound-function-exotic-objects",
        "#sec-bound-function-exotic-objects-call-thisargument-argumentslist",
        "#sec-bound-function-exotic-objects-construct-argumentslist-newtarget",
        "#sec-boundfunctioncreate",
        "#sec-array-exotic-objects",
        "#sec-array-exotic-objects-defineownproperty-p-desc",
        "#sec-arraycreate",
        "#sec-arrayspeciescreate",
        "#sec-arraysetlength",
        "#sec-string-exotic-objects",
        "#sec-string-exotic-objects-getownproperty-p",
        "#sec-string-exotic-objects-defineownproperty-p-desc",
        "#sec-string-exotic-objects-ownpropertykeys",
        "#sec-stringcreate",
        "#sec-stringgetownproperty",
        "#sec-arguments-exotic-objects",
        "#sec-arguments-exotic-objects-getownproperty-p",
        "#sec-arguments-exotic-objects-defineownproperty-p-desc",
        "#sec-arguments-exotic-objects-get-p-receiver",
        "#sec-arguments-exotic-objects-set-p-v-receiver",
        "#sec-arguments-exotic-objects-delete-p",
        "#sec-createunmappedargumentsobject",
        "#sec-createmappedargumentsobject",
        "#sec-makearggetter",
        "#sec-makeargsetter",
        "#sec-integer-indexed-exotic-objects",
        "#sec-integer-indexed-exotic-objects-getownproperty-p",
        "#sec-integer-indexed-exotic-objects-hasproperty-p",
        "#sec-integer-indexed-exotic-objects-defineownproperty-p-desc",
        "#sec-integer-indexed-exotic-objects-get-p-receiver",
        "#sec-integer-indexed-exotic-objects-set-p-v-receiver",
        "#sec-integer-indexed-exotic-objects-delete-p",
        "#sec-integer-indexed-exotic-objects-ownpropertykeys",
        "#sec-integerindexedobjectcreate",
        "#sec-isvalidintegerindex",
        "#sec-integerindexedelementget",
        "#sec-integerindexedelementset",
        "#sec-module-namespace-exotic-objects",
        "#sec-module-namespace-exotic-objects-getprototypeof",
        "#sec-module-namespace-exotic-objects-setprototypeof-v",
        "#sec-module-namespace-exotic-objects-isextensible",
        "#sec-module-namespace-exotic-objects-preventextensions",
        "#sec-module-namespace-exotic-objects-getownproperty-p",
        "#sec-module-namespace-exotic-objects-defineownproperty-p-desc",
        "#sec-module-namespace-exotic-objects-hasproperty-p",
        "#sec-module-namespace-exotic-objects-get-p-receiver",
        "#sec-module-namespace-exotic-objects-set-p-v-receiver",
        "#sec-module-namespace-exotic-objects-delete-p",
        "#sec-module-namespace-exotic-objects-ownpropertykeys",
        "#sec-modulenamespacecreate",
        "#sec-immutable-prototype-exotic-objects",
        "#sec-immutable-prototype-exotic-objects-setprototypeof-v",
        "#sec-set-immutable-prototype",
        "#sec-proxy-object-internal-methods-and-internal-slots",
        "#sec-proxy-object-internal-methods-and-internal-slots-getprototypeof",
        "#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v",
        "#sec-proxy-object-internal-methods-and-internal-slots-isextensible",
        "#sec-proxy-object-internal-methods-and-internal-slots-preventextensions",
        "#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p",
        "#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc",
        "#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p",
        "#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver",
        "#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver",
        "#sec-proxy-object-internal-methods-and-internal-slots-delete-p",
        "#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys",
        "#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist",
        "#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget",
        "#sec-proxycreate",
        "#sec-ecmascript-language-source-code",
        "#sec-source-text",
        "#sec-utf16encodecodepoint",
        "#sec-codepointstostring",
        "#sec-utf16decodesurrogatepair",
        "#sec-codepointat",
        "#sec-stringtocodepoints",
        "#sec-parsetext",
        "#sec-types-of-source-code",
        "#sec-directive-prologues-and-the-use-strict-directive",
        "#sec-strict-mode-code",
        "#sec-non-ecmascript-functions",
        "#sec-ecmascript-language-lexical-grammar",
        "#sec-unicode-format-control-characters",
        "#sec-white-space",
        "#sec-line-terminators",
        "#sec-comments",
        "#sec-tokens",
        "#sec-names-and-keywords",
        "#sec-identifier-names",
        "#sec-identifier-names-static-semantics-early-errors",
        "#sec-identifiercodepoints",
        "#sec-identifiercodepoint",
        "#sec-keywords-and-reserved-words",
        "#sec-punctuators",
        "#sec-ecmascript-language-lexical-grammar-literals",
        "#sec-null-literals",
        "#sec-boolean-literals",
        "#sec-literals-numeric-literals",
        "#sec-numeric-literals-early-errors",
        "#sec-static-semantics-mv",
        "#sec-numericvalue",
        "#sec-literals-string-literals",
        "#sec-string-literals-early-errors",
        "#sec-static-semantics-sv",
        "#sec-string-literals-static-semantics-mv",
        "#sec-literals-regular-expression-literals",
        "#sec-static-semantics-bodytext",
        "#sec-static-semantics-flagtext",
        "#sec-template-literal-lexical-components",
        "#sec-static-semantics-tv",
        "#sec-static-semantics-trv",
        "#sec-automatic-semicolon-insertion",
        "#sec-rules-of-automatic-semicolon-insertion",
        "#sec-examples-of-automatic-semicolon-insertion",
        "#sec-interesting-cases-of-automatic-semicolon-insertion",
        "#sec-asi-interesting-cases-in-statement-lists",
        "#sec-asi-cases-with-no-lineterminator-here",
        "#sec-no-lineterminator-here-automatic-semicolon-insertion-list",
        "#sec-ecmascript-language-expressions",
        "#sec-identifiers",
        "#sec-identifiers-static-semantics-early-errors",
        "#sec-static-semantics-stringvalue",
        "#sec-identifiers-runtime-semantics-evaluation",
        "#sec-primary-expression",
        "#sec-this-keyword",
        "#sec-this-keyword-runtime-semantics-evaluation",
        "#sec-identifier-reference",
        "#sec-primary-expression-literals",
        "#sec-literals-runtime-semantics-evaluation",
        "#sec-array-initializer",
        "#sec-runtime-semantics-arrayaccumulation",
        "#sec-array-initializer-runtime-semantics-evaluation",
        "#sec-object-initializer",
        "#sec-object-initializer-static-semantics-early-errors",
        "#sec-static-semantics-iscomputedpropertykey",
        "#sec-static-semantics-propertynamelist",
        "#sec-object-initializer-runtime-semantics-evaluation",
        "#sec-runtime-semantics-propertydefinitionevaluation",
        "#sec-function-defining-expressions",
        "#sec-primary-expression-regular-expression-literals",
        "#sec-primary-expression-regular-expression-literals-static-semantics-early-errors",
        "#sec-isvalidregularexpressionliteral",
        "#sec-regular-expression-literals-runtime-semantics-evaluation",
        "#sec-template-literals",
        "#sec-static-semantics-template-early-errors",
        "#sec-static-semantics-templatestrings",
        "#sec-gettemplateobject",
        "#sec-runtime-semantics-substitutionevaluation",
        "#sec-template-literals-runtime-semantics-evaluation",
        "#sec-grouping-operator",
        "#sec-grouping-operator-static-semantics-early-errors",
        "#sec-grouping-operator-runtime-semantics-evaluation",
        "#sec-left-hand-side-expressions",
        "#sec-static-semantics",
        "#sec-left-hand-side-expressions-static-semantics-early-errors",
        "#sec-property-accessors",
        "#sec-property-accessors-runtime-semantics-evaluation",
        "#sec-evaluate-property-access-with-expression-key",
        "#sec-evaluate-property-access-with-identifier-key",
        "#sec-new-operator",
        "#sec-new-operator-runtime-semantics-evaluation",
        "#sec-evaluatenew",
        "#sec-function-calls",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#sec-evaluatecall",
        "#sec-super-keyword",
        "#sec-super-keyword-runtime-semantics-evaluation",
        "#sec-getsuperconstructor",
        "#sec-makesuperpropertyreference",
        "#sec-argument-lists",
        "#sec-runtime-semantics-argumentlistevaluation",
        "#sec-optional-chains",
        "#sec-optional-chaining-evaluation",
        "#sec-optional-chaining-chain-evaluation",
        "#sec-import-calls",
        "#sec-import-call-runtime-semantics-evaluation",
        "#sec-tagged-templates",
        "#sec-tagged-templates-runtime-semantics-evaluation",
        "#sec-meta-properties",
        "#sec-meta-properties-runtime-semantics-evaluation",
        "#sec-hostgetimportmetaproperties",
        "#sec-hostfinalizeimportmeta",
        "#sec-update-expressions",
        "#sec-update-expressions-static-semantics-early-errors",
        "#sec-postfix-increment-operator",
        "#sec-postfix-increment-operator-runtime-semantics-evaluation",
        "#sec-postfix-decrement-operator",
        "#sec-postfix-decrement-operator-runtime-semantics-evaluation",
        "#sec-prefix-increment-operator",
        "#sec-prefix-increment-operator-runtime-semantics-evaluation",
        "#sec-prefix-decrement-operator",
        "#sec-prefix-decrement-operator-runtime-semantics-evaluation",
        "#sec-unary-operators",
        "#sec-delete-operator",
        "#sec-delete-operator-static-semantics-early-errors",
        "#sec-delete-operator-runtime-semantics-evaluation",
        "#sec-void-operator",
        "#sec-void-operator-runtime-semantics-evaluation",
        "#sec-typeof-operator",
        "#sec-typeof-operator-runtime-semantics-evaluation",
        "#sec-unary-plus-operator",
        "#sec-unary-plus-operator-runtime-semantics-evaluation",
        "#sec-unary-minus-operator",
        "#sec-unary-minus-operator-runtime-semantics-evaluation",
        "#sec-bitwise-not-operator",
        "#sec-bitwise-not-operator-runtime-semantics-evaluation",
        "#sec-logical-not-operator",
        "#sec-logical-not-operator-runtime-semantics-evaluation",
        "#sec-exp-operator",
        "#sec-exp-operator-runtime-semantics-evaluation",
        "#sec-multiplicative-operators",
        "#sec-multiplicative-operators-runtime-semantics-evaluation",
        "#sec-additive-operators",
        "#sec-addition-operator-plus",
        "#sec-addition-operator-plus-runtime-semantics-evaluation",
        "#sec-subtraction-operator-minus",
        "#sec-subtraction-operator-minus-runtime-semantics-evaluation",
        "#sec-bitwise-shift-operators",
        "#sec-left-shift-operator",
        "#sec-left-shift-operator-runtime-semantics-evaluation",
        "#sec-signed-right-shift-operator",
        "#sec-signed-right-shift-operator-runtime-semantics-evaluation",
        "#sec-unsigned-right-shift-operator",
        "#sec-unsigned-right-shift-operator-runtime-semantics-evaluation",
        "#sec-relational-operators",
        "#sec-relational-operators-runtime-semantics-evaluation",
        "#sec-instanceofoperator",
        "#sec-equality-operators",
        "#sec-equality-operators-runtime-semantics-evaluation",
        "#sec-binary-bitwise-operators",
        "#sec-binary-bitwise-operators-runtime-semantics-evaluation",
        "#sec-binary-logical-operators",
        "#sec-binary-logical-operators-runtime-semantics-evaluation",
        "#sec-conditional-operator",
        "#sec-conditional-operator-runtime-semantics-evaluation",
        "#sec-assignment-operators",
        "#sec-assignment-operators-static-semantics-early-errors",
        "#sec-assignment-operators-runtime-semantics-evaluation",
        "#sec-applystringornumericbinaryoperator",
        "#sec-evaluatestringornumericbinaryexpression",
        "#sec-destructuring-assignment",
        "#sec-destructuring-assignment-static-semantics-early-errors",
        "#sec-runtime-semantics-destructuringassignmentevaluation",
        "#sec-runtime-semantics-propertydestructuringassignmentevaluation",
        "#sec-runtime-semantics-restdestructuringassignmentevaluation",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#sec-runtime-semantics-keyeddestructuringassignmentevaluation",
        "#sec-comma-operator",
        "#sec-comma-operator-runtime-semantics-evaluation",
        "#sec-ecmascript-language-statements-and-declarations",
        "#sec-statement-semantics",
        "#sec-statement-semantics-runtime-semantics-evaluation",
        "#sec-block",
        "#sec-block-static-semantics-early-errors",
        "#sec-block-runtime-semantics-evaluation",
        "#sec-blockdeclarationinstantiation",
        "#sec-declarations-and-the-variable-statement",
        "#sec-let-and-const-declarations",
        "#sec-let-and-const-declarations-static-semantics-early-errors",
        "#sec-let-and-const-declarations-runtime-semantics-evaluation",
        "#sec-variable-statement",
        "#sec-variable-statement-runtime-semantics-evaluation",
        "#sec-destructuring-binding-patterns",
        "#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization",
        "#sec-destructuring-binding-patterns-runtime-semantics-restbindinginitialization",
        "#sec-runtime-semantics-keyedbindinginitialization",
        "#sec-empty-statement",
        "#sec-empty-statement-runtime-semantics-evaluation",
        "#sec-expression-statement",
        "#sec-expression-statement-runtime-semantics-evaluation",
        "#sec-if-statement",
        "#sec-if-statement-static-semantics-early-errors",
        "#sec-if-statement-runtime-semantics-evaluation",
        "#sec-iteration-statements",
        "#sec-iteration-statements-semantics",
        "#sec-loopcontinues",
        "#sec-runtime-semantics-loopevaluation",
        "#sec-do-while-statement",
        "#sec-do-while-statement-static-semantics-early-errors",
        "#sec-runtime-semantics-dowhileloopevaluation",
        "#sec-while-statement",
        "#sec-while-statement-static-semantics-early-errors",
        "#sec-runtime-semantics-whileloopevaluation",
        "#sec-for-statement",
        "#sec-for-statement-static-semantics-early-errors",
        "#sec-runtime-semantics-forloopevaluation",
        "#sec-forbodyevaluation",
        "#sec-createperiterationenvironment",
        "#sec-for-in-and-for-of-statements",
        "#sec-for-in-and-for-of-statements-static-semantics-early-errors",
        "#sec-static-semantics-isdestructuring",
        "#sec-runtime-semantics-fordeclarationbindinginitialization",
        "#sec-runtime-semantics-fordeclarationbindinginstantiation",
        "#sec-runtime-semantics-forinofloopevaluation",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#sec-for-in-and-for-of-statements-runtime-semantics-evaluation",
        "#sec-enumerate-object-properties",
        "#sec-for-in-iterator-objects",
        "#sec-createforiniterator",
        "#sec-%foriniteratorprototype%-object",
        "#sec-%foriniteratorprototype%.next",
        "#sec-properties-of-for-in-iterator-instances",
        "#sec-continue-statement",
        "#sec-continue-statement-static-semantics-early-errors",
        "#sec-continue-statement-runtime-semantics-evaluation",
        "#sec-break-statement",
        "#sec-break-statement-static-semantics-early-errors",
        "#sec-break-statement-runtime-semantics-evaluation",
        "#sec-return-statement",
        "#sec-return-statement-runtime-semantics-evaluation",
        "#sec-with-statement",
        "#sec-with-statement-static-semantics-early-errors",
        "#sec-with-statement-runtime-semantics-evaluation",
        "#sec-switch-statement",
        "#sec-switch-statement-static-semantics-early-errors",
        "#sec-runtime-semantics-caseblockevaluation",
        "#sec-runtime-semantics-caseclauseisselected",
        "#sec-switch-statement-runtime-semantics-evaluation",
        "#sec-labelled-statements",
        "#sec-labelled-statements-static-semantics-early-errors",
        "#sec-islabelledfunction",
        "#sec-labelled-statements-runtime-semantics-evaluation",
        "#sec-runtime-semantics-labelledevaluation",
        "#sec-throw-statement",
        "#sec-throw-statement-runtime-semantics-evaluation",
        "#sec-try-statement",
        "#sec-try-statement-static-semantics-early-errors",
        "#sec-runtime-semantics-catchclauseevaluation",
        "#sec-try-statement-runtime-semantics-evaluation",
        "#sec-debugger-statement",
        "#sec-debugger-statement-runtime-semantics-evaluation",
        "#sec-ecmascript-language-functions-and-classes",
        "#sec-parameter-lists",
        "#sec-parameter-lists-static-semantics-early-errors",
        "#sec-static-semantics-containsexpression",
        "#sec-static-semantics-issimpleparameterlist",
        "#sec-static-semantics-hasinitializer",
        "#sec-static-semantics-expectedargumentcount",
        "#sec-function-definitions",
        "#sec-function-definitions-static-semantics-early-errors",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#sec-runtime-semantics-evaluatefunctionbody",
        "#sec-runtime-semantics-instantiateordinaryfunctionobject",
        "#sec-runtime-semantics-instantiateordinaryfunctionexpression",
        "#sec-function-definitions-runtime-semantics-evaluation",
        "#sec-arrow-function-definitions",
        "#sec-arrow-function-definitions-static-semantics-early-errors",
        "#sec-static-semantics-concisebodycontainsusestrict",
        "#sec-runtime-semantics-evaluateconcisebody",
        "#sec-runtime-semantics-instantiatearrowfunctionexpression",
        "#sec-arrow-function-definitions-runtime-semantics-evaluation",
        "#sec-method-definitions",
        "#sec-method-definitions-static-semantics-early-errors",
        "#sec-static-semantics-hasdirectsuper",
        "#sec-static-semantics-specialmethod",
        "#sec-runtime-semantics-definemethod",
        "#sec-runtime-semantics-methoddefinitionevaluation",
        "#sec-generator-function-definitions",
        "#sec-generator-function-definitions-static-semantics-early-errors",
        "#sec-runtime-semantics-evaluategeneratorbody",
        "#sec-runtime-semantics-instantiategeneratorfunctionobject",
        "#sec-runtime-semantics-instantiategeneratorfunctionexpression",
        "#sec-generator-function-definitions-runtime-semantics-evaluation",
        "#sec-async-generator-function-definitions",
        "#sec-async-generator-function-definitions-static-semantics-early-errors",
        "#sec-runtime-semantics-evaluateasyncgeneratorbody",
        "#sec-runtime-semantics-instantiateasyncgeneratorfunctionobject",
        "#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression",
        "#sec-asyncgenerator-definitions-evaluation",
        "#sec-class-definitions",
        "#sec-class-definitions-static-semantics-early-errors",
        "#sec-static-semantics-classelementkind",
        "#sec-static-semantics-constructormethod",
        "#sec-static-semantics-isstatic",
        "#sec-static-semantics-nonconstructorelements",
        "#sec-static-semantics-prototypepropertynamelist",
        "#sec-static-semantics-allprivateidentifiersvalid",
        "#sec-static-semantics-privateboundidentifiers",
        "#sec-static-semantics-containsarguments",
        "#sec-runtime-semantics-classfielddefinitionevaluation",
        "#sec-runtime-semantics-classstaticblockdefinitionevaluation",
        "#sec-runtime-semantics-evaluateclassstaticblockbody",
        "#sec-static-semantics-classelementevaluation",
        "#sec-runtime-semantics-classdefinitionevaluation",
        "#sec-runtime-semantics-bindingclassdeclarationevaluation",
        "#sec-class-definitions-runtime-semantics-evaluation",
        "#sec-async-function-definitions",
        "#sec-async-function-definitions-static-semantics-early-errors",
        "#sec-runtime-semantics-instantiateasyncfunctionobject",
        "#sec-runtime-semantics-instantiateasyncfunctionexpression",
        "#sec-runtime-semantics-evaluateasyncfunctionbody",
        "#sec-async-function-definitions-runtime-semantics-evaluation",
        "#sec-async-arrow-function-definitions",
        "#sec-async-arrow-function-definitions-static-semantics-early-errors",
        "#sec-static-semantics-asyncconcisebodycontainsusestrict",
        "#sec-runtime-semantics-evaluateasyncconcisebody",
        "#sec-runtime-semantics-instantiateasyncarrowfunctionexpression",
        "#sec-async-arrow-function-definitions-runtime-semantics-evaluation",
        "#sec-tail-position-calls",
        "#sec-isintailposition",
        "#sec-static-semantics-hascallintailposition",
        "#sec-statement-rules",
        "#sec-expression-rules",
        "#sec-preparefortailcall",
        "#sec-ecmascript-language-scripts-and-modules",
        "#sec-scripts",
        "#sec-scripts-static-semantics-early-errors",
        "#sec-static-semantics-isstrict",
        "#sec-script-semantics-runtime-semantics-evaluation",
        "#sec-script-records",
        "#sec-parse-script",
        "#sec-runtime-semantics-scriptevaluation",
        "#sec-globaldeclarationinstantiation",
        "#sec-modules",
        "#sec-module-semantics",
        "#sec-module-semantics-static-semantics-early-errors",
        "#sec-importedlocalnames",
        "#sec-static-semantics-modulerequests",
        "#sec-abstract-module-records",
        "#sec-cyclic-module-records",
        "#sec-moduledeclarationlinking",
        "#sec-InnerModuleLinking",
        "#sec-moduleevaluation",
        "#sec-innermoduleevaluation",
        "#sec-execute-async-module",
        "#sec-gather-available-ancestors",
        "#sec-async-module-execution-fulfilled",
        "#sec-async-module-execution-rejected",
        "#sec-example-cyclic-module-record-graphs",
        "#sec-source-text-module-records",
        "#sec-parsemodule",
        "#sec-getexportednames",
        "#sec-resolveexport",
        "#sec-source-text-module-record-initialize-environment",
        "#sec-source-text-module-record-execute-module",
        "#sec-hostresolveimportedmodule",
        "#sec-hostimportmoduledynamically",
        "#sec-finishdynamicimport",
        "#sec-getmodulenamespace",
        "#sec-module-semantics-runtime-semantics-evaluation",
        "#sec-imports",
        "#sec-imports-static-semantics-early-errors",
        "#sec-static-semantics-importentries",
        "#sec-static-semantics-importentriesformodule",
        "#sec-exports",
        "#sec-exports-static-semantics-early-errors",
        "#sec-static-semantics-exportedbindings",
        "#sec-static-semantics-exportednames",
        "#sec-static-semantics-exportentries",
        "#sec-static-semantics-exportentriesformodule",
        "#sec-static-semantics-referencedbindings",
        "#sec-exports-runtime-semantics-evaluation",
        "#sec-error-handling-and-language-extensions",
        "#sec-forbidden-extensions",
        "#sec-ecmascript-standard-built-in-objects",
        "#sec-global-object",
        "#sec-value-properties-of-the-global-object",
        "#sec-globalthis",
        "#sec-value-properties-of-the-global-object-infinity",
        "#sec-value-properties-of-the-global-object-nan",
        "#sec-undefined",
        "#sec-function-properties-of-the-global-object",
        "#sec-eval-x",
        "#sec-performeval",
        "#sec-hostensurecancompilestrings",
        "#sec-evaldeclarationinstantiation",
        "#sec-isfinite-number",
        "#sec-isnan-number",
        "#sec-parsefloat-string",
        "#sec-parseint-string-radix",
        "#sec-uri-handling-functions",
        "#sec-uri-syntax-and-semantics",
        "#sec-encode",
        "#sec-decode",
        "#sec-decodeuri-encodeduri",
        "#sec-decodeuricomponent-encodeduricomponent",
        "#sec-encodeuri-uri",
        "#sec-encodeuricomponent-uricomponent",
        "#sec-constructor-properties-of-the-global-object",
        "#sec-constructor-properties-of-the-global-object-aggregate-error",
        "#sec-constructor-properties-of-the-global-object-array",
        "#sec-constructor-properties-of-the-global-object-arraybuffer",
        "#sec-constructor-properties-of-the-global-object-bigint",
        "#sec-constructor-properties-of-the-global-object-bigint64array",
        "#sec-constructor-properties-of-the-global-object-biguint64array",
        "#sec-constructor-properties-of-the-global-object-boolean",
        "#sec-constructor-properties-of-the-global-object-dataview",
        "#sec-constructor-properties-of-the-global-object-date",
        "#sec-constructor-properties-of-the-global-object-error",
        "#sec-constructor-properties-of-the-global-object-evalerror",
        "#sec-constructor-properties-of-the-global-object-finnalization-registry",
        "#sec-float32array",
        "#sec-float64array",
        "#sec-constructor-properties-of-the-global-object-function",
        "#sec-int8array",
        "#sec-int16array",
        "#sec-int32array",
        "#sec-map",
        "#sec-constructor-properties-of-the-global-object-number",
        "#sec-constructor-properties-of-the-global-object-object",
        "#sec-constructor-properties-of-the-global-object-promise",
        "#sec-constructor-properties-of-the-global-object-proxy",
        "#sec-constructor-properties-of-the-global-object-rangeerror",
        "#sec-constructor-properties-of-the-global-object-referenceerror",
        "#sec-constructor-properties-of-the-global-object-regexp",
        "#sec-set",
        "#sec-constructor-properties-of-the-global-object-sharedarraybuffer",
        "#sec-constructor-properties-of-the-global-object-string",
        "#sec-constructor-properties-of-the-global-object-symbol",
        "#sec-constructor-properties-of-the-global-object-syntaxerror",
        "#sec-constructor-properties-of-the-global-object-typeerror",
        "#sec-uint8array",
        "#sec-uint8clampedarray",
        "#sec-uint16array",
        "#sec-uint32array",
        "#sec-constructor-properties-of-the-global-object-urierror",
        "#sec-constructor-properties-of-the-global-object-weakmap",
        "#sec-constructor-properties-of-the-global-object-weakref",
        "#sec-constructor-properties-of-the-global-object-weakset",
        "#sec-other-properties-of-the-global-object",
        "#sec-atomics",
        "#sec-json",
        "#sec-math",
        "#sec-reflect",
        "#sec-fundamental-objects",
        "#sec-object-objects",
        "#sec-object-constructor",
        "#sec-object-value",
        "#sec-properties-of-the-object-constructor",
        "#sec-object.assign",
        "#sec-object.create",
        "#sec-object.defineproperties",
        "#sec-objectdefineproperties",
        "#sec-object.defineproperty",
        "#sec-object.entries",
        "#sec-object.freeze",
        "#sec-object.fromentries",
        "#sec-object.getownpropertydescriptor",
        "#sec-object.getownpropertydescriptors",
        "#sec-object.getownpropertynames",
        "#sec-object.getownpropertysymbols",
        "#sec-getownpropertykeys",
        "#sec-object.getprototypeof",
        "#sec-object.hasown",
        "#sec-object.is",
        "#sec-object.isextensible",
        "#sec-object.isfrozen",
        "#sec-object.issealed",
        "#sec-object.keys",
        "#sec-object.preventextensions",
        "#sec-object.prototype",
        "#sec-object.seal",
        "#sec-object.setprototypeof",
        "#sec-object.values",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-object.prototype.constructor",
        "#sec-object.prototype.hasownproperty",
        "#sec-object.prototype.isprototypeof",
        "#sec-object.prototype.propertyisenumerable",
        "#sec-object.prototype.tolocalestring",
        "#sec-object.prototype.tostring",
        "#sec-object.prototype.valueof",
        "#sec-object.prototype.__proto__",
        "#sec-get-object.prototype.__proto__",
        "#sec-set-object.prototype.__proto__",
        "#sec-object.prototype-legacy-accessor-methods",
        "#sec-object.prototype.__defineGetter__",
        "#sec-object.prototype.__defineSetter__",
        "#sec-object.prototype.__lookupGetter__",
        "#sec-object.prototype.__lookupSetter__",
        "#sec-properties-of-object-instances",
        "#sec-function-objects",
        "#sec-function-constructor",
        "#sec-function-p1-p2-pn-body",
        "#sec-createdynamicfunction",
        "#sec-properties-of-the-function-constructor",
        "#sec-function.length",
        "#sec-function.prototype",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-function.prototype.apply",
        "#sec-function.prototype.bind",
        "#sec-function.prototype.call",
        "#sec-function.prototype.constructor",
        "#sec-function.prototype.tostring",
        "#sec-function.prototype-@@hasinstance",
        "#sec-function-instances",
        "#sec-function-instances-length",
        "#sec-function-instances-name",
        "#sec-function-instances-prototype",
        "#sec-hosthassourcetextavailable",
        "#sec-boolean-objects",
        "#sec-boolean-constructor",
        "#sec-boolean-constructor-boolean-value",
        "#sec-properties-of-the-boolean-constructor",
        "#sec-boolean.prototype",
        "#sec-properties-of-the-boolean-prototype-object",
        "#sec-boolean.prototype.constructor",
        "#sec-boolean.prototype.tostring",
        "#sec-boolean.prototype.valueof",
        "#sec-properties-of-boolean-instances",
        "#sec-symbol-objects",
        "#sec-symbol-constructor",
        "#sec-symbol-description",
        "#sec-properties-of-the-symbol-constructor",
        "#sec-symbol.asynciterator",
        "#sec-symbol.for",
        "#sec-symbol.hasinstance",
        "#sec-symbol.isconcatspreadable",
        "#sec-symbol.iterator",
        "#sec-symbol.keyfor",
        "#sec-symbol.match",
        "#sec-symbol.matchall",
        "#sec-symbol.prototype",
        "#sec-symbol.replace",
        "#sec-symbol.search",
        "#sec-symbol.species",
        "#sec-symbol.split",
        "#sec-symbol.toprimitive",
        "#sec-symbol.tostringtag",
        "#sec-symbol.unscopables",
        "#sec-properties-of-the-symbol-prototype-object",
        "#sec-symbol.prototype.constructor",
        "#sec-symbol.prototype.description",
        "#sec-symbol.prototype.tostring",
        "#sec-symboldescriptivestring",
        "#sec-symbol.prototype.valueof",
        "#sec-symbol.prototype-@@toprimitive",
        "#sec-symbol.prototype-@@tostringtag",
        "#sec-properties-of-symbol-instances",
        "#sec-error-objects",
        "#sec-error-constructor",
        "#sec-error-message",
        "#sec-properties-of-the-error-constructor",
        "#sec-error.prototype",
        "#sec-properties-of-the-error-prototype-object",
        "#sec-error.prototype.constructor",
        "#sec-error.prototype.message",
        "#sec-error.prototype.name",
        "#sec-error.prototype.tostring",
        "#sec-properties-of-error-instances",
        "#sec-native-error-types-used-in-this-standard",
        "#sec-native-error-types-used-in-this-standard-evalerror",
        "#sec-native-error-types-used-in-this-standard-rangeerror",
        "#sec-native-error-types-used-in-this-standard-referenceerror",
        "#sec-native-error-types-used-in-this-standard-syntaxerror",
        "#sec-native-error-types-used-in-this-standard-typeerror",
        "#sec-native-error-types-used-in-this-standard-urierror",
        "#sec-nativeerror-object-structure",
        "#sec-nativeerror-constructors",
        "#sec-nativeerror",
        "#sec-properties-of-the-nativeerror-constructors",
        "#sec-nativeerror.prototype",
        "#sec-properties-of-the-nativeerror-prototype-objects",
        "#sec-nativeerror.prototype.constructor",
        "#sec-nativeerror.prototype.message",
        "#sec-nativeerror.prototype.name",
        "#sec-properties-of-nativeerror-instances",
        "#sec-aggregate-error-objects",
        "#sec-aggregate-error-constructor",
        "#sec-aggregate-error",
        "#sec-properties-of-the-aggregate-error-constructors",
        "#sec-aggregate-error.prototype",
        "#sec-properties-of-the-aggregate-error-prototype-objects",
        "#sec-aggregate-error.prototype.constructor",
        "#sec-aggregate-error.prototype.message",
        "#sec-aggregate-error.prototype.name",
        "#sec-properties-of-aggregate-error-instances",
        "#sec-abstract-operations-for-error-objects",
        "#sec-installerrorcause",
        "#sec-numbers-and-dates",
        "#sec-number-objects",
        "#sec-number-constructor",
        "#sec-number-constructor-number-value",
        "#sec-properties-of-the-number-constructor",
        "#sec-number.epsilon",
        "#sec-number.isfinite",
        "#sec-number.isinteger",
        "#sec-number.isnan",
        "#sec-number.issafeinteger",
        "#sec-number.max_safe_integer",
        "#sec-number.max_value",
        "#sec-number.min_safe_integer",
        "#sec-number.min_value",
        "#sec-number.nan",
        "#sec-number.negative_infinity",
        "#sec-number.parsefloat",
        "#sec-number.parseint",
        "#sec-number.positive_infinity",
        "#sec-number.prototype",
        "#sec-properties-of-the-number-prototype-object",
        "#sec-number.prototype.constructor",
        "#sec-number.prototype.toexponential",
        "#sec-number.prototype.tofixed",
        "#sec-number.prototype.tolocalestring",
        "#sec-number.prototype.toprecision",
        "#sec-number.prototype.tostring",
        "#sec-number.prototype.valueof",
        "#sec-properties-of-number-instances",
        "#sec-bigint-objects",
        "#sec-bigint-constructor",
        "#sec-bigint-constructor-number-value",
        "#sec-numbertobigint",
        "#sec-properties-of-the-bigint-constructor",
        "#sec-bigint.asintn",
        "#sec-bigint.asuintn",
        "#sec-bigint.prototype",
        "#sec-properties-of-the-bigint-prototype-object",
        "#sec-bigint.prototype.constructor",
        "#sec-bigint.prototype.tolocalestring",
        "#sec-bigint.prototype.tostring",
        "#sec-bigint.prototype.valueof",
        "#sec-bigint.prototype-@@tostringtag",
        "#sec-math-object",
        "#sec-value-properties-of-the-math-object",
        "#sec-math.e",
        "#sec-math.ln10",
        "#sec-math.ln2",
        "#sec-math.log10e",
        "#sec-math.log2e",
        "#sec-math.pi",
        "#sec-math.sqrt1_2",
        "#sec-math.sqrt2",
        "#sec-math-@@tostringtag",
        "#sec-function-properties-of-the-math-object",
        "#sec-math.abs",
        "#sec-math.acos",
        "#sec-math.acosh",
        "#sec-math.asin",
        "#sec-math.asinh",
        "#sec-math.atan",
        "#sec-math.atanh",
        "#sec-math.atan2",
        "#sec-math.cbrt",
        "#sec-math.ceil",
        "#sec-math.clz32",
        "#sec-math.cos",
        "#sec-math.cosh",
        "#sec-math.exp",
        "#sec-math.expm1",
        "#sec-math.floor",
        "#sec-math.fround",
        "#sec-math.hypot",
        "#sec-math.imul",
        "#sec-math.log",
        "#sec-math.log1p",
        "#sec-math.log10",
        "#sec-math.log2",
        "#sec-math.max",
        "#sec-math.min",
        "#sec-math.pow",
        "#sec-math.random",
        "#sec-math.round",
        "#sec-math.sign",
        "#sec-math.sin",
        "#sec-math.sinh",
        "#sec-math.sqrt",
        "#sec-math.tan",
        "#sec-math.tanh",
        "#sec-math.trunc",
        "#sec-date-objects",
        "#sec-overview-of-date-objects-and-definitions-of-abstract-operations",
        "#sec-time-values-and-time-range",
        "#sec-day-number-and-time-within-day",
        "#sec-year-number",
        "#sec-month-number",
        "#sec-date-number",
        "#sec-week-day",
        "#sec-local-time-zone-adjustment",
        "#sec-localtime",
        "#sec-utc-t",
        "#sec-hours-minutes-second-and-milliseconds",
        "#sec-maketime",
        "#sec-makeday",
        "#sec-makedate",
        "#sec-timeclip",
        "#sec-date-time-string-format",
        "#sec-expanded-years",
        "#sec-date-constructor",
        "#sec-date",
        "#sec-properties-of-the-date-constructor",
        "#sec-date.now",
        "#sec-date.parse",
        "#sec-date.prototype",
        "#sec-date.utc",
        "#sec-properties-of-the-date-prototype-object",
        "#sec-date.prototype.constructor",
        "#sec-date.prototype.getdate",
        "#sec-date.prototype.getday",
        "#sec-date.prototype.getfullyear",
        "#sec-date.prototype.gethours",
        "#sec-date.prototype.getmilliseconds",
        "#sec-date.prototype.getminutes",
        "#sec-date.prototype.getmonth",
        "#sec-date.prototype.getseconds",
        "#sec-date.prototype.gettime",
        "#sec-date.prototype.gettimezoneoffset",
        "#sec-date.prototype.getutcdate",
        "#sec-date.prototype.getutcday",
        "#sec-date.prototype.getutcfullyear",
        "#sec-date.prototype.getutchours",
        "#sec-date.prototype.getutcmilliseconds",
        "#sec-date.prototype.getutcminutes",
        "#sec-date.prototype.getutcmonth",
        "#sec-date.prototype.getutcseconds",
        "#sec-date.prototype.setdate",
        "#sec-date.prototype.setfullyear",
        "#sec-date.prototype.sethours",
        "#sec-date.prototype.setmilliseconds",
        "#sec-date.prototype.setminutes",
        "#sec-date.prototype.setmonth",
        "#sec-date.prototype.setseconds",
        "#sec-date.prototype.settime",
        "#sec-date.prototype.setutcdate",
        "#sec-date.prototype.setutcfullyear",
        "#sec-date.prototype.setutchours",
        "#sec-date.prototype.setutcmilliseconds",
        "#sec-date.prototype.setutcminutes",
        "#sec-date.prototype.setutcmonth",
        "#sec-date.prototype.setutcseconds",
        "#sec-date.prototype.todatestring",
        "#sec-date.prototype.toisostring",
        "#sec-date.prototype.tojson",
        "#sec-date.prototype.tolocaledatestring",
        "#sec-date.prototype.tolocalestring",
        "#sec-date.prototype.tolocaletimestring",
        "#sec-date.prototype.tostring",
        "#sec-timestring",
        "#sec-datestring",
        "#sec-timezoneestring",
        "#sec-todatestring",
        "#sec-date.prototype.totimestring",
        "#sec-date.prototype.toutcstring",
        "#sec-date.prototype.valueof",
        "#sec-date.prototype-@@toprimitive",
        "#sec-properties-of-date-instances",
        "#sec-text-processing",
        "#sec-string-objects",
        "#sec-string-constructor",
        "#sec-string-constructor-string-value",
        "#sec-properties-of-the-string-constructor",
        "#sec-string.fromcharcode",
        "#sec-string.fromcodepoint",
        "#sec-string.prototype",
        "#sec-string.raw",
        "#sec-properties-of-the-string-prototype-object",
        "#sec-string.prototype.at",
        "#sec-string.prototype.charat",
        "#sec-string.prototype.charcodeat",
        "#sec-string.prototype.codepointat",
        "#sec-string.prototype.concat",
        "#sec-string.prototype.constructor",
        "#sec-string.prototype.endswith",
        "#sec-string.prototype.includes",
        "#sec-string.prototype.indexof",
        "#sec-string.prototype.lastindexof",
        "#sec-string.prototype.localecompare",
        "#sec-string.prototype.match",
        "#sec-string.prototype.matchall",
        "#sec-string.prototype.normalize",
        "#sec-string.prototype.padend",
        "#sec-string.prototype.padstart",
        "#sec-stringpad",
        "#sec-tozeropaddeddecimalstring",
        "#sec-string.prototype.repeat",
        "#sec-string.prototype.replace",
        "#sec-getsubstitution",
        "#sec-string.prototype.replaceall",
        "#sec-string.prototype.search",
        "#sec-string.prototype.slice",
        "#sec-string.prototype.split",
        "#sec-string.prototype.startswith",
        "#sec-string.prototype.substring",
        "#sec-string.prototype.tolocalelowercase",
        "#sec-string.prototype.tolocaleuppercase",
        "#sec-string.prototype.tolowercase",
        "#sec-string.prototype.tostring",
        "#sec-string.prototype.touppercase",
        "#sec-string.prototype.trim",
        "#sec-trimstring",
        "#sec-string.prototype.trimend",
        "#sec-string.prototype.trimstart",
        "#sec-string.prototype.valueof",
        "#sec-string.prototype-@@iterator",
        "#sec-properties-of-string-instances",
        "#sec-properties-of-string-instances-length",
        "#sec-string-iterator-objects",
        "#sec-%stringiteratorprototype%-object",
        "#sec-%stringiteratorprototype%.next",
        "#sec-%stringiteratorprototype%-@@tostringtag",
        "#sec-regexp-regular-expression-objects",
        "#sec-patterns",
        "#sec-patterns-static-semantics-early-errors",
        "#sec-patterns-static-semantics-capturing-group-number",
        "#sec-patterns-static-semantics-is-character-class",
        "#sec-patterns-static-semantics-character-value",
        "#sec-static-semantics-sourcetext",
        "#sec-static-semantics-capturinggroupname",
        "#sec-regexpidentifiercodepoints",
        "#sec-regexpidentifiercodepoint",
        "#sec-pattern-semantics",
        "#sec-notation",
        "#sec-compilepattern",
        "#sec-compilesubpattern",
        "#sec-runtime-semantics-repeatmatcher-abstract-operation",
        "#sec-compileassertion",
        "#sec-runtime-semantics-iswordchar-abstract-operation",
        "#sec-compilequantifier",
        "#sec-compilequantifierprefix",
        "#sec-compileatom",
        "#sec-runtime-semantics-charactersetmatcher-abstract-operation",
        "#sec-backreference-matcher",
        "#sec-runtime-semantics-canonicalize-ch",
        "#sec-compilecharacterclass",
        "#sec-compiletocharset",
        "#sec-runtime-semantics-characterrange-abstract-operation",
        "#sec-runtime-semantics-unicodematchproperty-p",
        "#sec-runtime-semantics-unicodematchpropertyvalue-p-v",
        "#sec-regexp-constructor",
        "#sec-regexp-pattern-flags",
        "#sec-abstract-operations-for-the-regexp-constructor",
        "#sec-regexpalloc",
        "#sec-regexpinitialize",
        "#sec-parsepattern",
        "#sec-regexpcreate",
        "#sec-escaperegexppattern",
        "#sec-properties-of-the-regexp-constructor",
        "#sec-regexp.prototype",
        "#sec-get-regexp-@@species",
        "#sec-properties-of-the-regexp-prototype-object",
        "#sec-regexp.prototype.constructor",
        "#sec-regexp.prototype.exec",
        "#sec-regexpexec",
        "#sec-regexpbuiltinexec",
        "#sec-advancestringindex",
        "#sec-getstringindex",
        "#sec-match-records",
        "#sec-getmatchstring",
        "#sec-getmatchindexpair",
        "#sec-makematchindicesindexpairarray",
        "#sec-get-regexp.prototype.dotAll",
        "#sec-regexphasflag",
        "#sec-get-regexp.prototype.flags",
        "#sec-get-regexp.prototype.global",
        "#sec-get-regexp.prototype.hasIndices",
        "#sec-get-regexp.prototype.ignorecase",
        "#sec-regexp.prototype-@@match",
        "#sec-regexp-prototype-matchall",
        "#sec-get-regexp.prototype.multiline",
        "#sec-regexp.prototype-@@replace",
        "#sec-regexp.prototype-@@search",
        "#sec-get-regexp.prototype.source",
        "#sec-regexp.prototype-@@split",
        "#sec-get-regexp.prototype.sticky",
        "#sec-regexp.prototype.test",
        "#sec-regexp.prototype.tostring",
        "#sec-get-regexp.prototype.unicode",
        "#sec-properties-of-regexp-instances",
        "#sec-lastindex",
        "#sec-regexp-string-iterator-objects",
        "#sec-createregexpstringiterator",
        "#sec-%regexpstringiteratorprototype%-object",
        "#sec-%regexpstringiteratorprototype%.next",
        "#sec-%regexpstringiteratorprototype%-@@tostringtag",
        "#sec-indexed-collections",
        "#sec-array-objects",
        "#sec-array-constructor",
        "#sec-array",
        "#sec-properties-of-the-array-constructor",
        "#sec-array.from",
        "#sec-array.isarray",
        "#sec-array.of",
        "#sec-array.prototype",
        "#sec-get-array-@@species",
        "#sec-properties-of-the-array-prototype-object",
        "#sec-array.prototype.at",
        "#sec-array.prototype.concat",
        "#sec-isconcatspreadable",
        "#sec-array.prototype.constructor",
        "#sec-array.prototype.copywithin",
        "#sec-array.prototype.entries",
        "#sec-array.prototype.every",
        "#sec-array.prototype.fill",
        "#sec-array.prototype.filter",
        "#sec-array.prototype.find",
        "#sec-array.prototype.findindex",
        "#sec-array.prototype.flat",
        "#sec-flattenintoarray",
        "#sec-array.prototype.flatmap",
        "#sec-array.prototype.foreach",
        "#sec-array.prototype.includes",
        "#sec-array.prototype.indexof",
        "#sec-array.prototype.join",
        "#sec-array.prototype.keys",
        "#sec-array.prototype.lastindexof",
        "#sec-array.prototype.map",
        "#sec-array.prototype.pop",
        "#sec-array.prototype.push",
        "#sec-array.prototype.reduce",
        "#sec-array.prototype.reduceright",
        "#sec-array.prototype.reverse",
        "#sec-array.prototype.shift",
        "#sec-array.prototype.slice",
        "#sec-array.prototype.some",
        "#sec-array.prototype.sort",
        "#sec-sortindexedproperties",
        "#sec-array.prototype.splice",
        "#sec-array.prototype.tolocalestring",
        "#sec-array.prototype.tostring",
        "#sec-array.prototype.unshift",
        "#sec-array.prototype.values",
        "#sec-array.prototype-@@iterator",
        "#sec-array.prototype-@@unscopables",
        "#sec-properties-of-array-instances",
        "#sec-properties-of-array-instances-length",
        "#sec-array-iterator-objects",
        "#sec-createarrayiterator",
        "#sec-%arrayiteratorprototype%-object",
        "#sec-%arrayiteratorprototype%.next",
        "#sec-%arrayiteratorprototype%-@@tostringtag",
        "#sec-typedarray-objects",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-%typedarray%",
        "#sec-properties-of-the-%typedarray%-intrinsic-object",
        "#sec-%typedarray%.from",
        "#sec-%typedarray%.of",
        "#sec-%typedarray%.prototype",
        "#sec-get-%typedarray%-@@species",
        "#sec-properties-of-the-%typedarrayprototype%-object",
        "#sec-%typedarray%.prototype.at",
        "#sec-get-%typedarray%.prototype.buffer",
        "#sec-get-%typedarray%.prototype.bytelength",
        "#sec-get-%typedarray%.prototype.byteoffset",
        "#sec-%typedarray%.prototype.constructor",
        "#sec-%typedarray%.prototype.copywithin",
        "#sec-%typedarray%.prototype.entries",
        "#sec-%typedarray%.prototype.every",
        "#sec-%typedarray%.prototype.fill",
        "#sec-%typedarray%.prototype.filter",
        "#sec-%typedarray%.prototype.find",
        "#sec-%typedarray%.prototype.findindex",
        "#sec-%typedarray%.prototype.foreach",
        "#sec-%typedarray%.prototype.includes",
        "#sec-%typedarray%.prototype.indexof",
        "#sec-%typedarray%.prototype.join",
        "#sec-%typedarray%.prototype.keys",
        "#sec-%typedarray%.prototype.lastindexof",
        "#sec-get-%typedarray%.prototype.length",
        "#sec-%typedarray%.prototype.map",
        "#sec-%typedarray%.prototype.reduce",
        "#sec-%typedarray%.prototype.reduceright",
        "#sec-%typedarray%.prototype.reverse",
        "#sec-%typedarray%.prototype.set",
        "#sec-settypedarrayfromtypedarray",
        "#sec-settypedarrayfromarraylike",
        "#sec-%typedarray%.prototype.slice",
        "#sec-%typedarray%.prototype.some",
        "#sec-%typedarray%.prototype.sort",
        "#sec-%typedarray%.prototype.subarray",
        "#sec-%typedarray%.prototype.tolocalestring",
        "#sec-%typedarray%.prototype.tostring",
        "#sec-%typedarray%.prototype.values",
        "#sec-%typedarray%.prototype-@@iterator",
        "#sec-get-%typedarray%.prototype-@@tostringtag",
        "#sec-abstract-operations-for-typedarray-objects",
        "#typedarray-species-create",
        "#typedarray-create",
        "#sec-validatetypedarray",
        "#sec-typedarrayelementsize",
        "#sec-typedarrayelementtype",
        "#sec-typedarray-constructors",
        "#sec-typedarray",
        "#sec-allocatetypedarray",
        "#sec-initializetypedarrayfromtypedarray",
        "#sec-initializetypedarrayfromarraybuffer",
        "#sec-initializetypedarrayfromlist",
        "#sec-initializetypedarrayfromarraylike",
        "#sec-allocatetypedarraybuffer",
        "#sec-properties-of-the-typedarray-constructors",
        "#sec-typedarray.bytes_per_element",
        "#sec-typedarray.prototype",
        "#sec-properties-of-typedarray-prototype-objects",
        "#sec-typedarray.prototype.bytes_per_element",
        "#sec-typedarray.prototype.constructor",
        "#sec-properties-of-typedarray-instances",
        "#sec-keyed-collections",
        "#sec-map-objects",
        "#sec-map-constructor",
        "#sec-map-iterable",
        "#sec-add-entries-from-iterable",
        "#sec-properties-of-the-map-constructor",
        "#sec-map.prototype",
        "#sec-get-map-@@species",
        "#sec-properties-of-the-map-prototype-object",
        "#sec-map.prototype.clear",
        "#sec-map.prototype.constructor",
        "#sec-map.prototype.delete",
        "#sec-map.prototype.entries",
        "#sec-map.prototype.foreach",
        "#sec-map.prototype.get",
        "#sec-map.prototype.has",
        "#sec-map.prototype.keys",
        "#sec-map.prototype.set",
        "#sec-get-map.prototype.size",
        "#sec-map.prototype.values",
        "#sec-map.prototype-@@iterator",
        "#sec-map.prototype-@@tostringtag",
        "#sec-properties-of-map-instances",
        "#sec-map-iterator-objects",
        "#sec-createmapiterator",
        "#sec-%mapiteratorprototype%-object",
        "#sec-%mapiteratorprototype%.next",
        "#sec-%mapiteratorprototype%-@@tostringtag",
        "#sec-set-objects",
        "#sec-set-constructor",
        "#sec-set-iterable",
        "#sec-properties-of-the-set-constructor",
        "#sec-set.prototype",
        "#sec-get-set-@@species",
        "#sec-properties-of-the-set-prototype-object",
        "#sec-set.prototype.add",
        "#sec-set.prototype.clear",
        "#sec-set.prototype.constructor",
        "#sec-set.prototype.delete",
        "#sec-set.prototype.entries",
        "#sec-set.prototype.foreach",
        "#sec-set.prototype.has",
        "#sec-set.prototype.keys",
        "#sec-get-set.prototype.size",
        "#sec-set.prototype.values",
        "#sec-set.prototype-@@iterator",
        "#sec-set.prototype-@@tostringtag",
        "#sec-properties-of-set-instances",
        "#sec-set-iterator-objects",
        "#sec-createsetiterator",
        "#sec-%setiteratorprototype%-object",
        "#sec-%setiteratorprototype%.next",
        "#sec-%setiteratorprototype%-@@tostringtag",
        "#sec-weakmap-objects",
        "#sec-weakmap-constructor",
        "#sec-weakmap-iterable",
        "#sec-properties-of-the-weakmap-constructor",
        "#sec-weakmap.prototype",
        "#sec-properties-of-the-weakmap-prototype-object",
        "#sec-weakmap.prototype.constructor",
        "#sec-weakmap.prototype.delete",
        "#sec-weakmap.prototype.get",
        "#sec-weakmap.prototype.has",
        "#sec-weakmap.prototype.set",
        "#sec-weakmap.prototype-@@tostringtag",
        "#sec-properties-of-weakmap-instances",
        "#sec-weakset-objects",
        "#sec-weakset-constructor",
        "#sec-weakset-iterable",
        "#sec-properties-of-the-weakset-constructor",
        "#sec-weakset.prototype",
        "#sec-properties-of-the-weakset-prototype-object",
        "#sec-weakset.prototype.add",
        "#sec-weakset.prototype.constructor",
        "#sec-weakset.prototype.delete",
        "#sec-weakset.prototype.has",
        "#sec-weakset.prototype-@@tostringtag",
        "#sec-properties-of-weakset-instances",
        "#sec-structured-data",
        "#sec-arraybuffer-objects",
        "#sec-arraybuffer-notation",
        "#sec-abstract-operations-for-arraybuffer-objects",
        "#sec-allocatearraybuffer",
        "#sec-isdetachedbuffer",
        "#sec-detacharraybuffer",
        "#sec-clonearraybuffer",
        "#sec-isunsignedelementtype",
        "#sec-isunclampedintegerelementtype",
        "#sec-isbigintelementtype",
        "#sec-isnotearconfiguration",
        "#sec-rawbytestonumeric",
        "#sec-getvaluefrombuffer",
        "#sec-numerictorawbytes",
        "#sec-setvalueinbuffer",
        "#sec-getmodifysetvalueinbuffer",
        "#sec-arraybuffer-constructor",
        "#sec-arraybuffer-length",
        "#sec-properties-of-the-arraybuffer-constructor",
        "#sec-arraybuffer.isview",
        "#sec-arraybuffer.prototype",
        "#sec-get-arraybuffer-@@species",
        "#sec-properties-of-the-arraybuffer-prototype-object",
        "#sec-get-arraybuffer.prototype.bytelength",
        "#sec-arraybuffer.prototype.constructor",
        "#sec-arraybuffer.prototype.slice",
        "#sec-arraybuffer.prototype-@@tostringtag",
        "#sec-properties-of-the-arraybuffer-instances",
        "#sec-sharedarraybuffer-objects",
        "#sec-abstract-operations-for-sharedarraybuffer-objects",
        "#sec-allocatesharedarraybuffer",
        "#sec-issharedarraybuffer",
        "#sec-sharedarraybuffer-constructor",
        "#sec-sharedarraybuffer-length",
        "#sec-properties-of-the-sharedarraybuffer-constructor",
        "#sec-sharedarraybuffer.prototype",
        "#sec-sharedarraybuffer-@@species",
        "#sec-properties-of-the-sharedarraybuffer-prototype-object",
        "#sec-get-sharedarraybuffer.prototype.bytelength",
        "#sec-sharedarraybuffer.prototype.constructor",
        "#sec-sharedarraybuffer.prototype.slice",
        "#sec-sharedarraybuffer.prototype.toString",
        "#sec-properties-of-the-sharedarraybuffer-instances",
        "#sec-dataview-objects",
        "#sec-abstract-operations-for-dataview-objects",
        "#sec-getviewvalue",
        "#sec-setviewvalue",
        "#sec-dataview-constructor",
        "#sec-dataview-buffer-byteoffset-bytelength",
        "#sec-properties-of-the-dataview-constructor",
        "#sec-dataview.prototype",
        "#sec-properties-of-the-dataview-prototype-object",
        "#sec-get-dataview.prototype.buffer",
        "#sec-get-dataview.prototype.bytelength",
        "#sec-get-dataview.prototype.byteoffset",
        "#sec-dataview.prototype.constructor",
        "#sec-dataview.prototype.getbigint64",
        "#sec-dataview.prototype.getbiguint64",
        "#sec-dataview.prototype.getfloat32",
        "#sec-dataview.prototype.getfloat64",
        "#sec-dataview.prototype.getint8",
        "#sec-dataview.prototype.getint16",
        "#sec-dataview.prototype.getint32",
        "#sec-dataview.prototype.getuint8",
        "#sec-dataview.prototype.getuint16",
        "#sec-dataview.prototype.getuint32",
        "#sec-dataview.prototype.setbigint64",
        "#sec-dataview.prototype.setbiguint64",
        "#sec-dataview.prototype.setfloat32",
        "#sec-dataview.prototype.setfloat64",
        "#sec-dataview.prototype.setint8",
        "#sec-dataview.prototype.setint16",
        "#sec-dataview.prototype.setint32",
        "#sec-dataview.prototype.setuint8",
        "#sec-dataview.prototype.setuint16",
        "#sec-dataview.prototype.setuint32",
        "#sec-dataview.prototype-@@tostringtag",
        "#sec-properties-of-dataview-instances",
        "#sec-atomics-object",
        "#sec-waiterlist-objects",
        "#sec-abstract-operations-for-atomics",
        "#sec-validateintegertypedarray",
        "#sec-validateatomicaccess",
        "#sec-getwaiterlist",
        "#sec-entercriticalsection",
        "#sec-leavecriticalsection",
        "#sec-addwaiter",
        "#sec-removewaiter",
        "#sec-removewaiters",
        "#sec-suspendagent",
        "#sec-notifywaiter",
        "#sec-atomicreadmodifywrite",
        "#sec-bytelistbitwiseop",
        "#sec-bytelistequal",
        "#sec-atomics.add",
        "#sec-atomics.and",
        "#sec-atomics.compareexchange",
        "#sec-atomics.exchange",
        "#sec-atomics.islockfree",
        "#sec-atomics.load",
        "#sec-atomics.or",
        "#sec-atomics.store",
        "#sec-atomics.sub",
        "#sec-atomics.wait",
        "#sec-atomics.notify",
        "#sec-atomics.xor",
        "#sec-atomics-@@tostringtag",
        "#sec-json-object",
        "#sec-json.parse",
        "#sec-internalizejsonproperty",
        "#sec-json.stringify",
        "#sec-serializejsonproperty",
        "#sec-quotejsonstring",
        "#sec-unicodeescape",
        "#sec-serializejsonobject",
        "#sec-serializejsonarray",
        "#sec-json-@@tostringtag",
        "#sec-managing-memory",
        "#sec-weak-ref-objects",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-target",
        "#sec-properties-of-the-weak-ref-constructor",
        "#sec-weak-ref.prototype",
        "#sec-properties-of-the-weak-ref-prototype-object",
        "#sec-weak-ref.prototype.constructor",
        "#sec-weak-ref.prototype.deref",
        "#sec-weak-ref.prototype-@@tostringtag",
        "#sec-weakref-abstract-operations",
        "#sec-weakrefderef",
        "#sec-properties-of-weak-ref-instances",
        "#sec-finalization-registry-objects",
        "#sec-finalization-registry-constructor",
        "#sec-finalization-registry-cleanup-callback",
        "#sec-properties-of-the-finalization-registry-constructor",
        "#sec-finalization-registry.prototype",
        "#sec-properties-of-the-finalization-registry-prototype-object",
        "#sec-finalization-registry.prototype.constructor",
        "#sec-finalization-registry.prototype.register",
        "#sec-finalization-registry.prototype.unregister",
        "#sec-finalization-registry.prototype-@@tostringtag",
        "#sec-properties-of-finalization-registry-instances",
        "#sec-control-abstraction-objects",
        "#sec-iteration",
        "#sec-common-iteration-interfaces",
        "#sec-iterable-interface",
        "#sec-iterator-interface",
        "#sec-asynciterable-interface",
        "#sec-asynciterator-interface",
        "#sec-iteratorresult-interface",
        "#sec-%iteratorprototype%-object",
        "#sec-%iteratorprototype%-@@iterator",
        "#sec-asynciteratorprototype",
        "#sec-asynciteratorprototype-asynciterator",
        "#sec-async-from-sync-iterator-objects",
        "#sec-createasyncfromsynciterator",
        "#sec-%asyncfromsynciteratorprototype%-object",
        "#sec-%asyncfromsynciteratorprototype%.next",
        "#sec-%asyncfromsynciteratorprototype%.return",
        "#sec-%asyncfromsynciteratorprototype%.throw",
        "#sec-properties-of-async-from-sync-iterator-instances",
        "#sec-asyncfromsynciteratorcontinuation",
        "#sec-promise-objects",
        "#sec-promise-abstract-operations",
        "#sec-promisecapability-records",
        "#sec-ifabruptrejectpromise",
        "#sec-promisereaction-records",
        "#sec-createresolvingfunctions",
        "#sec-promise-reject-functions",
        "#sec-promise-resolve-functions",
        "#sec-fulfillpromise",
        "#sec-newpromisecapability",
        "#sec-ispromise",
        "#sec-rejectpromise",
        "#sec-triggerpromisereactions",
        "#sec-host-promise-rejection-tracker",
        "#sec-promise-jobs",
        "#sec-newpromisereactionjob",
        "#sec-newpromiseresolvethenablejob",
        "#sec-promise-constructor",
        "#sec-promise-executor",
        "#sec-properties-of-the-promise-constructor",
        "#sec-promise.all",
        "#sec-getpromiseresolve",
        "#sec-performpromiseall",
        "#sec-promise.all-resolve-element-functions",
        "#sec-promise.allsettled",
        "#sec-performpromiseallsettled",
        "#sec-promise.allsettled-resolve-element-functions",
        "#sec-promise.allsettled-reject-element-functions",
        "#sec-promise.any",
        "#sec-performpromiseany",
        "#sec-promise.any-reject-element-functions",
        "#sec-promise.prototype",
        "#sec-promise.race",
        "#sec-performpromiserace",
        "#sec-promise.reject",
        "#sec-promise.resolve",
        "#sec-promise-resolve",
        "#sec-get-promise-@@species",
        "#sec-properties-of-the-promise-prototype-object",
        "#sec-promise.prototype.catch",
        "#sec-promise.prototype.constructor",
        "#sec-promise.prototype.finally",
        "#sec-promise.prototype.then",
        "#sec-performpromisethen",
        "#sec-promise.prototype-@@tostringtag",
        "#sec-properties-of-promise-instances",
        "#sec-generatorfunction-objects",
        "#sec-generatorfunction-constructor",
        "#sec-generatorfunction",
        "#sec-properties-of-the-generatorfunction-constructor",
        "#sec-generatorfunction.length",
        "#sec-generatorfunction.prototype",
        "#sec-properties-of-the-generatorfunction-prototype-object",
        "#sec-generatorfunction.prototype.constructor",
        "#sec-generatorfunction.prototype.prototype",
        "#sec-generatorfunction.prototype-@@tostringtag",
        "#sec-generatorfunction-instances",
        "#sec-generatorfunction-instances-length",
        "#sec-generatorfunction-instances-name",
        "#sec-generatorfunction-instances-prototype",
        "#sec-asyncgeneratorfunction-objects",
        "#sec-asyncgeneratorfunction-constructor",
        "#sec-asyncgeneratorfunction",
        "#sec-properties-of-asyncgeneratorfunction",
        "#sec-asyncgeneratorfunction-length",
        "#sec-asyncgeneratorfunction-prototype",
        "#sec-properties-of-asyncgeneratorfunction-prototype",
        "#sec-asyncgeneratorfunction-prototype-constructor",
        "#sec-asyncgeneratorfunction-prototype-prototype",
        "#sec-asyncgeneratorfunction-prototype-tostringtag",
        "#sec-asyncgeneratorfunction-instances",
        "#sec-asyncgeneratorfunction-instance-length",
        "#sec-asyncgeneratorfunction-instance-name",
        "#sec-asyncgeneratorfunction-instance-prototype",
        "#sec-generator-objects",
        "#sec-properties-of-generator-prototype",
        "#sec-generator.prototype.constructor",
        "#sec-generator.prototype.next",
        "#sec-generator.prototype.return",
        "#sec-generator.prototype.throw",
        "#sec-generator.prototype-@@tostringtag",
        "#sec-properties-of-generator-instances",
        "#sec-generator-abstract-operations",
        "#sec-generatorstart",
        "#sec-generatorvalidate",
        "#sec-generatorresume",
        "#sec-generatorresumeabrupt",
        "#sec-getgeneratorkind",
        "#sec-generatoryield",
        "#sec-yield",
        "#sec-createiteratorfromclosure",
        "#sec-asyncgenerator-objects",
        "#sec-properties-of-asyncgenerator-prototype",
        "#sec-asyncgenerator-prototype-constructor",
        "#sec-asyncgenerator-prototype-next",
        "#sec-asyncgenerator-prototype-return",
        "#sec-asyncgenerator-prototype-throw",
        "#sec-asyncgenerator-prototype-tostringtag",
        "#sec-properties-of-asyncgenerator-intances",
        "#sec-asyncgenerator-abstract-operations",
        "#sec-asyncgeneratorrequest-records",
        "#sec-asyncgeneratorstart",
        "#sec-asyncgeneratorvalidate",
        "#sec-asyncgeneratorenqueue",
        "#sec-asyncgeneratorcompletestep",
        "#sec-asyncgeneratorresume",
        "#sec-asyncgeneratorunwrapyieldresumption",
        "#sec-asyncgeneratoryield",
        "#sec-asyncgeneratorawaitreturn",
        "#sec-asyncgeneratordrainqueue",
        "#sec-createasynciteratorfromclosure",
        "#sec-async-function-objects",
        "#sec-async-function-constructor",
        "#sec-async-function-constructor-arguments",
        "#sec-async-function-constructor-properties",
        "#sec-async-function-constructor-length",
        "#sec-async-function-constructor-prototype",
        "#sec-async-function-prototype-properties",
        "#sec-async-function-prototype-properties-constructor",
        "#sec-async-function-prototype-properties-toStringTag",
        "#sec-async-function-instances",
        "#sec-async-function-instances-length",
        "#sec-async-function-instances-name",
        "#sec-async-functions-abstract-operations",
        "#sec-async-functions-abstract-operations-async-function-start",
        "#sec-asyncblockstart",
        "#sec-reflection",
        "#sec-reflect-object",
        "#sec-reflect.apply",
        "#sec-reflect.construct",
        "#sec-reflect.defineproperty",
        "#sec-reflect.deleteproperty",
        "#sec-reflect.get",
        "#sec-reflect.getownpropertydescriptor",
        "#sec-reflect.getprototypeof",
        "#sec-reflect.has",
        "#sec-reflect.isextensible",
        "#sec-reflect.ownkeys",
        "#sec-reflect.preventextensions",
        "#sec-reflect.set",
        "#sec-reflect.setprototypeof",
        "#sec-reflect-@@tostringtag",
        "#sec-proxy-objects",
        "#sec-proxy-constructor",
        "#sec-proxy-target-handler",
        "#sec-properties-of-the-proxy-constructor",
        "#sec-proxy.revocable",
        "#sec-module-namespace-objects",
        "#sec-@@tostringtag",
        "#sec-memory-model",
        "#sec-memory-model-fundamentals",
        "#sec-agent-event-records",
        "#sec-chosen-value-records",
        "#sec-candidate-executions",
        "#sec-abstract-operations-for-the-memory-model",
        "#sec-event-set",
        "#sec-sharedatablockeventset",
        "#sec-hosteventset",
        "#sec-composewriteeventbytes",
        "#sec-valueofreadevent",
        "#sec-relations-of-candidate-executions",
        "#sec-agent-order",
        "#sec-reads-bytes-from",
        "#sec-reads-from",
        "#sec-host-synchronizes-with",
        "#sec-synchronizes-with",
        "#sec-happens-before",
        "#sec-properties-of-valid-executions",
        "#sec-valid-chosen-reads",
        "#sec-coherent-reads",
        "#sec-tear-free-aligned-reads",
        "#sec-memory-order",
        "#sec-valid-executions",
        "#sec-races",
        "#sec-data-races",
        "#sec-data-race-freedom",
        "#sec-shared-memory-guidelines",
        "#sec-grammar-summary",
        "#sec-lexical-grammar",
        "#sec-expressions",
        "#sec-statements",
        "#sec-functions-and-classes",
        "#sec-scripts-and-modules",
        "#sec-number-conversions",
        "#sec-universal-resource-identifier-character-classes",
        "#sec-regular-expressions",
        "#sec-additional-ecmascript-features-for-web-browsers",
        "#sec-additional-syntax",
        "#sec-html-like-comments",
        "#sec-regular-expressions-patterns",
        "#sec-patterns-static-semantics-early-errors-annexb",
        "#sec-patterns-static-semantics-is-character-class-annexb",
        "#sec-patterns-static-semantics-character-value-annexb",
        "#sec-compilesubpattern-annexb",
        "#sec-compileassertion-annexb",
        "#sec-compileatom-annexb",
        "#sec-compiletocharset-annexb",
        "#sec-runtime-semantics-characterrangeorunion-abstract-operation",
        "#sec-additional-built-in-properties",
        "#sec-additional-properties-of-the-global-object",
        "#sec-escape-string",
        "#sec-unescape-string",
        "#sec-additional-properties-of-the-string.prototype-object",
        "#sec-string.prototype.substr",
        "#sec-string.prototype.anchor",
        "#sec-createhtml",
        "#sec-string.prototype.big",
        "#sec-string.prototype.blink",
        "#sec-string.prototype.bold",
        "#sec-string.prototype.fixed",
        "#sec-string.prototype.fontcolor",
        "#sec-string.prototype.fontsize",
        "#sec-string.prototype.italics",
        "#sec-string.prototype.link",
        "#sec-string.prototype.small",
        "#sec-string.prototype.strike",
        "#sec-string.prototype.sub",
        "#sec-string.prototype.sup",
        "#String.prototype.trimleft",
        "#String.prototype.trimright",
        "#sec-additional-properties-of-the-date.prototype-object",
        "#sec-date.prototype.getyear",
        "#sec-date.prototype.setyear",
        "#sec-date.prototype.togmtstring",
        "#sec-additional-properties-of-the-regexp.prototype-object",
        "#sec-regexp.prototype.compile",
        "#sec-other-additional-features",
        "#sec-labelled-function-declarations",
        "#sec-block-level-function-declarations-web-legacy-compatibility-semantics",
        "#sec-web-compat-functiondeclarationinstantiation",
        "#sec-web-compat-globaldeclarationinstantiation",
        "#sec-web-compat-evaldeclarationinstantiation",
        "#sec-block-duplicates-allowed-static-semantics",
        "#sec-switch-duplicates-allowed-static-semantics",
        "#sec-web-compat-blockdeclarationinstantiation",
        "#sec-functiondeclarations-in-ifstatement-statement-clauses",
        "#sec-variablestatements-in-catch-blocks",
        "#sec-initializers-in-forin-statement-heads",
        "#sec-IsHTMLDDA-internal-slot",
        "#sec-IsHTMLDDA-internal-slot-to-boolean",
        "#sec-IsHTMLDDA-internal-slot-aec",
        "#sec-IsHTMLDDA-internal-slot-typeof",
        "#sec-strict-mode-of-ecmascript",
        "#sec-host-layering-points",
        "#sec-host-hooks-summary",
        "#sec-host-defined-fields-summary",
        "#sec-host-defined-objects-summary",
        "#sec-host-running-jobs",
        "#sec-host-internal-methods-of-exotic-objects",
        "#sec-host-built-in-objects-and-methods",
        "#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact",
        "#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions",
        "#sec-colophon",
        "#sec-bibliography",
        "#sec-copyright-and-software-license",
        "https://tc39.es/ecma262/",
        "https://github.com/tc39/proposals/blob/HEAD/finished-proposals.md",
        "https://tc39.es/process-document/",
        "",
        "https://tc39.es/ecma262/2022/multipage/",
        "https://github.com/tc39/ecma262",
        "https://github.com/tc39/ecma262/issues",
        "https://github.com/tc39/ecma262/issues/new",
        "https://github.com/tc39/ecma262/pulls",
        "https://github.com/tc39/ecma262/pulls/new",
        "https://github.com/tc39/test262",
        "mailto:syg at google dot com",
        "https://twitter.com/_shu",
        "mailto:ecma262-editor-list at michael dot ficarra dot me",
        "https://twitter.com/smooshMap",
        "mailto:bakkot at gmail dot com",
        "https://twitter.com/bakkoting",
        "https://es.discourse.group/",
        "https://github.com/tc39/how-we-work/blob/HEAD/matrix-guide.md",
        "https://esdiscuss.org/",
        "#sec-colophon",
        "#sec-object-type",
        "#sec-memory-model",
        "#agent",
        "#integer",
        "#host",
        "#implementation-defined",
        "#sort-order",
        "#sec-keywords-and-reserved-words",
        "#sec-keywords-and-reserved-words",
        "#sec-keywords-and-reserved-words",
        "#sec-forbidden-extensions",
        "#implementation-defined",
        "#implementation-approximated",
        "#host-defined",
        "#sec-conformance",
        "#sec-conformance",
        "#sec-conformance",
        "#sec-conformance",
        "https://ecma-international.org/publications/standards/Ecma-402.htm",
        "https://ecma-international.org/publications/standards/Ecma-404.htm",
        "#host-environment",
        "#host-environment",
        "#host-environment",
        "#host-environment",
        "#host-environment",
        "#host-environment",
        "#host-environment",
        "#host-environment",
        "#host-environment",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-host-layering-points",
        "#implementation-defined",
        "#implementation-approximated",
        "#sec-math.exp",
        "#implementation-approximated",
        "#sec-host-layering-points",
        "#implementation-defined",
        "#implementation-approximated",
        "#host",
        "#sec-host-layering-points",
        "#host",
        "https://html.spec.whatwg.org/",
        "#host-defined",
        "#host-hook",
        "#sec-host-layering-points",
        "#host-hook",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-host-layering-points",
        "#host",
        "#host-defined",
        "#host-defined",
        "#host-environment",
        "#host-defined",
        "#sec-global-object",
        "#host-defined",
        "#implementation-defined",
        "#host",
        "#sec-algorithm-conventions-abstract-operations",
        "#host",
        "#sec-global-object",
        "#sec-runtime-semantics",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-strict-mode-code",
        "#implementation-approximated",
        "#implementation-defined",
        "#implementation-defined",
        "#sec-hosts-and-implementations",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#function-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#ordinary-object",
        "#exotic-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#integer",
        "#integer",
        "#integer",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-string-constructor-string-value",
        "#sec-bibliography",
        "#number-value",
        "#constructor",
        "#constructor",
        "#number-value",
        "#number-value",
        "#number-value",
        "#constructor",
        "#sec-number-constructor-number-value",
        "#number-value",
        "#number-value",
        "#number-value",
        "#sec-bibliography",
        "#integer",
        "#constructor",
        "#sec-object-type",
        "#constructor",
        "#host",
        "#function-object",
        "#host",
        "#sec-notational-conventions",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinary-and-exotic-objects-behaviours",
        "#sec-ecmascript-language-source-code",
        "#sec-error-handling-and-language-extensions",
        "#sec-ecmascript-standard-built-in-objects",
        "#sec-reflection",
        "#sec-memory-model",
        "#sec-ecmascript-language-lexical-grammar",
        "#prod-SourceCharacter",
        "#sec-source-text",
        "#sec-context-free-grammars",
        "#prod-InputElementDiv",
        "#prod-InputElementTemplateTail",
        "#prod-InputElementRegExp",
        "#prod-InputElementRegExpOrTemplateTail",
        "#sec-keywords-and-reserved-words",
        "#sec-automatic-semicolon-insertion",
        "#prod-MultiLineComment",
        "#prod-MultiLineComment",
        "#sec-patterns",
        "#prod-SourceCharacter",
        "#sec-context-free-grammars",
        "#prod-Pattern",
        "#prod-SourceCharacter",
        "#sec-tonumber-applied-to-the-string-type",
        "#sec-ecmascript-language-expressions",
        "#sec-ecmascript-language-scripts-and-modules",
        "#sec-lexical-and-regexp-grammars",
        "#sec-context-free-grammars",
        "#prod-Script",
        "#prod-Module",
        "#prod-Script",
        "#prod-Module",
        "#prod-Script",
        "#prod-Module",
        "#sec-context-free-grammars",
        "#sec-ecmascript-language-expressions",
        "#sec-ecmascript-language-scripts-and-modules",
        "#prod-Script",
        "#prod-Module",
        "#prod-Script",
        "#prod-Module",
        "#early-error",
        "#sec-context-free-grammars",
        "#prod-UnicodeEscapeSequence",
        "#prod-grammar-notation-HexIntegerLiteral",
        "#prod-HexDigits",
        "#prod-grammar-notation-HexIntegerLiteral",
        "#prod-HexDigits",
        "#sec-unicode-format-control-characters",
        "#sec-white-space",
        "#prod-IdentifierName",
        "#prod-RegularExpressionLiteral",
        "#prod-grammar-notation-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-grammar-notation-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-grammar-notation-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-grammar-notation-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-grammar-notation-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-grammar-notation-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-grammar-notation-ArgumentList",
        "#prod-grammar-notation-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-grammar-notation-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-grammar-notation-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-grammar-notation-ForStatement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-grammar-notation-ForStatement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-grammar-notation-ForStatement",
        "#prod-LexicalDeclaration",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-grammar-notation-ForStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList_Return",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList_Return",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList_In",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList_Return_In",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-grammar-notation-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-BindingIdentifier",
        "#prod-grammar-notation-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-grammar-notation-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-grammar-notation-VariableDeclaration_In",
        "#prod-BindingIdentifier",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList_Return",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList",
        "#prod-ReturnStatement",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-StatementList_Return",
        "#prod-ExpressionStatement",
        "#prod-grammar-notation-NonZeroDigit",
        "#prod-grammar-notation-NonZeroDigit",
        "#prod-grammar-notation-DecimalDigit",
        "#prod-grammar-notation-DecimalDigits",
        "#prod-grammar-notation-DecimalDigit",
        "#prod-grammar-notation-DecimalDigits",
        "#prod-grammar-notation-DecimalDigit",
        "#prod-grammar-notation-LookaheadExample",
        "#prod-grammar-notation-DecimalDigits",
        "#prod-grammar-notation-DecimalDigit",
        "#prod-grammar-notation-DecimalDigit",
        "#sec-context-free-grammars",
        "#sec-context-free-grammars",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-grammar-notation-ThrowStatement",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-grammar-notation-Identifier",
        "#prod-IdentifierName",
        "#prod-ReservedWord",
        "#prod-grammar-notation-Identifier",
        "#prod-IdentifierName",
        "#prod-ReservedWord",
        "#prod-grammar-notation-SourceCharacter",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-syntactic-grammar",
        "#step-sdo-invocation-example-1",
        "#step-sdo-invocation-example-2",
        "#step-sdo-invocation-example-3",
        "#sec-context-free-grammars",
        "#sec-context-free-grammars",
        "#prod-Block",
        "#prod-Block",
        "#prod-StatementList",
        "#prod-Block",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-completion-record-specification-type",
        "#sec-throwcompletion",
        "#sec-returnifabrupt",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-completion-record-specification-type",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-returnifabrupt",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-returnifabrupt",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-runtime-semantics",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-completion-record-specification-type",
        "#sec-normalcompletion",
        "#sec-completion-ao",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-normalcompletion",
        "#sec-throwcompletion",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-normalcompletion",
        "#sec-normalcompletion",
        "#sec-completion-ao",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-completion-ao",
        "#sec-normalcompletion",
        "#sec-completion-record-specification-type",
        "#sec-normalcompletion",
        "#prod-Script",
        "#prod-Module",
        "#early-error",
        "#early-error",
        "#sec-error-handling-and-language-extensions",
        "#early-error",
        "#prod-Script",
        "#prod-Module",
        "#early-error",
        "#prod-Script",
        "#prod-Module",
        "#early-error",
        "#prod-Script",
        "#prod-Module",
        "#sec-bibliography",
        "#sec-ecmascript-language-types",
        "#integer",
        "#sec-bibliography",
        "#mathematical-value",
        "#integer",
        "#mathematical-value",
        "#number-value",
        "#mathematical-value",
        "#mathematical-value",
        "#integer",
        "#number-value",
        "#mathematical-value",
        "#integer",
        "#mathematical-value",
        "#extended-mathematical-value",
        "#number-value",
        "#sec-ecmascript-language-types-number-type",
        "#integer",
        "#mathematical-value",
        "#mathematical-value",
        "#mathematical-value",
        "#mathematical-value",
        "#mathematical-value",
        "#eqn-abs",
        "#eqn-abs",
        "#integer",
        "#extended-mathematical-value",
        "#integer",
        "#eqn-abs",
        "#eqn-floor",
        "#mathematical-value",
        "#eqn-floor",
        "#eqn-modulo",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#integer",
        "#integer",
        "#leading-surrogate",
        "#trailing-surrogate",
        "#leading-surrogate",
        "#trailing-surrogate",
        "#sec-utf16decodesurrogatepair",
        "#leading-surrogate",
        "#trailing-surrogate",
        "#surrogate-pair",
        "#sec-string.prototype.normalize",
        "#sec-string.prototype.localecompare",
        "#integer",
        "#integer",
        "#integer",
        "#integer",
        "#substring",
        "#sec-object-type",
        "#realm",
        "#sec-code-realms",
        "#table-well-known-symbols",
        "#constructor",
        "#constructor",
        "#sec-array.prototype.concat",
        "#sec-string.prototype.match",
        "#sec-string.prototype.matchall",
        "#sec-string.prototype.replace",
        "#sec-string.prototype.search",
        "#constructor",
        "#sec-string.prototype.split",
        "#sec-toprimitive",
        "#sec-object.prototype.tostring",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-completion-record-specification-type",
        "#sec-numeric-types-number-unaryMinus",
        "#sec-unary-minus-operator",
        "#sec-numeric-types-bigint-unaryMinus",
        "#sec-numeric-types-number-bitwiseNOT",
        "#sec-bitwise-not-operator",
        "#sec-numeric-types-bigint-bitwiseNOT",
        "#sec-numeric-types-number-exponentiate",
        "#sec-exp-operator",
        "#sec-math.pow",
        "#sec-numeric-types-bigint-exponentiate",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-numeric-types-number-multiply",
        "#sec-multiplicative-operators",
        "#sec-numeric-types-bigint-multiply",
        "#sec-numeric-types-number-divide",
        "#sec-multiplicative-operators",
        "#sec-numeric-types-bigint-divide",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-numeric-types-number-remainder",
        "#sec-multiplicative-operators",
        "#sec-numeric-types-bigint-remainder",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-numeric-types-number-add",
        "#sec-postfix-increment-operator",
        "#sec-prefix-increment-operator",
        "#sec-addition-operator-plus",
        "#sec-numeric-types-bigint-add",
        "#sec-numeric-types-number-subtract",
        "#sec-postfix-decrement-operator",
        "#sec-prefix-decrement-operator",
        "#sec-subtraction-operator-minus",
        "#sec-numeric-types-bigint-subtract",
        "#sec-numeric-types-number-leftShift",
        "#sec-left-shift-operator",
        "#sec-numeric-types-bigint-leftShift",
        "#sec-numeric-types-number-signedRightShift",
        "#sec-signed-right-shift-operator",
        "#sec-numeric-types-bigint-signedRightShift",
        "#sec-numeric-types-number-unsignedRightShift",
        "#sec-unsigned-right-shift-operator",
        "#sec-numeric-types-bigint-unsignedRightShift",
        "#sec-completion-record-specification-type",
        "#sec-numeric-types-number-lessThan",
        "#sec-relational-operators",
        "#sec-islessthan",
        "#sec-numeric-types-bigint-lessThan",
        "#sec-numeric-types-number-equal",
        "#sec-equality-operators",
        "#sec-isstrictlyequal",
        "#sec-numeric-types-bigint-equal",
        "#sec-numeric-types-number-sameValue",
        "#sec-samevalue",
        "#sec-numeric-types-bigint-sameValue",
        "#sec-numeric-types-number-sameValueZero",
        "#sec-samevaluezero",
        "#sec-numeric-types-bigint-sameValueZero",
        "#sec-numeric-types-number-bitwiseAND",
        "#sec-binary-bitwise-operators",
        "#sec-numeric-types-bigint-bitwiseAND",
        "#sec-numeric-types-number-bitwiseXOR",
        "#sec-numeric-types-bigint-bitwiseXOR",
        "#sec-numeric-types-number-bitwiseOR",
        "#sec-numeric-types-bigint-bitwiseOR",
        "#sec-numeric-types-number-tostring",
        "#sec-tostring",
        "#sec-numeric-types-bigint-tostring",
        "#sec-bibliography",
        "#implementation-defined",
        "#sec-arraybuffer-objects",
        "#sec-sharedarraybuffer-objects",
        "#number-value",
        "#number-value",
        "#number-value",
        "#integer",
        "#integer",
        "#integer",
        "#integer",
        "#integer",
        "#integer",
        "#number-value",
        "#number-value",
        "#sec-bibliography",
        "#number-value",
        "#number-value",
        "#integer",
        "#integer",
        "#sec-type-conversion",
        "#integral-number",
        "#sec-toint32",
        "#mathematical-value",
        "#implementation-approximated",
        "#integral-number",
        "#integral-number",
        "#integral-number",
        "#integral-number",
        "#assert",
        "#eqn-abs",
        "#\u211d",
        "#eqn-abs",
        "#\u211d",
        "#eqn-abs",
        "#\u211d",
        "#eqn-abs",
        "#\u211d",
        "#eqn-abs",
        "#\u211d",
        "#eqn-abs",
        "#\u211d",
        "#assert",
        "#integral-number",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#\u211d",
        "#sec-bibliography",
        "#sec-bibliography",
        "#sec-bibliography",
        "#\ud835\udd3d",
        "#\u211d",
        "#\u211d",
        "#sec-bibliography",
        "#\ud835\udd3d",
        "#\u211d",
        "#\u211d",
        "#assert",
        "#\u211d",
        "#\u211d",
        "#integer",
        "#\u211d",
        "#\u211d",
        "#\ud835\udd3d",
        "#sec-bibliography",
        "#sec-bibliography",
        "#sec-bibliography",
        "#assert",
        "#\ud835\udd3d",
        "#\u211d",
        "#\u211d",
        "#sec-numeric-types-number-add",
        "#sec-numeric-types-number-unaryMinus",
        "#integral-number",
        "#sec-toint32",
        "#sec-touint32",
        "#\u211d",
        "#eqn-modulo",
        "#mathematical-value",
        "#integral-number",
        "#sec-toint32",
        "#sec-touint32",
        "#\u211d",
        "#eqn-modulo",
        "#mathematical-value",
        "#integral-number",
        "#sec-touint32",
        "#sec-touint32",
        "#\u211d",
        "#eqn-modulo",
        "#mathematical-value",
        "#number-value",
        "#assert",
        "#\u211d",
        "#\u211d",
        "#number-value",
        "#number-value",
        "#number-value",
        "#integral-number",
        "#sec-toint32",
        "#sec-toint32",
        "#\u211d",
        "#\u211d",
        "#number-value",
        "#integer",
        "#integral-number",
        "#sec-numberbitwiseop",
        "#integral-number",
        "#sec-numberbitwiseop",
        "#integral-number",
        "#sec-numberbitwiseop",
        "#string-concatenation",
        "#sec-numeric-types-number-tostring",
        "#integer",
        "#\ud835\udd3d",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#integer",
        "#eqn-abs",
        "#string-concatenation",
        "#integer",
        "#eqn-abs",
        "#number-value",
        "#sec-tonumber",
        "#sec-tostring",
        "#number-value",
        "#step-number-tostring-intermediate-values",
        "#step-number-tostring-intermediate-values",
        "#integer",
        "#\ud835\udd3d",
        "#\u211d",
        "http://ampl.com/REFS/abstracts.html#rounding",
        "http://netlib.sandia.gov/fp/dtoa.c",
        "http://netlib.sandia.gov/fp/g_fmt.c",
        "#integer",
        "#\u211d",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#\u211d",
        "#\u211d",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#\u211d",
        "#\u211d",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#\u211d",
        "#integer",
        "#\u211d",
        "#sec-numeric-types-bigint-leftShift",
        "#sec-completion-record-specification-type",
        "#\u211d",
        "#\u211d",
        "#\u211d",
        "#\u211d",
        "#sec-numeric-types-bigint-equal",
        "#sec-numeric-types-bigint-equal",
        "#\u211d",
        "#\u211d",
        "#eqn-modulo",
        "#eqn-modulo",
        "#sec-binaryand",
        "#sec-binaryor",
        "#assert",
        "#sec-binaryxor",
        "#sec-binaryand",
        "#eqn-modulo",
        "#eqn-modulo",
        "#sec-binaryor",
        "#eqn-modulo",
        "#eqn-modulo",
        "#assert",
        "#sec-binaryxor",
        "#eqn-modulo",
        "#eqn-modulo",
        "#sec-bigintbitwiseop",
        "#sec-bigintbitwiseop",
        "#sec-bigintbitwiseop",
        "#string-concatenation",
        "#sec-numeric-types-bigint-tostring",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-canonicalnumericindexstring",
        "#integral-number",
        "#\ud835\udd3d",
        "#integer-index",
        "#\ud835\udd3d",
        "#sec-object-internal-methods-and-internal-slots",
        "#table-object-property-attributes",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-object-type",
        "#sec-object-type",
        "#function-object",
        "#table-additional-essential-internal-methods-of-function-objects",
        "#sec-object-type",
        "#function-object",
        "#table-additional-essential-internal-methods-of-function-objects",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-for-in-and-for-of-statements",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-privateelement-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#table-essential-internal-methods",
        "#table-essential-internal-methods",
        "#sec-ordinary-object-internal-methods-and-internal-slots",
        "#sec-ecmascript-function-objects-call-thisargument-argumentslist",
        "#sec-ecmascript-function-objects-construct-argumentslist-newtarget",
        "#ordinary-object",
        "#exotic-object",
        "#exotic-object",
        "#array-exotic-object",
        "#bound-function-exotic-object",
        "#exotic-object",
        "#table-essential-internal-methods",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#table-additional-essential-internal-methods-of-function-objects",
        "#constructor",
        "#function-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#function-object",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#constructor",
        "#constructor",
        "#function-object",
        "#constructor",
        "#constructor",
        "#function-object",
        "#ordinary-object",
        "#exotic-object",
        "#sec-ordinary-and-exotic-objects-behaviours",
        "#exotic-object",
        "#exotic-object",
        "#exotic-object",
        "#sec-samevalue",
        "#sec-samevalue",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-samevalue",
        "#exotic-object",
        "#ordinary-object",
        "#sec-samevalue",
        "#sec-property-descriptor-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-samevalue",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-samevalue",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-object-type",
        "#sec-samevalue",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-samevalue",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#realm",
        "#realm",
        "#realm",
        "#realm",
        "#sec-execution-contexts",
        "#table-well-known-intrinsic-objects",
        "#sec-aggregate-error-constructor",
        "#constructor",
        "#sec-aggregate-error-constructor",
        "#sec-array-constructor",
        "#constructor",
        "#sec-array-constructor",
        "#sec-arraybuffer-constructor",
        "#constructor",
        "#sec-arraybuffer-constructor",
        "#sec-%arrayiteratorprototype%-object",
        "#sec-array-iterator-objects",
        "#sec-%asyncfromsynciteratorprototype%-object",
        "#sec-async-from-sync-iterator-objects",
        "#sec-async-function-constructor",
        "#constructor",
        "#function-object",
        "#sec-async-function-constructor",
        "#sec-asyncgeneratorfunction-constructor",
        "#constructor",
        "#sec-asyncgeneratorfunction-constructor",
        "#sec-asynciteratorprototype",
        "#sec-atomics-object",
        "#sec-atomics-object",
        "#sec-bigint-constructor",
        "#constructor",
        "#sec-bigint-constructor",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-boolean-constructor",
        "#constructor",
        "#sec-boolean-constructor",
        "#sec-dataview-constructor",
        "#constructor",
        "#sec-dataview-constructor",
        "#sec-date-constructor",
        "#constructor",
        "#sec-date-constructor",
        "#sec-decodeuri-encodeduri",
        "#sec-decodeuri-encodeduri",
        "#sec-decodeuricomponent-encodeduricomponent",
        "#sec-decodeuricomponent-encodeduricomponent",
        "#sec-encodeuri-uri",
        "#sec-encodeuri-uri",
        "#sec-encodeuricomponent-uricomponent",
        "#sec-encodeuricomponent-uricomponent",
        "#sec-error-constructor",
        "#constructor",
        "#sec-error-constructor",
        "#sec-eval-x",
        "#sec-eval-x",
        "#sec-native-error-types-used-in-this-standard-evalerror",
        "#constructor",
        "#sec-native-error-types-used-in-this-standard-evalerror",
        "#sec-finalization-registry-constructor",
        "#sec-finalization-registry-constructor",
        "#constructor",
        "#sec-finalization-registry-constructor",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-%foriniteratorprototype%-object",
        "#sec-for-in-iterator-objects",
        "#sec-function-constructor",
        "#constructor",
        "#sec-function-constructor",
        "#sec-generatorfunction-constructor",
        "#constructor",
        "#sec-generatorfunction-constructor",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-isfinite-number",
        "#sec-isfinite-number",
        "#sec-isnan-number",
        "#sec-isnan-number",
        "#sec-%iteratorprototype%-object",
        "#sec-json-object",
        "#sec-json-object",
        "#sec-map-constructor",
        "#constructor",
        "#sec-map-constructor",
        "#sec-%mapiteratorprototype%-object",
        "#sec-map-iterator-objects",
        "#sec-math-object",
        "#sec-math-object",
        "#sec-number-constructor",
        "#constructor",
        "#sec-number-constructor",
        "#sec-object-constructor",
        "#constructor",
        "#sec-object-constructor",
        "#sec-parsefloat-string",
        "#sec-parsefloat-string",
        "#sec-parseint-string-radix",
        "#sec-parseint-string-radix",
        "#sec-promise-constructor",
        "#constructor",
        "#sec-promise-constructor",
        "#sec-proxy-constructor",
        "#constructor",
        "#sec-proxy-constructor",
        "#sec-native-error-types-used-in-this-standard-rangeerror",
        "#constructor",
        "#sec-native-error-types-used-in-this-standard-rangeerror",
        "#sec-native-error-types-used-in-this-standard-referenceerror",
        "#constructor",
        "#sec-native-error-types-used-in-this-standard-referenceerror",
        "#sec-reflect-object",
        "#sec-reflect-object",
        "#sec-regexp-constructor",
        "#constructor",
        "#sec-regexp-constructor",
        "#sec-%regexpstringiteratorprototype%-object",
        "#sec-regexp-string-iterator-objects",
        "#sec-set-constructor",
        "#constructor",
        "#sec-set-constructor",
        "#sec-%setiteratorprototype%-object",
        "#sec-set-iterator-objects",
        "#sec-sharedarraybuffer-constructor",
        "#constructor",
        "#sec-sharedarraybuffer-constructor",
        "#sec-string-constructor",
        "#constructor",
        "#sec-string-constructor",
        "#sec-%stringiteratorprototype%-object",
        "#sec-string-iterator-objects",
        "#sec-symbol-constructor",
        "#constructor",
        "#sec-symbol-constructor",
        "#sec-native-error-types-used-in-this-standard-syntaxerror",
        "#constructor",
        "#sec-native-error-types-used-in-this-standard-syntaxerror",
        "#sec-%throwtypeerror%",
        "#function-object",
        "#sec-native-error-types-used-in-this-standard-typeerror",
        "#sec-%typedarray%-intrinsic-object",
        "#constructor",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-native-error-types-used-in-this-standard-typeerror",
        "#constructor",
        "#sec-native-error-types-used-in-this-standard-typeerror",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-typedarray-objects",
        "#constructor",
        "#sec-typedarray-objects",
        "#sec-native-error-types-used-in-this-standard-urierror",
        "#constructor",
        "#sec-native-error-types-used-in-this-standard-urierror",
        "#sec-weakmap-constructor",
        "#constructor",
        "#sec-weakmap-constructor",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#constructor",
        "#sec-weak-ref-constructor",
        "#sec-weakset-constructor",
        "#constructor",
        "#sec-weakset-constructor",
        "#table-additional-well-known-intrinsic-objects",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-environment-records",
        "#sec-abstract-closure",
        "#sec-data-blocks",
        "#sec-argument-lists",
        "#sec-ecmascript-language-types",
        "#sec-memory-model",
        "#table-completion-record-fields",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#implementation-defined",
        "#await",
        "#running-execution-context",
        "#sec-promise-resolve",
        "#sec-promise-constructor",
        "#sec-abstract-closure",
        "#running-execution-context",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-normalcompletion",
        "#assert",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-createbuiltinfunction",
        "#sec-abstract-closure",
        "#running-execution-context",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-throwcompletion",
        "#assert",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-createbuiltinfunction",
        "#sec-performpromisethen",
        "#execution-context-stack",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#await",
        "#sec-normalcompletion",
        "#await",
        "#await",
        "#sec-returnifabrupt",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-completion-record-specification-type",
        "#sec-keywords-and-reserved-words",
        "#table-reference-record-fields",
        "#sec-reference-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-private-names",
        "#sec-environment-records",
        "#sec-reference-record-specification-type",
        "#sec-strict-mode-code",
        "#sec-ecmascript-language-types",
        "#sec-reference-record-specification-type",
        "#sec-keywords-and-reserved-words",
        "#sec-environment-records",
        "#sec-reference-record-specification-type",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-reference-record-specification-type",
        "#sec-environment-records",
        "#sec-reference-record-specification-type",
        "#sec-reference-record-specification-type",
        "#sec-reference-record-specification-type",
        "#sec-private-names",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-reference-record-specification-type",
        "#sec-isunresolvablereference",
        "#sec-ispropertyreference",
        "#sec-toobject",
        "#sec-isprivatereference",
        "#sec-privateget",
        "#sec-getthisvalue",
        "#assert",
        "#sec-environment-records",
        "#sec-environment-records",
        "#step-getvalue-toobject",
        "#ordinary-object",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-returnifabrupt",
        "#sec-reference-record-specification-type",
        "#sec-isunresolvablereference",
        "#sec-getglobalobject",
        "#sec-set-o-p-v-throw",
        "#sec-ispropertyreference",
        "#sec-toobject",
        "#sec-isprivatereference",
        "#sec-privateset",
        "#sec-getthisvalue",
        "#assert",
        "#sec-environment-records",
        "#sec-environment-records",
        "#step-putvalue-toobject",
        "#ordinary-object",
        "#sec-ecmascript-language-types",
        "#assert",
        "#sec-ispropertyreference",
        "#sec-issuperreference",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-returnifabrupt",
        "#assert",
        "#sec-reference-record-specification-type",
        "#assert",
        "#sec-isunresolvablereference",
        "#assert",
        "#sec-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-reference-record-specification-type",
        "#running-execution-context",
        "#assert",
        "#sec-resolve-private-identifier",
        "#sec-reference-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-property-attributes",
        "#table-object-property-attributes",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-property-descriptor-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-isaccessordescriptor",
        "#sec-isdatadescriptor",
        "#sec-property-descriptor-specification-type",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#assert",
        "#ordinary-object",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-completion-record-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-property-descriptor-specification-type",
        "#sec-hasproperty",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-hasproperty",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-hasproperty",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-iscallable",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-iscallable",
        "#sec-property-descriptor-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-isgenericdescriptor",
        "#sec-isdatadescriptor",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-abstract-closure",
        "#assert",
        "#integer",
        "#integer",
        "#agent",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model",
        "#sec-candidate-executions",
        "#sec-memory-model",
        "#sec-memory-model",
        "#sec-memory-model-fundamentals",
        "#sec-list-and-record-specification-type",
        "#sec-memory-model",
        "#sec-algorithm-conventions-abstract-operations",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-data-blocks",
        "#sec-completion-record-specification-type",
        "#sec-data-blocks",
        "#sec-data-blocks",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-data-blocks",
        "#sec-completion-record-specification-type",
        "#sec-data-blocks",
        "#sec-data-blocks",
        "#surrounding-agent",
        "#agent-record",
        "#sec-agentsignifier",
        "#sec-memory-model-fundamentals",
        "#sec-data-blocks",
        "#sec-data-blocks",
        "#integer",
        "#sec-data-blocks",
        "#sec-data-blocks",
        "#integer",
        "#integer",
        "#assert",
        "#assert",
        "#assert",
        "#sec-data-blocks",
        "#surrounding-agent",
        "#agent-record",
        "#sec-agentsignifier",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-memory-model",
        "#sec-memory-model-fundamentals",
        "#sec-chosen-value-records",
        "#sec-data-blocks",
        "#sec-memory-model-fundamentals",
        "#assert",
        "#sec-data-blocks",
        "#sec-list-and-record-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-list-and-record-specification-type",
        "#table-privateelement-fields",
        "#sec-privateelement-specification-type",
        "#sec-private-names",
        "#sec-ecmascript-language-types",
        "#function-object",
        "#function-object",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#table-classfielddefinition-fields",
        "#sec-classfielddefinition-record-specification-type",
        "#sec-private-names",
        "#function-object",
        "#sec-privatefieldadd",
        "#sec-privatemethodoraccessoradd",
        "#sec-privateget",
        "#sec-privateset",
        "#sec-list-and-record-specification-type",
        "#table-classstaticblockdefinition-record-fields",
        "#sec-classstaticblockdefinition-record-specification-type",
        "#function-object",
        "#function-object",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#assert",
        "#sec-call",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinarytoprimitive",
        "#sec-well-known-symbols",
        "#sec-date.prototype-@@toprimitive",
        "#sec-symbol.prototype-@@toprimitive",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-get-o-p",
        "#sec-iscallable",
        "#sec-call",
        "#sec-ecmascript-data-types-and-values",
        "#table-toboolean-conversions",
        "#sec-toboolean",
        "#sec-IsHTMLDDA-internal-slot-to-boolean",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-toprimitive",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tonumber",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#table-tonumber-conversions",
        "#sec-tonumber",
        "#sec-stringtonumber",
        "#sec-toprimitive",
        "#sec-tonumber",
        "#sec-stringtonumber",
        "#number-value",
        "#prod-StringNumericLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrWhiteSpace",
        "#prod-StrNumericLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrWhiteSpace",
        "#prod-StrWhiteSpaceChar",
        "#prod-StrWhiteSpace",
        "#prod-StrWhiteSpaceChar",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-StrNumericLiteral",
        "#prod-StrDecimalLiteral",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-StrDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#sec-literals-numeric-literals",
        "#prod-StringNumericLiteral",
        "#prod-NumericLiteral",
        "#prod-StringNumericLiteral",
        "#prod-StringNumericLiteral",
        "#prod-StringNumericLiteral",
        "#prod-StringNumericLiteral",
        "#prod-StringNumericLiteral",
        "#prod-NumericLiteral",
        "#prod-StringNumericLiteral",
        "#prod-BigIntLiteralSuffix",
        "#sec-stringtocodepoints",
        "#sec-parsetext",
        "#prod-StringNumericLiteral",
        "#sec-list-and-record-specification-type",
        "#sec-runtime-semantics-stringnumericvalue",
        "#prod-StringNumericLiteral",
        "#number-value",
        "#sec-numericvalue",
        "#prod-NumericLiteral",
        "#sec-literals-numeric-literals",
        "#prod-StringNumericLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StringNumericLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrNumericLiteral",
        "#prod-StrWhiteSpace",
        "#sec-runtime-semantics-stringnumericvalue",
        "#prod-StrNumericLiteral",
        "#prod-StrNumericLiteral",
        "#prod-NonDecimalIntegerLiteral",
        "#\ud835\udd3d",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-StrDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#sec-runtime-semantics-stringnumericvalue",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-ExponentPart",
        "#sec-roundmvresult",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#sec-roundmvresult",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-ExponentPart",
        "#sec-roundmvresult",
        "#mathematical-value",
        "#implementation-defined",
        "#mathematical-value",
        "#mathematical-value",
        "#mathematical-value",
        "#\ud835\udd3d",
        "#mathematical-value",
        "#mathematical-value",
        "#implementation-defined",
        "#\ud835\udd3d",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#integer",
        "#sec-completion-record-specification-type",
        "#integer",
        "#number-value",
        "#number-value",
        "#sec-tonumber",
        "#eqn-floor",
        "#eqn-abs",
        "#\u211d",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-tonumber",
        "#mathematical-value",
        "#eqn-floor",
        "#eqn-abs",
        "#\u211d",
        "#eqn-modulo",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-touint32",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#\ud835\udd3d",
        "#sec-tonumber",
        "#mathematical-value",
        "#eqn-floor",
        "#eqn-abs",
        "#\u211d",
        "#eqn-modulo",
        "#\ud835\udd3d",
        "#step-touint32-return",
        "#sec-toint32",
        "#sec-toint32",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-tonumber",
        "#mathematical-value",
        "#eqn-floor",
        "#eqn-abs",
        "#\u211d",
        "#eqn-modulo",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#\ud835\udd3d",
        "#sec-tonumber",
        "#mathematical-value",
        "#eqn-floor",
        "#eqn-abs",
        "#\u211d",
        "#eqn-modulo",
        "#\ud835\udd3d",
        "#step-touint16-mod",
        "#sec-touint32",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-tonumber",
        "#mathematical-value",
        "#eqn-floor",
        "#eqn-abs",
        "#\u211d",
        "#eqn-modulo",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-tonumber",
        "#mathematical-value",
        "#eqn-floor",
        "#eqn-abs",
        "#\u211d",
        "#eqn-modulo",
        "#\ud835\udd3d",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-tonumber",
        "#\u211d",
        "#\u211d",
        "#eqn-floor",
        "#\u211d",
        "#\u211d",
        "#\ud835\udd3d",
        "#\u211d",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-toprimitive",
        "#table-tobigint",
        "#sec-stringtobigint",
        "#sec-stringtocodepoints",
        "#sec-parsetext",
        "#prod-StringIntegerLiteral",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#integer",
        "#\u2124",
        "#sec-stringtobigint",
        "#prod-StringIntegerLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrWhiteSpace",
        "#prod-StrIntegerLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrIntegerLiteral",
        "#prod-SignedInteger",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-StringIntegerLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StringIntegerLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrIntegerLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrIntegerLiteral",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#\u2124",
        "#\u2124",
        "#sec-tobigint",
        "#\u211d",
        "#eqn-modulo",
        "#\u2124",
        "#\u2124",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#\u2124",
        "#sec-tobigint",
        "#\u211d",
        "#eqn-modulo",
        "#\u2124",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#table-tostring-conversions",
        "#sec-tostring",
        "#sec-numeric-types-number-tostring",
        "#sec-numeric-types-bigint-tostring",
        "#sec-toprimitive",
        "#sec-tostring",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#table-toobject-conversions",
        "#sec-toobject",
        "#sec-boolean-objects",
        "#sec-number-objects",
        "#sec-string-objects",
        "#sec-symbol-objects",
        "#sec-bigint-objects",
        "#sec-completion-record-specification-type",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-object-type",
        "#sec-toprimitive",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-lengthofarraylike",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#eqn-min",
        "#number-value",
        "#sec-tostring",
        "#sec-tonumber",
        "#sec-samevalue",
        "#sec-tostring",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#integer",
        "#sec-completion-record-specification-type",
        "#integer",
        "#integer-index",
        "#sec-tointegerorinfinity",
        "#sec-tolength",
        "#\ud835\udd3d",
        "#sec-samevalue",
        "#\ud835\udd3d",
        "#assert",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-toobject",
        "#table-requireobjectcoercible-results",
        "#sec-requireobjectcoercible",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#array-exotic-object",
        "#proxy-exotic-object",
        "#sec-isarray",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-language-types",
        "#function-object",
        "#sec-ecmascript-data-types-and-values",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#integral-number",
        "#sec-ecmascript-data-types-and-values",
        "#eqn-floor",
        "#eqn-abs",
        "#\u211d",
        "#eqn-abs",
        "#\u211d",
        "#sec-ecmascript-language-types",
        "#sec-object-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-get-o-p",
        "#sec-well-known-symbols",
        "#sec-toboolean",
        "#sec-stringindexof",
        "#sec-ecmascript-language-types-string-type",
        "http://www.unicode.org/glossary/#well_formed_code_unit_sequence",
        "#sec-codepointat",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-sameValue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-sameValue",
        "#sec-samevaluenonnumeric",
        "#sec-isstrictlyequal",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-sameValueZero",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-sameValueZero",
        "#sec-samevaluenonnumeric",
        "#sec-samevalue",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-toprimitive",
        "#sec-toprimitive",
        "#sec-toprimitive",
        "#sec-toprimitive",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isstringprefix",
        "#sec-isstringprefix",
        "#integer",
        "#integer",
        "#integer",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-stringtobigint",
        "#sec-numeric-types-bigint-lessThan",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-stringtobigint",
        "#sec-numeric-types-bigint-lessThan",
        "#sec-tonumeric",
        "#sec-tonumeric",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-lessThan",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-lessThan",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#\u211d",
        "#\u211d",
        "#step-arc-string-check",
        "#step-binary-op-string-check",
        "#sec-applystringornumericbinaryoperator",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isstrictlyequal",
        "#sec-IsHTMLDDA-internal-slot-aec",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-islooselyequal",
        "#sec-tonumber",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-islooselyequal",
        "#sec-tonumber",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-stringtobigint",
        "#sec-islooselyequal",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-islooselyequal",
        "#sec-ecmascript-data-types-and-values",
        "#sec-islooselyequal",
        "#sec-tonumber",
        "#sec-ecmascript-data-types-and-values",
        "#sec-islooselyequal",
        "#sec-tonumber",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-islooselyequal",
        "#sec-toprimitive",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-islooselyequal",
        "#sec-toprimitive",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#\u211d",
        "#\u211d",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-equal",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-equal",
        "#sec-samevaluenonnumeric",
        "#sec-samevalue",
        "#sec-list-and-record-specification-type",
        "#ordinary-object",
        "#exotic-object",
        "#ordinary-object",
        "#sec-ordinary-object-internal-methods-and-internal-slots",
        "#assert",
        "#assert",
        "#exotic-object",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-arraycreate",
        "#sec-boundfunctioncreate",
        "#exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-toobject",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#ordinary-object",
        "#assert",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-createdataproperty",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#ordinary-object",
        "#assert",
        "#sec-definepropertyorthrow",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-getv",
        "#sec-iscallable",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#function-object",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-iscallable",
        "#constructor",
        "#constructor",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-definepropertyorthrow",
        "#assert",
        "#sec-isaccessordescriptor",
        "#sec-definepropertyorthrow",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-isextensible-o",
        "#sec-isdatadescriptor",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-arraycreate",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-completion-record-specification-type",
        "#integer",
        "#sec-completion-record-specification-type",
        "#\u211d",
        "#sec-tolength",
        "#sec-get-o-p",
        "#sec-completion-record-specification-type",
        "#integer-index",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-lengthofarraylike",
        "#sec-list-and-record-specification-type",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-language-types",
        "#sec-object-type",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-getv",
        "#sec-call",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-iscallable",
        "#sec-instanceofoperator",
        "#sec-ecmascript-data-types-and-values",
        "#sec-get-o-p",
        "#sec-ecmascript-data-types-and-values",
        "#sec-samevalue",
        "#constructor",
        "#sec-completion-record-specification-type",
        "#constructor",
        "#sec-completion-record-specification-type",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-well-known-symbols",
        "#sec-get-o-p",
        "#sec-ecmascript-data-types-and-values",
        "#sec-get-o-p",
        "#sec-well-known-symbols",
        "#sec-isconstructor",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-get-o-p",
        "#assert",
        "#sec-createarrayfromlist",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#realm-record",
        "#sec-completion-record-specification-type",
        "#bound-function-exotic-object",
        "#sec-getfunctionrealm",
        "#proxy-exotic-object",
        "#sec-getfunctionrealm",
        "#current-realm",
        "#step-getfunctionrealm-default-return",
        "#exotic-object",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-toobject",
        "#sec-samevalue",
        "#sec-get-o-p",
        "#sec-createdatapropertyorthrow",
        "#sec-private-names",
        "#sec-privateelement-specification-type",
        "#sec-privateelement-specification-type",
        "#sec-privateelement-specification-type",
        "#sec-private-names",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-privateelementfind",
        "#sec-privateelement-specification-type",
        "#sec-privateelement-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-privateelementfind",
        "#sec-private-names",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-privateelementfind",
        "#assert",
        "#sec-call",
        "#sec-private-names",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-privateelementfind",
        "#assert",
        "#sec-call",
        "#sec-classfielddefinition-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-call",
        "#sec-private-names",
        "#sec-privatefieldadd",
        "#assert",
        "#sec-ispropertykey",
        "#sec-createdatapropertyorthrow",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-privateelement-specification-type",
        "#sec-privatemethodoraccessoradd",
        "#sec-definefield",
        "#sec-iteration",
        "#sec-list-and-record-specification-type",
        "#table-iterator-record-fields",
        "#sec-iterator-records",
        "#function-object",
        "#sec-ecmascript-language-types",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-iterator-records",
        "#sec-completion-record-specification-type",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-getiterator",
        "#sec-createasyncfromsynciterator",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-call",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getv",
        "#sec-iterator-records",
        "#sec-iterator-records",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-call",
        "#sec-call",
        "#sec-ecmascript-data-types-and-values",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-get-o-p",
        "#sec-iterator-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-iteratornext",
        "#sec-iteratorcomplete",
        "#sec-iterator-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-completion-ao",
        "#sec-getmethod",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-ecmascript-data-types-and-values",
        "#sec-iterator-records",
        "#sec-ifabruptcloseiterator",
        "#sec-completion-record-specification-type",
        "#sec-iteratorclose",
        "#sec-completion-record-specification-type",
        "#sec-iterator-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-completion-ao",
        "#sec-getmethod",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-completion-ao",
        "#await",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-language-types",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-list-and-record-specification-type",
        "#sec-iterator-records",
        "#sec-iterator-interface",
        "#sec-abstract-closure",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#sec-createiteratorfromclosure",
        "#sec-%iteratorprototype%-object",
        "#sec-iterator-records",
        "#sec-ecmascript-language-types",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-getiterator",
        "#sec-getiterator",
        "#sec-list-and-record-specification-type",
        "#sec-iteratorstep",
        "#sec-iteratorvalue",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#note-star-default-star",
        "#sec-resolveexport",
        "#resolvedbinding-record",
        "#prod-BindingIdentifier",
        "#prod-Identifier",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-stringvalue",
        "#prod-Identifier",
        "#prod-BindingIdentifier",
        "#prod-BindingIdentifier",
        "#prod-LexicalDeclaration",
        "#prod-LetOrConst",
        "#prod-BindingList",
        "#sec-static-semantics-boundnames",
        "#prod-BindingList",
        "#prod-BindingList",
        "#prod-BindingList",
        "#prod-LexicalBinding",
        "#sec-static-semantics-boundnames",
        "#prod-BindingList",
        "#sec-static-semantics-boundnames",
        "#prod-LexicalBinding",
        "#list-concatenation",
        "#prod-LexicalBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#sec-static-semantics-boundnames",
        "#prod-BindingIdentifier",
        "#prod-LexicalBinding",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#sec-static-semantics-boundnames",
        "#prod-BindingPattern",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-VariableDeclarationList",
        "#sec-static-semantics-boundnames",
        "#prod-VariableDeclaration",
        "#list-concatenation",
        "#prod-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#sec-static-semantics-boundnames",
        "#prod-BindingIdentifier",
        "#prod-VariableDeclaration",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#sec-static-semantics-boundnames",
        "#prod-BindingPattern",
        "#prod-ObjectBindingPattern",
        "#sec-list-and-record-specification-type",
        "#prod-ObjectBindingPattern",
        "#prod-BindingPropertyList",
        "#prod-BindingRestProperty",
        "#sec-static-semantics-boundnames",
        "#prod-BindingPropertyList",
        "#sec-static-semantics-boundnames",
        "#prod-BindingRestProperty",
        "#list-concatenation",
        "#prod-ArrayBindingPattern",
        "#prod-Elision",
        "#sec-list-and-record-specification-type",
        "#prod-ArrayBindingPattern",
        "#prod-Elision",
        "#prod-BindingRestElement",
        "#sec-static-semantics-boundnames",
        "#prod-BindingRestElement",
        "#prod-ArrayBindingPattern",
        "#prod-BindingElementList",
        "#prod-Elision",
        "#sec-static-semantics-boundnames",
        "#prod-BindingElementList",
        "#prod-ArrayBindingPattern",
        "#prod-BindingElementList",
        "#prod-Elision",
        "#prod-BindingRestElement",
        "#sec-static-semantics-boundnames",
        "#prod-BindingElementList",
        "#sec-static-semantics-boundnames",
        "#prod-BindingRestElement",
        "#list-concatenation",
        "#prod-BindingPropertyList",
        "#prod-BindingPropertyList",
        "#prod-BindingProperty",
        "#sec-static-semantics-boundnames",
        "#prod-BindingPropertyList",
        "#sec-static-semantics-boundnames",
        "#prod-BindingProperty",
        "#list-concatenation",
        "#prod-BindingElementList",
        "#prod-BindingElementList",
        "#prod-BindingElisionElement",
        "#sec-static-semantics-boundnames",
        "#prod-BindingElementList",
        "#sec-static-semantics-boundnames",
        "#prod-BindingElisionElement",
        "#list-concatenation",
        "#prod-BindingElisionElement",
        "#prod-Elision",
        "#prod-BindingElement",
        "#sec-static-semantics-boundnames",
        "#prod-BindingElement",
        "#prod-BindingProperty",
        "#prod-PropertyName",
        "#prod-BindingElement",
        "#sec-static-semantics-boundnames",
        "#prod-BindingElement",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#sec-static-semantics-boundnames",
        "#prod-BindingIdentifier",
        "#prod-BindingElement",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#sec-static-semantics-boundnames",
        "#prod-BindingPattern",
        "#prod-ForDeclaration",
        "#prod-LetOrConst",
        "#prod-ForBinding",
        "#sec-static-semantics-boundnames",
        "#prod-ForBinding",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#sec-static-semantics-boundnames",
        "#prod-BindingIdentifier",
        "#prod-FunctionDeclaration",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#sec-list-and-record-specification-type",
        "#prod-FormalParameters",
        "#prod-FormalParameterList",
        "#prod-FunctionRestParameter",
        "#sec-static-semantics-boundnames",
        "#prod-FormalParameterList",
        "#sec-static-semantics-boundnames",
        "#prod-FunctionRestParameter",
        "#list-concatenation",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#sec-static-semantics-boundnames",
        "#prod-FormalParameterList",
        "#sec-static-semantics-boundnames",
        "#prod-FormalParameter",
        "#list-concatenation",
        "#prod-ArrowParameters",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ArrowFormalParameters",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-static-semantics-boundnames",
        "#prod-GeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#sec-static-semantics-boundnames",
        "#prod-BindingIdentifier",
        "#prod-GeneratorDeclaration",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-boundnames",
        "#prod-BindingIdentifier",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-ClassDeclaration",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#sec-static-semantics-boundnames",
        "#prod-BindingIdentifier",
        "#prod-ClassDeclaration",
        "#prod-ClassTail",
        "#prod-AsyncFunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-boundnames",
        "#prod-BindingIdentifier",
        "#prod-AsyncFunctionDeclaration",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-AsyncArrowHead",
        "#sec-syntactic-grammar",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#sec-static-semantics-boundnames",
        "#prod-ImportDeclaration",
        "#prod-ImportClause",
        "#prod-FromClause",
        "#sec-static-semantics-boundnames",
        "#prod-ImportClause",
        "#prod-ImportDeclaration",
        "#prod-ModuleSpecifier",
        "#sec-list-and-record-specification-type",
        "#prod-ImportClause",
        "#prod-ImportedDefaultBinding",
        "#prod-NameSpaceImport",
        "#sec-static-semantics-boundnames",
        "#prod-ImportedDefaultBinding",
        "#sec-static-semantics-boundnames",
        "#prod-NameSpaceImport",
        "#list-concatenation",
        "#prod-ImportClause",
        "#prod-ImportedDefaultBinding",
        "#prod-NamedImports",
        "#sec-static-semantics-boundnames",
        "#prod-ImportedDefaultBinding",
        "#sec-static-semantics-boundnames",
        "#prod-NamedImports",
        "#list-concatenation",
        "#prod-NamedImports",
        "#sec-list-and-record-specification-type",
        "#prod-ImportsList",
        "#prod-ImportsList",
        "#prod-ImportSpecifier",
        "#sec-static-semantics-boundnames",
        "#prod-ImportsList",
        "#sec-static-semantics-boundnames",
        "#prod-ImportSpecifier",
        "#list-concatenation",
        "#prod-ImportSpecifier",
        "#prod-ModuleExportName",
        "#prod-ImportedBinding",
        "#sec-static-semantics-boundnames",
        "#prod-ImportedBinding",
        "#prod-ExportDeclaration",
        "#prod-ExportFromClause",
        "#prod-FromClause",
        "#prod-NamedExports",
        "#sec-list-and-record-specification-type",
        "#prod-ExportDeclaration",
        "#prod-VariableStatement",
        "#sec-static-semantics-boundnames",
        "#prod-VariableStatement",
        "#prod-ExportDeclaration",
        "#prod-Declaration",
        "#sec-static-semantics-boundnames",
        "#prod-Declaration",
        "#prod-ExportDeclaration",
        "#prod-HoistableDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-HoistableDeclaration",
        "#prod-ExportDeclaration",
        "#prod-ClassDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-ClassDeclaration",
        "#prod-ExportDeclaration",
        "#prod-AssignmentExpression",
        "#sec-syntactic-grammar",
        "#prod-HoistableDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-HoistableDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-HoistableDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-HoistableDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-Declaration",
        "#prod-ClassDeclaration",
        "#prod-ClassDeclaration",
        "#prod-Declaration",
        "#prod-LexicalDeclaration",
        "#prod-LexicalDeclaration",
        "#prod-LexicalDeclaration",
        "#prod-LetOrConst",
        "#prod-BindingList",
        "#sec-static-semantics-isconstantdeclaration",
        "#prod-LetOrConst",
        "#prod-LetOrConst",
        "#prod-LetOrConst",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-GeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncFunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-ClassDeclaration",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#prod-ClassTail",
        "#prod-ExportDeclaration",
        "#prod-ExportFromClause",
        "#prod-FromClause",
        "#prod-NamedExports",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-list-and-record-specification-type",
        "#prod-Block",
        "#sec-list-and-record-specification-type",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-StatementList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-StatementListItem",
        "#list-concatenation",
        "#prod-StatementListItem",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-LabelledStatement",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-LabelledStatement",
        "#sec-list-and-record-specification-type",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#sec-static-semantics-boundnames",
        "#prod-Declaration",
        "#prod-CaseBlock",
        "#sec-list-and-record-specification-type",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#list-concatenation",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-CaseClauses",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-CaseClause",
        "#list-concatenation",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-StatementList",
        "#sec-list-and-record-specification-type",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-StatementList",
        "#sec-list-and-record-specification-type",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-Statement",
        "#sec-list-and-record-specification-type",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-FunctionDeclaration",
        "#prod-FunctionStatementList",
        "#sec-list-and-record-specification-type",
        "#prod-FunctionStatementList",
        "#prod-StatementList",
        "#sec-static-semantics-toplevellexicallydeclarednames",
        "#prod-StatementList",
        "#prod-ClassStaticBlockStatementList",
        "#sec-list-and-record-specification-type",
        "#prod-ClassStaticBlockStatementList",
        "#prod-StatementList",
        "#sec-static-semantics-toplevellexicallydeclarednames",
        "#prod-StatementList",
        "#prod-ConciseBody",
        "#prod-ExpressionBody",
        "#sec-list-and-record-specification-type",
        "#prod-AsyncConciseBody",
        "#prod-ExpressionBody",
        "#sec-list-and-record-specification-type",
        "#prod-Script",
        "#sec-list-and-record-specification-type",
        "#prod-ScriptBody",
        "#prod-StatementList",
        "#sec-static-semantics-toplevellexicallydeclarednames",
        "#prod-StatementList",
        "#prod-Script",
        "#prod-Module",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-ModuleItemList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-ModuleItem",
        "#list-concatenation",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-ImportDeclaration",
        "#prod-ModuleItem",
        "#prod-ExportDeclaration",
        "#prod-ExportDeclaration",
        "#prod-VariableStatement",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-boundnames",
        "#prod-ExportDeclaration",
        "#prod-ModuleItem",
        "#prod-StatementListItem",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-StatementListItem",
        "#prod-Module",
        "#sec-list-and-record-specification-type",
        "#sec-syntactic-grammar",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-StatementList",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-StatementListItem",
        "#list-concatenation",
        "#prod-StatementListItem",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-LabelledStatement",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-LabelledStatement",
        "#sec-list-and-record-specification-type",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-declarationpart",
        "#prod-Declaration",
        "#prod-CaseBlock",
        "#sec-list-and-record-specification-type",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#list-concatenation",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-CaseClauses",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-CaseClause",
        "#list-concatenation",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-StatementList",
        "#sec-list-and-record-specification-type",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-StatementList",
        "#sec-list-and-record-specification-type",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-Statement",
        "#sec-list-and-record-specification-type",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-FunctionStatementList",
        "#sec-list-and-record-specification-type",
        "#prod-FunctionStatementList",
        "#prod-StatementList",
        "#sec-static-semantics-toplevellexicallyscopeddeclarations",
        "#prod-StatementList",
        "#prod-ClassStaticBlockStatementList",
        "#sec-list-and-record-specification-type",
        "#prod-ClassStaticBlockStatementList",
        "#prod-StatementList",
        "#sec-static-semantics-toplevellexicallyscopeddeclarations",
        "#prod-StatementList",
        "#prod-ConciseBody",
        "#prod-ExpressionBody",
        "#sec-list-and-record-specification-type",
        "#prod-AsyncConciseBody",
        "#prod-ExpressionBody",
        "#sec-list-and-record-specification-type",
        "#prod-Script",
        "#sec-list-and-record-specification-type",
        "#prod-ScriptBody",
        "#prod-StatementList",
        "#sec-static-semantics-toplevellexicallyscopeddeclarations",
        "#prod-StatementList",
        "#prod-Module",
        "#sec-list-and-record-specification-type",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-ModuleItemList",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#prod-ModuleItem",
        "#list-concatenation",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-ExportDeclaration",
        "#prod-ExportFromClause",
        "#prod-FromClause",
        "#prod-NamedExports",
        "#prod-VariableStatement",
        "#sec-list-and-record-specification-type",
        "#prod-ExportDeclaration",
        "#prod-Declaration",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-declarationpart",
        "#prod-Declaration",
        "#prod-ExportDeclaration",
        "#prod-HoistableDeclaration",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-declarationpart",
        "#prod-HoistableDeclaration",
        "#prod-ExportDeclaration",
        "#prod-ClassDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-ClassDeclaration",
        "#prod-ExportDeclaration",
        "#prod-AssignmentExpression",
        "#sec-list-and-record-specification-type",
        "#prod-ExportDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-Statement",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-ContinueStatement",
        "#prod-BreakStatement",
        "#prod-ReturnStatement",
        "#prod-ThrowStatement",
        "#prod-DebuggerStatement",
        "#sec-list-and-record-specification-type",
        "#prod-Block",
        "#sec-list-and-record-specification-type",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-vardeclarednames",
        "#prod-StatementList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-StatementListItem",
        "#list-concatenation",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#sec-list-and-record-specification-type",
        "#prod-VariableStatement",
        "#prod-VariableDeclarationList",
        "#sec-static-semantics-boundnames",
        "#prod-VariableDeclarationList",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Statement",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#list-concatenation",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#prod-DoWhileStatement",
        "#prod-Statement",
        "#prod-Expression",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#prod-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-VariableDeclarationList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-boundnames",
        "#prod-VariableDeclarationList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#list-concatenation",
        "#prod-ForStatement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-ForBinding",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-static-semantics-boundnames",
        "#prod-ForBinding",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#list-concatenation",
        "#sec-initializers-in-forin-statement-heads",
        "#prod-WithStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#sec-static-semantics-vardeclarednames",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#sec-list-and-record-specification-type",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#sec-static-semantics-vardeclarednames",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-vardeclarednames",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#sec-static-semantics-vardeclarednames",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#list-concatenation",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#sec-static-semantics-vardeclarednames",
        "#prod-CaseClauses",
        "#sec-static-semantics-vardeclarednames",
        "#prod-CaseClause",
        "#list-concatenation",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-StatementList",
        "#sec-list-and-record-specification-type",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-StatementList",
        "#sec-list-and-record-specification-type",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-vardeclarednames",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Block",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Catch",
        "#list-concatenation",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Finally",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Block",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Finally",
        "#list-concatenation",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Finally",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Block",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Catch",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Finally",
        "#list-concatenation",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Block",
        "#prod-FunctionStatementList",
        "#sec-list-and-record-specification-type",
        "#prod-FunctionStatementList",
        "#prod-StatementList",
        "#sec-static-semantics-toplevelvardeclarednames",
        "#prod-StatementList",
        "#prod-ClassStaticBlockStatementList",
        "#sec-list-and-record-specification-type",
        "#prod-ClassStaticBlockStatementList",
        "#prod-StatementList",
        "#sec-static-semantics-toplevelvardeclarednames",
        "#prod-StatementList",
        "#prod-ConciseBody",
        "#prod-ExpressionBody",
        "#sec-list-and-record-specification-type",
        "#prod-AsyncConciseBody",
        "#prod-ExpressionBody",
        "#sec-list-and-record-specification-type",
        "#prod-Script",
        "#sec-list-and-record-specification-type",
        "#prod-ScriptBody",
        "#prod-StatementList",
        "#sec-static-semantics-toplevelvardeclarednames",
        "#prod-StatementList",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-vardeclarednames",
        "#prod-ModuleItemList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-ModuleItem",
        "#list-concatenation",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-ModuleItem",
        "#prod-ExportDeclaration",
        "#prod-ExportDeclaration",
        "#prod-VariableStatement",
        "#sec-static-semantics-boundnames",
        "#prod-ExportDeclaration",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-syntactic-grammar",
        "#prod-Statement",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-ContinueStatement",
        "#prod-BreakStatement",
        "#prod-ReturnStatement",
        "#prod-ThrowStatement",
        "#prod-DebuggerStatement",
        "#sec-list-and-record-specification-type",
        "#prod-Block",
        "#sec-list-and-record-specification-type",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-StatementList",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-StatementListItem",
        "#list-concatenation",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#sec-list-and-record-specification-type",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclaration",
        "#prod-VariableDeclaration",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclaration",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-VariableDeclarationList",
        "#list-concatenation",
        "#prod-VariableDeclaration",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#list-concatenation",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#prod-DoWhileStatement",
        "#prod-Statement",
        "#prod-Expression",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#prod-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-VariableDeclarationList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-VariableDeclarationList",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#list-concatenation",
        "#prod-ForStatement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-ForBinding",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#list-concatenation",
        "#sec-initializers-in-forin-statement-heads",
        "#prod-WithStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#sec-list-and-record-specification-type",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#list-concatenation",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-CaseClauses",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-CaseClause",
        "#list-concatenation",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-StatementList",
        "#sec-list-and-record-specification-type",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-StatementList",
        "#sec-list-and-record-specification-type",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Block",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Catch",
        "#list-concatenation",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Finally",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Block",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Finally",
        "#list-concatenation",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Finally",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Block",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Catch",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Finally",
        "#list-concatenation",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Block",
        "#prod-FunctionStatementList",
        "#sec-list-and-record-specification-type",
        "#prod-FunctionStatementList",
        "#prod-StatementList",
        "#sec-static-semantics-toplevelvarscopeddeclarations",
        "#prod-StatementList",
        "#prod-ClassStaticBlockStatementList",
        "#sec-list-and-record-specification-type",
        "#prod-ClassStaticBlockStatementList",
        "#prod-StatementList",
        "#sec-static-semantics-toplevelvarscopeddeclarations",
        "#prod-StatementList",
        "#prod-ConciseBody",
        "#prod-ExpressionBody",
        "#sec-list-and-record-specification-type",
        "#prod-AsyncConciseBody",
        "#prod-ExpressionBody",
        "#sec-list-and-record-specification-type",
        "#prod-Script",
        "#sec-list-and-record-specification-type",
        "#prod-ScriptBody",
        "#prod-StatementList",
        "#sec-static-semantics-toplevelvarscopeddeclarations",
        "#prod-StatementList",
        "#prod-Module",
        "#sec-list-and-record-specification-type",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-ModuleItemList",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-ModuleItem",
        "#list-concatenation",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-ModuleItem",
        "#prod-ExportDeclaration",
        "#prod-ExportDeclaration",
        "#prod-VariableStatement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-VariableStatement",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-toplevellexicallydeclarednames",
        "#prod-StatementList",
        "#sec-static-semantics-toplevellexicallydeclarednames",
        "#prod-StatementListItem",
        "#list-concatenation",
        "#prod-StatementListItem",
        "#prod-Statement",
        "#sec-list-and-record-specification-type",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#prod-Declaration",
        "#prod-Declaration",
        "#prod-HoistableDeclaration",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-boundnames",
        "#prod-Declaration",
        "#sec-list-and-record-specification-type",
        "#sec-syntactic-grammar",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-toplevellexicallyscopeddeclarations",
        "#prod-StatementList",
        "#sec-static-semantics-toplevellexicallyscopeddeclarations",
        "#prod-StatementListItem",
        "#list-concatenation",
        "#prod-StatementListItem",
        "#prod-Statement",
        "#sec-list-and-record-specification-type",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#prod-Declaration",
        "#prod-Declaration",
        "#prod-HoistableDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-Declaration",
        "#sec-list-and-record-specification-type",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-toplevelvardeclarednames",
        "#prod-StatementList",
        "#sec-static-semantics-toplevelvardeclarednames",
        "#prod-StatementListItem",
        "#list-concatenation",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#prod-Declaration",
        "#prod-Declaration",
        "#prod-HoistableDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-HoistableDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-StatementListItem",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-LabelledStatement",
        "#sec-static-semantics-toplevelvardeclarednames",
        "#prod-Statement",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-toplevelvardeclarednames",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-LabelledStatement",
        "#sec-static-semantics-toplevelvardeclarednames",
        "#prod-Statement",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-FunctionDeclaration",
        "#sec-list-and-record-specification-type",
        "#sec-syntactic-grammar",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-toplevelvarscopeddeclarations",
        "#prod-StatementList",
        "#sec-static-semantics-toplevelvarscopeddeclarations",
        "#prod-StatementListItem",
        "#list-concatenation",
        "#prod-StatementListItem",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-LabelledStatement",
        "#sec-static-semantics-toplevelvarscopeddeclarations",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#prod-Declaration",
        "#prod-Declaration",
        "#prod-HoistableDeclaration",
        "#sec-static-semantics-declarationpart",
        "#prod-HoistableDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-toplevelvarscopeddeclarations",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-LabelledStatement",
        "#sec-static-semantics-toplevelvarscopeddeclarations",
        "#prod-Statement",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-Statement",
        "#prod-VariableStatement",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-ContinueStatement",
        "#prod-BreakStatement",
        "#prod-ReturnStatement",
        "#prod-ThrowStatement",
        "#prod-DebuggerStatement",
        "#prod-Block",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-StatementList",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-StatementListItem",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Statement",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Statement",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Statement",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Statement",
        "#prod-DoWhileStatement",
        "#prod-Statement",
        "#prod-Expression",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Statement",
        "#prod-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-VariableDeclarationList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Statement",
        "#sec-initializers-in-forin-statement-heads",
        "#prod-WithStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Statement",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-CaseClause",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-StatementList",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-StatementList",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-stringvalue",
        "#prod-LabelIdentifier",
        "#list-concatenation",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Block",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Catch",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Finally",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Block",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Finally",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Finally",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Block",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Catch",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Finally",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Block",
        "#prod-FunctionStatementList",
        "#prod-ClassStaticBlockStatementList",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-ModuleItemList",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-ModuleItem",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#prod-ExportDeclaration",
        "#prod-Statement",
        "#prod-VariableStatement",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-ContinueStatement",
        "#prod-ReturnStatement",
        "#prod-ThrowStatement",
        "#prod-DebuggerStatement",
        "#prod-Block",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-StatementList",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-StatementListItem",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Statement",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Statement",
        "#prod-DoWhileStatement",
        "#prod-Statement",
        "#prod-Expression",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Statement",
        "#prod-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-VariableDeclarationList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Statement",
        "#sec-initializers-in-forin-statement-heads",
        "#prod-BreakStatement",
        "#prod-BreakStatement",
        "#prod-LabelIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-LabelIdentifier",
        "#prod-WithStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Statement",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-CaseClause",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-StatementList",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-StatementList",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-stringvalue",
        "#prod-LabelIdentifier",
        "#list-concatenation",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Block",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Catch",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Finally",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Block",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Finally",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Finally",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Block",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Catch",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Finally",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Block",
        "#prod-FunctionStatementList",
        "#prod-ClassStaticBlockStatementList",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-ModuleItemList",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-ModuleItem",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#prod-ExportDeclaration",
        "#prod-Statement",
        "#prod-VariableStatement",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-BreakStatement",
        "#prod-ReturnStatement",
        "#prod-ThrowStatement",
        "#prod-DebuggerStatement",
        "#prod-Block",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#prod-Statement",
        "#prod-BlockStatement",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-BlockStatement",
        "#prod-BreakableStatement",
        "#prod-IterationStatement",
        "#list-concatenation",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-IterationStatement",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-StatementList",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-StatementListItem",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Statement",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Statement",
        "#prod-DoWhileStatement",
        "#prod-Statement",
        "#prod-Expression",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Statement",
        "#prod-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-VariableDeclarationList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Statement",
        "#sec-initializers-in-forin-statement-heads",
        "#prod-ContinueStatement",
        "#prod-ContinueStatement",
        "#prod-LabelIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-LabelIdentifier",
        "#prod-WithStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Statement",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-CaseClauses",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-CaseClause",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-StatementList",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-StatementList",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-stringvalue",
        "#prod-LabelIdentifier",
        "#list-concatenation",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Block",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Catch",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Finally",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Block",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Finally",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Finally",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Block",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Catch",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Finally",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Block",
        "#prod-FunctionStatementList",
        "#prod-ClassStaticBlockStatementList",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-ModuleItemList",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-ModuleItem",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#prod-ExportDeclaration",
        "#prod-PrimaryExpression",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ParenthesizedExpression",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-static-semantics-isfunctiondefinition",
        "#sec-static-semantics-hasname",
        "#prod-FunctionExpression",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-GeneratorExpression",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-AsyncGeneratorExpression",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncFunctionExpression",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-ArrowFunction",
        "#prod-ArrowParameters",
        "#prod-ConciseBody",
        "#prod-AsyncArrowFunction",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-AsyncConciseBody",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-AsyncConciseBody",
        "#prod-ClassExpression",
        "#prod-ClassTail",
        "#prod-FunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-GeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-AsyncGeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncFunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-ClassExpression",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#prod-PrimaryExpression",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ParenthesizedExpression",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-static-semantics-isfunctiondefinition",
        "#prod-PrimaryExpression",
        "#prod-IdentifierReference",
        "#prod-Literal",
        "#prod-ArrayLiteral",
        "#prod-ObjectLiteral",
        "#prod-RegularExpressionLiteral",
        "#prod-TemplateLiteral",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#prod-TemplateLiteral",
        "#prod-SuperProperty",
        "#prod-MetaProperty",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-MemberExpression",
        "#prod-PrivateIdentifier",
        "#prod-NewExpression",
        "#prod-NewExpression",
        "#prod-LeftHandSideExpression",
        "#prod-CallExpression",
        "#prod-OptionalExpression",
        "#prod-UpdateExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LeftHandSideExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-AwaitExpression",
        "#prod-ExponentiationExpression",
        "#prod-UpdateExpression",
        "#prod-ExponentiationExpression",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeOperator",
        "#prod-ExponentiationExpression",
        "#prod-AdditiveExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-ShiftExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-RelationalExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-PrivateIdentifier",
        "#prod-ShiftExpression",
        "#prod-EqualityExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseANDExpression",
        "#prod-EqualityExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-LogicalANDExpression",
        "#prod-LogicalANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalANDExpression",
        "#prod-CoalesceExpression",
        "#prod-CoalesceExpressionHead",
        "#prod-BitwiseORExpression",
        "#prod-ConditionalExpression",
        "#prod-ShortCircuitExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-YieldExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentOperator",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#prod-FunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-GeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-AsyncGeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncFunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-ClassExpression",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#prod-AssignmentExpression",
        "#sec-syntactic-grammar",
        "#prod-Initializer",
        "#sec-syntactic-grammar",
        "#sec-static-semantics-isfunctiondefinition",
        "#sec-static-semantics-hasname",
        "#prod-PrimaryExpression",
        "#prod-IdentifierReference",
        "#prod-PrimaryExpression",
        "#prod-Literal",
        "#prod-ArrayLiteral",
        "#prod-ObjectLiteral",
        "#prod-FunctionExpression",
        "#prod-ClassExpression",
        "#prod-GeneratorExpression",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-RegularExpressionLiteral",
        "#prod-TemplateLiteral",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#prod-TemplateLiteral",
        "#prod-SuperProperty",
        "#prod-MetaProperty",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-MemberExpression",
        "#prod-PrivateIdentifier",
        "#prod-NewExpression",
        "#prod-NewExpression",
        "#prod-LeftHandSideExpression",
        "#prod-CallExpression",
        "#prod-OptionalExpression",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#prod-PrimaryExpression",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ParenthesizedExpression",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-ParenthesizedExpression",
        "#prod-Expression",
        "#assert",
        "#sec-isanonymousfunctiondefinition",
        "#prod-Expression",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-Expression",
        "#prod-FunctionExpression",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#sec-runtime-semantics-instantiateordinaryfunctionexpression",
        "#prod-FunctionExpression",
        "#prod-GeneratorExpression",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#sec-runtime-semantics-instantiategeneratorfunctionexpression",
        "#prod-GeneratorExpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-AsyncFunctionExpression",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-runtime-semantics-instantiateasyncfunctionexpression",
        "#prod-AsyncFunctionExpression",
        "#prod-ArrowFunction",
        "#prod-ArrowParameters",
        "#prod-ConciseBody",
        "#sec-runtime-semantics-instantiatearrowfunctionexpression",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-AsyncConciseBody",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-AsyncConciseBody",
        "#sec-runtime-semantics-instantiateasyncarrowfunctionexpression",
        "#prod-AsyncArrowFunction",
        "#prod-ClassExpression",
        "#prod-ClassTail",
        "#sec-runtime-semantics-classdefinitionevaluation",
        "#prod-ClassTail",
        "#prod-ClassExpression",
        "#sec-syntactic-grammar",
        "#sec-static-semantics-contains",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-GeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncFunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-ClassTail",
        "#prod-ClassHeritage",
        "#prod-ClassBody",
        "#prod-ClassBody",
        "#prod-ClassHeritage",
        "#prod-ClassHeritage",
        "#prod-ClassHeritage",
        "#prod-ClassHeritage",
        "#sec-static-semantics-contains",
        "#sec-static-semantics-computedpropertycontains",
        "#prod-ClassBody",
        "#prod-PropertyName",
        "#prod-ClassStaticBlock",
        "#prod-ClassStaticBlockBody",
        "#prod-ArrowFunction",
        "#prod-ArrowParameters",
        "#prod-ConciseBody",
        "#prod-NewTarget",
        "#prod-SuperProperty",
        "#prod-SuperCall",
        "#prod-ArrowParameters",
        "#sec-static-semantics-contains",
        "#prod-ConciseBody",
        "#sec-static-semantics-contains",
        "#prod-ArrowParameters",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ArrowFormalParameters",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-static-semantics-contains",
        "#prod-AsyncArrowFunction",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-AsyncConciseBody",
        "#prod-NewTarget",
        "#prod-SuperProperty",
        "#prod-SuperCall",
        "#prod-AsyncConciseBody",
        "#sec-static-semantics-contains",
        "#prod-AsyncArrowFunction",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-AsyncConciseBody",
        "#prod-NewTarget",
        "#prod-SuperProperty",
        "#prod-SuperCall",
        "#prod-AsyncArrowHead",
        "#sec-syntactic-grammar",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#sec-static-semantics-contains",
        "#prod-AsyncConciseBody",
        "#sec-static-semantics-contains",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#prod-PropertyDefinition",
        "#prod-MethodDefinition",
        "#prod-MethodDefinition",
        "#sec-static-semantics-computedpropertycontains",
        "#prod-MethodDefinition",
        "#prod-LiteralPropertyName",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#sec-static-semantics-contains",
        "#prod-SuperProperty",
        "#prod-IdentifierName",
        "#prod-ReservedWord",
        "#prod-CallExpression",
        "#prod-CallExpression",
        "#prod-IdentifierName",
        "#prod-CallExpression",
        "#sec-static-semantics-contains",
        "#prod-OptionalChain",
        "#prod-IdentifierName",
        "#prod-OptionalChain",
        "#prod-OptionalChain",
        "#prod-IdentifierName",
        "#prod-OptionalChain",
        "#sec-static-semantics-contains",
        "#prod-ClassElementName",
        "#prod-PrivateIdentifier",
        "#prod-PropertyName",
        "#prod-LiteralPropertyName",
        "#prod-PropertyName",
        "#prod-ComputedPropertyName",
        "#prod-ComputedPropertyName",
        "#sec-static-semantics-contains",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#sec-static-semantics-computedpropertycontains",
        "#prod-ClassElementName",
        "#prod-GeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-GeneratorBody",
        "#sec-static-semantics-computedpropertycontains",
        "#prod-ClassElementName",
        "#prod-AsyncGeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-computedpropertycontains",
        "#prod-ClassElementName",
        "#prod-ClassElementList",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#sec-static-semantics-computedpropertycontains",
        "#prod-ClassElementList",
        "#sec-static-semantics-computedpropertycontains",
        "#prod-ClassElement",
        "#prod-ClassElement",
        "#prod-ClassStaticBlock",
        "#prod-ClassElement",
        "#prod-AsyncMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-computedpropertycontains",
        "#prod-ClassElementName",
        "#prod-FieldDefinition",
        "#prod-ClassElementName",
        "#prod-Initializer",
        "#sec-static-semantics-computedpropertycontains",
        "#prod-ClassElementName",
        "#function-object",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#sec-runtime-semantics-instantiateordinaryfunctionobject",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#sec-runtime-semantics-instantiategeneratorfunctionobject",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-runtime-semantics-instantiateasyncgeneratorfunctionobject",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-runtime-semantics-instantiateasyncfunctionobject",
        "#prod-AsyncFunctionDeclaration",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-putvalue",
        "#non-strict-function",
        "#sec-functiondeclarationinstantiation",
        "#prod-BindingIdentifier",
        "#prod-Identifier",
        "#sec-static-semantics-stringvalue",
        "#prod-Identifier",
        "#sec-initializeboundname",
        "#prod-BindingIdentifier",
        "#sec-initializeboundname",
        "#prod-BindingIdentifier",
        "#sec-initializeboundname",
        "#prod-BindingPattern",
        "#prod-ObjectBindingPattern",
        "#sec-requireobjectcoercible",
        "#sec-runtime-semantics-bindinginitialization",
        "#prod-ObjectBindingPattern",
        "#prod-BindingPattern",
        "#prod-ArrayBindingPattern",
        "#sec-getiterator",
        "#sec-completion-ao",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-ArrayBindingPattern",
        "#sec-iteratorclose",
        "#prod-ObjectBindingPattern",
        "#prod-ObjectBindingPattern",
        "#prod-BindingPropertyList",
        "#prod-BindingPropertyList",
        "#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization",
        "#prod-BindingPropertyList",
        "#prod-ObjectBindingPattern",
        "#prod-BindingRestProperty",
        "#sec-list-and-record-specification-type",
        "#sec-destructuring-binding-patterns-runtime-semantics-restbindinginitialization",
        "#prod-BindingRestProperty",
        "#prod-ObjectBindingPattern",
        "#prod-BindingPropertyList",
        "#prod-BindingRestProperty",
        "#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization",
        "#prod-BindingPropertyList",
        "#sec-destructuring-binding-patterns-runtime-semantics-restbindinginitialization",
        "#prod-BindingRestProperty",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-resolvebinding",
        "#sec-putvalue",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-putvalue",
        "#non-strict-function",
        "#prod-ArrayBindingPattern",
        "#prod-ArrayBindingPattern",
        "#prod-Elision",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-Elision",
        "#prod-ArrayBindingPattern",
        "#prod-Elision",
        "#prod-BindingRestElement",
        "#prod-Elision",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-Elision",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-BindingRestElement",
        "#prod-ArrayBindingPattern",
        "#prod-BindingElementList",
        "#prod-Elision",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-BindingElementList",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-Elision",
        "#prod-ArrayBindingPattern",
        "#prod-BindingElementList",
        "#prod-Elision",
        "#prod-BindingRestElement",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-BindingElementList",
        "#prod-Elision",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-Elision",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-BindingRestElement",
        "#prod-BindingElementList",
        "#prod-BindingElementList",
        "#prod-BindingElisionElement",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-BindingElementList",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-BindingElisionElement",
        "#prod-BindingElisionElement",
        "#prod-Elision",
        "#prod-BindingElement",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-Elision",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-BindingElement",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-resolvebinding",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#prod-Initializer",
        "#sec-isanonymousfunctiondefinition",
        "#prod-Initializer",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#sec-putvalue",
        "#sec-initializereferencedbinding",
        "#prod-BindingElement",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#sec-runtime-semantics-bindinginitialization",
        "#prod-BindingPattern",
        "#prod-BindingRestElement",
        "#prod-BindingIdentifier",
        "#sec-resolvebinding",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-arraycreate",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-putvalue",
        "#sec-initializereferencedbinding",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#prod-BindingRestElement",
        "#prod-BindingPattern",
        "#sec-arraycreate",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-runtime-semantics-bindinginitialization",
        "#prod-BindingPattern",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#prod-FormalParameters",
        "#prod-FormalParameters",
        "#prod-FormalParameterList",
        "#prod-FunctionRestParameter",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-FormalParameterList",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-FunctionRestParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-FormalParameterList",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-FormalParameter",
        "#prod-ArrowParameters",
        "#prod-BindingIdentifier",
        "#assert",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-runtime-semantics-bindinginitialization",
        "#prod-BindingIdentifier",
        "#prod-ArrowParameters",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ArrowFormalParameters",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-BindingIdentifier",
        "#assert",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-runtime-semantics-bindinginitialization",
        "#prod-BindingIdentifier",
        "#prod-IdentifierReference",
        "#prod-Identifier",
        "#prod-IdentifierReference",
        "#sec-strict-mode-code",
        "#sec-static-semantics-stringvalue",
        "#prod-Identifier",
        "#prod-IdentifierReference",
        "#prod-CallExpression",
        "#prod-CallExpression",
        "#prod-Expression",
        "#prod-CallExpression",
        "#prod-IdentifierName",
        "#prod-CallExpression",
        "#prod-PrivateIdentifier",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-SuperProperty",
        "#prod-MemberExpression",
        "#prod-PrivateIdentifier",
        "#prod-PrimaryExpression",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ParenthesizedExpression",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-static-semantics-assignmenttargettype",
        "#prod-PrimaryExpression",
        "#prod-Literal",
        "#prod-ArrayLiteral",
        "#prod-ObjectLiteral",
        "#prod-FunctionExpression",
        "#prod-ClassExpression",
        "#prod-GeneratorExpression",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-RegularExpressionLiteral",
        "#prod-TemplateLiteral",
        "#prod-CallExpression",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-SuperCall",
        "#prod-ImportCall",
        "#prod-CallExpression",
        "#prod-Arguments",
        "#prod-CallExpression",
        "#prod-TemplateLiteral",
        "#prod-NewExpression",
        "#prod-NewExpression",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-TemplateLiteral",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-NewTarget",
        "#prod-ImportMeta",
        "#prod-LeftHandSideExpression",
        "#prod-OptionalExpression",
        "#prod-UpdateExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LeftHandSideExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-AwaitExpression",
        "#prod-ExponentiationExpression",
        "#prod-UpdateExpression",
        "#prod-ExponentiationExpression",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeOperator",
        "#prod-ExponentiationExpression",
        "#prod-AdditiveExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-ShiftExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-RelationalExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-PrivateIdentifier",
        "#prod-ShiftExpression",
        "#prod-EqualityExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseANDExpression",
        "#prod-EqualityExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-LogicalANDExpression",
        "#prod-LogicalANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalANDExpression",
        "#prod-CoalesceExpression",
        "#prod-CoalesceExpressionHead",
        "#prod-BitwiseORExpression",
        "#prod-ConditionalExpression",
        "#prod-ShortCircuitExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-YieldExpression",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentOperator",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-AssignmentExpression",
        "#prod-PropertyDefinition",
        "#prod-IdentifierReference",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierReference",
        "#prod-PropertyDefinition",
        "#prod-AssignmentExpression",
        "#prod-PropertyDefinition",
        "#prod-PropertyName",
        "#prod-AssignmentExpression",
        "#sec-static-semantics-propname",
        "#prod-PropertyName",
        "#prod-LiteralPropertyName",
        "#prod-IdentifierName",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierName",
        "#prod-LiteralPropertyName",
        "#prod-StringLiteral",
        "#sec-static-semantics-sv",
        "#prod-StringLiteral",
        "#prod-LiteralPropertyName",
        "#prod-NumericLiteral",
        "#sec-numericvalue",
        "#prod-NumericLiteral",
        "#sec-tostring",
        "#prod-ComputedPropertyName",
        "#prod-AssignmentExpression",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#sec-static-semantics-propname",
        "#prod-ClassElementName",
        "#prod-GeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-GeneratorBody",
        "#sec-static-semantics-propname",
        "#prod-ClassElementName",
        "#prod-AsyncGeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-propname",
        "#prod-ClassElementName",
        "#prod-ClassElement",
        "#prod-ClassStaticBlock",
        "#prod-ClassElement",
        "#prod-AsyncMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-propname",
        "#prod-ClassElementName",
        "#prod-FieldDefinition",
        "#prod-ClassElementName",
        "#prod-Initializer",
        "#sec-static-semantics-propname",
        "#prod-ClassElementName",
        "#prod-ClassElementName",
        "#prod-PrivateIdentifier",
        "#prod-Identifier",
        "#prod-FunctionDeclaration",
        "#prod-BlockStatement",
        "#prod-Catch",
        "#prod-TryStatement",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-declarative-environment-records",
        "#sec-object-environment-records",
        "#sec-global-environment-records",
        "#sec-function-environment-records",
        "#sec-module-environment-records",
        "#sec-declarative-environment-records",
        "#sec-environment-records",
        "#sec-declarative-environment-records",
        "#prod-FunctionDeclaration",
        "#prod-VariableDeclaration",
        "#prod-Catch",
        "#sec-ecmascript-language-types",
        "#sec-function-environment-records",
        "#function-object",
        "#sec-module-environment-records",
        "#prod-Module",
        "#prod-Module",
        "#sec-global-environment-records",
        "#sec-object-environment-records",
        "#prod-WithStatement",
        "#sec-global-environment-records",
        "#prod-Script",
        "#sec-global-object",
        "#sec-global-object",
        "#sec-environment-records",
        "#table-abstract-methods-of-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-environment-records",
        "#sec-strict-mode-code",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-declarative-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-declarative-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-environment-records",
        "#assert",
        "#sec-declarative-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-environment-records",
        "#assert",
        "#sec-declarative-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-declarative-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#step-setmutablebinding-missing-binding",
        "#sec-declarative-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-declarative-environment-records",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-declarative-environment-records",
        "#sec-declarative-environment-records",
        "#sec-function-environment-records",
        "#sec-module-environment-records",
        "#sec-declarative-environment-records",
        "#sec-declarative-environment-records",
        "#sec-function-environment-records",
        "#sec-module-environment-records",
        "#sec-declarative-environment-records",
        "#sec-object-type",
        "#prod-IdentifierName",
        "#sec-with-statement",
        "#table-additional-fields-of-object-environment-records",
        "#sec-object-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-object-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-well-known-symbols",
        "#sec-ecmascript-data-types-and-values",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-object-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-environment-records",
        "#sec-definepropertyorthrow",
        "#sec-definepropertyorthrow",
        "#sec-completion-record-specification-type",
        "#sec-object-environment-records",
        "#sec-object-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-object-environment-records",
        "#sec-object-environment-records",
        "#sec-object-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-environment-records",
        "#sec-hasproperty",
        "#sec-set-o-p-v-throw",
        "#sec-object-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-object-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-object-environment-records",
        "#sec-object-environment-records",
        "#sec-object-environment-records",
        "#sec-object-environment-records",
        "#sec-object-environment-records",
        "#sec-declarative-environment-records",
        "#prod-ArrowFunction",
        "#prod-ArrowFunction",
        "#table-additional-fields-of-function-environment-records",
        "#sec-function-environment-records",
        "#sec-ecmascript-language-types",
        "#prod-ArrowFunction",
        "#function-object",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-declarative-environment-records",
        "#table-abstract-methods-of-environment-records",
        "#table-additional-methods-of-function-environment-records",
        "#sec-function-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-function-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-function-environment-records",
        "#sec-function-environment-records",
        "#sec-function-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-function-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#prod-Script",
        "#realm",
        "#sec-global-object",
        "#sec-global-object",
        "#sec-static-semantics-toplevellexicallyscopeddeclarations",
        "#sec-static-semantics-toplevelvarscopeddeclarations",
        "#prod-Script",
        "#sec-object-environment-records",
        "#sec-declarative-environment-records",
        "#sec-object-environment-records",
        "#sec-global-object",
        "#realm-record",
        "#sec-global-object",
        "#sec-object-environment-records",
        "#sec-global-object",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-VariableStatement",
        "#sec-declarative-environment-records",
        "#sec-global-object",
        "#sec-object-environment-records",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-VariableDeclaration",
        "#sec-global-object",
        "#table-additional-fields-of-global-environment-records",
        "#table-additional-methods-of-global-environment-records",
        "#sec-global-environment-records",
        "#sec-object-environment-records",
        "#sec-global-object",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-VariableDeclaration",
        "#realm",
        "#host",
        "#sec-declarative-environment-records",
        "#realm",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-VariableDeclaration",
        "#sec-list-and-record-specification-type",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-VariableDeclaration",
        "#realm",
        "#sec-global-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#prod-VariableDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#sec-environment-records",
        "#prod-LexicalDeclaration",
        "#prod-ClassDeclaration",
        "#sec-global-object",
        "#sec-global-environment-records",
        "#sec-global-object",
        "#sec-global-environment-records",
        "#sec-global-object",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-environment-records",
        "#sec-global-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-object-environment-records",
        "#sec-global-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-hasownproperty",
        "#sec-global-environment-records",
        "#sec-global-environment-records",
        "#sec-global-environment-records",
        "#sec-global-environment-records",
        "#sec-global-environment-records",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-global-environment-records",
        "#prod-VariableStatement",
        "#prod-FunctionDeclaration",
        "#sec-global-environment-records",
        "#prod-LexicalDeclaration",
        "#prod-ClassDeclaration",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-global-object",
        "#sec-global-object",
        "#sec-global-object",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-global-object",
        "#sec-hasownproperty",
        "#sec-isextensible-o",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-isextensible-o",
        "#sec-isdatadescriptor",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-object-environment-records",
        "#sec-list-and-record-specification-type",
        "#sec-hasownproperty",
        "#sec-isextensible-o",
        "#sec-global-environment-records",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-object-environment-records",
        "#sec-list-and-record-specification-type",
        "#sec-definepropertyorthrow",
        "#sec-set-o-p-v-throw",
        "#sec-global-object",
        "#step-createglobalfunctionbinding-set",
        "#sec-declarative-environment-records",
        "#prod-Module",
        "#sec-environment-records",
        "#sec-declarative-environment-records",
        "#table-abstract-methods-of-environment-records",
        "#table-additional-methods-of-module-environment-records",
        "#sec-module-environment-records",
        "#sec-module-environment-records",
        "#sec-abstract-module-records",
        "#sec-module-environment-records",
        "#sec-environment-records",
        "#sec-module-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#assert",
        "#assert",
        "#prod-Module",
        "#sec-strict-mode-code",
        "#sec-module-environment-records",
        "#sec-module-environment-records",
        "#early-error",
        "#sec-reference-record-specification-type",
        "#sec-module-environment-records",
        "#sec-delete-operator-static-semantics-early-errors",
        "#sec-module-environment-records",
        "#sec-module-environment-records",
        "#sec-module-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-module-environment-records",
        "#sec-abstract-module-records",
        "#sec-environment-records",
        "#sec-module-environment-records",
        "#assert",
        "#assert",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-reference-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-reference-record-specification-type",
        "#sec-reference-record-specification-type",
        "#sec-getidentifierreference",
        "#sec-environment-records",
        "#sec-declarative-environment-records",
        "#sec-declarative-environment-records",
        "#sec-environment-records",
        "#sec-object-environment-records",
        "#sec-object-environment-records",
        "#sec-function-environment-records",
        "#sec-function-environment-records",
        "#sec-global-environment-records",
        "#sec-newobjectenvironment",
        "#sec-declarative-environment-records",
        "#sec-global-environment-records",
        "#sec-list-and-record-specification-type",
        "#sec-environment-records",
        "#sec-module-environment-records",
        "#sec-module-environment-records",
        "#sec-private-names",
        "#prod-ClassDeclaration",
        "#prod-ClassExpression",
        "#sec-environment-records",
        "#privateenvironment-record",
        "#prod-ClassDeclaration",
        "#prod-ClassExpression",
        "#privateenvironment-record",
        "#sec-private-names",
        "#privateenvironment-record",
        "#table-privateenvironment-records",
        "#privateenvironment-record",
        "#privateenvironment-record",
        "#privateenvironment-record",
        "#privateenvironment-record",
        "#sec-list-and-record-specification-type",
        "#sec-private-names",
        "#sec-private-names",
        "#sec-algorithm-conventions-abstract-operations",
        "#privateenvironment-record",
        "#privateenvironment-record",
        "#privateenvironment-record",
        "#sec-list-and-record-specification-type",
        "#privateenvironment-record",
        "#privateenvironment-record",
        "#sec-private-names",
        "#sec-private-names",
        "#sec-private-names",
        "#assert",
        "#sec-resolve-private-identifier",
        "#realm",
        "#realm",
        "#table-realm-record-fields",
        "#realm-record",
        "#sec-list-and-record-specification-type",
        "#realm",
        "#sec-global-object",
        "#realm",
        "#sec-global-environment-records",
        "#realm",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-syntactic-grammar",
        "#realm",
        "#realm-record",
        "#sec-syntactic-grammar",
        "#prod-TemplateLiteral",
        "#sec-syntactic-grammar",
        "#host",
        "#realm-record",
        "#realm-record",
        "#realm-record",
        "#sec-createintrinsics",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#table-well-known-intrinsic-objects",
        "#sec-global-object",
        "#sec-reflection",
        "#function-object",
        "#sec-createbuiltinfunction",
        "#sec-addrestrictedfunctionproperties",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-newglobalenvironment",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-global-object",
        "#property-name",
        "#sec-property-descriptor-specification-type",
        "#sec-function-properties-of-the-global-object",
        "#sec-constructor-properties-of-the-global-object",
        "#sec-other-properties-of-the-global-object",
        "#sec-definepropertyorthrow",
        "#agent",
        "#agent",
        "#running-execution-context",
        "#running-execution-context",
        "#surrounding-agent",
        "#running-execution-context",
        "#running-execution-context",
        "#running-execution-context",
        "#table-state-components-for-all-execution-contexts",
        "#sec-execution-contexts",
        "#sec-execution-contexts",
        "#function-object",
        "#function-object",
        "#prod-Script",
        "#prod-Module",
        "#realm",
        "#realm-record",
        "#sec-abstract-module-records",
        "#script-record",
        "#sec-execution-contexts",
        "#sec-initializehostdefinedrealm",
        "#running-execution-context",
        "#running-execution-context",
        "#running-execution-context",
        "#running-execution-context",
        "#running-execution-context",
        "#running-execution-context",
        "#realm",
        "#running-execution-context",
        "#running-execution-context",
        "#table-additional-state-components-for-ecmascript-code-execution-contexts",
        "#sec-environment-records",
        "#sec-execution-contexts",
        "#sec-environment-records",
        "#prod-VariableStatement",
        "#sec-execution-contexts",
        "#privateenvironment-record",
        "#sec-private-names",
        "#prod-ClassElement",
        "#sec-environment-records",
        "#table-additional-state-components-for-generator-execution-contexts",
        "#sec-execution-contexts",
        "#running-execution-context",
        "#execution-context-stack",
        "#running-execution-context",
        "#script-record",
        "#sec-abstract-module-records",
        "#running-execution-context",
        "#execution-context-stack",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#sec-execution-contexts",
        "#sec-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-reference-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-environment-records",
        "#running-execution-context",
        "#assert",
        "#sec-environment-records",
        "#sec-strict-mode-code",
        "#sec-getidentifierreference",
        "#sec-reference-record-specification-type",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-keywords-and-reserved-words",
        "#running-execution-context",
        "#assert",
        "#step-getthisenvironment-loop",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-keywords-and-reserved-words",
        "#running-execution-context",
        "#sec-getthisenvironment",
        "#running-execution-context",
        "#sec-getthisenvironment",
        "#assert",
        "#sec-global-object",
        "#running-execution-context",
        "#current-realm",
        "#sec-abstract-closure",
        "#job",
        "#host-environment",
        "#host-hook",
        "#sec-hostenqueuepromisejob",
        "#host",
        "#sec-algorithm-conventions-abstract-operations",
        "#job",
        "#sec-abstract-closure",
        "#running-execution-context",
        "#execution-context-stack",
        "#host-defined",
        "#sec-invoke",
        "#job",
        "#sec-abstract-closure",
        "#host-defined",
        "#execution-context-stack",
        "#job",
        "#job",
        "#job",
        "#sec-abstract-closure",
        "#sec-completion-record-specification-type",
        "#host-environment",
        "#job",
        "#job",
        "#job",
        "#script-record",
        "#sec-abstract-module-records",
        "#sec-getactivescriptormodule",
        "#script-record",
        "#sec-abstract-module-records",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#realm",
        "#execution-context-stack",
        "#realm",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#realm-record",
        "#host-environment",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#implementation-defined",
        "#realm",
        "#host-environment",
        "#sec-execution-contexts",
        "#realm",
        "#job",
        "#sec-execution-contexts",
        "#realm",
        "#job",
        "#sec-list-and-record-specification-type",
        "#function-object",
        "#host-defined",
        "#function-object",
        "#job",
        "#host",
        "#host-defined",
        "#job",
        "#sec-abstract-closure",
        "#function-object",
        "#sec-hostmakejobcallback",
        "#sec-hostcalljobcallback",
        "https://html.spec.whatwg.org/",
        "#host-defined",
        "#table-jobcallback-records",
        "#sec-jobcallback-records",
        "#function-object",
        "#job",
        "#host",
        "#host-defined",
        "#function-object",
        "#sec-jobcallback-records",
        "#sec-jobcallback-records",
        "#sec-jobcallback-records",
        "#host",
        "#job",
        "#host-defined",
        "#sec-jobcallback-records",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-call",
        "#host",
        "#function-object",
        "#assert",
        "#sec-iscallable",
        "#sec-call",
        "#host",
        "#host-defined",
        "#job",
        "#sec-abstract-closure",
        "#realm-record",
        "#sec-abstract-closure",
        "#sec-jobs",
        "#implementation-defined",
        "#job-preparedtoevaluatecode",
        "#sec-getactivescriptormodule",
        "#implementation-defined",
        "#job-activescriptormodule",
        "#job",
        "#job",
        "#sec-newpromiseresolvethenablejob",
        "#sec-getfunctionrealm",
        "#function-object",
        "#job",
        "#sec-newpromisereactionjob",
        "#sec-getfunctionrealm",
        "#job",
        "#sec-getfunctionrealm",
        "#realm",
        "#sec-getfunctionrealm",
        "https://html.spec.whatwg.org/",
        "https://html.spec.whatwg.org/#entry",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-createrealm",
        "#sec-execution-contexts",
        "#realm",
        "#execution-context-stack",
        "#running-execution-context",
        "#host",
        "#exotic-object",
        "#sec-global-object",
        "#host-defined",
        "#ordinary-object",
        "#sec-global-object",
        "#host",
        "#sec-global-object",
        "#host-defined",
        "#sec-global-object",
        "#sec-setrealmglobalobject",
        "#sec-setdefaultglobalbindings",
        "#host-defined",
        "#sec-global-object",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#running-execution-context",
        "#executing-thread",
        "#agent",
        "#agent",
        "#agent",
        "#executing-thread",
        "#agent",
        "#sec-execution-contexts",
        "#agent",
        "#executing-thread",
        "#executing-thread",
        "#agent",
        "#agent",
        "#agent-record",
        "#executing-thread",
        "#agent",
        "#executing-thread",
        "#agent",
        "#surrounding-agent",
        "#agent",
        "#running-execution-context",
        "#execution-context-stack",
        "#agent-record",
        "#agent",
        "#agent-record",
        "#sec-getvaluefrombuffer",
        "#sec-setvalueinbuffer",
        "#implementation-defined",
        "#agent",
        "#sec-agents",
        "#agent",
        "#sec-agent-clusters",
        "#sec-candidate-executions",
        "#sec-list-and-record-specification-type",
        "#sec-memory-model",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#job",
        "#agent",
        "#sec-agent-clusters",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#agent",
        "#sec-agents",
        "#agent-record",
        "#surrounding-agent",
        "#agent-record",
        "#surrounding-agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent-record",
        "#agent",
        "#agent",
        "#agent-record",
        "#agent",
        "#agent-record",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent-record",
        "#agent",
        "#sec-candidate-executions",
        "#sec-candidate-executions",
        "#sec-candidate-executions",
        "#sec-list-and-record-specification-type",
        "#agent",
        "#sec-agent-event-records",
        "#agent",
        "#sec-agents",
        "#sec-list-and-record-specification-type",
        "#agent",
        "#sec-candidate-executions",
        "#agent-record",
        "#sec-candidate-executions",
        "#sec-memory-model",
        "#agent",
        "#agent",
        "#running-execution-context",
        "#agent",
        "#agent-record",
        "#agent",
        "#agent",
        "#executing-thread",
        "#agent",
        "#executing-thread",
        "#agent",
        "#agent",
        "#agent",
        "#sec-memory-model",
        "#agent",
        "#sec-liveness",
        "#sec-weak-ref-constructor",
        "#sec-finalization-registry-constructor",
        "#sec-clear-kept-objects",
        "#sec-finalization-registry-constructor",
        "#sec-finalization-registry-constructor",
        "#sec-finalization-registry-constructor",
        "#sec-cleanup-finalization-registry",
        "#sec-clear-kept-objects",
        "#sec-cleanup-finalization-registry",
        "#host",
        "#sec-clear-kept-objects",
        "#sec-cleanup-finalization-registry",
        "#host-environment",
        "#host-environment",
        "#sec-cleanup-finalization-registry",
        "#sec-weakrefderef",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#agent",
        "#sec-list-and-record-specification-type",
        "#sec-weak-ref-constructor",
        "#sec-finalization-registry-constructor",
        "#sec-weak-ref-constructor",
        "#sec-liveness",
        "#sec-weak-ref-constructor",
        "#sec-finalization-registry-constructor",
        "#sec-list-and-record-specification-type",
        "#sec-host-cleanup-finalization-registry",
        "#sec-list-and-record-specification-type",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#sec-host-cleanup-finalization-registry",
        "#sec-finalization-registry-constructor",
        "#sec-finalization-registry-constructor",
        "#sec-liveness",
        "#sec-finalization-registry-constructor",
        "#sec-finalization-registry-constructor",
        "#sec-weak-ref-constructor",
        "#sec-liveness",
        "#sec-liveness",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#host-defined",
        "#sec-finalization-registry-constructor",
        "#job",
        "#sec-abstract-closure",
        "#sec-completion-ao",
        "#sec-cleanup-finalization-registry",
        "#sec-completion-record-specification-type",
        "#host-defined",
        "#sec-jobs",
        "#surrounding-agent",
        "#agent-record",
        "#sec-list-and-record-specification-type",
        "#surrounding-agent",
        "#agent-record",
        "#sec-clear-kept-objects",
        "#sec-finalization-registry-constructor",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-hostcalljobcallback",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-object-type",
        "#ordinary-object",
        "#sec-invariants-of-the-essential-internal-methods",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-property-descriptor-specification-type",
        "#ordinary-object",
        "#exotic-object",
        "#ordinary-object",
        "#ordinary-object",
        "#sec-completion-record-specification-type",
        "#sec-ordinarygetprototypeof",
        "#ordinary-object",
        "#sec-completion-record-specification-type",
        "#sec-ordinarysetprototypeof",
        "#sec-samevalue",
        "#sec-samevalue",
        "#ordinary-object",
        "#sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof",
        "#step-ordinarysetprototypeof-loop",
        "#ordinary-object",
        "#ordinary-object",
        "#sec-completion-record-specification-type",
        "#sec-ordinaryisextensible",
        "#ordinary-object",
        "#sec-completion-record-specification-type",
        "#sec-ordinarypreventextensions",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-ordinarygetownproperty",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-object-type",
        "#assert",
        "#sec-object-type",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ordinarydefineownproperty",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-isextensible-o",
        "#sec-validateandapplypropertydescriptor",
        "#sec-property-descriptor-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-validateandapplypropertydescriptor",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-invariants-of-the-essential-internal-methods",
        "#assert",
        "#sec-ispropertykey",
        "#sec-isaccessordescriptor",
        "#sec-object-type",
        "#table-object-property-attributes",
        "#sec-object-type",
        "#table-object-property-attributes",
        "#assert",
        "#sec-property-descriptor-specification-type",
        "#sec-samevalue",
        "#sec-isgenericdescriptor",
        "#sec-samevalue",
        "#sec-isaccessordescriptor",
        "#sec-isaccessordescriptor",
        "#sec-isaccessordescriptor",
        "#sec-samevalue",
        "#sec-samevalue",
        "#sec-samevalue",
        "#sec-isdatadescriptor",
        "#sec-isaccessordescriptor",
        "#sec-object-type",
        "#table-object-property-attributes",
        "#sec-isaccessordescriptor",
        "#sec-isdatadescriptor",
        "#sec-object-type",
        "#table-object-property-attributes",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ordinaryhasproperty",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ordinaryget",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-isdatadescriptor",
        "#assert",
        "#sec-isaccessordescriptor",
        "#sec-call",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ordinaryset",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ordinarysetwithowndescriptor",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-isdatadescriptor",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isaccessordescriptor",
        "#assert",
        "#sec-createdataproperty",
        "#assert",
        "#sec-isaccessordescriptor",
        "#sec-call",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ordinarydelete",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#ordinary-object",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-ordinaryownpropertykeys",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#array-index",
        "#sec-object-type",
        "#sec-ecmascript-data-types-and-values",
        "#array-index",
        "#sec-object-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#ordinary-object",
        "#sec-list-and-record-specification-type",
        "#sec-makebasicobject",
        "#sec-makebasicobject",
        "#ordinary-object",
        "#exotic-object",
        "#sec-makebasicobject",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#ordinary-object",
        "#constructor",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#sec-getprototypefromconstructor",
        "#sec-ordinaryobjectcreate",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#constructor",
        "#constructor",
        "#assert",
        "#sec-get-o-p",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getfunctionrealm",
        "#realm",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#function-object",
        "#function-object",
        "#ordinary-object",
        "#ordinary-object",
        "#function-object",
        "#sec-strict-mode-code",
        "#sec-strict-mode-code",
        "#non-strict-code",
        "#function-object",
        "#sec-strict-mode-code",
        "#sec-strict-mode-code",
        "#function-object",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#sec-environment-records",
        "#sec-environment-records",
        "#privateenvironment-record",
        "#privateenvironment-record",
        "#sec-private-names",
        "#sec-syntactic-grammar",
        "#sec-syntactic-grammar",
        "#constructor",
        "#realm-record",
        "#realm",
        "#script-record",
        "#sec-abstract-module-records",
        "#sec-global-object",
        "#sec-toobject",
        "#strict-function",
        "#non-strict-function",
        "#sec-source-text",
        "#sec-list-and-record-specification-type",
        "#sec-classfielddefinition-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-privateelement-specification-type",
        "#sec-private-names",
        "#sec-runtime-semantics-namedevaluation",
        "#constructor",
        "#function-object",
        "#constructor",
        "#function-object",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#sec-prepareforordinarycall",
        "#assert",
        "#running-execution-context",
        "#realm-record",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-throwcompletion",
        "#sec-ordinarycallbindthis",
        "#sec-completion-ao",
        "#sec-ordinarycallevaluatebody",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-returnifabrupt",
        "#execution-context-stack",
        "#step-call-pop-context-stack",
        "#function-object",
        "#sec-execution-contexts",
        "#running-execution-context",
        "#sec-execution-contexts",
        "#realm",
        "#sec-newfunctionenvironment",
        "#execution-context-stack",
        "#running-execution-context",
        "#function-object",
        "#sec-execution-contexts",
        "#sec-ecmascript-language-types",
        "#assert",
        "#sec-global-environment-records",
        "#sec-toobject",
        "#sec-toobject",
        "#assert",
        "#sec-function-environment-records",
        "#assert",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-FunctionBody",
        "#prod-FunctionStatementList",
        "#sec-runtime-semantics-evaluatefunctionbody",
        "#prod-FunctionBody",
        "#prod-ConciseBody",
        "#prod-ExpressionBody",
        "#sec-runtime-semantics-evaluateconcisebody",
        "#prod-ConciseBody",
        "#prod-GeneratorBody",
        "#prod-FunctionBody",
        "#sec-runtime-semantics-evaluategeneratorbody",
        "#prod-GeneratorBody",
        "#prod-AsyncGeneratorBody",
        "#prod-FunctionBody",
        "#sec-runtime-semantics-evaluateasyncgeneratorbody",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncFunctionBody",
        "#prod-FunctionBody",
        "#sec-runtime-semantics-evaluateasyncfunctionbody",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncConciseBody",
        "#prod-ExpressionBody",
        "#sec-runtime-semantics-evaluateasyncconcisebody",
        "#prod-AsyncConciseBody",
        "#prod-Initializer",
        "#prod-AssignmentExpression",
        "#assert",
        "#assert",
        "#sec-isanonymousfunctiondefinition",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-Initializer",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-completion-record-specification-type",
        "#sec-functiondeclarationinstantiation",
        "#prod-ClassStaticBlockBody",
        "#prod-ClassStaticBlockStatementList",
        "#assert",
        "#sec-runtime-semantics-evaluateclassstaticblockbody",
        "#prod-ClassStaticBlockBody",
        "#function-object",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-runtime-semantics-evaluatebody",
        "#function-object",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#constructor",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#sec-ordinarycreatefromconstructor",
        "#sec-prepareforordinarycall",
        "#assert",
        "#running-execution-context",
        "#sec-ordinarycallbindthis",
        "#sec-completion-ao",
        "#sec-initializeinstanceelements",
        "#sec-completion-record-specification-type",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-ao",
        "#sec-ordinarycallevaluatebody",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-ecmascript-data-types-and-values",
        "#sec-returnifabrupt",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-syntactic-grammar",
        "#sec-syntactic-grammar",
        "#sec-environment-records",
        "#privateenvironment-record",
        "#function-object",
        "#sec-makeconstructor",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#sec-ordinaryobjectcreate",
        "#sec-ecmascript-function-objects-call-thisargument-argumentslist",
        "#sec-strict-mode-code",
        "#sec-getactivescriptormodule",
        "#current-realm",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-expectedargumentcount",
        "#sec-setfunctionlength",
        "#function-object",
        "#realm-record",
        "#assert",
        "#sec-%throwtypeerror%",
        "#sec-%throwtypeerror%",
        "#sec-definepropertyorthrow",
        "#sec-definepropertyorthrow",
        "#function-object",
        "#realm",
        "#function-object",
        "#function-object",
        "#constructor",
        "#function-object",
        "#assert",
        "#sec-isconstructor",
        "#assert",
        "#sec-ecmascript-function-objects-construct-argumentslist-newtarget",
        "#sec-built-in-function-objects-construct-argumentslist-newtarget",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-definepropertyorthrow",
        "#sec-definepropertyorthrow",
        "#function-object",
        "#assert",
        "#function-object",
        "#sec-object-type",
        "#sec-private-names",
        "#function-object",
        "#sec-privateelement-specification-type",
        "#assert",
        "#sec-private-names",
        "#sec-privateelement-specification-type",
        "#sec-definepropertyorthrow",
        "#function-object",
        "#sec-object-type",
        "#sec-private-names",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#string-concatenation",
        "#sec-private-names",
        "#string-concatenation",
        "#sec-definepropertyorthrow",
        "#function-object",
        "#integer",
        "#assert",
        "#sec-definepropertyorthrow",
        "#\ud835\udd3d",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#sec-execution-contexts",
        "#sec-execution-contexts",
        "#sec-function-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#sec-environment-records",
        "#running-execution-context",
        "#sec-static-semantics-boundnames",
        "#sec-static-semantics-issimpleparameterlist",
        "#sec-static-semantics-containsexpression",
        "#sec-static-semantics-vardeclarednames",
        "#sec-static-semantics-varscopeddeclarations",
        "#sec-static-semantics-lexicallydeclarednames",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#prod-VariableDeclaration",
        "#prod-ForBinding",
        "#prod-BindingIdentifier",
        "#assert",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#sec-static-semantics-boundnames",
        "#sec-environment-records",
        "#sec-strict-mode-code",
        "#sec-environment-records",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#sec-newdeclarativeenvironment",
        "#assert",
        "#early-error",
        "#non-strict-function",
        "#sec-createunmappedargumentsobject",
        "#non-strict-function",
        "#sec-createmappedargumentsobject",
        "#list-concatenation",
        "#sec-createlistiteratorRecord",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#sec-runtime-semantics-iteratorbindinginitialization",
        "#sec-environment-records",
        "#sec-list-and-record-specification-type",
        "#sec-environment-records",
        "#sec-newdeclarativeenvironment",
        "#sec-list-and-record-specification-type",
        "#sec-web-compat-functiondeclarationinstantiation",
        "#sec-newdeclarativeenvironment",
        "#non-strict-function",
        "#sec-environment-records",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#strict-function",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#sec-environment-records",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#sec-static-semantics-boundnames",
        "#sec-static-semantics-isconstantdeclaration",
        "#sec-syntactic-grammar",
        "#sec-static-semantics-boundnames",
        "#sec-runtime-semantics-instantiatefunctionobject",
        "#sec-block-level-function-declarations-web-legacy-compatibility-semantics",
        "#function-object",
        "#function-object",
        "#sec-ecmascript-function-objects",
        "#exotic-object",
        "#function-object",
        "#function-object",
        "#function-object",
        "#sec-ecmascript-function-objects",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#sec-function.prototype.tostring",
        "#function-object",
        "#exotic-object",
        "#ordinary-object",
        "#sec-ordinary-object-internal-methods-and-internal-slots",
        "#exotic-object",
        "#function-object",
        "#sec-properties-of-the-function-prototype-object",
        "#function-object",
        "#function-object",
        "#strict-function",
        "#constructor",
        "#function-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#function-object",
        "#function-object",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#sec-execution-contexts",
        "#realm",
        "#implementation-defined",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#execution-context-stack",
        "#running-execution-context",
        "#execution-context-stack",
        "#function-object",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#constructor",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-built-in-function-objects-call-thisargument-argumentslist",
        "#step-call-builtin-function-result",
        "#sec-completion-record-specification-type",
        "#sec-abstract-closure",
        "#integer",
        "#sec-object-type",
        "#sec-list-and-record-specification-type",
        "#realm-record",
        "#function-object",
        "#function-object",
        "#current-realm",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-list-and-record-specification-type",
        "#sec-built-in-function-objects",
        "#function-object",
        "#function-object",
        "#function-object",
        "#sec-setfunctionlength",
        "#sec-setfunctionname",
        "#sec-setfunctionname",
        "#exotic-object",
        "#ordinary-object",
        "#exotic-object",
        "#ordinary-object",
        "#bound-function-exotic-object",
        "#exotic-object",
        "#function-object",
        "#bound-function-exotic-object",
        "#bound-function-exotic-object",
        "#sec-ordinary-object-internal-methods-and-internal-slots",
        "#sec-boundfunctioncreate",
        "#bound-function-exotic-object",
        "#function-object",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#table-internal-slots-of-bound-function-exotic-objects",
        "#function-object",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#bound-function-exotic-object",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#list-concatenation",
        "#sec-call",
        "#bound-function-exotic-object",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#constructor",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-isconstructor",
        "#list-concatenation",
        "#sec-samevalue",
        "#sec-construct",
        "#function-object",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#bound-function-exotic-object",
        "#list-concatenation",
        "#table-internal-slots-of-bound-function-exotic-objects",
        "#sec-makebasicobject",
        "#sec-bound-function-exotic-objects-call-thisargument-argumentslist",
        "#sec-isconstructor",
        "#sec-bound-function-exotic-objects-construct-argumentslist-newtarget",
        "#exotic-object",
        "#array-index",
        "#sec-object-type",
        "#sec-object-type",
        "#property-name",
        "#array-index",
        "#integral-number",
        "#mathematical-value",
        "#array-index",
        "#array-index",
        "#array-index",
        "#array-index",
        "#array-index",
        "#property-name",
        "#array-index",
        "#sec-tostring",
        "#sec-touint32",
        "#sec-touint32",
        "#\ud835\udd3d",
        "#sec-ordinary-object-internal-methods-and-internal-slots",
        "#sec-arraycreate",
        "#array-exotic-object",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-arraysetlength",
        "#array-index",
        "#sec-ordinarygetownproperty",
        "#assert",
        "#sec-isdatadescriptor",
        "#assert",
        "#assert",
        "#integral-number",
        "#sec-touint32",
        "#sec-ordinarydefineownproperty",
        "#sec-ordinarydefineownproperty",
        "#assert",
        "#sec-ordinarydefineownproperty",
        "#integer",
        "#sec-completion-record-specification-type",
        "#array-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-properties-of-the-array-prototype-object",
        "#sec-makebasicobject",
        "#sec-array-exotic-objects-defineownproperty-p-desc",
        "#sec-ordinarydefineownproperty",
        "#\ud835\udd3d",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#constructor",
        "#constructor",
        "#sec-isarray",
        "#sec-arraycreate",
        "#sec-get-o-p",
        "#sec-isconstructor",
        "#current-realm",
        "#sec-getfunctionrealm",
        "#realm-record",
        "#sec-samevalue",
        "#sec-array-constructor",
        "#sec-ecmascript-data-types-and-values",
        "#sec-get-o-p",
        "#sec-well-known-symbols",
        "#sec-arraycreate",
        "#sec-isconstructor",
        "#sec-construct",
        "#\ud835\udd3d",
        "#constructor",
        "#realm",
        "#realm",
        "#running-execution-context",
        "#realm",
        "#running-execution-context",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ordinarydefineownproperty",
        "#sec-touint32",
        "#sec-tonumber",
        "#sec-samevaluezero",
        "#sec-ordinarygetownproperty",
        "#assert",
        "#sec-isdatadescriptor",
        "#assert",
        "#sec-ordinarydefineownproperty",
        "#sec-ordinarydefineownproperty",
        "#sec-object-type",
        "#array-index",
        "#sec-touint32",
        "#sec-ordinarydefineownproperty",
        "#sec-ordinarydefineownproperty",
        "#assert",
        "#step-arraysetlength-newlen",
        "#step-arraysetlength-numberlen",
        "#exotic-object",
        "#integer",
        "#sec-object-type",
        "#string-exotic-object",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-ordinary-object-internal-methods-and-internal-slots",
        "#sec-stringcreate",
        "#string-exotic-object",
        "#ordinary-object",
        "#string-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-ordinarygetownproperty",
        "#sec-stringgetownproperty",
        "#string-exotic-object",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-stringgetownproperty",
        "#sec-iscompatiblepropertydescriptor",
        "#sec-ordinarydefineownproperty",
        "#string-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#integer",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-object-type",
        "#array-index",
        "#sec-tointegerorinfinity",
        "#sec-object-type",
        "#sec-ecmascript-data-types-and-values",
        "#array-index",
        "#sec-object-type",
        "#sec-ecmascript-data-types-and-values",
        "#string-exotic-object",
        "#string-exotic-object",
        "#sec-makebasicobject",
        "#sec-string-exotic-objects-getownproperty-p",
        "#sec-string-exotic-objects-defineownproperty-p-desc",
        "#sec-string-exotic-objects-ownpropertykeys",
        "#sec-definepropertyorthrow",
        "#\ud835\udd3d",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-canonicalnumericindexstring",
        "#sec-isintegralnumber",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#\u211d",
        "#\u211d",
        "#substring",
        "#\u211d",
        "#\u211d",
        "#ordinary-object",
        "#arguments-exotic-object",
        "#arguments-exotic-object",
        "#exotic-object",
        "#array-index",
        "#sec-ordinary-object-internal-methods-and-internal-slots",
        "#sec-createmappedargumentsobject",
        "#sec-createunmappedargumentsobject",
        "#ordinary-object",
        "#arguments-exotic-object",
        "#arguments-exotic-object",
        "#ordinary-object",
        "#sec-object.prototype.tostring",
        "#integer",
        "#sec-object-type",
        "#arguments-exotic-object",
        "#function-object",
        "#sec-execution-contexts",
        "#sec-object-type",
        "#ordinary-object",
        "#sec-object-type",
        "#arguments-exotic-object",
        "#non-strict-function",
        "#arguments-exotic-object",
        "#sec-object-type",
        "#arguments-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-ordinarygetownproperty",
        "#sec-hasownproperty",
        "#sec-get-o-p",
        "#arguments-exotic-object",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-hasownproperty",
        "#sec-isdatadescriptor",
        "#sec-get-o-p",
        "#sec-ordinarydefineownproperty",
        "#sec-isaccessordescriptor",
        "#assert",
        "#sec-set-o-p-v-throw",
        "#arguments-exotic-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-hasownproperty",
        "#sec-ordinaryget",
        "#assert",
        "#sec-get-o-p",
        "#arguments-exotic-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-samevalue",
        "#sec-hasownproperty",
        "#assert",
        "#sec-set-o-p-v-throw",
        "#sec-ordinaryset",
        "#arguments-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-hasownproperty",
        "#sec-ordinarydelete",
        "#arguments-exotic-object",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-definepropertyorthrow",
        "#\ud835\udd3d",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-definepropertyorthrow",
        "#sec-well-known-symbols",
        "#sec-definepropertyorthrow",
        "#sec-%throwtypeerror%",
        "#sec-%throwtypeerror%",
        "#sec-syntactic-grammar",
        "#sec-list-and-record-specification-type",
        "#sec-environment-records",
        "#arguments-exotic-object",
        "#assert",
        "#sec-makebasicobject",
        "#sec-arguments-exotic-objects-getownproperty-p",
        "#sec-arguments-exotic-objects-defineownproperty-p-desc",
        "#sec-arguments-exotic-objects-get-p-receiver",
        "#sec-arguments-exotic-objects-set-p-v-receiver",
        "#sec-arguments-exotic-objects-delete-p",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-ordinaryobjectcreate",
        "#sec-static-semantics-boundnames",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-definepropertyorthrow",
        "#\ud835\udd3d",
        "#sec-list-and-record-specification-type",
        "#sec-makearggetter",
        "#sec-makeargsetter",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-definepropertyorthrow",
        "#sec-well-known-symbols",
        "#sec-definepropertyorthrow",
        "#sec-environment-records",
        "#function-object",
        "#function-object",
        "#sec-abstract-closure",
        "#sec-createbuiltinfunction",
        "#sec-environment-records",
        "#function-object",
        "#function-object",
        "#sec-abstract-closure",
        "#sec-createbuiltinfunction",
        "#integer-indexed-exotic-object",
        "#exotic-object",
        "#integer-index",
        "#sec-object-type",
        "#integer-indexed-exotic-object",
        "#ordinary-object",
        "#sec-ordinary-object-internal-methods-and-internal-slots",
        "#sec-integerindexedobjectcreate",
        "#integer-indexed-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-canonicalnumericindexstring",
        "#sec-integerindexedelementget",
        "#sec-ordinarygetownproperty",
        "#integer-indexed-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-canonicalnumericindexstring",
        "#sec-isvalidintegerindex",
        "#sec-ordinaryhasproperty",
        "#integer-indexed-exotic-object",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-canonicalnumericindexstring",
        "#sec-isvalidintegerindex",
        "#sec-isaccessordescriptor",
        "#sec-integerindexedelementset",
        "#sec-ordinarydefineownproperty",
        "#integer-indexed-exotic-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-canonicalnumericindexstring",
        "#sec-integerindexedelementget",
        "#sec-ordinaryget",
        "#integer-indexed-exotic-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-canonicalnumericindexstring",
        "#sec-integerindexedelementset",
        "#sec-ordinaryset",
        "#integer-indexed-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-canonicalnumericindexstring",
        "#sec-isvalidintegerindex",
        "#sec-ordinarydelete",
        "#integer-indexed-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-list-and-record-specification-type",
        "#sec-isdetachedbuffer",
        "#integer",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-object-type",
        "#sec-ecmascript-data-types-and-values",
        "#integer-index",
        "#sec-object-type",
        "#sec-ecmascript-data-types-and-values",
        "#integer-indexed-exotic-object",
        "#integer-indexed-exotic-object",
        "#sec-makebasicobject",
        "#sec-integer-indexed-exotic-objects-getownproperty-p",
        "#sec-integer-indexed-exotic-objects-hasproperty-p",
        "#sec-integer-indexed-exotic-objects-defineownproperty-p-desc",
        "#sec-integer-indexed-exotic-objects-get-p-receiver",
        "#sec-integer-indexed-exotic-objects-set-p-v-receiver",
        "#sec-integer-indexed-exotic-objects-delete-p",
        "#sec-integer-indexed-exotic-objects-ownpropertykeys",
        "#integer-indexed-exotic-object",
        "#sec-isdetachedbuffer",
        "#sec-isintegralnumber",
        "#\u211d",
        "#\u211d",
        "#integer-indexed-exotic-object",
        "#sec-isvalidintegerindex",
        "#sec-typedarrayelementsize",
        "#\u211d",
        "#sec-typedarrayelementtype",
        "#sec-getvaluefrombuffer",
        "#integer-indexed-exotic-object",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-tobigint",
        "#sec-tonumber",
        "#sec-isvalidintegerindex",
        "#sec-typedarrayelementsize",
        "#\u211d",
        "#sec-typedarrayelementtype",
        "#sec-setvalueinbuffer",
        "#module-namespace-exotic-object",
        "#exotic-object",
        "#prod-Module",
        "#sec-exports",
        "#module-namespace-exotic-object",
        "#prod-Module",
        "#sec-object-type",
        "#sec-static-semantics-stringvalue",
        "#module-namespace-exotic-object",
        "#module-namespace-exotic-object",
        "#sec-ordinary-object-internal-methods-and-internal-slots",
        "#sec-modulenamespacecreate",
        "#module-namespace-exotic-object",
        "#table-internal-slots-of-module-namespace-exotic-objects",
        "#sec-abstract-module-records",
        "#sec-abstract-module-records",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#module-namespace-exotic-object",
        "#sec-completion-record-specification-type",
        "#module-namespace-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-set-immutable-prototype",
        "#module-namespace-exotic-object",
        "#sec-completion-record-specification-type",
        "#module-namespace-exotic-object",
        "#sec-completion-record-specification-type",
        "#module-namespace-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinarygetownproperty",
        "#module-namespace-exotic-object",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinarydefineownproperty",
        "#sec-isaccessordescriptor",
        "#sec-samevalue",
        "#module-namespace-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinaryhasproperty",
        "#module-namespace-exotic-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinaryget",
        "#assert",
        "#resolvedbinding-record",
        "#assert",
        "#sec-getmodulenamespace",
        "#module-namespace-exotic-object",
        "#module-namespace-exotic-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#module-namespace-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinarydelete",
        "#module-namespace-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-ordinaryownpropertykeys",
        "#list-concatenation",
        "#sec-abstract-module-records",
        "#sec-list-and-record-specification-type",
        "#module-namespace-exotic-object",
        "#module-namespace-exotic-object",
        "#assert",
        "#table-internal-slots-of-module-namespace-exotic-objects",
        "#sec-makebasicobject",
        "#sec-module-namespace-exotic-objects",
        "#sec-list-and-record-specification-type",
        "#sec-module-namespace-objects",
        "#immutable-prototype-exotic-object",
        "#exotic-object",
        "#immutable-prototype-exotic-object",
        "#exotic-object",
        "#immutable-prototype-exotic-object",
        "#sec-properties-of-the-object-prototype-object",
        "#host-environment",
        "#host-environment",
        "#immutable-prototype-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-set-immutable-prototype",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-samevalue",
        "#exotic-object",
        "#table-proxy-handler-methods",
        "#sec-proxycreate",
        "#sec-invariants-of-the-essential-internal-methods",
        "#sec-invariants-of-the-essential-internal-methods",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-property-descriptor-specification-type",
        "#proxy-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-call",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isextensible-o",
        "#sec-samevalue",
        "#proxy-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-toboolean",
        "#sec-call",
        "#sec-isextensible-o",
        "#sec-samevalue",
        "#proxy-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-isextensible-o",
        "#sec-toboolean",
        "#sec-call",
        "#sec-isextensible-o",
        "#sec-samevalue",
        "#proxy-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-toboolean",
        "#sec-call",
        "#sec-isextensible-o",
        "#proxy-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-call",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isextensible-o",
        "#sec-isextensible-o",
        "#sec-topropertydescriptor",
        "#sec-completepropertydescriptor",
        "#sec-iscompatiblepropertydescriptor",
        "#assert",
        "#proxy-exotic-object",
        "#sec-object-type",
        "#sec-property-descriptor-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-frompropertydescriptor",
        "#sec-toboolean",
        "#sec-call",
        "#sec-isextensible-o",
        "#sec-iscompatiblepropertydescriptor",
        "#sec-isdatadescriptor",
        "#sec-property-descriptor-specification-type",
        "#proxy-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-toboolean",
        "#sec-call",
        "#sec-isextensible-o",
        "#proxy-exotic-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-call",
        "#sec-isdatadescriptor",
        "#sec-samevalue",
        "#sec-isaccessordescriptor",
        "#sec-object-type",
        "#sec-object-type",
        "#proxy-exotic-object",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-toboolean",
        "#sec-call",
        "#sec-isdatadescriptor",
        "#sec-samevalue",
        "#sec-isaccessordescriptor",
        "#sec-object-type",
        "#sec-object-type",
        "#proxy-exotic-object",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-toboolean",
        "#sec-call",
        "#sec-isextensible-o",
        "#proxy-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-call",
        "#sec-createlistfromarraylike",
        "#sec-isextensible-o",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#proxy-exotic-object",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-call",
        "#sec-createarrayfromlist",
        "#sec-call",
        "#proxy-exotic-object",
        "#proxy-exotic-object",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#constructor",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-isconstructor",
        "#sec-getmethod",
        "#sec-construct",
        "#sec-createarrayfromlist",
        "#sec-call",
        "#sec-ecmascript-data-types-and-values",
        "#proxy-exotic-object",
        "#sec-completion-record-specification-type",
        "#proxy-exotic-object",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-makebasicobject",
        "#sec-proxy-object-internal-methods-and-internal-slots",
        "#sec-iscallable",
        "#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist",
        "#sec-isconstructor",
        "#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget",
        "#prod-SourceCharacter",
        "#prod-SourceCharacter",
        "#prod-SourceCharacter",
        "#assert",
        "#eqn-floor",
        "#eqn-modulo",
        "#string-concatenation",
        "#sec-ecmascript-language-types-string-type",
        "#string-concatenation",
        "#sec-utf16encodecodepoint",
        "#surrogate-pair",
        "#assert",
        "#leading-surrogate",
        "#trailing-surrogate",
        "#integer",
        "#sec-list-and-record-specification-type",
        "#integer",
        "#sec-ecmascript-language-types-string-type",
        "#assert",
        "#leading-surrogate",
        "#trailing-surrogate",
        "#sec-list-and-record-specification-type",
        "#trailing-surrogate",
        "#sec-list-and-record-specification-type",
        "#trailing-surrogate",
        "#sec-list-and-record-specification-type",
        "#sec-utf16decodesurrogatepair",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types-string-type",
        "#sec-list-and-record-specification-type",
        "#sec-codepointat",
        "#sec-syntactic-grammar",
        "#sec-list-and-record-specification-type",
        "#sec-context-free-grammars",
        "#early-error",
        "#early-error",
        "#implementation-defined",
        "#early-error",
        "#sec-syntactic-grammar",
        "#sec-list-and-record-specification-type",
        "#early-error",
        "#early-error",
        "#implementation-defined",
        "#early-error",
        "#early-error",
        "#early-error",
        "#early-error",
        "#sec-error-handling-and-language-extensions",
        "#prod-Script",
        "#prod-Script",
        "#prod-FunctionDeclaration",
        "#prod-FunctionExpression",
        "#prod-GeneratorDeclaration",
        "#prod-GeneratorExpression",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncGeneratorExpression",
        "#prod-MethodDefinition",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#prod-ClassDeclaration",
        "#prod-ClassExpression",
        "#prod-Script",
        "#prod-Script",
        "#sec-ecmascript-function-objects",
        "#function-object",
        "#prod-FunctionDeclaration",
        "#prod-FunctionExpression",
        "#prod-GeneratorDeclaration",
        "#prod-GeneratorExpression",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncGeneratorExpression",
        "#prod-MethodDefinition",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#prod-ClassDeclaration",
        "#prod-ClassExpression",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FunctionDeclaration",
        "#prod-FunctionExpression",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorDeclaration",
        "#prod-GeneratorExpression",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncFunctionExpression",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncGeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-ModuleBody",
        "#prod-FunctionDeclaration",
        "#prod-FunctionExpression",
        "#prod-GeneratorDeclaration",
        "#prod-GeneratorExpression",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncGeneratorExpression",
        "#prod-MethodDefinition",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#prod-ClassDeclaration",
        "#prod-ClassExpression",
        "#sec-function-definitions",
        "#sec-arrow-function-definitions",
        "#sec-method-definitions",
        "#sec-generator-function-definitions",
        "#sec-async-function-definitions",
        "#sec-async-generator-function-definitions",
        "#sec-async-arrow-function-definitions",
        "#constructor",
        "#sec-function-p1-p2-pn-body",
        "#constructor",
        "#sec-generatorfunction",
        "#constructor",
        "#sec-async-function-constructor-arguments",
        "#prod-BindingIdentifier",
        "#sec-strict-mode-code",
        "#prod-BindingIdentifier",
        "#sec-strict-mode-code",
        "#prod-ExpressionStatement",
        "#prod-StatementListItem",
        "#prod-ModuleItem",
        "#prod-FunctionBody",
        "#prod-ScriptBody",
        "#prod-ModuleBody",
        "#prod-ExpressionStatement",
        "#prod-StringLiteral",
        "#sec-automatic-semicolon-insertion",
        "#directive-prologue",
        "#prod-ExpressionStatement",
        "#directive-prologue",
        "#prod-StringLiteral",
        "#use-strict-directive",
        "#prod-EscapeSequence",
        "#prod-LineContinuation",
        "#directive-prologue",
        "#use-strict-directive",
        "#prod-ExpressionStatement",
        "#directive-prologue",
        "#prod-ExpressionStatement",
        "#use-strict-directive",
        "#directive-prologue",
        "#directive-prologue",
        "#prod-ExpressionStatement",
        "#use-strict-directive",
        "#sec-strict-variant-of-ecmascript",
        "#directive-prologue",
        "#use-strict-directive",
        "#prod-ClassDeclaration",
        "#prod-ClassExpression",
        "#directive-prologue",
        "#use-strict-directive",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#prod-FunctionDeclaration",
        "#prod-FunctionExpression",
        "#prod-GeneratorDeclaration",
        "#prod-GeneratorExpression",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncGeneratorExpression",
        "#prod-MethodDefinition",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#directive-prologue",
        "#use-strict-directive",
        "#constructor",
        "#prod-FunctionBody",
        "#directive-prologue",
        "#use-strict-directive",
        "#exotic-object",
        "#host-defined",
        "#function-object",
        "#prod-Script",
        "#prod-Module",
        "#sec-context-free-grammars",
        "#prod-InputElementRegExpOrTemplateTail",
        "#prod-RegularExpressionLiteral",
        "#prod-TemplateMiddle",
        "#prod-TemplateTail",
        "#prod-InputElementRegExp",
        "#sec-context-free-grammars",
        "#prod-RegularExpressionLiteral",
        "#prod-TemplateMiddle",
        "#prod-TemplateTail",
        "#prod-InputElementTemplateTail",
        "#prod-TemplateMiddle",
        "#prod-TemplateTail",
        "#prod-RegularExpressionLiteral",
        "#prod-InputElementDiv",
        "#sec-context-free-grammars",
        "#prod-RegularExpressionLiteral",
        "#sec-automatic-semicolon-insertion",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-InputElementDiv",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-Comment",
        "#prod-CommonToken",
        "#prod-DivPunctuator",
        "#prod-RightBracePunctuator",
        "#prod-InputElementRegExp",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-Comment",
        "#prod-CommonToken",
        "#prod-RightBracePunctuator",
        "#prod-RegularExpressionLiteral",
        "#prod-InputElementRegExpOrTemplateTail",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-Comment",
        "#prod-CommonToken",
        "#prod-RegularExpressionLiteral",
        "#prod-TemplateSubstitutionTail",
        "#prod-InputElementTemplateTail",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-Comment",
        "#prod-CommonToken",
        "#prod-DivPunctuator",
        "#prod-TemplateSubstitutionTail",
        "#prod-IdentifierName",
        "#sec-white-space",
        "#table-format-control-code-point-usage",
        "#prod-IdentifierPart",
        "#prod-IdentifierPart",
        "#prod-WhiteSpace",
        "#prod-StringLiteral",
        "#prod-RegularExpressionLiteral",
        "#prod-Template",
        "#prod-TemplateSubstitutionTail",
        "#prod-Comment",
        "#table-white-space-code-points",
        "#table-white-space-code-points",
        "#prod-WhiteSpace",
        "#prod-WhiteSpace",
        "#sec-automatic-semicolon-insertion",
        "#prod-StringLiteral",
        "#prod-Template",
        "#prod-TemplateSubstitutionTail",
        "#prod-StringLiteral",
        "#prod-LineContinuation",
        "#prod-MultiLineComment",
        "#prod-SingleLineComment",
        "#table-line-terminator-code-points",
        "#table-line-terminator-code-points",
        "#table-white-space-code-points",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-LineTerminatorSequence",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#sec-automatic-semicolon-insertion",
        "#prod-MultiLineComment",
        "#prod-LineTerminator",
        "#prod-Comment",
        "#prod-MultiLineComment",
        "#prod-SingleLineComment",
        "#prod-MultiLineComment",
        "#prod-MultiLineCommentChars",
        "#prod-MultiLineCommentChars",
        "#prod-MultiLineNotAsteriskChar",
        "#prod-MultiLineCommentChars",
        "#prod-PostAsteriskCommentChars",
        "#prod-PostAsteriskCommentChars",
        "#prod-MultiLineNotForwardSlashOrAsteriskChar",
        "#prod-MultiLineCommentChars",
        "#prod-PostAsteriskCommentChars",
        "#prod-MultiLineNotAsteriskChar",
        "#prod-SourceCharacter",
        "#prod-MultiLineNotForwardSlashOrAsteriskChar",
        "#prod-SourceCharacter",
        "#prod-SingleLineComment",
        "#prod-SingleLineCommentChars",
        "#prod-SingleLineCommentChars",
        "#prod-SingleLineCommentChar",
        "#prod-SingleLineCommentChars",
        "#prod-SingleLineCommentChar",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#sec-html-like-comments",
        "#prod-CommonToken",
        "#prod-IdentifierName",
        "#prod-PrivateIdentifier",
        "#prod-Punctuator",
        "#prod-NumericLiteral",
        "#prod-StringLiteral",
        "#prod-Template",
        "#prod-DivPunctuator",
        "#prod-RegularExpressionLiteral",
        "#prod-RightBracePunctuator",
        "#prod-TemplateSubstitutionTail",
        "#prod-CommonToken",
        "#prod-IdentifierName",
        "#prod-ReservedWord",
        "#prod-ReservedWord",
        "#prod-IdentifierName",
        "#prod-Identifier",
        "#prod-IdentifierName",
        "#prod-ReservedWord",
        "#prod-IdentifierName",
        "#prod-IdentifierName",
        "#prod-PrivateIdentifier",
        "#prod-IdentifierName",
        "#prod-IdentifierName",
        "#prod-IdentifierStart",
        "#prod-IdentifierName",
        "#prod-IdentifierPart",
        "#prod-IdentifierStart",
        "#prod-IdentifierStartChar",
        "#prod-UnicodeEscapeSequence",
        "#prod-IdentifierPart",
        "#prod-IdentifierPartChar",
        "#prod-UnicodeEscapeSequence",
        "#prod-IdentifierStartChar",
        "#prod-UnicodeIDStart",
        "#prod-IdentifierPartChar",
        "#prod-UnicodeIDContinue",
        "#prod-UnicodeIDStart",
        "#prod-UnicodeIDContinue",
        "#prod-UnicodeEscapeSequence",
        "#sec-literals-string-literals",
        "#prod-IdentifierPart",
        "#prod-UnicodeIDContinue",
        "#prod-IdentifierName",
        "#prod-IdentifierName",
        "#prod-CodePoint",
        "#prod-UnicodeEscapeSequence",
        "#sec-literals-string-literals",
        "#prod-UnicodeEscapeSequence",
        "#prod-IdentifierName",
        "#prod-UnicodeEscapeSequence",
        "#prod-IdentifierName",
        "#prod-UnicodeEscapeSequence",
        "#prod-SourceCharacter",
        "#prod-IdentifierName",
        "#prod-SourceCharacter",
        "#prod-IdentifierName",
        "#prod-IdentifierName",
        "#prod-IdentifierName",
        "#prod-UnicodeEscapeSequence",
        "#prod-IdentifierStart",
        "#prod-UnicodeEscapeSequence",
        "#sec-identifiercodepoint",
        "#prod-UnicodeEscapeSequence",
        "#prod-IdentifierStartChar",
        "#prod-IdentifierPart",
        "#prod-UnicodeEscapeSequence",
        "#sec-identifiercodepoint",
        "#prod-UnicodeEscapeSequence",
        "#prod-IdentifierPartChar",
        "#sec-list-and-record-specification-type",
        "#prod-IdentifierName",
        "#prod-IdentifierStart",
        "#sec-identifiercodepoint",
        "#prod-IdentifierStart",
        "#prod-IdentifierName",
        "#prod-IdentifierName",
        "#prod-IdentifierPart",
        "#sec-identifiercodepoints",
        "#prod-IdentifierName",
        "#sec-identifiercodepoint",
        "#prod-IdentifierPart",
        "#list-concatenation",
        "#prod-IdentifierStart",
        "#prod-IdentifierStartChar",
        "#prod-IdentifierStartChar",
        "#prod-IdentifierPart",
        "#prod-IdentifierPartChar",
        "#prod-IdentifierPartChar",
        "#prod-UnicodeEscapeSequence",
        "#prod-Hex4Digits",
        "#prod-Hex4Digits",
        "#prod-UnicodeEscapeSequence",
        "#prod-CodePoint",
        "#prod-CodePoint",
        "#prod-IdentifierName",
        "#prod-IdentifierName",
        "#early-error",
        "#prod-ReservedWord",
        "#sec-identifiers",
        "#early-error",
        "#sec-identifiers-static-semantics-early-errors",
        "#sec-let-and-const-declarations-static-semantics-early-errors",
        "#sec-for-in-and-for-of-statements-static-semantics-early-errors",
        "#sec-class-definitions-static-semantics-early-errors",
        "#prod-ReservedWord",
        "#sec-strict-mode-code",
        "#prod-Identifier",
        "#prod-ReservedWord",
        "#sec-grammar-notation",
        "#prod-SourceCharacter",
        "#prod-UnicodeEscapeSequence",
        "#prod-IdentifierName",
        "#prod-UnicodeEscapeSequence",
        "#early-error",
        "#sec-identifiers-static-semantics-early-errors",
        "#sec-static-semantics-stringvalue",
        "#sec-strict-mode-code",
        "#sec-strict-mode-code",
        "#sec-identifiers-static-semantics-early-errors",
        "#sec-static-semantics-assignmenttargettype",
        "#sec-function-definitions-static-semantics-early-errors",
        "#sec-generator-function-definitions-static-semantics-early-errors",
        "#sec-async-generator-function-definitions-static-semantics-early-errors",
        "#sec-async-function-definitions-static-semantics-early-errors",
        "#prod-Punctuator",
        "#prod-OptionalChainingPunctuator",
        "#prod-OtherPunctuator",
        "#prod-OptionalChainingPunctuator",
        "#prod-DecimalDigit",
        "#prod-OtherPunctuator",
        "#prod-DivPunctuator",
        "#prod-RightBracePunctuator",
        "#prod-NullLiteral",
        "#prod-BooleanLiteral",
        "#prod-NumericLiteralSeparator",
        "#prod-NumericLiteral",
        "#prod-DecimalLiteral",
        "#prod-DecimalBigIntegerLiteral",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-BigIntLiteralSuffix",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-DecimalBigIntegerLiteral",
        "#prod-BigIntLiteralSuffix",
        "#prod-NonZeroDigit",
        "#prod-DecimalDigits",
        "#prod-BigIntLiteralSuffix",
        "#prod-NonZeroDigit",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalDigits",
        "#prod-BigIntLiteralSuffix",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-BinaryIntegerLiteral",
        "#prod-OctalIntegerLiteral",
        "#prod-HexIntegerLiteral",
        "#prod-BigIntLiteralSuffix",
        "#prod-DecimalLiteral",
        "#prod-DecimalIntegerLiteral",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalIntegerLiteral",
        "#prod-ExponentPart",
        "#prod-DecimalIntegerLiteral",
        "#prod-NonZeroDigit",
        "#prod-NonZeroDigit",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalDigits",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#prod-DecimalDigits",
        "#prod-DecimalDigit",
        "#prod-DecimalDigits",
        "#prod-DecimalDigit",
        "#prod-DecimalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-ExponentPart",
        "#prod-ExponentIndicator",
        "#prod-SignedInteger",
        "#prod-ExponentIndicator",
        "#prod-SignedInteger",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-BinaryIntegerLiteral",
        "#prod-BinaryDigits",
        "#prod-BinaryDigits",
        "#prod-BinaryDigits",
        "#prod-BinaryDigit",
        "#prod-BinaryDigits",
        "#prod-BinaryDigit",
        "#prod-BinaryDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-BinaryDigit",
        "#prod-BinaryDigit",
        "#prod-OctalIntegerLiteral",
        "#prod-OctalDigits",
        "#prod-OctalDigits",
        "#prod-OctalDigits",
        "#prod-OctalDigit",
        "#prod-OctalDigits",
        "#prod-OctalDigit",
        "#prod-OctalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-OctalDigit",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#prod-NonOctalDigit",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-NonOctalDigit",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#prod-DecimalDigit",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-OctalDigit",
        "#prod-NonOctalDigit",
        "#prod-HexIntegerLiteral",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-HexDigit",
        "#prod-HexDigits",
        "#prod-HexDigit",
        "#prod-HexDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-SourceCharacter",
        "#prod-NumericLiteral",
        "#prod-IdentifierStart",
        "#prod-DecimalDigit",
        "#prod-NumericLiteral",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-DecimalIntegerLiteral",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#sec-strict-mode-code",
        "#non-strict-code",
        "#sec-conformance",
        "#prod-DecimalLiteral",
        "#prod-DecimalIntegerLiteral",
        "#prod-DecimalDigits",
        "#prod-DecimalIntegerLiteral",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalLiteral",
        "#prod-DecimalIntegerLiteral",
        "#prod-ExponentPart",
        "#prod-DecimalIntegerLiteral",
        "#prod-ExponentPart",
        "#prod-DecimalLiteral",
        "#prod-DecimalIntegerLiteral",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalIntegerLiteral",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-ExponentPart",
        "#prod-DecimalLiteral",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalLiteral",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-ExponentPart",
        "#prod-DecimalLiteral",
        "#prod-DecimalIntegerLiteral",
        "#prod-ExponentPart",
        "#prod-DecimalIntegerLiteral",
        "#prod-ExponentPart",
        "#prod-DecimalIntegerLiteral",
        "#prod-DecimalIntegerLiteral",
        "#prod-NonZeroDigit",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalDigits",
        "#prod-NonZeroDigit",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigit",
        "#prod-DecimalDigits",
        "#prod-DecimalDigit",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalDigit",
        "#prod-DecimalDigits",
        "#prod-DecimalDigit",
        "#prod-ExponentPart",
        "#prod-ExponentIndicator",
        "#prod-SignedInteger",
        "#prod-SignedInteger",
        "#prod-SignedInteger",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigit",
        "#prod-HexDigit",
        "#prod-OctalDigit",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-BinaryDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-HexDigit",
        "#prod-OctalDigit",
        "#prod-BinaryDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-HexDigit",
        "#prod-OctalDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-HexDigit",
        "#prod-OctalDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-HexDigit",
        "#prod-OctalDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-HexDigit",
        "#prod-OctalDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-HexDigit",
        "#prod-OctalDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-HexDigit",
        "#prod-OctalDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-NonOctalDigit",
        "#prod-HexDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-NonOctalDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-BinaryDigits",
        "#prod-BinaryDigits",
        "#prod-BinaryDigit",
        "#prod-BinaryDigits",
        "#prod-BinaryDigit",
        "#prod-BinaryDigits",
        "#prod-BinaryDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-BinaryDigit",
        "#prod-BinaryDigits",
        "#prod-BinaryDigit",
        "#prod-OctalDigits",
        "#prod-OctalDigits",
        "#prod-OctalDigit",
        "#prod-OctalDigits",
        "#prod-OctalDigit",
        "#prod-OctalDigits",
        "#prod-OctalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-OctalDigit",
        "#prod-OctalDigits",
        "#prod-OctalDigit",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-NonOctalDigit",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-NonOctalDigit",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#prod-DecimalDigit",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#prod-DecimalDigit",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-HexDigit",
        "#prod-HexDigits",
        "#prod-HexDigit",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-HexDigit",
        "#prod-HexDigits",
        "#prod-HexDigit",
        "#prod-NumericLiteral",
        "#prod-DecimalLiteral",
        "#sec-roundmvresult",
        "#prod-DecimalLiteral",
        "#prod-NumericLiteral",
        "#prod-NonDecimalIntegerLiteral",
        "#\ud835\udd3d",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-NumericLiteral",
        "#prod-LegacyOctalIntegerLiteral",
        "#\ud835\udd3d",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-NumericLiteral",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-BigIntLiteralSuffix",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-DecimalBigIntegerLiteral",
        "#prod-BigIntLiteralSuffix",
        "#prod-DecimalBigIntegerLiteral",
        "#prod-NonZeroDigit",
        "#prod-BigIntLiteralSuffix",
        "#prod-NonZeroDigit",
        "#prod-DecimalBigIntegerLiteral",
        "#prod-NonZeroDigit",
        "#prod-DecimalDigits",
        "#prod-BigIntLiteralSuffix",
        "#prod-NonZeroDigit",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalDigits",
        "#prod-BigIntLiteralSuffix",
        "#prod-DecimalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-NonZeroDigit",
        "#prod-DecimalDigits",
        "#\u2124",
        "#sec-utf16encodecodepoint",
        "#prod-StringLiteral",
        "#prod-DoubleStringCharacters",
        "#prod-SingleStringCharacters",
        "#prod-DoubleStringCharacters",
        "#prod-DoubleStringCharacter",
        "#prod-DoubleStringCharacters",
        "#prod-SingleStringCharacters",
        "#prod-SingleStringCharacter",
        "#prod-SingleStringCharacters",
        "#prod-DoubleStringCharacter",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-EscapeSequence",
        "#prod-LineContinuation",
        "#prod-SingleStringCharacter",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-EscapeSequence",
        "#prod-LineContinuation",
        "#prod-LineContinuation",
        "#prod-LineTerminatorSequence",
        "#prod-EscapeSequence",
        "#prod-CharacterEscapeSequence",
        "#prod-DecimalDigit",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-NonOctalDecimalEscapeSequence",
        "#prod-HexEscapeSequence",
        "#prod-UnicodeEscapeSequence",
        "#prod-CharacterEscapeSequence",
        "#prod-SingleEscapeCharacter",
        "#prod-NonEscapeCharacter",
        "#prod-SingleEscapeCharacter",
        "#prod-NonEscapeCharacter",
        "#prod-SourceCharacter",
        "#prod-EscapeCharacter",
        "#prod-LineTerminator",
        "#prod-EscapeCharacter",
        "#prod-SingleEscapeCharacter",
        "#prod-DecimalDigit",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-NonZeroOctalDigit",
        "#prod-OctalDigit",
        "#prod-ZeroToThree",
        "#prod-OctalDigit",
        "#prod-OctalDigit",
        "#prod-FourToSeven",
        "#prod-OctalDigit",
        "#prod-ZeroToThree",
        "#prod-OctalDigit",
        "#prod-OctalDigit",
        "#prod-NonZeroOctalDigit",
        "#prod-OctalDigit",
        "#prod-ZeroToThree",
        "#prod-FourToSeven",
        "#prod-NonOctalDecimalEscapeSequence",
        "#prod-HexEscapeSequence",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-UnicodeEscapeSequence",
        "#prod-Hex4Digits",
        "#prod-CodePoint",
        "#prod-Hex4Digits",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#sec-literals-numeric-literals",
        "#prod-SourceCharacter",
        "#sec-source-text",
        "#prod-LineContinuation",
        "#prod-EscapeSequence",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-NonOctalDecimalEscapeSequence",
        "#sec-strict-mode-code",
        "#non-strict-code",
        "#sec-conformance",
        "#use-strict-directive",
        "#sec-strict-mode-code",
        "#mathematical-value",
        "#sec-literals-numeric-literals",
        "#prod-StringLiteral",
        "#prod-StringLiteral",
        "#prod-DoubleStringCharacters",
        "#prod-DoubleStringCharacter",
        "#prod-DoubleStringCharacters",
        "#string-concatenation",
        "#prod-DoubleStringCharacter",
        "#prod-DoubleStringCharacters",
        "#prod-SingleStringCharacters",
        "#prod-SingleStringCharacter",
        "#prod-SingleStringCharacters",
        "#string-concatenation",
        "#prod-SingleStringCharacter",
        "#prod-SingleStringCharacters",
        "#prod-DoubleStringCharacter",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#sec-utf16encodecodepoint",
        "#prod-SourceCharacter",
        "#prod-DoubleStringCharacter",
        "#prod-DoubleStringCharacter",
        "#prod-DoubleStringCharacter",
        "#prod-LineContinuation",
        "#prod-SingleStringCharacter",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#sec-utf16encodecodepoint",
        "#prod-SourceCharacter",
        "#prod-SingleStringCharacter",
        "#prod-SingleStringCharacter",
        "#prod-SingleStringCharacter",
        "#prod-LineContinuation",
        "#prod-EscapeSequence",
        "#prod-CharacterEscapeSequence",
        "#prod-SingleEscapeCharacter",
        "#prod-SingleEscapeCharacter",
        "#table-string-single-character-escape-sequences",
        "#prod-NonEscapeCharacter",
        "#prod-SourceCharacter",
        "#prod-EscapeCharacter",
        "#prod-LineTerminator",
        "#sec-utf16encodecodepoint",
        "#prod-SourceCharacter",
        "#prod-EscapeSequence",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-NonOctalDecimalEscapeSequence",
        "#prod-NonOctalDecimalEscapeSequence",
        "#prod-HexEscapeSequence",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexEscapeSequence",
        "#prod-Hex4Digits",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-Hex4Digits",
        "#prod-UnicodeEscapeSequence",
        "#prod-CodePoint",
        "#sec-utf16encodecodepoint",
        "#prod-CodePoint",
        "#prod-TemplateEscapeSequence",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-ZeroToThree",
        "#prod-OctalDigit",
        "#prod-ZeroToThree",
        "#prod-OctalDigit",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-FourToSeven",
        "#prod-OctalDigit",
        "#prod-FourToSeven",
        "#prod-OctalDigit",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-ZeroToThree",
        "#prod-OctalDigit",
        "#prod-OctalDigit",
        "#prod-ZeroToThree",
        "#prod-OctalDigit",
        "#prod-OctalDigit",
        "#prod-ZeroToThree",
        "#prod-ZeroToThree",
        "#prod-ZeroToThree",
        "#prod-ZeroToThree",
        "#prod-FourToSeven",
        "#prod-FourToSeven",
        "#prod-FourToSeven",
        "#prod-FourToSeven",
        "#prod-HexEscapeSequence",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-Hex4Digits",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#sec-regexp-regular-expression-objects",
        "#constructor",
        "#sec-regexp-constructor",
        "#prod-RegularExpressionBody",
        "#prod-RegularExpressionFlags",
        "#sec-patterns",
        "#sec-patterns",
        "#prod-RegularExpressionBody",
        "#prod-RegularExpressionFlags",
        "#prod-RegularExpressionLiteral",
        "#prod-RegularExpressionBody",
        "#prod-RegularExpressionFlags",
        "#prod-RegularExpressionBody",
        "#prod-RegularExpressionFirstChar",
        "#prod-RegularExpressionChars",
        "#prod-RegularExpressionChars",
        "#prod-RegularExpressionChars",
        "#prod-RegularExpressionChar",
        "#prod-RegularExpressionFirstChar",
        "#prod-RegularExpressionNonTerminator",
        "#prod-RegularExpressionBackslashSequence",
        "#prod-RegularExpressionClass",
        "#prod-RegularExpressionChar",
        "#prod-RegularExpressionNonTerminator",
        "#prod-RegularExpressionBackslashSequence",
        "#prod-RegularExpressionClass",
        "#prod-RegularExpressionBackslashSequence",
        "#prod-RegularExpressionNonTerminator",
        "#prod-RegularExpressionNonTerminator",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-RegularExpressionClass",
        "#prod-RegularExpressionClassChars",
        "#prod-RegularExpressionClassChars",
        "#prod-RegularExpressionClassChars",
        "#prod-RegularExpressionClassChar",
        "#prod-RegularExpressionClassChar",
        "#prod-RegularExpressionNonTerminator",
        "#prod-RegularExpressionBackslashSequence",
        "#prod-RegularExpressionFlags",
        "#prod-RegularExpressionFlags",
        "#prod-IdentifierPartChar",
        "#prod-RegularExpressionLiteral",
        "#prod-RegularExpressionBody",
        "#prod-RegularExpressionFlags",
        "#prod-RegularExpressionBody",
        "#prod-RegularExpressionLiteral",
        "#prod-RegularExpressionBody",
        "#prod-RegularExpressionFlags",
        "#prod-RegularExpressionFlags",
        "#prod-Template",
        "#prod-NoSubstitutionTemplate",
        "#prod-TemplateHead",
        "#prod-NoSubstitutionTemplate",
        "#prod-TemplateCharacters",
        "#prod-TemplateHead",
        "#prod-TemplateCharacters",
        "#prod-TemplateSubstitutionTail",
        "#prod-TemplateMiddle",
        "#prod-TemplateTail",
        "#prod-TemplateMiddle",
        "#prod-TemplateCharacters",
        "#prod-TemplateTail",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacter",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacter",
        "#prod-TemplateEscapeSequence",
        "#prod-NotEscapeSequence",
        "#prod-LineContinuation",
        "#prod-LineTerminatorSequence",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-TemplateEscapeSequence",
        "#prod-CharacterEscapeSequence",
        "#prod-DecimalDigit",
        "#prod-HexEscapeSequence",
        "#prod-UnicodeEscapeSequence",
        "#prod-NotEscapeSequence",
        "#prod-DecimalDigit",
        "#prod-DecimalDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-NotCodePoint",
        "#prod-HexDigit",
        "#prod-CodePoint",
        "#prod-HexDigit",
        "#prod-NotCodePoint",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-CodePoint",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-TemplateSubstitutionTail",
        "#prod-InputElementTemplateTail",
        "#prod-NoSubstitutionTemplate",
        "#prod-TemplateHead",
        "#prod-TemplateMiddle",
        "#prod-TemplateTail",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacter",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacter",
        "#prod-TemplateCharacters",
        "#string-concatenation",
        "#prod-TemplateCharacter",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacter",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#sec-utf16encodecodepoint",
        "#prod-SourceCharacter",
        "#prod-TemplateCharacter",
        "#prod-TemplateCharacter",
        "#prod-TemplateEscapeSequence",
        "#sec-static-semantics-sv",
        "#prod-TemplateEscapeSequence",
        "#prod-TemplateCharacter",
        "#prod-NotEscapeSequence",
        "#prod-TemplateCharacter",
        "#prod-LineTerminatorSequence",
        "#sec-static-semantics-trv",
        "#prod-LineTerminatorSequence",
        "#prod-LineContinuation",
        "#prod-LineTerminatorSequence",
        "#sec-static-semantics-tv",
        "#prod-NoSubstitutionTemplate",
        "#prod-TemplateHead",
        "#prod-TemplateMiddle",
        "#prod-TemplateTail",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacter",
        "#prod-TemplateCharacters",
        "#string-concatenation",
        "#prod-TemplateCharacter",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacter",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#sec-utf16encodecodepoint",
        "#prod-SourceCharacter",
        "#prod-TemplateCharacter",
        "#prod-TemplateCharacter",
        "#prod-TemplateEscapeSequence",
        "#string-concatenation",
        "#prod-TemplateEscapeSequence",
        "#prod-TemplateCharacter",
        "#prod-NotEscapeSequence",
        "#string-concatenation",
        "#prod-NotEscapeSequence",
        "#prod-TemplateEscapeSequence",
        "#prod-NotEscapeSequence",
        "#prod-DecimalDigit",
        "#string-concatenation",
        "#prod-DecimalDigit",
        "#prod-NotEscapeSequence",
        "#prod-HexDigit",
        "#prod-NotEscapeSequence",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#string-concatenation",
        "#prod-HexDigit",
        "#prod-NotEscapeSequence",
        "#prod-HexDigit",
        "#prod-NotEscapeSequence",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#string-concatenation",
        "#prod-HexDigit",
        "#prod-NotEscapeSequence",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#string-concatenation",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-NotEscapeSequence",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#string-concatenation",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-NotEscapeSequence",
        "#prod-HexDigit",
        "#string-concatenation",
        "#prod-NotEscapeSequence",
        "#prod-NotCodePoint",
        "#prod-HexDigit",
        "#string-concatenation",
        "#prod-NotCodePoint",
        "#prod-NotEscapeSequence",
        "#prod-CodePoint",
        "#prod-HexDigit",
        "#string-concatenation",
        "#prod-CodePoint",
        "#prod-DecimalDigit",
        "#sec-utf16encodecodepoint",
        "#prod-CharacterEscapeSequence",
        "#prod-NonEscapeCharacter",
        "#sec-static-semantics-sv",
        "#prod-NonEscapeCharacter",
        "#prod-SingleEscapeCharacter",
        "#sec-utf16encodecodepoint",
        "#prod-HexEscapeSequence",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#string-concatenation",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-UnicodeEscapeSequence",
        "#prod-Hex4Digits",
        "#string-concatenation",
        "#prod-Hex4Digits",
        "#prod-UnicodeEscapeSequence",
        "#prod-CodePoint",
        "#string-concatenation",
        "#prod-CodePoint",
        "#prod-Hex4Digits",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#string-concatenation",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-HexDigit",
        "#string-concatenation",
        "#prod-HexDigits",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#sec-utf16encodecodepoint",
        "#prod-LineContinuation",
        "#prod-LineTerminatorSequence",
        "#string-concatenation",
        "#prod-LineTerminatorSequence",
        "#prod-LineTerminatorSequence",
        "#prod-LineTerminatorSequence",
        "#prod-LineTerminatorSequence",
        "#prod-LineTerminatorSequence",
        "#prod-LineTerminatorSequence",
        "#sec-static-semantics-tv",
        "#prod-LineContinuation",
        "#prod-LineTerminatorSequence",
        "#sec-static-semantics-tv",
        "#prod-TemplateEscapeSequence",
        "#sec-context-free-grammars",
        "#sec-ecmascript-language-lexical-grammar",
        "#prod-LineTerminator",
        "#sec-do-while-statement",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#sec-for-statement",
        "#prod-UpdateExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LineTerminator",
        "#prod-LeftHandSideExpression",
        "#prod-LineTerminator",
        "#prod-ContinueStatement",
        "#prod-LineTerminator",
        "#prod-LabelIdentifier",
        "#prod-BreakStatement",
        "#prod-LineTerminator",
        "#prod-LabelIdentifier",
        "#prod-ReturnStatement",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-ThrowStatement",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-YieldExpression",
        "#prod-LineTerminator",
        "#prod-AssignmentExpression",
        "#prod-LineTerminator",
        "#prod-AssignmentExpression",
        "#prod-ArrowFunction",
        "#prod-ArrowParameters",
        "#prod-LineTerminator",
        "#prod-ConciseBody",
        "#prod-AsyncFunctionDeclaration",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-LineTerminator",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionExpression",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncMethod",
        "#prod-LineTerminator",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-LineTerminator",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorExpression",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorMethod",
        "#prod-LineTerminator",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncArrowFunction",
        "#prod-LineTerminator",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-LineTerminator",
        "#prod-AsyncConciseBody",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-LineTerminator",
        "#prod-AsyncConciseBody",
        "#prod-AsyncArrowHead",
        "#prod-LineTerminator",
        "#prod-ArrowFormalParameters",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-IdentifierName",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-AssignmentExpression",
        "#prod-LabelIdentifier",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#prod-CallExpression",
        "#prod-ArrayLiteral",
        "#prod-ArrayAssignmentPattern",
        "#sec-tagged-templates",
        "#prod-MemberExpression",
        "#prod-MultiplicativeOperator",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-LineTerminator",
        "#prod-UpdateExpression",
        "#prod-ContinueStatement",
        "#prod-BreakStatement",
        "#prod-ReturnStatement",
        "#prod-YieldExpression",
        "#sec-async-function-definitions",
        "#sec-function-definitions",
        "#prod-IdentifierReference",
        "#prod-Identifier",
        "#prod-BindingIdentifier",
        "#prod-Identifier",
        "#prod-LabelIdentifier",
        "#prod-Identifier",
        "#prod-Identifier",
        "#prod-IdentifierName",
        "#prod-ReservedWord",
        "#prod-BindingIdentifier",
        "#sec-static-semantic-rules",
        "#prod-BindingIdentifier",
        "#prod-Identifier",
        "#sec-strict-mode-code",
        "#sec-static-semantics-stringvalue",
        "#prod-Identifier",
        "#prod-IdentifierReference",
        "#prod-BindingIdentifier",
        "#prod-LabelIdentifier",
        "#sec-strict-mode-code",
        "#prod-IdentifierReference",
        "#prod-BindingIdentifier",
        "#prod-LabelIdentifier",
        "#sec-context-free-grammars",
        "#prod-Module",
        "#prod-BindingIdentifier",
        "#prod-BindingIdentifier",
        "#prod-IdentifierReference",
        "#prod-Identifier",
        "#prod-BindingIdentifier",
        "#prod-Identifier",
        "#prod-LabelIdentifier",
        "#prod-Identifier",
        "#sec-static-semantics-stringvalue",
        "#prod-Identifier",
        "#sec-static-semantics-stringvalue",
        "#prod-Identifier",
        "#prod-Identifier",
        "#prod-IdentifierName",
        "#prod-ReservedWord",
        "#sec-strict-mode-code",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierName",
        "#sec-context-free-grammars",
        "#prod-Module",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierName",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierName",
        "#sec-static-semantics-stringvalue",
        "#prod-ReservedWord",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierName",
        "#prod-IdentifierName",
        "#prod-Identifier",
        "#prod-ReservedWord",
        "#prod-IdentifierName",
        "#prod-IdentifierStart",
        "#prod-IdentifierName",
        "#prod-IdentifierPart",
        "#sec-identifiercodepoints",
        "#prod-IdentifierName",
        "#sec-codepointstostring",
        "#prod-IdentifierReference",
        "#prod-BindingIdentifier",
        "#prod-LabelIdentifier",
        "#prod-IdentifierReference",
        "#prod-BindingIdentifier",
        "#prod-LabelIdentifier",
        "#prod-Identifier",
        "#prod-IdentifierName",
        "#prod-ReservedWord",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierName",
        "#prod-PrivateIdentifier",
        "#prod-IdentifierName",
        "#string-concatenation",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierName",
        "#prod-ModuleExportName",
        "#prod-StringLiteral",
        "#sec-static-semantics-sv",
        "#prod-StringLiteral",
        "#prod-IdentifierReference",
        "#prod-Identifier",
        "#sec-resolvebinding",
        "#sec-static-semantics-stringvalue",
        "#prod-Identifier",
        "#prod-IdentifierReference",
        "#sec-resolvebinding",
        "#prod-IdentifierReference",
        "#sec-resolvebinding",
        "#prod-IdentifierReference",
        "#non-strict-code",
        "#sec-keywords-and-reserved-words",
        "#prod-IdentifierReference",
        "#prod-Identifier",
        "#non-strict-code",
        "#prod-PrimaryExpression",
        "#prod-IdentifierReference",
        "#prod-Literal",
        "#prod-ArrayLiteral",
        "#prod-ObjectLiteral",
        "#prod-FunctionExpression",
        "#prod-ClassExpression",
        "#prod-GeneratorExpression",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-RegularExpressionLiteral",
        "#prod-TemplateLiteral",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-BindingIdentifier",
        "#prod-BindingPattern",
        "#prod-Expression",
        "#prod-BindingIdentifier",
        "#prod-Expression",
        "#prod-BindingPattern",
        "#prod-PrimaryExpression",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ParenthesizedExpression",
        "#prod-Expression",
        "#prod-PrimaryExpression",
        "#sec-resolvethisbinding",
        "#sec-identifiers",
        "#prod-IdentifierReference",
        "#prod-Literal",
        "#prod-NullLiteral",
        "#prod-BooleanLiteral",
        "#prod-NumericLiteral",
        "#prod-StringLiteral",
        "#prod-Literal",
        "#prod-NullLiteral",
        "#prod-Literal",
        "#prod-BooleanLiteral",
        "#prod-BooleanLiteral",
        "#prod-BooleanLiteral",
        "#prod-Literal",
        "#prod-NumericLiteral",
        "#sec-numericvalue",
        "#prod-NumericLiteral",
        "#sec-literals-numeric-literals",
        "#prod-Literal",
        "#prod-StringLiteral",
        "#sec-static-semantics-sv",
        "#prod-StringLiteral",
        "#sec-static-semantics-sv",
        "#prod-ArrayLiteral",
        "#prod-AssignmentExpression",
        "#prod-ArrayLiteral",
        "#prod-Elision",
        "#prod-ElementList",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-AssignmentExpression",
        "#prod-Elision",
        "#prod-SpreadElement",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-AssignmentExpression",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-SpreadElement",
        "#prod-Elision",
        "#prod-Elision",
        "#prod-SpreadElement",
        "#prod-AssignmentExpression",
        "#integer",
        "#sec-completion-record-specification-type",
        "#integer",
        "#sec-completion-record-specification-type",
        "#prod-Elision",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#prod-Elision",
        "#prod-Elision",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-Elision",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-AssignmentExpression",
        "#prod-Elision",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-Elision",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-SpreadElement",
        "#prod-Elision",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-Elision",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-SpreadElement",
        "#prod-ElementList",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-ElementList",
        "#prod-Elision",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-Elision",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#prod-ElementList",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-SpreadElement",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-ElementList",
        "#prod-Elision",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-Elision",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-SpreadElement",
        "#prod-SpreadElement",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-getiterator",
        "#sec-iteratorstep",
        "#sec-iteratorvalue",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-createdatapropertyorthrow",
        "#sec-properties-of-the-array-prototype-object",
        "#prod-ArrayLiteral",
        "#prod-Elision",
        "#sec-arraycreate",
        "#prod-Elision",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-Elision",
        "#prod-ArrayLiteral",
        "#prod-ElementList",
        "#sec-arraycreate",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-ElementList",
        "#prod-ArrayLiteral",
        "#prod-ElementList",
        "#prod-Elision",
        "#sec-arraycreate",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-ElementList",
        "#prod-Elision",
        "#sec-runtime-semantics-arrayaccumulation",
        "#prod-Elision",
        "#sec-object-type",
        "#prod-ObjectLiteral",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinition",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinition",
        "#prod-PropertyDefinition",
        "#prod-IdentifierReference",
        "#prod-CoverInitializedName",
        "#prod-PropertyName",
        "#prod-AssignmentExpression",
        "#prod-MethodDefinition",
        "#prod-AssignmentExpression",
        "#prod-PropertyName",
        "#prod-LiteralPropertyName",
        "#prod-ComputedPropertyName",
        "#prod-LiteralPropertyName",
        "#prod-IdentifierName",
        "#prod-StringLiteral",
        "#prod-NumericLiteral",
        "#prod-ComputedPropertyName",
        "#prod-AssignmentExpression",
        "#prod-CoverInitializedName",
        "#prod-IdentifierReference",
        "#prod-Initializer",
        "#prod-Initializer",
        "#prod-AssignmentExpression",
        "#prod-MethodDefinition",
        "#sec-method-definitions",
        "#prod-ObjectLiteral",
        "#prod-CoverInitializedName",
        "#prod-ObjectLiteral",
        "#prod-PropertyDefinition",
        "#prod-MethodDefinition",
        "#sec-static-semantics-hasdirectsuper",
        "#prod-MethodDefinition",
        "#sec-static-semantics-privateboundidentifiers",
        "#prod-MethodDefinition",
        "#prod-ObjectLiteral",
        "#prod-ObjectAssignmentPattern",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ObjectLiteral",
        "#prod-ObjectAssignmentPattern",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-PropertyDefinition",
        "#prod-CoverInitializedName",
        "#prod-ObjectLiteral",
        "#prod-ObjectAssignmentPattern",
        "#prod-ObjectLiteral",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinitionList",
        "#sec-static-semantics-propertynamelist",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinition",
        "#prod-PropertyName",
        "#prod-AssignmentExpression",
        "#prod-ObjectLiteral",
        "#prod-Script",
        "#step-json-parse-parse",
        "#sec-json.parse",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-propertynamelist",
        "#prod-ComputedPropertyName",
        "#prod-PropertyName",
        "#prod-LiteralPropertyName",
        "#prod-PropertyName",
        "#prod-ComputedPropertyName",
        "#sec-list-and-record-specification-type",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinition",
        "#sec-static-semantics-propname",
        "#prod-PropertyDefinition",
        "#sec-list-and-record-specification-type",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinition",
        "#sec-static-semantics-propertynamelist",
        "#prod-PropertyDefinitionList",
        "#sec-static-semantics-propname",
        "#prod-PropertyDefinition",
        "#list-concatenation",
        "#prod-ObjectLiteral",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#prod-ObjectLiteral",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinitionList",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-runtime-semantics-propertydefinitionevaluation",
        "#prod-PropertyDefinitionList",
        "#prod-LiteralPropertyName",
        "#prod-IdentifierName",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierName",
        "#prod-LiteralPropertyName",
        "#prod-StringLiteral",
        "#sec-static-semantics-sv",
        "#prod-StringLiteral",
        "#prod-LiteralPropertyName",
        "#prod-NumericLiteral",
        "#sec-numericvalue",
        "#prod-NumericLiteral",
        "#sec-tostring",
        "#prod-ComputedPropertyName",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-topropertykey",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinition",
        "#sec-runtime-semantics-propertydefinitionevaluation",
        "#prod-PropertyDefinitionList",
        "#sec-runtime-semantics-propertydefinitionevaluation",
        "#prod-PropertyDefinition",
        "#prod-PropertyDefinition",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-list-and-record-specification-type",
        "#sec-copydataproperties",
        "#prod-PropertyDefinition",
        "#prod-IdentifierReference",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierReference",
        "#prod-IdentifierReference",
        "#sec-getvalue",
        "#assert",
        "#sec-createdatapropertyorthrow",
        "#prod-PropertyDefinition",
        "#prod-PropertyName",
        "#prod-AssignmentExpression",
        "#prod-PropertyName",
        "#sec-returnifabrupt",
        "#prod-PropertyDefinition",
        "#prod-Script",
        "#step-json-parse-eval",
        "#sec-json.parse",
        "#sec-static-semantics-iscomputedpropertykey",
        "#prod-PropertyName",
        "#sec-isanonymousfunctiondefinition",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-createdatapropertyorthrow",
        "#prod-PropertyDefinition",
        "#prod-MethodDefinition",
        "#sec-runtime-semantics-methoddefinitionevaluation",
        "#prod-MethodDefinition",
        "#sec-function-definitions",
        "#prod-PrimaryExpression",
        "#prod-FunctionExpression",
        "#sec-generator-function-definitions",
        "#prod-PrimaryExpression",
        "#prod-GeneratorExpression",
        "#sec-class-definitions",
        "#prod-PrimaryExpression",
        "#prod-ClassExpression",
        "#sec-async-function-definitions",
        "#prod-PrimaryExpression",
        "#prod-AsyncFunctionExpression",
        "#sec-async-generator-function-definitions",
        "#prod-PrimaryExpression",
        "#prod-AsyncGeneratorExpression",
        "#sec-literals-regular-expression-literals",
        "#prod-PrimaryExpression",
        "#prod-RegularExpressionLiteral",
        "#sec-isvalidregularexpressionliteral",
        "#prod-RegularExpressionLiteral",
        "#prod-RegularExpressionLiteral",
        "#sec-syntactic-grammar",
        "#sec-static-semantics-flagtext",
        "#sec-static-semantics-bodytext",
        "#sec-static-semantics-flagtext",
        "#sec-codepointstostring",
        "#sec-parsepattern",
        "#sec-syntactic-grammar",
        "#prod-PrimaryExpression",
        "#prod-RegularExpressionLiteral",
        "#sec-codepointstostring",
        "#sec-static-semantics-bodytext",
        "#prod-RegularExpressionLiteral",
        "#sec-codepointstostring",
        "#sec-static-semantics-flagtext",
        "#prod-RegularExpressionLiteral",
        "#sec-regexpcreate",
        "#prod-TemplateLiteral",
        "#prod-NoSubstitutionTemplate",
        "#prod-SubstitutionTemplate",
        "#prod-SubstitutionTemplate",
        "#prod-TemplateHead",
        "#prod-Expression",
        "#prod-TemplateSpans",
        "#prod-TemplateSpans",
        "#prod-TemplateTail",
        "#prod-TemplateMiddleList",
        "#prod-TemplateTail",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#prod-TemplateLiteral",
        "#prod-NoSubstitutionTemplate",
        "#prod-NoSubstitutionTemplate",
        "#sec-static-semantics-contains",
        "#prod-NotEscapeSequence",
        "#prod-TemplateLiteral",
        "#prod-SubstitutionTemplate",
        "#sec-static-semantics-templatestrings",
        "#prod-TemplateLiteral",
        "#prod-SubstitutionTemplate",
        "#prod-TemplateHead",
        "#prod-Expression",
        "#prod-TemplateSpans",
        "#prod-TemplateHead",
        "#sec-static-semantics-contains",
        "#prod-NotEscapeSequence",
        "#prod-TemplateSpans",
        "#prod-TemplateTail",
        "#prod-TemplateTail",
        "#sec-static-semantics-contains",
        "#prod-NotEscapeSequence",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#prod-TemplateMiddle",
        "#sec-static-semantics-contains",
        "#prod-NotEscapeSequence",
        "#sec-list-and-record-specification-type",
        "#prod-TemplateLiteral",
        "#prod-NoSubstitutionTemplate",
        "#sec-static-semantics-tv",
        "#prod-NoSubstitutionTemplate",
        "#sec-static-semantics-trv",
        "#prod-NoSubstitutionTemplate",
        "#prod-SubstitutionTemplate",
        "#prod-TemplateHead",
        "#prod-Expression",
        "#prod-TemplateSpans",
        "#sec-static-semantics-tv",
        "#prod-TemplateHead",
        "#sec-static-semantics-trv",
        "#prod-TemplateHead",
        "#sec-static-semantics-templatestrings",
        "#prod-TemplateSpans",
        "#list-concatenation",
        "#prod-TemplateSpans",
        "#prod-TemplateTail",
        "#sec-static-semantics-tv",
        "#prod-TemplateTail",
        "#sec-static-semantics-trv",
        "#prod-TemplateTail",
        "#prod-TemplateSpans",
        "#prod-TemplateMiddleList",
        "#prod-TemplateTail",
        "#sec-static-semantics-templatestrings",
        "#prod-TemplateMiddleList",
        "#sec-static-semantics-tv",
        "#prod-TemplateTail",
        "#sec-static-semantics-trv",
        "#prod-TemplateTail",
        "#list-concatenation",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#sec-static-semantics-tv",
        "#prod-TemplateMiddle",
        "#sec-static-semantics-trv",
        "#prod-TemplateMiddle",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#sec-static-semantics-templatestrings",
        "#prod-TemplateMiddleList",
        "#sec-static-semantics-tv",
        "#prod-TemplateMiddle",
        "#sec-static-semantics-trv",
        "#prod-TemplateMiddle",
        "#list-concatenation",
        "#sec-syntactic-grammar",
        "#current-realm",
        "#sec-syntactic-grammar",
        "#sec-static-semantics-templatestrings",
        "#sec-static-semantics-templatestrings",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#sec-arraycreate",
        "#sec-arraycreate",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-definepropertyorthrow",
        "#sec-definepropertyorthrow",
        "#sec-setintegritylevel",
        "#sec-definepropertyorthrow",
        "#sec-setintegritylevel",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-TemplateLiteral",
        "#realm",
        "#sec-template-literals-runtime-semantics-evaluation",
        "#prod-TemplateLiteral",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-TemplateSpans",
        "#prod-TemplateTail",
        "#sec-list-and-record-specification-type",
        "#prod-TemplateSpans",
        "#prod-TemplateMiddleList",
        "#prod-TemplateTail",
        "#sec-runtime-semantics-substitutionevaluation",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#prod-Expression",
        "#sec-getvalue",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#sec-runtime-semantics-substitutionevaluation",
        "#prod-TemplateMiddleList",
        "#prod-Expression",
        "#sec-getvalue",
        "#list-concatenation",
        "#prod-TemplateLiteral",
        "#prod-NoSubstitutionTemplate",
        "#sec-static-semantics-tv",
        "#prod-NoSubstitutionTemplate",
        "#sec-template-literal-lexical-components",
        "#prod-SubstitutionTemplate",
        "#prod-TemplateHead",
        "#prod-Expression",
        "#prod-TemplateSpans",
        "#sec-static-semantics-tv",
        "#prod-TemplateHead",
        "#sec-template-literal-lexical-components",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-tostring",
        "#prod-TemplateSpans",
        "#sec-returnifabrupt",
        "#string-concatenation",
        "#prod-Expression",
        "#prod-TemplateSpans",
        "#prod-TemplateTail",
        "#sec-static-semantics-tv",
        "#prod-TemplateTail",
        "#sec-template-literal-lexical-components",
        "#prod-TemplateSpans",
        "#prod-TemplateMiddleList",
        "#prod-TemplateTail",
        "#prod-TemplateMiddleList",
        "#sec-returnifabrupt",
        "#sec-static-semantics-tv",
        "#prod-TemplateTail",
        "#sec-template-literal-lexical-components",
        "#string-concatenation",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#sec-static-semantics-tv",
        "#prod-TemplateMiddle",
        "#sec-template-literal-lexical-components",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-tostring",
        "#string-concatenation",
        "#prod-Expression",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#prod-TemplateMiddleList",
        "#sec-returnifabrupt",
        "#sec-static-semantics-tv",
        "#prod-TemplateMiddle",
        "#sec-template-literal-lexical-components",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-tostring",
        "#string-concatenation",
        "#prod-Expression",
        "#prod-PrimaryExpression",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#must-cover",
        "#prod-ParenthesizedExpression",
        "#prod-PrimaryExpression",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ParenthesizedExpression",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ParenthesizedExpression",
        "#prod-Expression",
        "#prod-Expression",
        "#sec-getvalue",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-PrimaryExpression",
        "#prod-MemberExpression",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#prod-TemplateLiteral",
        "#prod-SuperProperty",
        "#prod-MetaProperty",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-MemberExpression",
        "#prod-PrivateIdentifier",
        "#prod-SuperProperty",
        "#prod-Expression",
        "#prod-IdentifierName",
        "#prod-MetaProperty",
        "#prod-NewTarget",
        "#prod-ImportMeta",
        "#prod-NewTarget",
        "#prod-ImportMeta",
        "#prod-NewExpression",
        "#prod-MemberExpression",
        "#prod-NewExpression",
        "#prod-CallExpression",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-SuperCall",
        "#prod-ImportCall",
        "#prod-CallExpression",
        "#prod-Arguments",
        "#prod-CallExpression",
        "#prod-Expression",
        "#prod-CallExpression",
        "#prod-IdentifierName",
        "#prod-CallExpression",
        "#prod-TemplateLiteral",
        "#prod-CallExpression",
        "#prod-PrivateIdentifier",
        "#prod-SuperCall",
        "#prod-Arguments",
        "#prod-ImportCall",
        "#prod-AssignmentExpression",
        "#prod-Arguments",
        "#prod-ArgumentList",
        "#prod-ArgumentList",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-OptionalExpression",
        "#prod-MemberExpression",
        "#prod-OptionalChain",
        "#prod-CallExpression",
        "#prod-OptionalChain",
        "#prod-OptionalExpression",
        "#prod-OptionalChain",
        "#prod-OptionalChain",
        "#prod-Arguments",
        "#prod-Expression",
        "#prod-IdentifierName",
        "#prod-TemplateLiteral",
        "#prod-PrivateIdentifier",
        "#prod-OptionalChain",
        "#prod-Arguments",
        "#prod-OptionalChain",
        "#prod-Expression",
        "#prod-OptionalChain",
        "#prod-IdentifierName",
        "#prod-OptionalChain",
        "#prod-TemplateLiteral",
        "#prod-OptionalChain",
        "#prod-PrivateIdentifier",
        "#prod-LeftHandSideExpression",
        "#prod-NewExpression",
        "#prod-CallExpression",
        "#prod-OptionalExpression",
        "#prod-CallExpression",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-CallMemberExpression",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-OptionalChain",
        "#prod-TemplateLiteral",
        "#prod-OptionalChain",
        "#prod-TemplateLiteral",
        "#sec-automatic-semicolon-insertion",
        "#prod-ImportMeta",
        "#sec-context-free-grammars",
        "#prod-Module",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-CallExpression",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#prod-Expression",
        "#prod-CallExpression",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#prod-CallExpression",
        "#prod-IdentifierName",
        "#prod-CallExpression",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#sec-getvalue",
        "#prod-MemberExpression",
        "#sec-strict-mode-code",
        "#sec-evaluate-property-access-with-expression-key",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#sec-getvalue",
        "#prod-MemberExpression",
        "#sec-strict-mode-code",
        "#sec-evaluate-property-access-with-identifier-key",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-PrivateIdentifier",
        "#prod-MemberExpression",
        "#sec-getvalue",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#sec-makeprivatereference",
        "#prod-CallExpression",
        "#prod-CallExpression",
        "#prod-Expression",
        "#prod-CallExpression",
        "#sec-getvalue",
        "#prod-CallExpression",
        "#sec-strict-mode-code",
        "#sec-evaluate-property-access-with-expression-key",
        "#prod-Expression",
        "#prod-CallExpression",
        "#prod-CallExpression",
        "#prod-IdentifierName",
        "#prod-CallExpression",
        "#sec-getvalue",
        "#prod-CallExpression",
        "#sec-strict-mode-code",
        "#sec-evaluate-property-access-with-identifier-key",
        "#prod-IdentifierName",
        "#prod-CallExpression",
        "#prod-CallExpression",
        "#prod-PrivateIdentifier",
        "#prod-CallExpression",
        "#sec-getvalue",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#sec-makeprivatereference",
        "#sec-ecmascript-language-types",
        "#sec-syntactic-grammar",
        "#sec-completion-record-specification-type",
        "#sec-reference-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-getvalue",
        "#sec-topropertykey",
        "#sec-reference-record-specification-type",
        "#sec-ecmascript-language-types",
        "#prod-IdentifierName",
        "#sec-syntactic-grammar",
        "#sec-reference-record-specification-type",
        "#sec-static-semantics-stringvalue",
        "#sec-reference-record-specification-type",
        "#prod-NewExpression",
        "#prod-NewExpression",
        "#sec-evaluatenew",
        "#prod-NewExpression",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#sec-evaluatenew",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-NewExpression",
        "#sec-syntactic-grammar",
        "#prod-MemberExpression",
        "#sec-syntactic-grammar",
        "#prod-Arguments",
        "#sec-syntactic-grammar",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-getvalue",
        "#sec-list-and-record-specification-type",
        "#sec-runtime-semantics-argumentlistevaluation",
        "#sec-isconstructor",
        "#sec-construct",
        "#prod-CallExpression",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-CallMemberExpression",
        "#sec-syntactic-grammar",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#sec-getvalue",
        "#sec-reference-record-specification-type",
        "#sec-ispropertyreference",
        "#sec-samevalue",
        "#sec-eval-x",
        "#sec-runtime-semantics-argumentlistevaluation",
        "#prod-CallExpression",
        "#sec-strict-mode-code",
        "#current-realm",
        "#sec-performeval",
        "#prod-CallExpression",
        "#sec-isintailposition",
        "#sec-evaluatecall",
        "#prod-CallExpression",
        "#step-callexpression-evaluation-direct-eval",
        "#prod-CallExpression",
        "#prod-CallExpression",
        "#prod-Arguments",
        "#prod-CallExpression",
        "#sec-getvalue",
        "#prod-CallExpression",
        "#sec-isintailposition",
        "#sec-evaluatecall",
        "#prod-Arguments",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-reference-record-specification-type",
        "#sec-syntactic-grammar",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-reference-record-specification-type",
        "#sec-ispropertyreference",
        "#sec-getthisvalue",
        "#assert",
        "#sec-environment-records",
        "#sec-runtime-semantics-argumentlistevaluation",
        "#sec-ecmascript-data-types-and-values",
        "#sec-iscallable",
        "#sec-preparefortailcall",
        "#sec-call",
        "#prod-SuperProperty",
        "#prod-Expression",
        "#sec-getthisenvironment",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-topropertykey",
        "#prod-SuperProperty",
        "#sec-strict-mode-code",
        "#sec-makesuperpropertyreference",
        "#prod-SuperProperty",
        "#prod-IdentifierName",
        "#sec-getthisenvironment",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierName",
        "#prod-SuperProperty",
        "#sec-strict-mode-code",
        "#sec-makesuperpropertyreference",
        "#prod-SuperCall",
        "#prod-Arguments",
        "#sec-getnewtarget",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getsuperconstructor",
        "#sec-runtime-semantics-argumentlistevaluation",
        "#prod-Arguments",
        "#sec-isconstructor",
        "#sec-construct",
        "#sec-getthisenvironment",
        "#assert",
        "#function-object",
        "#sec-initializeinstanceelements",
        "#sec-ecmascript-language-types",
        "#sec-getthisenvironment",
        "#assert",
        "#sec-function-environment-records",
        "#assert",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#super-reference-record",
        "#sec-completion-record-specification-type",
        "#sec-getthisenvironment",
        "#assert",
        "#sec-reference-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-Arguments",
        "#sec-list-and-record-specification-type",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#sec-list-and-record-specification-type",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-getiterator",
        "#sec-iteratorstep",
        "#sec-iteratorvalue",
        "#prod-ArgumentList",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-argumentlistevaluation",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#list-concatenation",
        "#prod-ArgumentList",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-argumentlistevaluation",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#sec-getiterator",
        "#sec-getvalue",
        "#sec-iteratorstep",
        "#sec-iteratorvalue",
        "#prod-TemplateLiteral",
        "#prod-NoSubstitutionTemplate",
        "#prod-TemplateLiteral",
        "#sec-gettemplateobject",
        "#prod-TemplateLiteral",
        "#prod-SubstitutionTemplate",
        "#prod-TemplateLiteral",
        "#sec-gettemplateobject",
        "#sec-runtime-semantics-argumentlistevaluation",
        "#prod-SubstitutionTemplate",
        "#list-concatenation",
        "#prod-SubstitutionTemplate",
        "#prod-TemplateHead",
        "#prod-Expression",
        "#prod-TemplateSpans",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-runtime-semantics-substitutionevaluation",
        "#prod-TemplateSpans",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#list-concatenation",
        "#prod-OptionalExpression",
        "#prod-MemberExpression",
        "#prod-OptionalChain",
        "#prod-MemberExpression",
        "#sec-getvalue",
        "#sec-optional-chaining-chain-evaluation",
        "#prod-OptionalChain",
        "#prod-OptionalExpression",
        "#prod-CallExpression",
        "#prod-OptionalChain",
        "#prod-CallExpression",
        "#sec-getvalue",
        "#sec-optional-chaining-chain-evaluation",
        "#prod-OptionalChain",
        "#prod-OptionalExpression",
        "#prod-OptionalExpression",
        "#prod-OptionalChain",
        "#prod-OptionalExpression",
        "#sec-getvalue",
        "#sec-optional-chaining-chain-evaluation",
        "#prod-OptionalChain",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-OptionalChain",
        "#prod-Arguments",
        "#prod-OptionalChain",
        "#sec-isintailposition",
        "#sec-evaluatecall",
        "#prod-Arguments",
        "#prod-OptionalChain",
        "#prod-Expression",
        "#prod-OptionalChain",
        "#sec-strict-mode-code",
        "#sec-evaluate-property-access-with-expression-key",
        "#prod-Expression",
        "#prod-OptionalChain",
        "#prod-IdentifierName",
        "#prod-OptionalChain",
        "#sec-strict-mode-code",
        "#sec-evaluate-property-access-with-identifier-key",
        "#prod-IdentifierName",
        "#prod-OptionalChain",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#sec-makeprivatereference",
        "#prod-OptionalChain",
        "#prod-OptionalChain",
        "#prod-Arguments",
        "#prod-OptionalChain",
        "#sec-optional-chaining-chain-evaluation",
        "#sec-getvalue",
        "#prod-OptionalChain",
        "#sec-isintailposition",
        "#sec-evaluatecall",
        "#prod-Arguments",
        "#prod-OptionalChain",
        "#prod-OptionalChain",
        "#prod-Expression",
        "#prod-OptionalChain",
        "#sec-optional-chaining-chain-evaluation",
        "#sec-getvalue",
        "#prod-OptionalChain",
        "#sec-strict-mode-code",
        "#sec-evaluate-property-access-with-expression-key",
        "#prod-Expression",
        "#prod-OptionalChain",
        "#prod-OptionalChain",
        "#prod-IdentifierName",
        "#prod-OptionalChain",
        "#sec-optional-chaining-chain-evaluation",
        "#sec-getvalue",
        "#prod-OptionalChain",
        "#sec-strict-mode-code",
        "#sec-evaluate-property-access-with-identifier-key",
        "#prod-IdentifierName",
        "#prod-OptionalChain",
        "#prod-OptionalChain",
        "#prod-PrivateIdentifier",
        "#prod-OptionalChain",
        "#sec-optional-chaining-chain-evaluation",
        "#sec-getvalue",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#sec-makeprivatereference",
        "#prod-ImportCall",
        "#prod-AssignmentExpression",
        "#sec-getactivescriptormodule",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-completion-ao",
        "#sec-tostring",
        "#sec-ifabruptrejectpromise",
        "#sec-hostimportmoduledynamically",
        "#prod-TemplateLiteral",
        "#sec-template-literals",
        "#sec-gettemplateobject",
        "#prod-TemplateLiteral",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-TemplateLiteral",
        "#prod-MemberExpression",
        "#sec-getvalue",
        "#prod-MemberExpression",
        "#sec-isintailposition",
        "#sec-evaluatecall",
        "#prod-TemplateLiteral",
        "#prod-CallExpression",
        "#prod-CallExpression",
        "#prod-TemplateLiteral",
        "#prod-CallExpression",
        "#sec-getvalue",
        "#prod-CallExpression",
        "#sec-isintailposition",
        "#sec-evaluatecall",
        "#prod-TemplateLiteral",
        "#prod-NewTarget",
        "#sec-getnewtarget",
        "#prod-ImportMeta",
        "#sec-getactivescriptormodule",
        "#assert",
        "#sourctextmodule-record",
        "#sec-ordinaryobjectcreate",
        "#sec-hostgetimportmetaproperties",
        "#sec-list-and-record-specification-type",
        "#sec-createdatapropertyorthrow",
        "#sec-hostfinalizeimportmeta",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#host-defined",
        "#sec-abstract-module-records",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-ecmascript-language-types",
        "#host",
        "#sec-object-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-ispropertykey",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#host-defined",
        "#sec-abstract-module-records",
        "#host",
        "#host",
        "#sec-hostgetimportmetaproperties",
        "#host",
        "#prod-UpdateExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LineTerminator",
        "#prod-LeftHandSideExpression",
        "#prod-LineTerminator",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UpdateExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LeftHandSideExpression",
        "#sec-static-semantics-assignmenttargettype",
        "#prod-LeftHandSideExpression",
        "#prod-UpdateExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-static-semantics-assignmenttargettype",
        "#prod-UnaryExpression",
        "#prod-UpdateExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LeftHandSideExpression",
        "#sec-tonumeric",
        "#sec-getvalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-add",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-add",
        "#sec-putvalue",
        "#prod-UpdateExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LeftHandSideExpression",
        "#sec-tonumeric",
        "#sec-getvalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-subtract",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-subtract",
        "#sec-putvalue",
        "#prod-UpdateExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-tonumeric",
        "#sec-getvalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-add",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-add",
        "#sec-putvalue",
        "#prod-UpdateExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-tonumeric",
        "#sec-getvalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-subtract",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-subtract",
        "#sec-putvalue",
        "#prod-UnaryExpression",
        "#prod-UpdateExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-AwaitExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-strict-mode-code",
        "#prod-UnaryExpression",
        "#prod-PrimaryExpression",
        "#prod-IdentifierReference",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-PrivateIdentifier",
        "#prod-CallExpression",
        "#prod-CallExpression",
        "#prod-PrivateIdentifier",
        "#prod-OptionalChain",
        "#prod-PrivateIdentifier",
        "#prod-OptionalChain",
        "#prod-OptionalChain",
        "#prod-PrivateIdentifier",
        "#prod-UnaryExpression",
        "#prod-PrimaryExpression",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-UnaryExpression",
        "#early-error",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-returnifabrupt",
        "#sec-reference-record-specification-type",
        "#sec-isunresolvablereference",
        "#assert",
        "#sec-ispropertyreference",
        "#assert",
        "#sec-isprivatereference",
        "#sec-issuperreference",
        "#sec-toobject",
        "#assert",
        "#sec-environment-records",
        "#sec-strict-mode-code",
        "#prod-UnaryExpression",
        "#sec-strict-mode-code",
        "#step-delete-operator-toobject",
        "#ordinary-object",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-getvalue",
        "#sec-getvalue",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-reference-record-specification-type",
        "#sec-isunresolvablereference",
        "#sec-getvalue",
        "#sec-IsHTMLDDA-internal-slot-typeof",
        "#table-typeof-operator-results",
        "#sec-IsHTMLDDA-internal-slot-typeof",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-tonumber",
        "#sec-getvalue",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-tonumeric",
        "#sec-getvalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-unaryMinus",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-unaryMinus",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-tonumeric",
        "#sec-getvalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-bitwiseNOT",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-bitwiseNOT",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-toboolean",
        "#sec-getvalue",
        "#prod-ExponentiationExpression",
        "#prod-UnaryExpression",
        "#prod-UpdateExpression",
        "#prod-ExponentiationExpression",
        "#prod-ExponentiationExpression",
        "#prod-UpdateExpression",
        "#prod-ExponentiationExpression",
        "#sec-evaluatestringornumericbinaryexpression",
        "#prod-UpdateExpression",
        "#prod-ExponentiationExpression",
        "#prod-MultiplicativeExpression",
        "#prod-ExponentiationExpression",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeOperator",
        "#prod-ExponentiationExpression",
        "#prod-MultiplicativeOperator",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeOperator",
        "#prod-ExponentiationExpression",
        "#prod-MultiplicativeOperator",
        "#sec-evaluatestringornumericbinaryexpression",
        "#prod-MultiplicativeExpression",
        "#prod-ExponentiationExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-AdditiveExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#sec-evaluatestringornumericbinaryexpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-AdditiveExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#sec-evaluatestringornumericbinaryexpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#sec-evaluatestringornumericbinaryexpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#sec-evaluatestringornumericbinaryexpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#sec-evaluatestringornumericbinaryexpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-PrivateIdentifier",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#sec-getvalue",
        "#prod-ShiftExpression",
        "#sec-getvalue",
        "#sec-islessthan",
        "#prod-RelationalExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#sec-getvalue",
        "#prod-ShiftExpression",
        "#sec-getvalue",
        "#sec-islessthan",
        "#prod-RelationalExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#sec-getvalue",
        "#prod-ShiftExpression",
        "#sec-getvalue",
        "#sec-islessthan",
        "#prod-RelationalExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#sec-getvalue",
        "#prod-ShiftExpression",
        "#sec-getvalue",
        "#sec-islessthan",
        "#prod-RelationalExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#sec-getvalue",
        "#prod-ShiftExpression",
        "#sec-getvalue",
        "#sec-instanceofoperator",
        "#prod-RelationalExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#sec-getvalue",
        "#prod-ShiftExpression",
        "#sec-getvalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-hasproperty",
        "#sec-topropertykey",
        "#prod-RelationalExpression",
        "#prod-PrivateIdentifier",
        "#prod-ShiftExpression",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#prod-ShiftExpression",
        "#sec-getvalue",
        "#sec-ecmascript-data-types-and-values",
        "#running-execution-context",
        "#sec-resolve-private-identifier",
        "#sec-privateelementfind",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-well-known-symbols",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-toboolean",
        "#sec-call",
        "#sec-iscallable",
        "#sec-ordinaryhasinstance",
        "#step-instanceof-check-function",
        "#step-instanceof-fallback",
        "#sec-well-known-symbols",
        "#sec-well-known-symbols",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#sec-getvalue",
        "#prod-RelationalExpression",
        "#sec-getvalue",
        "#sec-islooselyequal",
        "#prod-EqualityExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#sec-getvalue",
        "#prod-RelationalExpression",
        "#sec-getvalue",
        "#sec-islooselyequal",
        "#prod-EqualityExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#sec-getvalue",
        "#prod-RelationalExpression",
        "#sec-getvalue",
        "#sec-isstrictlyequal",
        "#prod-EqualityExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#sec-getvalue",
        "#prod-RelationalExpression",
        "#sec-getvalue",
        "#sec-isstrictlyequal",
        "#prod-BitwiseANDExpression",
        "#prod-EqualityExpression",
        "#prod-BitwiseANDExpression",
        "#prod-EqualityExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseANDExpression",
        "#prod-EqualityExpression",
        "#sec-evaluatestringornumericbinaryexpression",
        "#prod-BitwiseANDExpression",
        "#prod-EqualityExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseANDExpression",
        "#sec-evaluatestringornumericbinaryexpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseXORExpression",
        "#sec-evaluatestringornumericbinaryexpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-LogicalANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-LogicalANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalANDExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalANDExpression",
        "#prod-CoalesceExpression",
        "#prod-CoalesceExpressionHead",
        "#prod-BitwiseORExpression",
        "#prod-CoalesceExpressionHead",
        "#prod-CoalesceExpression",
        "#prod-BitwiseORExpression",
        "#prod-ShortCircuitExpression",
        "#prod-LogicalORExpression",
        "#prod-CoalesceExpression",
        "#prod-LogicalANDExpression",
        "#prod-LogicalANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-LogicalANDExpression",
        "#sec-getvalue",
        "#sec-toboolean",
        "#prod-BitwiseORExpression",
        "#sec-getvalue",
        "#prod-LogicalORExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalANDExpression",
        "#prod-LogicalORExpression",
        "#sec-getvalue",
        "#sec-toboolean",
        "#prod-LogicalANDExpression",
        "#sec-getvalue",
        "#prod-CoalesceExpression",
        "#prod-CoalesceExpressionHead",
        "#prod-BitwiseORExpression",
        "#prod-CoalesceExpressionHead",
        "#sec-getvalue",
        "#prod-BitwiseORExpression",
        "#sec-getvalue",
        "#prod-ConditionalExpression",
        "#prod-ShortCircuitExpression",
        "#prod-ShortCircuitExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-ConditionalExpression",
        "#prod-Expression",
        "#prod-ConditionalExpression",
        "#prod-ConditionalExpression",
        "#prod-ShortCircuitExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-ShortCircuitExpression",
        "#sec-toboolean",
        "#sec-getvalue",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#prod-AssignmentExpression",
        "#prod-ConditionalExpression",
        "#prod-YieldExpression",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentOperator",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentOperator",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#prod-LeftHandSideExpression",
        "#must-cover",
        "#prod-AssignmentPattern",
        "#prod-LeftHandSideExpression",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#sec-static-semantics-assignmenttargettype",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentOperator",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#sec-static-semantics-assignmenttargettype",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#prod-LeftHandSideExpression",
        "#sec-returnifabrupt",
        "#sec-isanonymousfunctiondefinition",
        "#prod-AssignmentExpression",
        "#sec-static-semantics-isidentifierref",
        "#prod-LeftHandSideExpression",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-putvalue",
        "#prod-AssignmentPattern",
        "#sec-syntactic-grammar",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-runtime-semantics-destructuringassignmentevaluation",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentOperator",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#sec-getvalue",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#prod-AssignmentOperator",
        "#sec-applystringornumericbinaryoperator",
        "#sec-putvalue",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#sec-getvalue",
        "#sec-toboolean",
        "#sec-isanonymousfunctiondefinition",
        "#prod-AssignmentExpression",
        "#sec-static-semantics-isidentifierref",
        "#prod-LeftHandSideExpression",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-putvalue",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#sec-getvalue",
        "#sec-toboolean",
        "#sec-isanonymousfunctiondefinition",
        "#prod-AssignmentExpression",
        "#sec-static-semantics-isidentifierref",
        "#prod-LeftHandSideExpression",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-putvalue",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#sec-getvalue",
        "#sec-isanonymousfunctiondefinition",
        "#prod-AssignmentExpression",
        "#sec-static-semantics-isidentifierref",
        "#prod-LeftHandSideExpression",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-putvalue",
        "#sec-strict-mode-code",
        "#step-assignmentexpression-evaluation-simple-putvalue",
        "#step-assignmentexpression-evaluation-compound-getvalue",
        "#step-assignmentexpression-evaluation-lgcl-and-getvalue",
        "#step-assignmentexpression-evaluation-lgcl-or-getvalue",
        "#step-assignmentexpression-evaluation-lgcl-nullish-getvalue",
        "#step-assignmentexpression-evaluation-compound-putvalue",
        "#step-assignmentexpression-evaluation-lgcl-and-putvalue",
        "#step-assignmentexpression-evaluation-lgcl-or-putvalue",
        "#step-assignmentexpression-evaluation-lgcl-nullish-putvalue",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-isextensible-o",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-toprimitive",
        "#sec-toprimitive",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-tostring",
        "#string-concatenation",
        "#sec-tonumeric",
        "#sec-tonumeric",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-exponentiate",
        "#sec-numeric-types-bigint-divide",
        "#sec-numeric-types-bigint-remainder",
        "#sec-numeric-types-bigint-unsignedRightShift",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-exponentiate",
        "#sec-numeric-types-number-multiply",
        "#sec-numeric-types-bigint-multiply",
        "#sec-numeric-types-number-divide",
        "#sec-numeric-types-number-remainder",
        "#sec-numeric-types-number-add",
        "#sec-numeric-types-bigint-add",
        "#sec-numeric-types-number-subtract",
        "#sec-numeric-types-bigint-subtract",
        "#sec-numeric-types-number-leftShift",
        "#sec-numeric-types-bigint-leftShift",
        "#sec-numeric-types-number-signedRightShift",
        "#sec-numeric-types-bigint-signedRightShift",
        "#sec-numeric-types-number-unsignedRightShift",
        "#sec-numeric-types-number-bitwiseAND",
        "#sec-numeric-types-bigint-bitwiseAND",
        "#sec-numeric-types-number-bitwiseXOR",
        "#sec-numeric-types-bigint-bitwiseXOR",
        "#sec-numeric-types-number-bitwiseOR",
        "#sec-numeric-types-bigint-bitwiseOR",
        "#sec-toprimitive",
        "#step-binary-op-toprimitive-lval",
        "#step-binary-op-toprimitive-rval",
        "#exotic-object",
        "#step-binary-op-string-check",
        "#step-arc-string-check",
        "#sec-islessthan",
        "#sec-syntactic-grammar",
        "#sec-syntactic-grammar",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-getvalue",
        "#sec-getvalue",
        "#sec-applystringornumericbinaryoperator",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentPattern",
        "#prod-ObjectAssignmentPattern",
        "#prod-ArrayAssignmentPattern",
        "#prod-ObjectAssignmentPattern",
        "#prod-AssignmentRestProperty",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentRestProperty",
        "#prod-ArrayAssignmentPattern",
        "#prod-Elision",
        "#prod-AssignmentRestElement",
        "#prod-AssignmentElementList",
        "#prod-AssignmentElementList",
        "#prod-Elision",
        "#prod-AssignmentRestElement",
        "#prod-AssignmentRestProperty",
        "#prod-DestructuringAssignmentTarget",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentProperty",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentProperty",
        "#prod-AssignmentElementList",
        "#prod-AssignmentElisionElement",
        "#prod-AssignmentElementList",
        "#prod-AssignmentElisionElement",
        "#prod-AssignmentElisionElement",
        "#prod-Elision",
        "#prod-AssignmentElement",
        "#prod-AssignmentProperty",
        "#prod-IdentifierReference",
        "#prod-Initializer",
        "#prod-PropertyName",
        "#prod-AssignmentElement",
        "#prod-AssignmentElement",
        "#prod-DestructuringAssignmentTarget",
        "#prod-Initializer",
        "#prod-AssignmentRestElement",
        "#prod-DestructuringAssignmentTarget",
        "#prod-DestructuringAssignmentTarget",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentProperty",
        "#prod-IdentifierReference",
        "#prod-Initializer",
        "#sec-static-semantics-assignmenttargettype",
        "#prod-IdentifierReference",
        "#prod-AssignmentRestProperty",
        "#prod-DestructuringAssignmentTarget",
        "#prod-DestructuringAssignmentTarget",
        "#prod-ArrayLiteral",
        "#prod-ObjectLiteral",
        "#prod-DestructuringAssignmentTarget",
        "#prod-LeftHandSideExpression",
        "#prod-LeftHandSideExpression",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#prod-LeftHandSideExpression",
        "#must-cover",
        "#prod-AssignmentPattern",
        "#prod-LeftHandSideExpression",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#sec-static-semantics-assignmenttargettype",
        "#prod-LeftHandSideExpression",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-ObjectAssignmentPattern",
        "#sec-requireobjectcoercible",
        "#prod-ObjectAssignmentPattern",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentPropertyList",
        "#sec-requireobjectcoercible",
        "#sec-runtime-semantics-propertydestructuringassignmentevaluation",
        "#prod-AssignmentPropertyList",
        "#prod-ObjectAssignmentPattern",
        "#prod-AssignmentRestProperty",
        "#sec-requireobjectcoercible",
        "#sec-list-and-record-specification-type",
        "#sec-runtime-semantics-restdestructuringassignmentevaluation",
        "#prod-AssignmentRestProperty",
        "#prod-ObjectAssignmentPattern",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentRestProperty",
        "#sec-requireobjectcoercible",
        "#sec-runtime-semantics-propertydestructuringassignmentevaluation",
        "#prod-AssignmentPropertyList",
        "#sec-runtime-semantics-restdestructuringassignmentevaluation",
        "#prod-AssignmentRestProperty",
        "#prod-ArrayAssignmentPattern",
        "#sec-getiterator",
        "#sec-iteratorclose",
        "#sec-normalcompletion",
        "#prod-ArrayAssignmentPattern",
        "#prod-Elision",
        "#sec-getiterator",
        "#sec-completion-ao",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-Elision",
        "#sec-iteratorclose",
        "#prod-ArrayAssignmentPattern",
        "#prod-Elision",
        "#prod-AssignmentRestElement",
        "#sec-getiterator",
        "#prod-Elision",
        "#sec-completion-ao",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-Elision",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-completion-ao",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-AssignmentRestElement",
        "#sec-iteratorclose",
        "#prod-ArrayAssignmentPattern",
        "#prod-AssignmentElementList",
        "#sec-getiterator",
        "#sec-completion-ao",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-AssignmentElementList",
        "#sec-iteratorclose",
        "#prod-ArrayAssignmentPattern",
        "#prod-AssignmentElementList",
        "#prod-Elision",
        "#prod-AssignmentRestElement",
        "#sec-getiterator",
        "#sec-completion-ao",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-AssignmentElementList",
        "#sec-completion-record-specification-type",
        "#sec-iteratorclose",
        "#prod-Elision",
        "#sec-completion-ao",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-Elision",
        "#sec-completion-record-specification-type",
        "#assert",
        "#prod-AssignmentRestElement",
        "#sec-completion-ao",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-AssignmentRestElement",
        "#sec-iteratorclose",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-object-type",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentProperty",
        "#sec-runtime-semantics-propertydestructuringassignmentevaluation",
        "#prod-AssignmentPropertyList",
        "#sec-runtime-semantics-propertydestructuringassignmentevaluation",
        "#prod-AssignmentProperty",
        "#list-concatenation",
        "#prod-AssignmentProperty",
        "#prod-IdentifierReference",
        "#prod-Initializer",
        "#sec-static-semantics-stringvalue",
        "#prod-IdentifierReference",
        "#sec-resolvebinding",
        "#sec-getv",
        "#prod-Initializer",
        "#sec-isanonymousfunctiondefinition",
        "#prod-Initializer",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#sec-putvalue",
        "#prod-AssignmentProperty",
        "#prod-PropertyName",
        "#prod-AssignmentElement",
        "#prod-PropertyName",
        "#sec-returnifabrupt",
        "#sec-runtime-semantics-keyeddestructuringassignmentevaluation",
        "#prod-AssignmentElement",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-AssignmentRestProperty",
        "#prod-DestructuringAssignmentTarget",
        "#prod-DestructuringAssignmentTarget",
        "#sec-returnifabrupt",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-copydataproperties",
        "#sec-putvalue",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-AssignmentElementList",
        "#prod-AssignmentElisionElement",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-AssignmentElisionElement",
        "#prod-AssignmentElementList",
        "#prod-AssignmentElementList",
        "#prod-AssignmentElisionElement",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-AssignmentElementList",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-AssignmentElisionElement",
        "#prod-AssignmentElisionElement",
        "#prod-AssignmentElement",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-AssignmentElement",
        "#prod-AssignmentElisionElement",
        "#prod-Elision",
        "#prod-AssignmentElement",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-Elision",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-AssignmentElement",
        "#prod-Elision",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#prod-Elision",
        "#prod-Elision",
        "#sec-runtime-semantics-iteratordestructuringassignmentevaluation",
        "#prod-Elision",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#prod-AssignmentElement",
        "#prod-DestructuringAssignmentTarget",
        "#prod-Initializer",
        "#prod-DestructuringAssignmentTarget",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#prod-DestructuringAssignmentTarget",
        "#sec-returnifabrupt",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#prod-Initializer",
        "#sec-isanonymousfunctiondefinition",
        "#prod-Initializer",
        "#sec-static-semantics-isidentifierref",
        "#prod-DestructuringAssignmentTarget",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#prod-DestructuringAssignmentTarget",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#prod-AssignmentPattern",
        "#sec-syntactic-grammar",
        "#prod-DestructuringAssignmentTarget",
        "#sec-runtime-semantics-destructuringassignmentevaluation",
        "#sec-putvalue",
        "#prod-DestructuringAssignmentTarget",
        "#prod-Initializer",
        "#prod-AssignmentRestElement",
        "#prod-DestructuringAssignmentTarget",
        "#prod-DestructuringAssignmentTarget",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#prod-DestructuringAssignmentTarget",
        "#sec-returnifabrupt",
        "#sec-arraycreate",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#prod-DestructuringAssignmentTarget",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#sec-putvalue",
        "#prod-AssignmentPattern",
        "#sec-syntactic-grammar",
        "#prod-DestructuringAssignmentTarget",
        "#sec-runtime-semantics-destructuringassignmentevaluation",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-AssignmentElement",
        "#prod-DestructuringAssignmentTarget",
        "#prod-Initializer",
        "#prod-DestructuringAssignmentTarget",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#prod-DestructuringAssignmentTarget",
        "#sec-returnifabrupt",
        "#sec-getv",
        "#prod-Initializer",
        "#sec-isanonymousfunctiondefinition",
        "#prod-Initializer",
        "#sec-static-semantics-isidentifierref",
        "#prod-DestructuringAssignmentTarget",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#prod-DestructuringAssignmentTarget",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#prod-AssignmentPattern",
        "#sec-syntactic-grammar",
        "#prod-DestructuringAssignmentTarget",
        "#sec-runtime-semantics-destructuringassignmentevaluation",
        "#sec-putvalue",
        "#prod-Expression",
        "#prod-AssignmentExpression",
        "#prod-Expression",
        "#prod-AssignmentExpression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-AssignmentExpression",
        "#prod-Expression",
        "#sec-getvalue",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-getvalue",
        "#prod-Statement",
        "#prod-BlockStatement",
        "#prod-VariableStatement",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-IfStatement",
        "#prod-BreakableStatement",
        "#prod-ContinueStatement",
        "#prod-BreakStatement",
        "#prod-ReturnStatement",
        "#prod-WithStatement",
        "#prod-LabelledStatement",
        "#prod-ThrowStatement",
        "#prod-TryStatement",
        "#prod-DebuggerStatement",
        "#prod-Declaration",
        "#prod-HoistableDeclaration",
        "#prod-ClassDeclaration",
        "#prod-LexicalDeclaration",
        "#prod-HoistableDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-BreakableStatement",
        "#prod-IterationStatement",
        "#prod-SwitchStatement",
        "#prod-HoistableDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-HoistableDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-BreakableStatement",
        "#prod-IterationStatement",
        "#prod-SwitchStatement",
        "#sec-list-and-record-specification-type",
        "#sec-runtime-semantics-labelledevaluation",
        "#prod-BreakableStatement",
        "#prod-BlockStatement",
        "#prod-Block",
        "#prod-Block",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#prod-StatementListItem",
        "#prod-Statement",
        "#prod-Declaration",
        "#prod-Block",
        "#prod-StatementList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-StatementList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-StatementList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-StatementList",
        "#prod-Block",
        "#prod-Block",
        "#prod-StatementList",
        "#running-execution-context",
        "#sec-newdeclarativeenvironment",
        "#sec-blockdeclarationinstantiation",
        "#prod-StatementList",
        "#running-execution-context",
        "#prod-StatementList",
        "#running-execution-context",
        "#prod-Block",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#prod-StatementList",
        "#sec-returnifabrupt",
        "#prod-StatementListItem",
        "#sec-updateempty",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-syntactic-grammar",
        "#sec-declarative-environment-records",
        "#sec-syntactic-grammar",
        "#sec-environment-records",
        "#prod-Block",
        "#prod-CaseBlock",
        "#sec-declarative-environment-records",
        "#sec-environment-records",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#running-execution-context",
        "#sec-static-semantics-boundnames",
        "#sec-static-semantics-isconstantdeclaration",
        "#sec-web-compat-blockdeclarationinstantiation",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#sec-static-semantics-boundnames",
        "#sec-runtime-semantics-instantiatefunctionobject",
        "#sec-web-compat-blockdeclarationinstantiation",
        "#running-execution-context",
        "#sec-environment-records",
        "#prod-LexicalBinding",
        "#prod-LexicalBinding",
        "#prod-Initializer",
        "#prod-Initializer",
        "#prod-AssignmentExpression",
        "#prod-LexicalBinding",
        "#prod-LexicalBinding",
        "#prod-Initializer",
        "#prod-LexicalBinding",
        "#prod-LexicalDeclaration",
        "#prod-LetOrConst",
        "#prod-BindingList",
        "#prod-LetOrConst",
        "#prod-BindingList",
        "#prod-LexicalBinding",
        "#prod-BindingList",
        "#prod-LexicalBinding",
        "#prod-LexicalBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-LexicalDeclaration",
        "#prod-LetOrConst",
        "#prod-BindingList",
        "#sec-static-semantics-boundnames",
        "#prod-BindingList",
        "#sec-static-semantics-boundnames",
        "#prod-BindingList",
        "#prod-LexicalBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-static-semantics-isconstantdeclaration",
        "#prod-LexicalDeclaration",
        "#prod-LexicalBinding",
        "#prod-LexicalDeclaration",
        "#prod-LetOrConst",
        "#prod-BindingList",
        "#prod-BindingList",
        "#sec-returnifabrupt",
        "#prod-BindingList",
        "#prod-BindingList",
        "#prod-LexicalBinding",
        "#prod-BindingList",
        "#sec-returnifabrupt",
        "#prod-LexicalBinding",
        "#prod-LexicalBinding",
        "#prod-BindingIdentifier",
        "#sec-completion-ao",
        "#sec-resolvebinding",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-initializereferencedbinding",
        "#sec-static-semantic-rules",
        "#prod-LexicalBinding",
        "#prod-LexicalBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-completion-ao",
        "#sec-resolvebinding",
        "#sec-isanonymousfunctiondefinition",
        "#prod-Initializer",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#sec-initializereferencedbinding",
        "#prod-LexicalBinding",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#running-execution-context",
        "#sec-runtime-semantics-bindinginitialization",
        "#prod-BindingPattern",
        "#running-execution-context",
        "#sec-environment-records",
        "#prod-BindingIdentifier",
        "#prod-VariableDeclaration",
        "#prod-VariableDeclaration",
        "#prod-Initializer",
        "#prod-Initializer",
        "#prod-AssignmentExpression",
        "#prod-VariableDeclaration",
        "#prod-VariableStatement",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclaration",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclaration",
        "#prod-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-VariableStatement",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclarationList",
        "#sec-returnifabrupt",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclaration",
        "#prod-VariableDeclarationList",
        "#sec-returnifabrupt",
        "#prod-VariableDeclaration",
        "#prod-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-resolvebinding",
        "#sec-isanonymousfunctiondefinition",
        "#prod-Initializer",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#sec-putvalue",
        "#prod-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-VariableDeclaration",
        "#property-name",
        "#sec-object-environment-records",
        "#step-vardecllist-evaluation-putvalue",
        "#prod-Identifier",
        "#prod-VariableDeclaration",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#sec-runtime-semantics-bindinginitialization",
        "#prod-BindingPattern",
        "#prod-BindingPattern",
        "#prod-ObjectBindingPattern",
        "#prod-ArrayBindingPattern",
        "#prod-ObjectBindingPattern",
        "#prod-BindingRestProperty",
        "#prod-BindingPropertyList",
        "#prod-BindingPropertyList",
        "#prod-BindingRestProperty",
        "#prod-ArrayBindingPattern",
        "#prod-Elision",
        "#prod-BindingRestElement",
        "#prod-BindingElementList",
        "#prod-BindingElementList",
        "#prod-Elision",
        "#prod-BindingRestElement",
        "#prod-BindingRestProperty",
        "#prod-BindingIdentifier",
        "#prod-BindingPropertyList",
        "#prod-BindingProperty",
        "#prod-BindingPropertyList",
        "#prod-BindingProperty",
        "#prod-BindingElementList",
        "#prod-BindingElisionElement",
        "#prod-BindingElementList",
        "#prod-BindingElisionElement",
        "#prod-BindingElisionElement",
        "#prod-Elision",
        "#prod-BindingElement",
        "#prod-BindingProperty",
        "#prod-SingleNameBinding",
        "#prod-PropertyName",
        "#prod-BindingElement",
        "#prod-BindingElement",
        "#prod-SingleNameBinding",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-BindingRestElement",
        "#prod-BindingIdentifier",
        "#prod-BindingPattern",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#prod-BindingPropertyList",
        "#prod-BindingPropertyList",
        "#prod-BindingProperty",
        "#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization",
        "#prod-BindingPropertyList",
        "#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization",
        "#prod-BindingProperty",
        "#list-concatenation",
        "#prod-BindingProperty",
        "#prod-SingleNameBinding",
        "#sec-static-semantics-boundnames",
        "#prod-SingleNameBinding",
        "#sec-runtime-semantics-keyedbindinginitialization",
        "#prod-SingleNameBinding",
        "#prod-BindingProperty",
        "#prod-PropertyName",
        "#prod-BindingElement",
        "#prod-PropertyName",
        "#sec-returnifabrupt",
        "#sec-runtime-semantics-keyedbindinginitialization",
        "#prod-BindingElement",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-BindingRestProperty",
        "#prod-BindingIdentifier",
        "#sec-resolvebinding",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-copydataproperties",
        "#sec-putvalue",
        "#sec-initializereferencedbinding",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-putvalue",
        "#non-strict-function",
        "#prod-BindingElement",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#sec-getv",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#sec-runtime-semantics-bindinginitialization",
        "#prod-BindingPattern",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-resolvebinding",
        "#sec-getv",
        "#prod-Initializer",
        "#sec-isanonymousfunctiondefinition",
        "#prod-Initializer",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#sec-putvalue",
        "#sec-initializereferencedbinding",
        "#prod-EmptyStatement",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-ExpressionStatement",
        "#prod-Block",
        "#prod-ExpressionStatement",
        "#sec-keywords-and-reserved-words",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-ClassDeclaration",
        "#prod-ExpressionStatement",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-ExpressionStatement",
        "#prod-LexicalDeclaration",
        "#prod-LexicalBinding",
        "#prod-ArrayBindingPattern",
        "#prod-ExpressionStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#sec-getvalue",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Statement",
        "#sec-islabelledfunction",
        "#prod-Statement",
        "#sec-islabelledfunction",
        "#prod-Statement",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-islabelledfunction",
        "#prod-Statement",
        "#sec-labelled-function-declarations",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-Expression",
        "#sec-toboolean",
        "#sec-getvalue",
        "#prod-Statement",
        "#prod-Statement",
        "#sec-updateempty",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Expression",
        "#sec-toboolean",
        "#sec-getvalue",
        "#prod-Statement",
        "#sec-updateempty",
        "#prod-IterationStatement",
        "#prod-DoWhileStatement",
        "#prod-WhileStatement",
        "#prod-ForStatement",
        "#prod-ForInOfStatement",
        "#prod-Statement",
        "#prod-IterationStatement",
        "#prod-ContinueStatement",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-IterationStatement",
        "#prod-DoWhileStatement",
        "#sec-runtime-semantics-dowhileloopevaluation",
        "#prod-DoWhileStatement",
        "#prod-IterationStatement",
        "#prod-WhileStatement",
        "#sec-runtime-semantics-whileloopevaluation",
        "#prod-WhileStatement",
        "#prod-IterationStatement",
        "#prod-ForStatement",
        "#sec-runtime-semantics-forloopevaluation",
        "#prod-ForStatement",
        "#prod-IterationStatement",
        "#prod-ForInOfStatement",
        "#sec-runtime-semantics-forinofloopevaluation",
        "#prod-ForInOfStatement",
        "#prod-DoWhileStatement",
        "#prod-Statement",
        "#prod-Expression",
        "#prod-DoWhileStatement",
        "#prod-Statement",
        "#prod-Expression",
        "#sec-islabelledfunction",
        "#prod-Statement",
        "#sec-labelled-function-declarations",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-DoWhileStatement",
        "#prod-Statement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-loopcontinues",
        "#sec-updateempty",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-toboolean",
        "#prod-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-islabelledfunction",
        "#prod-Statement",
        "#sec-labelled-function-declarations",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-toboolean",
        "#prod-Statement",
        "#sec-loopcontinues",
        "#sec-updateempty",
        "#prod-ForStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-VariableDeclarationList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-VariableDeclarationList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-islabelledfunction",
        "#prod-Statement",
        "#sec-labelled-function-declarations",
        "#prod-ForStatement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-boundnames",
        "#prod-LexicalDeclaration",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-ForStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Expression",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-forbodyevaluation",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-VariableDeclarationList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-VariableDeclarationList",
        "#sec-returnifabrupt",
        "#sec-forbodyevaluation",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#running-execution-context",
        "#sec-newdeclarativeenvironment",
        "#sec-static-semantics-isconstantdeclaration",
        "#prod-LexicalDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-LexicalDeclaration",
        "#running-execution-context",
        "#prod-LexicalDeclaration",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#sec-list-and-record-specification-type",
        "#sec-completion-ao",
        "#sec-forbodyevaluation",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-createperiterationenvironment",
        "#sec-getvalue",
        "#sec-toboolean",
        "#sec-loopcontinues",
        "#sec-updateempty",
        "#sec-createperiterationenvironment",
        "#sec-getvalue",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#assert",
        "#sec-newdeclarativeenvironment",
        "#running-execution-context",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-LetOrConst",
        "#prod-ForBinding",
        "#prod-ForBinding",
        "#prod-BindingIdentifier",
        "#prod-BindingPattern",
        "#sec-initializers-in-forin-statement-heads",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-islabelledfunction",
        "#prod-Statement",
        "#sec-labelled-function-declarations",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#prod-LeftHandSideExpression",
        "#must-cover",
        "#prod-AssignmentPattern",
        "#prod-LeftHandSideExpression",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#sec-static-semantics-assignmenttargettype",
        "#prod-LeftHandSideExpression",
        "#prod-ForInOfStatement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-static-semantics-boundnames",
        "#prod-ForDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-ForDeclaration",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#sec-static-semantics-boundnames",
        "#prod-ForDeclaration",
        "#prod-MemberExpression",
        "#prod-PrimaryExpression",
        "#prod-PrimaryExpression",
        "#prod-ObjectLiteral",
        "#prod-ArrayLiteral",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#prod-TemplateLiteral",
        "#prod-SuperProperty",
        "#prod-MetaProperty",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-MemberExpression",
        "#prod-PrivateIdentifier",
        "#prod-NewExpression",
        "#prod-NewExpression",
        "#prod-LeftHandSideExpression",
        "#prod-CallExpression",
        "#prod-OptionalExpression",
        "#prod-ForDeclaration",
        "#prod-LetOrConst",
        "#prod-ForBinding",
        "#sec-static-semantics-isdestructuring",
        "#prod-ForBinding",
        "#prod-ForBinding",
        "#prod-BindingIdentifier",
        "#prod-ForBinding",
        "#prod-BindingPattern",
        "#sec-initializers-in-forin-statement-heads",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-putvalue",
        "#non-strict-function",
        "#sec-functiondeclarationinstantiation",
        "#prod-ForDeclaration",
        "#prod-LetOrConst",
        "#prod-ForBinding",
        "#sec-runtime-semantics-bindinginitialization",
        "#prod-ForBinding",
        "#prod-ForDeclaration",
        "#prod-LetOrConst",
        "#prod-ForBinding",
        "#assert",
        "#sec-declarative-environment-records",
        "#sec-static-semantics-boundnames",
        "#prod-ForBinding",
        "#sec-static-semantics-isconstantdeclaration",
        "#prod-LetOrConst",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#prod-Expression",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#prod-LeftHandSideExpression",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-ForBinding",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#prod-Expression",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#prod-ForBinding",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#sec-static-semantics-boundnames",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#prod-ForDeclaration",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#prod-LeftHandSideExpression",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#prod-ForBinding",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#sec-static-semantics-boundnames",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#prod-ForDeclaration",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#prod-LeftHandSideExpression",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#prod-ForBinding",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#sec-static-semantics-boundnames",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#prod-ForDeclaration",
        "#prod-Statement",
        "#sec-initializers-in-forin-statement-heads",
        "#sec-completion-record-specification-type",
        "#sec-iterator-records",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#sec-newdeclarativeenvironment",
        "#running-execution-context",
        "#running-execution-context",
        "#sec-getvalue",
        "#sec-completion-record-specification-type",
        "#sec-toobject",
        "#sec-enumerate-object-properties",
        "#sec-getv",
        "#sec-iterator-records",
        "#assert",
        "#sec-getiterator",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#sec-static-semantics-isdestructuring",
        "#assert",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentPattern",
        "#sec-syntactic-grammar",
        "#sec-call",
        "#await",
        "#sec-ecmascript-data-types-and-values",
        "#sec-iteratorcomplete",
        "#sec-iteratorvalue",
        "#assert",
        "#assert",
        "#prod-ForDeclaration",
        "#sec-newdeclarativeenvironment",
        "#sec-runtime-semantics-fordeclarationbindinginstantiation",
        "#running-execution-context",
        "#assert",
        "#sec-static-semantics-boundnames",
        "#sec-resolvebinding",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-initializereferencedbinding",
        "#sec-completion-ao",
        "#sec-putvalue",
        "#sec-completion-ao",
        "#sec-runtime-semantics-destructuringassignmentevaluation",
        "#assert",
        "#prod-ForBinding",
        "#sec-completion-ao",
        "#sec-runtime-semantics-bindinginitialization",
        "#assert",
        "#assert",
        "#prod-ForDeclaration",
        "#sec-completion-ao",
        "#sec-runtime-semantics-fordeclarationbindinginitialization",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#sec-asynciteratorclose",
        "#assert",
        "#sec-iteratorclose",
        "#running-execution-context",
        "#sec-loopcontinues",
        "#sec-updateempty",
        "#assert",
        "#sec-completion-ao",
        "#sec-updateempty",
        "#sec-asynciteratorclose",
        "#sec-iteratorclose",
        "#prod-BindingIdentifier",
        "#prod-Identifier",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-resolvebinding",
        "#sec-iterator-interface",
        "#sec-object-type",
        "#sec-object-type",
        "#property-name",
        "#sec-object-type",
        "#proxy-exotic-object",
        "#integer-indexed-exotic-object",
        "#module-namespace-exotic-object",
        "#exotic-object",
        "#sec-createforiniterator",
        "#sec-%foriniteratorprototype%.next",
        "#exotic-object",
        "#sec-createforiniterator",
        "#sec-enumerate-object-properties",
        "#sec-ordinaryobjectcreate",
        "#sec-%foriniteratorprototype%-object",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#ordinary-object",
        "#sec-%iteratorprototype%-object",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-properties-of-for-in-iterator-instances",
        "#sec-ecmascript-data-types-and-values",
        "#sec-samevalue",
        "#sec-createiterresultobject",
        "#sec-createiterresultobject",
        "#ordinary-object",
        "#sec-%foriniteratorprototype%-object",
        "#table-for-in-iterator-instance-slots",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#prod-ContinueStatement",
        "#prod-LineTerminator",
        "#prod-LabelIdentifier",
        "#prod-ContinueStatement",
        "#prod-LabelIdentifier",
        "#prod-ContinueStatement",
        "#prod-IterationStatement",
        "#prod-ContinueStatement",
        "#sec-completion-record-specification-type",
        "#prod-ContinueStatement",
        "#prod-LabelIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-LabelIdentifier",
        "#sec-completion-record-specification-type",
        "#prod-BreakStatement",
        "#prod-LineTerminator",
        "#prod-LabelIdentifier",
        "#prod-BreakStatement",
        "#prod-BreakStatement",
        "#prod-IterationStatement",
        "#prod-SwitchStatement",
        "#prod-BreakStatement",
        "#sec-completion-record-specification-type",
        "#prod-BreakStatement",
        "#prod-LabelIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-LabelIdentifier",
        "#sec-completion-record-specification-type",
        "#prod-ReturnStatement",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-ReturnStatement",
        "#sec-completion-record-specification-type",
        "#prod-ReturnStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-getgeneratorkind",
        "#await",
        "#sec-completion-record-specification-type",
        "#sec-conformance",
        "#sec-conformance",
        "#sec-strict-mode-code",
        "#non-strict-code",
        "#sec-destructuring-assignment",
        "#prod-WithStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-object-environment-records",
        "#running-execution-context",
        "#prod-WithStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-strict-mode-code",
        "#sec-islabelledfunction",
        "#prod-Statement",
        "#sec-labelled-function-declarations",
        "#prod-WithStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Expression",
        "#sec-toobject",
        "#sec-getvalue",
        "#running-execution-context",
        "#sec-newobjectenvironment",
        "#running-execution-context",
        "#prod-Statement",
        "#running-execution-context",
        "#sec-updateempty",
        "#prod-Statement",
        "#sec-completion-record-specification-type",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-CaseBlock",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-CaseBlock",
        "#sec-static-semantics-vardeclarednames",
        "#prod-CaseBlock",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#prod-CaseClause",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#sec-runtime-semantics-caseclauseisselected",
        "#sec-completion-record-specification-type",
        "#sec-updateempty",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#prod-CaseClause",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#prod-CaseClause",
        "#sec-runtime-semantics-caseclauseisselected",
        "#sec-completion-record-specification-type",
        "#sec-updateempty",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#prod-CaseClause",
        "#prod-CaseClauses",
        "#sec-list-and-record-specification-type",
        "#prod-CaseClause",
        "#sec-runtime-semantics-caseclauseisselected",
        "#prod-CaseClause",
        "#sec-completion-record-specification-type",
        "#sec-updateempty",
        "#prod-DefaultClause",
        "#sec-completion-record-specification-type",
        "#sec-updateempty",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#prod-CaseClause",
        "#sec-completion-record-specification-type",
        "#sec-updateempty",
        "#prod-CaseClause",
        "#sec-syntactic-grammar",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-isstrictlyequal",
        "#prod-StatementList",
        "#prod-CaseBlock",
        "#prod-StatementList",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#prod-Expression",
        "#sec-getvalue",
        "#running-execution-context",
        "#sec-newdeclarativeenvironment",
        "#sec-blockdeclarationinstantiation",
        "#prod-CaseBlock",
        "#running-execution-context",
        "#sec-completion-ao",
        "#sec-runtime-semantics-caseblockevaluation",
        "#prod-CaseBlock",
        "#running-execution-context",
        "#prod-SwitchStatement",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-DefaultClause",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-Statement",
        "#prod-FunctionDeclaration",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-LabelledStatement",
        "#prod-LabelledStatement",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#sec-labelled-function-declarations",
        "#prod-LabelledStatement",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#prod-Statement",
        "#sec-islabelledfunction",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-runtime-semantics-labelledevaluation",
        "#prod-LabelledStatement",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-BreakableStatement",
        "#prod-IterationStatement",
        "#sec-completion-ao",
        "#sec-runtime-semantics-loopevaluation",
        "#prod-IterationStatement",
        "#sec-normalcompletion",
        "#sec-normalcompletion",
        "#prod-BreakableStatement",
        "#prod-SwitchStatement",
        "#prod-SwitchStatement",
        "#sec-normalcompletion",
        "#sec-normalcompletion",
        "#prod-BreakableStatement",
        "#prod-BreakStatement",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-stringvalue",
        "#prod-LabelIdentifier",
        "#list-concatenation",
        "#sec-completion-ao",
        "#sec-runtime-semantics-labelledevaluation",
        "#prod-LabelledItem",
        "#sec-samevalue",
        "#sec-normalcompletion",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-Statement",
        "#prod-BlockStatement",
        "#prod-VariableStatement",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-IfStatement",
        "#prod-ContinueStatement",
        "#prod-BreakStatement",
        "#prod-ReturnStatement",
        "#prod-WithStatement",
        "#prod-ThrowStatement",
        "#prod-TryStatement",
        "#prod-DebuggerStatement",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-BreakableStatement",
        "#prod-LabelledStatement",
        "#prod-ThrowStatement",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-ThrowStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#sec-getvalue",
        "#sec-throwcompletion",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Block",
        "#prod-Finally",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Finally",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#prod-Block",
        "#prod-Finally",
        "#prod-Block",
        "#prod-CatchParameter",
        "#prod-BindingIdentifier",
        "#prod-BindingPattern",
        "#prod-CatchParameter",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#sec-static-semantics-boundnames",
        "#prod-CatchParameter",
        "#sec-static-semantics-boundnames",
        "#prod-CatchParameter",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-Block",
        "#sec-static-semantics-boundnames",
        "#prod-CatchParameter",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Block",
        "#sec-static-semantic-rules",
        "#sec-variablestatements-in-catch-blocks",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#running-execution-context",
        "#sec-newdeclarativeenvironment",
        "#sec-static-semantics-boundnames",
        "#prod-CatchParameter",
        "#running-execution-context",
        "#sec-completion-ao",
        "#sec-runtime-semantics-bindinginitialization",
        "#prod-CatchParameter",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#prod-Block",
        "#running-execution-context",
        "#prod-Catch",
        "#prod-Block",
        "#prod-Block",
        "#prod-Block",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Block",
        "#sec-completion-ao",
        "#sec-runtime-semantics-catchclauseevaluation",
        "#prod-Catch",
        "#sec-updateempty",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Finally",
        "#prod-Block",
        "#prod-Finally",
        "#sec-updateempty",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Finally",
        "#prod-Block",
        "#sec-completion-ao",
        "#sec-runtime-semantics-catchclauseevaluation",
        "#prod-Catch",
        "#prod-Finally",
        "#sec-updateempty",
        "#prod-DebuggerStatement",
        "#prod-DebuggerStatement",
        "#prod-DebuggerStatement",
        "#implementation-defined",
        "#implementation-defined",
        "#implementation-defined",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#sec-ecmascript-function-objects",
        "#sec-ecmascript-function-objects-call-thisargument-argumentslist",
        "#prod-UniqueFormalParameters",
        "#prod-FormalParameters",
        "#prod-FormalParameters",
        "#prod-FunctionRestParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FunctionRestParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#prod-FunctionRestParameter",
        "#prod-BindingRestElement",
        "#prod-FormalParameter",
        "#prod-BindingElement",
        "#prod-UniqueFormalParameters",
        "#prod-FormalParameters",
        "#sec-static-semantics-boundnames",
        "#prod-FormalParameters",
        "#prod-FormalParameters",
        "#prod-FormalParameterList",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-FormalParameterList",
        "#sec-static-semantics-boundnames",
        "#prod-FormalParameterList",
        "#prod-BindingIdentifier",
        "#prod-FormalParameterList",
        "#sec-strict-mode-code",
        "#prod-ObjectBindingPattern",
        "#prod-BindingRestProperty",
        "#prod-ObjectBindingPattern",
        "#prod-BindingPropertyList",
        "#prod-BindingRestProperty",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingPropertyList",
        "#prod-ArrayBindingPattern",
        "#prod-Elision",
        "#prod-ArrayBindingPattern",
        "#prod-Elision",
        "#prod-BindingRestElement",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingRestElement",
        "#prod-ArrayBindingPattern",
        "#prod-BindingElementList",
        "#prod-Elision",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingElementList",
        "#prod-ArrayBindingPattern",
        "#prod-BindingElementList",
        "#prod-Elision",
        "#prod-BindingRestElement",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingElementList",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingRestElement",
        "#prod-BindingPropertyList",
        "#prod-BindingPropertyList",
        "#prod-BindingProperty",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingPropertyList",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingProperty",
        "#prod-BindingElementList",
        "#prod-BindingElementList",
        "#prod-BindingElisionElement",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingElementList",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingElisionElement",
        "#prod-BindingElisionElement",
        "#prod-Elision",
        "#prod-BindingElement",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingElement",
        "#prod-BindingProperty",
        "#prod-PropertyName",
        "#prod-BindingElement",
        "#sec-static-semantics-iscomputedpropertykey",
        "#prod-PropertyName",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingElement",
        "#prod-BindingElement",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-BindingRestElement",
        "#prod-BindingIdentifier",
        "#prod-BindingRestElement",
        "#prod-BindingPattern",
        "#sec-static-semantics-containsexpression",
        "#prod-BindingPattern",
        "#prod-FormalParameters",
        "#prod-FormalParameters",
        "#prod-FormalParameterList",
        "#prod-FunctionRestParameter",
        "#sec-static-semantics-containsexpression",
        "#prod-FormalParameterList",
        "#sec-static-semantics-containsexpression",
        "#prod-FunctionRestParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#sec-static-semantics-containsexpression",
        "#prod-FormalParameterList",
        "#sec-static-semantics-containsexpression",
        "#prod-FormalParameter",
        "#prod-ArrowParameters",
        "#prod-BindingIdentifier",
        "#prod-ArrowParameters",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ArrowFormalParameters",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-static-semantics-containsexpression",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-BindingIdentifier",
        "#prod-BindingElement",
        "#prod-BindingPattern",
        "#prod-BindingElement",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-FormalParameters",
        "#prod-FormalParameters",
        "#prod-FunctionRestParameter",
        "#prod-FormalParameters",
        "#prod-FormalParameterList",
        "#prod-FunctionRestParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-FormalParameterList",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-FormalParameter",
        "#prod-FormalParameter",
        "#prod-BindingElement",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-BindingElement",
        "#prod-ArrowParameters",
        "#prod-BindingIdentifier",
        "#prod-ArrowParameters",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ArrowFormalParameters",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-BindingIdentifier",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-AsyncArrowHead",
        "#sec-syntactic-grammar",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-BindingElement",
        "#prod-BindingPattern",
        "#prod-BindingElement",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#sec-static-semantics-hasinitializer",
        "#prod-FormalParameterList",
        "#sec-static-semantics-hasinitializer",
        "#prod-FormalParameter",
        "#integer",
        "#prod-FormalParameters",
        "#prod-FunctionRestParameter",
        "#prod-FormalParameters",
        "#prod-FormalParameterList",
        "#prod-FunctionRestParameter",
        "#sec-static-semantics-expectedargumentcount",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FormalParameters",
        "#prod-FormalParameter",
        "#prod-FormalParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#sec-static-semantics-hasinitializer",
        "#prod-FormalParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#sec-static-semantics-expectedargumentcount",
        "#prod-FormalParameterList",
        "#sec-static-semantics-hasinitializer",
        "#prod-FormalParameterList",
        "#sec-static-semantics-hasinitializer",
        "#prod-FormalParameter",
        "#prod-ArrowParameters",
        "#prod-BindingIdentifier",
        "#prod-ArrowParameters",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ArrowFormalParameters",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-static-semantics-expectedargumentcount",
        "#prod-PropertySetParameterList",
        "#prod-FormalParameter",
        "#sec-static-semantics-hasinitializer",
        "#prod-FormalParameter",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-BindingIdentifier",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FunctionBody",
        "#prod-FunctionStatementList",
        "#prod-FunctionStatementList",
        "#prod-StatementList",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#sec-strict-mode-code",
        "#prod-UniqueFormalParameters",
        "#prod-FormalParameters",
        "#prod-BindingIdentifier",
        "#prod-BindingIdentifier",
        "#sec-strict-mode-code",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-FunctionBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-FormalParameters",
        "#sec-static-semantics-boundnames",
        "#prod-FormalParameters",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperProperty",
        "#prod-FunctionBody",
        "#sec-static-semantics-contains",
        "#prod-SuperProperty",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-FunctionBody",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-FunctionBody",
        "#prod-FunctionBody",
        "#prod-FunctionStatementList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-FunctionStatementList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-FunctionStatementList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-FunctionStatementList",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-FunctionStatementList",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-FunctionStatementList",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-FunctionStatementList",
        "#prod-FunctionBody",
        "#prod-FunctionStatementList",
        "#directive-prologue",
        "#prod-FunctionBody",
        "#use-strict-directive",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-FunctionBody",
        "#prod-FunctionStatementList",
        "#sec-functiondeclarationinstantiation",
        "#prod-FunctionStatementList",
        "#function-object",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#prod-FunctionDeclaration",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-function-prototype-object",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#sec-setfunctionname",
        "#sec-makeconstructor",
        "#prod-FunctionDeclaration",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FunctionDeclaration",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-function-prototype-object",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#sec-setfunctionname",
        "#sec-makeconstructor",
        "#prod-FunctionDeclaration",
        "#sec-strict-mode-code",
        "#function-object",
        "#prod-FunctionExpression",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-FunctionExpression",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-function-prototype-object",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#sec-setfunctionname",
        "#sec-makeconstructor",
        "#prod-FunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#assert",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#running-execution-context",
        "#sec-newdeclarativeenvironment",
        "#running-execution-context",
        "#prod-FunctionExpression",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-function-prototype-object",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#sec-setfunctionname",
        "#sec-makeconstructor",
        "#prod-BindingIdentifier",
        "#prod-FunctionExpression",
        "#prod-FunctionExpression",
        "#prod-FunctionBody",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FunctionExpression",
        "#prod-FunctionExpression",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#sec-block-level-function-declarations-web-legacy-compatibility-semantics",
        "#prod-FunctionDeclaration",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#sec-runtime-semantics-instantiateordinaryfunctionexpression",
        "#prod-FunctionExpression",
        "#prod-FunctionDeclaration",
        "#prod-FunctionExpression",
        "#constructor",
        "#prod-FunctionStatementList",
        "#prod-ArrowFunction",
        "#prod-ArrowParameters",
        "#prod-LineTerminator",
        "#prod-ConciseBody",
        "#prod-ArrowParameters",
        "#prod-BindingIdentifier",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ConciseBody",
        "#prod-ExpressionBody",
        "#prod-FunctionBody",
        "#prod-ExpressionBody",
        "#prod-AssignmentExpression",
        "#prod-ArrowParameters",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ArrowFormalParameters",
        "#prod-UniqueFormalParameters",
        "#prod-ArrowFunction",
        "#prod-ArrowParameters",
        "#prod-ConciseBody",
        "#prod-ArrowParameters",
        "#sec-static-semantics-contains",
        "#prod-YieldExpression",
        "#prod-ArrowParameters",
        "#sec-static-semantics-contains",
        "#prod-AwaitExpression",
        "#sec-static-semantics-concisebodycontainsusestrict",
        "#prod-ConciseBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-ArrowParameters",
        "#sec-static-semantics-boundnames",
        "#prod-ArrowParameters",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-ConciseBody",
        "#prod-ArrowParameters",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#must-cover",
        "#prod-ArrowFormalParameters",
        "#prod-ConciseBody",
        "#prod-ExpressionBody",
        "#prod-ConciseBody",
        "#prod-FunctionBody",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-FunctionBody",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-ConciseBody",
        "#prod-ExpressionBody",
        "#sec-functiondeclarationinstantiation",
        "#prod-ExpressionBody",
        "#function-object",
        "#prod-ArrowFunction",
        "#prod-ArrowParameters",
        "#prod-ConciseBody",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-ArrowFunction",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-function-prototype-object",
        "#prod-ArrowParameters",
        "#prod-ConciseBody",
        "#sec-setfunctionname",
        "#prod-ArrowFunction",
        "#prod-ArrowFunction",
        "#prod-ArrowFunction",
        "#function-object",
        "#step-arrowfunction-evaluation-functioncreate",
        "#sec-makemethod",
        "#prod-ArrowFunction",
        "#prod-ArrowFunction",
        "#function-object",
        "#prod-ArrowFunction",
        "#prod-ArrowFunction",
        "#prod-ArrowParameters",
        "#prod-ConciseBody",
        "#sec-runtime-semantics-instantiatearrowfunctionexpression",
        "#prod-ArrowFunction",
        "#prod-ExpressionBody",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-completion-record-specification-type",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#prod-GeneratorMethod",
        "#prod-AsyncMethod",
        "#prod-AsyncGeneratorMethod",
        "#prod-ClassElementName",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#prod-PropertySetParameterList",
        "#prod-FormalParameter",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-FunctionBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-boundnames",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-FunctionBody",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#sec-static-semantics-boundnames",
        "#prod-PropertySetParameterList",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-FunctionBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-PropertySetParameterList",
        "#sec-static-semantics-boundnames",
        "#prod-PropertySetParameterList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-FunctionBody",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-FunctionBody",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-FunctionBody",
        "#prod-FunctionBody",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#prod-PropertySetParameterList",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-FunctionBody",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-GeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-GeneratorBody",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-GeneratorBody",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-AsyncGeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-AsyncMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#prod-MethodDefinition",
        "#prod-GeneratorMethod",
        "#prod-AsyncMethod",
        "#prod-AsyncGeneratorMethod",
        "#prod-ClassElementName",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#sec-returnifabrupt",
        "#running-execution-context",
        "#running-execution-context",
        "#sec-properties-of-the-function-prototype-object",
        "#prod-MethodDefinition",
        "#sec-ordinaryfunctioncreate",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#sec-makemethod",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-privateelement-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#sec-runtime-semantics-definemethod",
        "#prod-MethodDefinition",
        "#sec-setfunctionname",
        "#sec-definemethodproperty",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#sec-returnifabrupt",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-MethodDefinition",
        "#prod-FormalParameters",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-function-prototype-object",
        "#prod-FunctionBody",
        "#sec-makemethod",
        "#sec-setfunctionname",
        "#sec-private-names",
        "#sec-privateelement-specification-type",
        "#sec-definepropertyorthrow",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#sec-returnifabrupt",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-MethodDefinition",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-function-prototype-object",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#sec-makemethod",
        "#sec-setfunctionname",
        "#sec-private-names",
        "#sec-privateelement-specification-type",
        "#sec-definepropertyorthrow",
        "#prod-GeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-GeneratorBody",
        "#prod-ClassElementName",
        "#sec-returnifabrupt",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-GeneratorMethod",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-generatorfunction-prototype-object",
        "#prod-UniqueFormalParameters",
        "#prod-GeneratorBody",
        "#sec-makemethod",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-generator-prototype",
        "#sec-definepropertyorthrow",
        "#sec-definemethodproperty",
        "#prod-AsyncGeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-ClassElementName",
        "#sec-returnifabrupt",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-AsyncGeneratorMethod",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-asyncgeneratorfunction-prototype",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-makemethod",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-asyncgenerator-prototype",
        "#sec-definepropertyorthrow",
        "#sec-definemethodproperty",
        "#prod-AsyncMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-ClassElementName",
        "#sec-returnifabrupt",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-AsyncMethod",
        "#sec-ordinaryfunctioncreate",
        "#sec-async-function-prototype-properties",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-makemethod",
        "#sec-setfunctionname",
        "#sec-definemethodproperty",
        "#prod-GeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorBody",
        "#prod-FunctionBody",
        "#prod-YieldExpression",
        "#prod-LineTerminator",
        "#prod-AssignmentExpression",
        "#prod-LineTerminator",
        "#prod-AssignmentExpression",
        "#prod-InputElementRegExpOrTemplateTail",
        "#prod-YieldExpression",
        "#prod-FormalParameters",
        "#prod-FormalParameters",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-generator-abstract-operations",
        "#prod-GeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-GeneratorBody",
        "#sec-static-semantics-hasdirectsuper",
        "#prod-GeneratorMethod",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-contains",
        "#prod-YieldExpression",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-GeneratorBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-boundnames",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-GeneratorBody",
        "#prod-GeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-FormalParameters",
        "#sec-strict-mode-code",
        "#prod-UniqueFormalParameters",
        "#prod-FormalParameters",
        "#prod-BindingIdentifier",
        "#prod-BindingIdentifier",
        "#sec-strict-mode-code",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-GeneratorBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-FormalParameters",
        "#sec-static-semantics-boundnames",
        "#prod-FormalParameters",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-GeneratorBody",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-YieldExpression",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperProperty",
        "#prod-GeneratorBody",
        "#sec-static-semantics-contains",
        "#prod-SuperProperty",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-GeneratorBody",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-GeneratorBody",
        "#prod-FunctionBody",
        "#sec-functiondeclarationinstantiation",
        "#sec-ordinarycreatefromconstructor",
        "#sec-generatorstart",
        "#prod-FunctionBody",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#prod-GeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#prod-GeneratorDeclaration",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-generatorfunction-prototype-object",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-generator-prototype",
        "#sec-definepropertyorthrow",
        "#prod-GeneratorDeclaration",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorDeclaration",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-generatorfunction-prototype-object",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-generator-prototype",
        "#sec-definepropertyorthrow",
        "#prod-GeneratorDeclaration",
        "#sec-strict-mode-code",
        "#function-object",
        "#prod-GeneratorExpression",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-GeneratorExpression",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-generatorfunction-prototype-object",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-generator-prototype",
        "#sec-definepropertyorthrow",
        "#prod-GeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#assert",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#running-execution-context",
        "#sec-newdeclarativeenvironment",
        "#running-execution-context",
        "#prod-GeneratorExpression",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-generatorfunction-prototype-object",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-generator-prototype",
        "#sec-definepropertyorthrow",
        "#prod-BindingIdentifier",
        "#prod-GeneratorExpression",
        "#prod-GeneratorExpression",
        "#prod-FunctionBody",
        "#prod-GeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-GeneratorExpression",
        "#prod-GeneratorExpression",
        "#prod-GeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#sec-runtime-semantics-instantiategeneratorfunctionexpression",
        "#prod-GeneratorExpression",
        "#prod-YieldExpression",
        "#sec-yield",
        "#prod-YieldExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-yield",
        "#prod-YieldExpression",
        "#prod-AssignmentExpression",
        "#sec-getgeneratorkind",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#sec-getiterator",
        "#sec-normalcompletion",
        "#sec-call",
        "#await",
        "#sec-ecmascript-data-types-and-values",
        "#sec-iteratorcomplete",
        "#sec-iteratorvalue",
        "#sec-completion-ao",
        "#sec-asyncgeneratoryield",
        "#sec-iteratorvalue",
        "#sec-completion-ao",
        "#sec-generatoryield",
        "#sec-getmethod",
        "#sec-call",
        "#await",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-iteratorcomplete",
        "#sec-iteratorvalue",
        "#sec-completion-ao",
        "#sec-asyncgeneratoryield",
        "#sec-iteratorvalue",
        "#sec-completion-ao",
        "#sec-generatoryield",
        "#sec-completion-record-specification-type",
        "#sec-asynciteratorclose",
        "#sec-iteratorclose",
        "#assert",
        "#sec-getmethod",
        "#await",
        "#sec-call",
        "#await",
        "#sec-ecmascript-data-types-and-values",
        "#sec-iteratorcomplete",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-asyncgeneratoryield",
        "#sec-iteratorvalue",
        "#sec-completion-ao",
        "#sec-generatoryield",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-LineTerminator",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorExpression",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorMethod",
        "#prod-LineTerminator",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorBody",
        "#prod-FunctionBody",
        "#prod-YieldExpression",
        "#prod-AwaitExpression",
        "#prod-FormalParameters",
        "#prod-FormalParameters",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-asyncgenerator-abstract-operations",
        "#prod-AsyncGeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-hasdirectsuper",
        "#prod-AsyncGeneratorMethod",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-contains",
        "#prod-YieldExpression",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-contains",
        "#prod-AwaitExpression",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-boundnames",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-FormalParameters",
        "#sec-strict-mode-code",
        "#prod-UniqueFormalParameters",
        "#prod-FormalParameters",
        "#prod-BindingIdentifier",
        "#prod-BindingIdentifier",
        "#sec-strict-mode-code",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-FormalParameters",
        "#sec-static-semantics-boundnames",
        "#prod-FormalParameters",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-AsyncGeneratorBody",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-YieldExpression",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-AwaitExpression",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperProperty",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-contains",
        "#prod-SuperProperty",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-AsyncGeneratorBody",
        "#prod-FunctionBody",
        "#sec-functiondeclarationinstantiation",
        "#sec-ordinarycreatefromconstructor",
        "#sec-asyncgeneratorstart",
        "#prod-FunctionBody",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#prod-AsyncGeneratorDeclaration",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-asyncgeneratorfunction-prototype",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-asyncgenerator-prototype",
        "#sec-definepropertyorthrow",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorDeclaration",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-asyncgeneratorfunction-prototype",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-asyncgenerator-prototype",
        "#sec-definepropertyorthrow",
        "#prod-AsyncGeneratorDeclaration",
        "#function-object",
        "#prod-AsyncGeneratorExpression",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-AsyncGeneratorExpression",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-asyncgeneratorfunction-prototype",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-asyncgenerator-prototype",
        "#sec-definepropertyorthrow",
        "#prod-AsyncGeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#assert",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#running-execution-context",
        "#sec-newdeclarativeenvironment",
        "#running-execution-context",
        "#prod-AsyncGeneratorExpression",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-asyncgeneratorfunction-prototype",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-asyncgenerator-prototype",
        "#sec-definepropertyorthrow",
        "#prod-BindingIdentifier",
        "#prod-AsyncGeneratorExpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-AsyncGeneratorExpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-ClassDeclaration",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#prod-ClassTail",
        "#prod-ClassExpression",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#prod-ClassTail",
        "#prod-ClassHeritage",
        "#prod-ClassBody",
        "#prod-ClassHeritage",
        "#prod-LeftHandSideExpression",
        "#prod-ClassBody",
        "#prod-ClassElementList",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#prod-ClassElement",
        "#prod-MethodDefinition",
        "#prod-MethodDefinition",
        "#prod-FieldDefinition",
        "#prod-FieldDefinition",
        "#prod-ClassStaticBlock",
        "#prod-FieldDefinition",
        "#prod-ClassElementName",
        "#prod-Initializer",
        "#prod-ClassElementName",
        "#prod-PropertyName",
        "#prod-PrivateIdentifier",
        "#prod-ClassStaticBlock",
        "#prod-ClassStaticBlockBody",
        "#prod-ClassStaticBlockBody",
        "#prod-ClassStaticBlockStatementList",
        "#prod-ClassStaticBlockStatementList",
        "#prod-StatementList",
        "#sec-strict-mode-code",
        "#prod-ClassTail",
        "#prod-ClassHeritage",
        "#prod-ClassBody",
        "#prod-ClassHeritage",
        "#sec-static-semantics-constructormethod",
        "#prod-ClassBody",
        "#sec-static-semantics-hasdirectsuper",
        "#prod-ClassBody",
        "#prod-ClassElementList",
        "#sec-static-semantics-prototypepropertynamelist",
        "#prod-ClassElementList",
        "#sec-static-semantics-privateboundidentifiers",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#prod-MethodDefinition",
        "#sec-static-semantics-propname",
        "#prod-MethodDefinition",
        "#sec-static-semantics-hasdirectsuper",
        "#prod-MethodDefinition",
        "#sec-static-semantics-propname",
        "#prod-MethodDefinition",
        "#sec-static-semantics-specialmethod",
        "#prod-MethodDefinition",
        "#prod-ClassElement",
        "#prod-MethodDefinition",
        "#sec-static-semantics-hasdirectsuper",
        "#prod-MethodDefinition",
        "#sec-static-semantics-propname",
        "#prod-MethodDefinition",
        "#prod-ClassElement",
        "#prod-FieldDefinition",
        "#sec-static-semantics-propname",
        "#prod-FieldDefinition",
        "#prod-ClassElement",
        "#prod-FieldDefinition",
        "#sec-static-semantics-propname",
        "#prod-FieldDefinition",
        "#prod-FieldDefinition",
        "#prod-ClassElementName",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-static-semantics-containsarguments",
        "#prod-Initializer",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-ClassElementName",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#prod-ClassStaticBlockBody",
        "#prod-ClassStaticBlockStatementList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-ClassStaticBlockStatementList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-ClassStaticBlockStatementList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-ClassStaticBlockStatementList",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-ClassStaticBlockStatementList",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-ClassStaticBlockStatementList",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-ClassStaticBlockStatementList",
        "#sec-static-semantics-containsarguments",
        "#prod-ClassStaticBlockStatementList",
        "#prod-ClassStaticBlockStatementList",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-ClassStaticBlockStatementList",
        "#sec-static-semantics-contains",
        "#prod-ClassElement",
        "#prod-MethodDefinition",
        "#sec-static-semantics-propname",
        "#prod-MethodDefinition",
        "#prod-ClassElement",
        "#prod-MethodDefinition",
        "#prod-FieldDefinition",
        "#prod-FieldDefinition",
        "#prod-ClassElement",
        "#prod-ClassStaticBlock",
        "#prod-ClassElement",
        "#prod-ClassElement",
        "#sec-syntactic-grammar",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#sec-static-semantics-classelementkind",
        "#prod-ClassElement",
        "#prod-ClassElement",
        "#prod-ClassElementList",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#sec-static-semantics-constructormethod",
        "#prod-ClassElementList",
        "#sec-static-semantics-classelementkind",
        "#prod-ClassElement",
        "#prod-ClassElement",
        "#sec-object-type",
        "#prod-ClassElement",
        "#prod-MethodDefinition",
        "#prod-ClassElement",
        "#prod-MethodDefinition",
        "#prod-ClassElement",
        "#prod-FieldDefinition",
        "#prod-ClassElement",
        "#prod-FieldDefinition",
        "#prod-ClassElement",
        "#prod-ClassStaticBlock",
        "#prod-ClassElement",
        "#sec-list-and-record-specification-type",
        "#prod-ClassElement",
        "#sec-syntactic-grammar",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#sec-static-semantics-classelementkind",
        "#prod-ClassElement",
        "#prod-ClassElement",
        "#sec-list-and-record-specification-type",
        "#prod-ClassElementList",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#sec-static-semantics-nonconstructorelements",
        "#prod-ClassElementList",
        "#sec-static-semantics-classelementkind",
        "#prod-ClassElement",
        "#prod-ClassElement",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#sec-static-semantics-propname",
        "#prod-ClassElement",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-isstatic",
        "#prod-ClassElement",
        "#sec-list-and-record-specification-type",
        "#prod-ClassElementList",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#sec-static-semantics-prototypepropertynamelist",
        "#prod-ClassElementList",
        "#sec-static-semantics-propname",
        "#prod-ClassElement",
        "#sec-static-semantics-isstatic",
        "#prod-ClassElement",
        "#list-concatenation",
        "#sec-syntactic-grammar",
        "#sec-static-semantics-allprivateidentifiersvalid",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-allprivateidentifiersvalid",
        "#prod-MemberExpression",
        "#prod-CallExpression",
        "#prod-CallExpression",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-allprivateidentifiersvalid",
        "#prod-CallExpression",
        "#prod-OptionalChain",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#prod-OptionalChain",
        "#prod-OptionalChain",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-allprivateidentifiersvalid",
        "#prod-OptionalChain",
        "#prod-ClassBody",
        "#prod-ClassElementList",
        "#list-concatenation",
        "#sec-static-semantics-privateboundidentifiers",
        "#prod-ClassBody",
        "#sec-static-semantics-allprivateidentifiersvalid",
        "#prod-ClassElementList",
        "#prod-RelationalExpression",
        "#prod-PrivateIdentifier",
        "#prod-ShiftExpression",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-allprivateidentifiersvalid",
        "#prod-ShiftExpression",
        "#sec-list-and-record-specification-type",
        "#prod-FieldDefinition",
        "#prod-ClassElementName",
        "#prod-Initializer",
        "#sec-static-semantics-privateboundidentifiers",
        "#prod-ClassElementName",
        "#prod-ClassElementName",
        "#prod-PrivateIdentifier",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#prod-ClassElementName",
        "#prod-PropertyName",
        "#prod-ClassElement",
        "#prod-ClassStaticBlock",
        "#sec-list-and-record-specification-type",
        "#prod-ClassElementList",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#sec-static-semantics-privateboundidentifiers",
        "#prod-ClassElementList",
        "#sec-static-semantics-privateboundidentifiers",
        "#prod-ClassElement",
        "#list-concatenation",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#prod-GeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-GeneratorBody",
        "#prod-AsyncMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncGeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#sec-static-semantics-privateboundidentifiers",
        "#prod-ClassElementName",
        "#sec-syntactic-grammar",
        "#sec-static-semantics-containsarguments",
        "#prod-IdentifierReference",
        "#prod-Identifier",
        "#sec-static-semantics-stringvalue",
        "#prod-Identifier",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-GeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncFunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#prod-GeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-GeneratorBody",
        "#prod-AsyncGeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-containsarguments",
        "#prod-ClassElementName",
        "#sec-completion-record-specification-type",
        "#sec-classfielddefinition-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-FieldDefinition",
        "#prod-ClassElementName",
        "#prod-Initializer",
        "#prod-ClassElementName",
        "#sec-returnifabrupt",
        "#prod-Initializer",
        "#prod-FormalParameters",
        "#running-execution-context",
        "#running-execution-context",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-function-prototype-object",
        "#prod-Initializer",
        "#sec-makemethod",
        "#sec-classfielddefinition-record-specification-type",
        "#sec-classstaticblockdefinition-record-specification-type",
        "#prod-ClassStaticBlock",
        "#prod-ClassStaticBlockBody",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-FormalParameters",
        "#sec-ordinaryfunctioncreate",
        "#sec-properties-of-the-function-prototype-object",
        "#prod-ClassStaticBlockBody",
        "#sec-makemethod",
        "#sec-classstaticblockdefinition-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#prod-ClassStaticBlockBody",
        "#prod-ClassStaticBlockStatementList",
        "#sec-functiondeclarationinstantiation",
        "#prod-ClassStaticBlockStatementList",
        "#sec-completion-record-specification-type",
        "#sec-classfielddefinition-record-specification-type",
        "#sec-classstaticblockdefinition-record-specification-type",
        "#sec-private-names",
        "#sec-completion-record-specification-type",
        "#prod-ClassElement",
        "#prod-FieldDefinition",
        "#prod-FieldDefinition",
        "#sec-runtime-semantics-classfielddefinitionevaluation",
        "#prod-FieldDefinition",
        "#prod-ClassElement",
        "#prod-MethodDefinition",
        "#prod-MethodDefinition",
        "#sec-runtime-semantics-methoddefinitionevaluation",
        "#prod-MethodDefinition",
        "#prod-ClassElement",
        "#prod-ClassStaticBlock",
        "#sec-runtime-semantics-classstaticblockdefinitionevaluation",
        "#prod-ClassStaticBlock",
        "#prod-ClassElement",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-private-names",
        "#constructor",
        "#constructor",
        "#sec-private-names",
        "#prod-ClassTail",
        "#prod-ClassHeritage",
        "#prod-ClassBody",
        "#running-execution-context",
        "#sec-newdeclarativeenvironment",
        "#running-execution-context",
        "#sec-newprivateenvironment",
        "#prod-ClassBody",
        "#sec-static-semantics-privateboundidentifiers",
        "#prod-ClassBody",
        "#sec-private-names",
        "#assert",
        "#sec-private-names",
        "#prod-ClassHeritage",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-properties-of-the-function-prototype-object",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-ClassHeritage",
        "#prod-ClassHeritage",
        "#running-execution-context",
        "#sec-getvalue",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-isconstructor",
        "#sec-get-o-p",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinaryobjectcreate",
        "#prod-ClassBody",
        "#sec-static-semantics-constructormethod",
        "#prod-ClassBody",
        "#running-execution-context",
        "#running-execution-context",
        "#sec-abstract-closure",
        "#sec-list-and-record-specification-type",
        "#active-function-object",
        "#sec-well-known-symbols",
        "#sec-isconstructor",
        "#sec-construct",
        "#sec-ordinarycreatefromconstructor",
        "#sec-initializeinstanceelements",
        "#sec-createbuiltinfunction",
        "#current-realm",
        "#sec-runtime-semantics-definemethod",
        "#sec-makeclassconstructor",
        "#sec-setfunctionname",
        "#sec-makeconstructor",
        "#prod-ClassHeritage",
        "#sec-createmethodproperty",
        "#prod-ClassBody",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-nonconstructorelements",
        "#prod-ClassBody",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#prod-ClassElement",
        "#sec-static-semantics-isstatic",
        "#sec-completion-ao",
        "#sec-static-semantics-classelementevaluation",
        "#sec-completion-ao",
        "#sec-static-semantics-classelementevaluation",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#running-execution-context",
        "#sec-privateelement-specification-type",
        "#assert",
        "#sec-static-semantics-isstatic",
        "#sec-privateelement-specification-type",
        "#sec-privateelement-specification-type",
        "#assert",
        "#sec-privateelement-specification-type",
        "#sec-privateelement-specification-type",
        "#sec-classfielddefinition-record-specification-type",
        "#sec-static-semantics-isstatic",
        "#sec-classstaticblockdefinition-record-specification-type",
        "#running-execution-context",
        "#sec-privateelement-specification-type",
        "#sec-privatemethodoraccessoradd",
        "#sec-classfielddefinition-record-specification-type",
        "#sec-completion-ao",
        "#sec-definefield",
        "#assert",
        "#sec-classstaticblockdefinition-record-specification-type",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#prod-ClassDeclaration",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-runtime-semantics-classdefinitionevaluation",
        "#prod-ClassTail",
        "#prod-ClassDeclaration",
        "#running-execution-context",
        "#sec-initializeboundname",
        "#prod-ClassDeclaration",
        "#prod-ClassTail",
        "#sec-runtime-semantics-classdefinitionevaluation",
        "#prod-ClassTail",
        "#prod-ClassDeclaration",
        "#prod-ClassDeclaration",
        "#prod-ClassTail",
        "#prod-ExportDeclaration",
        "#sec-exports-runtime-semantics-evaluation",
        "#prod-ClassDeclaration",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#sec-runtime-semantics-bindingclassdeclarationevaluation",
        "#prod-ClassDeclaration",
        "#prod-ClassDeclaration",
        "#prod-ClassTail",
        "#prod-ExportDeclaration",
        "#prod-ClassExpression",
        "#prod-ClassTail",
        "#sec-runtime-semantics-classdefinitionevaluation",
        "#prod-ClassTail",
        "#prod-ClassExpression",
        "#prod-ClassExpression",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-runtime-semantics-classdefinitionevaluation",
        "#prod-ClassTail",
        "#prod-ClassExpression",
        "#prod-ClassElementName",
        "#prod-PrivateIdentifier",
        "#sec-static-semantics-stringvalue",
        "#prod-PrivateIdentifier",
        "#running-execution-context",
        "#assert",
        "#sec-private-names",
        "#sec-private-names",
        "#prod-ClassStaticBlockStatementList",
        "#prod-AsyncFunctionDeclaration",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-LineTerminator",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionExpression",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncMethod",
        "#prod-LineTerminator",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionBody",
        "#prod-FunctionBody",
        "#prod-AwaitExpression",
        "#prod-UnaryExpression",
        "#sec-keywords-and-reserved-words",
        "#prod-AwaitExpression",
        "#prod-FunctionBody",
        "#prod-AsyncFunctionBody",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncGeneratorExpression",
        "#prod-AwaitExpression",
        "#sec-static-semantic-rules",
        "#prod-Module",
        "#prod-Script",
        "#sec-context-free-grammars",
        "#prod-AsyncFunctionBody",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncGeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FunctionExpression",
        "#prod-GeneratorExpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-YieldExpression",
        "#prod-AwaitExpression",
        "#prod-AsyncMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-hasdirectsuper",
        "#prod-AsyncMethod",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-contains",
        "#prod-AwaitExpression",
        "#sec-static-semantics-boundnames",
        "#prod-UniqueFormalParameters",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-FormalParameters",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-AwaitExpression",
        "#prod-FormalParameters",
        "#sec-strict-mode-code",
        "#prod-UniqueFormalParameters",
        "#prod-FormalParameters",
        "#prod-BindingIdentifier",
        "#prod-BindingIdentifier",
        "#sec-strict-mode-code",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-static-semantics-boundnames",
        "#prod-FormalParameters",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-AsyncFunctionBody",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperProperty",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-contains",
        "#prod-SuperProperty",
        "#prod-FormalParameters",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#function-object",
        "#prod-AsyncFunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#prod-AsyncFunctionDeclaration",
        "#sec-ordinaryfunctioncreate",
        "#sec-async-function-prototype-properties",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-setfunctionname",
        "#prod-AsyncFunctionDeclaration",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionDeclaration",
        "#sec-ordinaryfunctioncreate",
        "#sec-async-function-prototype-properties",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-setfunctionname",
        "#function-object",
        "#prod-AsyncFunctionExpression",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-AsyncFunctionExpression",
        "#sec-ordinaryfunctioncreate",
        "#sec-async-function-prototype-properties",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-setfunctionname",
        "#prod-AsyncFunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#assert",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#running-execution-context",
        "#sec-newdeclarativeenvironment",
        "#running-execution-context",
        "#prod-AsyncFunctionExpression",
        "#sec-ordinaryfunctioncreate",
        "#sec-async-function-prototype-properties",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-setfunctionname",
        "#prod-BindingIdentifier",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncFunctionBody",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncFunctionExpression",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-AsyncFunctionBody",
        "#prod-FunctionBody",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-completion-ao",
        "#sec-functiondeclarationinstantiation",
        "#sec-completion-record-specification-type",
        "#sec-call",
        "#sec-async-functions-abstract-operations-async-function-start",
        "#prod-FunctionBody",
        "#sec-completion-record-specification-type",
        "#prod-AsyncFunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#sec-runtime-semantics-instantiateasyncfunctionexpression",
        "#prod-AsyncFunctionExpression",
        "#prod-AwaitExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#sec-getvalue",
        "#await",
        "#prod-AsyncArrowFunction",
        "#prod-LineTerminator",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-LineTerminator",
        "#prod-AsyncConciseBody",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-LineTerminator",
        "#prod-AsyncConciseBody",
        "#prod-AsyncConciseBody",
        "#prod-ExpressionBody",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-BindingIdentifier",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-AsyncArrowFunction",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-AsyncConciseBody",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-AsyncArrowHead",
        "#prod-LineTerminator",
        "#prod-ArrowFormalParameters",
        "#prod-AsyncArrowFunction",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-AsyncConciseBody",
        "#sec-static-semantics-boundnames",
        "#prod-AsyncArrowBindingIdentifier",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-AsyncConciseBody",
        "#prod-AsyncArrowFunction",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-AsyncConciseBody",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#must-cover",
        "#prod-AsyncArrowHead",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#sec-static-semantics-contains",
        "#prod-YieldExpression",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#sec-static-semantics-contains",
        "#prod-AwaitExpression",
        "#sec-static-semantics-boundnames",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-AsyncConciseBody",
        "#sec-static-semantics-asyncconcisebodycontainsusestrict",
        "#prod-AsyncConciseBody",
        "#sec-static-semantics-issimpleparameterlist",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-AsyncConciseBody",
        "#prod-ExpressionBody",
        "#prod-AsyncConciseBody",
        "#prod-AsyncFunctionBody",
        "#sec-static-semantics-functionbodycontainsusestrict",
        "#prod-AsyncFunctionBody",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-AsyncConciseBody",
        "#prod-ExpressionBody",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-completion-ao",
        "#sec-functiondeclarationinstantiation",
        "#sec-completion-record-specification-type",
        "#sec-call",
        "#sec-async-functions-abstract-operations-async-function-start",
        "#prod-ExpressionBody",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#prod-AsyncArrowFunction",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-AsyncConciseBody",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-AsyncArrowFunction",
        "#prod-AsyncArrowBindingIdentifier",
        "#sec-ordinaryfunctioncreate",
        "#sec-async-function-prototype-properties",
        "#prod-AsyncConciseBody",
        "#sec-setfunctionname",
        "#prod-AsyncArrowFunction",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-AsyncConciseBody",
        "#running-execution-context",
        "#running-execution-context",
        "#prod-AsyncArrowFunction",
        "#prod-AsyncArrowHead",
        "#sec-syntactic-grammar",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-ArrowFormalParameters",
        "#sec-ordinaryfunctioncreate",
        "#sec-async-function-prototype-properties",
        "#prod-AsyncConciseBody",
        "#sec-setfunctionname",
        "#prod-AsyncArrowFunction",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-AsyncConciseBody",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-AsyncConciseBody",
        "#sec-runtime-semantics-instantiateasyncarrowfunctionexpression",
        "#prod-AsyncArrowFunction",
        "#sec-syntactic-grammar",
        "#non-strict-code",
        "#prod-FunctionBody",
        "#prod-ConciseBody",
        "#prod-AsyncConciseBody",
        "#prod-FunctionBody",
        "#prod-ConciseBody",
        "#prod-AsyncConciseBody",
        "#prod-FunctionBody",
        "#prod-GeneratorBody",
        "#prod-FunctionBody",
        "#prod-AsyncFunctionBody",
        "#prod-FunctionBody",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncConciseBody",
        "#sec-static-semantics-hascallintailposition",
        "#sec-strict-mode-code",
        "#sec-addrestrictedfunctionproperties",
        "#sec-syntactic-grammar",
        "#sec-syntactic-grammar",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#sec-static-semantics-hascallintailposition",
        "#prod-StatementList",
        "#sec-static-semantics-hascallintailposition",
        "#prod-StatementListItem",
        "#prod-FunctionStatementList",
        "#prod-StatementListItem",
        "#prod-Declaration",
        "#prod-Statement",
        "#prod-VariableStatement",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-ContinueStatement",
        "#prod-BreakStatement",
        "#prod-ThrowStatement",
        "#prod-DebuggerStatement",
        "#prod-Block",
        "#prod-ReturnStatement",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-CaseBlock",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Statement",
        "#sec-static-semantics-hascallintailposition",
        "#prod-Statement",
        "#sec-static-semantics-hascallintailposition",
        "#prod-Statement",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-DoWhileStatement",
        "#prod-Statement",
        "#prod-Expression",
        "#prod-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-VariableDeclarationList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-WithStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-hascallintailposition",
        "#prod-Statement",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#sec-static-semantics-hascallintailposition",
        "#prod-LabelledItem",
        "#prod-ReturnStatement",
        "#prod-Expression",
        "#sec-static-semantics-hascallintailposition",
        "#prod-Expression",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#sec-static-semantics-hascallintailposition",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#sec-static-semantics-hascallintailposition",
        "#prod-CaseClauses",
        "#sec-static-semantics-hascallintailposition",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#sec-static-semantics-hascallintailposition",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#sec-static-semantics-hascallintailposition",
        "#prod-CaseClauses",
        "#sec-static-semantics-hascallintailposition",
        "#prod-CaseClause",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-hascallintailposition",
        "#prod-StatementList",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#sec-static-semantics-hascallintailposition",
        "#prod-Catch",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Finally",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Finally",
        "#sec-static-semantics-hascallintailposition",
        "#prod-Finally",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#sec-static-semantics-hascallintailposition",
        "#prod-Block",
        "#sec-getvalue",
        "#sec-reference-record-specification-type",
        "#sec-getvalue",
        "#prod-AssignmentExpression",
        "#prod-YieldExpression",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentOperator",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseANDExpression",
        "#prod-EqualityExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-EqualityExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-RelationalExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-PrivateIdentifier",
        "#prod-ShiftExpression",
        "#prod-ShiftExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-AdditiveExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeOperator",
        "#prod-ExponentiationExpression",
        "#prod-ExponentiationExpression",
        "#prod-UpdateExpression",
        "#prod-ExponentiationExpression",
        "#prod-UpdateExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LeftHandSideExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-AwaitExpression",
        "#prod-CallExpression",
        "#prod-SuperCall",
        "#prod-CallExpression",
        "#prod-Expression",
        "#prod-CallExpression",
        "#prod-IdentifierName",
        "#prod-CallExpression",
        "#prod-PrivateIdentifier",
        "#prod-NewExpression",
        "#prod-NewExpression",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-SuperProperty",
        "#prod-MetaProperty",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-MemberExpression",
        "#prod-PrivateIdentifier",
        "#prod-PrimaryExpression",
        "#prod-IdentifierReference",
        "#prod-Literal",
        "#prod-ArrayLiteral",
        "#prod-ObjectLiteral",
        "#prod-FunctionExpression",
        "#prod-ClassExpression",
        "#prod-GeneratorExpression",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-RegularExpressionLiteral",
        "#prod-TemplateLiteral",
        "#prod-Expression",
        "#prod-AssignmentExpression",
        "#prod-Expression",
        "#prod-AssignmentExpression",
        "#sec-static-semantics-hascallintailposition",
        "#prod-AssignmentExpression",
        "#prod-ConditionalExpression",
        "#prod-ShortCircuitExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-static-semantics-hascallintailposition",
        "#prod-AssignmentExpression",
        "#sec-static-semantics-hascallintailposition",
        "#prod-AssignmentExpression",
        "#prod-LogicalANDExpression",
        "#prod-LogicalANDExpression",
        "#prod-BitwiseORExpression",
        "#sec-static-semantics-hascallintailposition",
        "#prod-BitwiseORExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalANDExpression",
        "#sec-static-semantics-hascallintailposition",
        "#prod-LogicalANDExpression",
        "#prod-CoalesceExpression",
        "#prod-CoalesceExpressionHead",
        "#prod-BitwiseORExpression",
        "#sec-static-semantics-hascallintailposition",
        "#prod-BitwiseORExpression",
        "#prod-CallExpression",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-CallExpression",
        "#prod-Arguments",
        "#prod-CallExpression",
        "#prod-TemplateLiteral",
        "#prod-CallExpression",
        "#prod-OptionalExpression",
        "#prod-MemberExpression",
        "#prod-OptionalChain",
        "#prod-CallExpression",
        "#prod-OptionalChain",
        "#prod-OptionalExpression",
        "#prod-OptionalChain",
        "#sec-static-semantics-hascallintailposition",
        "#prod-OptionalChain",
        "#prod-OptionalChain",
        "#prod-Expression",
        "#prod-IdentifierName",
        "#prod-PrivateIdentifier",
        "#prod-OptionalChain",
        "#prod-Expression",
        "#prod-OptionalChain",
        "#prod-IdentifierName",
        "#prod-OptionalChain",
        "#prod-PrivateIdentifier",
        "#prod-OptionalChain",
        "#prod-Arguments",
        "#prod-OptionalChain",
        "#prod-Arguments",
        "#prod-OptionalChain",
        "#prod-MemberExpression",
        "#prod-MemberExpression",
        "#prod-TemplateLiteral",
        "#prod-MemberExpression",
        "#prod-PrimaryExpression",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ParenthesizedExpression",
        "#sec-syntactic-grammar",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#sec-static-semantics-hascallintailposition",
        "#prod-ParenthesizedExpression",
        "#prod-Expression",
        "#sec-static-semantics-hascallintailposition",
        "#prod-Expression",
        "#assert",
        "#sec-execution-contexts",
        "#sec-execution-contexts",
        "#sec-execution-contexts",
        "#sec-execution-contexts",
        "#prod-Script",
        "#prod-ScriptBody",
        "#prod-ScriptBody",
        "#prod-StatementList",
        "#prod-Script",
        "#prod-ScriptBody",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-ScriptBody",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-ScriptBody",
        "#sec-static-semantics-vardeclarednames",
        "#prod-ScriptBody",
        "#prod-ScriptBody",
        "#prod-StatementList",
        "#prod-StatementList",
        "#sec-static-semantics-contains",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#early-error",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#sec-performeval",
        "#prod-StatementList",
        "#sec-static-semantics-contains",
        "#prod-NewTarget",
        "#prod-NewTarget",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#early-error",
        "#prod-NewTarget",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#sec-performeval",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-StatementList",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-StatementList",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-StatementList",
        "#sec-static-semantics-allprivateidentifiersvalid",
        "#prod-StatementList",
        "#prod-ScriptBody",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#prod-Script",
        "#prod-ScriptBody",
        "#prod-ScriptBody",
        "#directive-prologue",
        "#prod-ScriptBody",
        "#use-strict-directive",
        "#prod-Script",
        "#table-script-records",
        "#script-record",
        "#realm-record",
        "#realm",
        "#sec-syntactic-grammar",
        "#prod-Script",
        "#sec-context-free-grammars",
        "#host-environment",
        "#script-record",
        "#sec-list-and-record-specification-type",
        "#script-record",
        "#prod-Script",
        "#sec-parsetext",
        "#prod-Script",
        "#sec-list-and-record-specification-type",
        "#script-record",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-execution-contexts",
        "#realm",
        "#running-execution-context",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-ao",
        "#sec-globaldeclarationinstantiation",
        "#sec-normalcompletion",
        "#execution-context-stack",
        "#assert",
        "#execution-context-stack",
        "#execution-context-stack",
        "#running-execution-context",
        "#prod-ScriptBody",
        "#sec-syntactic-grammar",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#prod-ScriptBody",
        "#sec-execution-contexts",
        "#sec-execution-contexts",
        "#sec-static-semantics-lexicallydeclarednames",
        "#sec-static-semantics-vardeclarednames",
        "#sec-static-semantics-varscopeddeclarations",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#prod-VariableDeclaration",
        "#prod-ForBinding",
        "#prod-BindingIdentifier",
        "#assert",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#sec-static-semantics-boundnames",
        "#sec-list-and-record-specification-type",
        "#prod-VariableDeclaration",
        "#prod-ForBinding",
        "#prod-BindingIdentifier",
        "#sec-static-semantics-boundnames",
        "#sec-global-object",
        "#ordinary-object",
        "#sec-global-object",
        "#proxy-exotic-object",
        "#sec-web-compat-globaldeclarationinstantiation",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#sec-static-semantics-boundnames",
        "#sec-static-semantics-isconstantdeclaration",
        "#sec-syntactic-grammar",
        "#sec-static-semantics-boundnames",
        "#sec-runtime-semantics-instantiatefunctionobject",
        "#early-error",
        "#sec-scripts-static-semantics-early-errors",
        "#prod-Script",
        "#prod-Script",
        "#sec-global-object",
        "#proxy-exotic-object",
        "#sec-completion-record-specification-type",
        "#prod-Script",
        "#sec-global-object",
        "#prod-Module",
        "#prod-ModuleBody",
        "#prod-ModuleBody",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#prod-ExportDeclaration",
        "#prod-StatementListItem",
        "#prod-ModuleExportName",
        "#prod-IdentifierName",
        "#prod-StringLiteral",
        "#prod-ModuleBody",
        "#prod-ModuleItemList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-ModuleItemList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-ModuleItemList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-ModuleItemList",
        "#sec-static-semantics-exportednames",
        "#prod-ModuleItemList",
        "#sec-static-semantics-exportedbindings",
        "#prod-ModuleItemList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-ModuleItemList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#sec-static-semantics-contains",
        "#prod-ModuleItemList",
        "#sec-static-semantics-contains",
        "#prod-NewTarget",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-ModuleItemList",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-ModuleItemList",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-ModuleItemList",
        "#sec-static-semantics-allprivateidentifiersvalid",
        "#prod-ModuleItemList",
        "#sec-static-semantics-exportednames",
        "#prod-ExportDeclaration",
        "#prod-ModuleBody",
        "#prod-Module",
        "#prod-Module",
        "#prod-ModuleExportName",
        "#prod-StringLiteral",
        "#sec-isstringwellformedunicode",
        "#sec-static-semantics-sv",
        "#prod-StringLiteral",
        "#sec-list-and-record-specification-type",
        "#importentry-record",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#importentry-record",
        "#sec-list-and-record-specification-type",
        "#prod-Module",
        "#sec-list-and-record-specification-type",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-modulerequests",
        "#prod-ModuleItem",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-modulerequests",
        "#prod-ModuleItemList",
        "#sec-static-semantics-modulerequests",
        "#prod-ModuleItem",
        "#prod-ModuleItem",
        "#prod-StatementListItem",
        "#sec-list-and-record-specification-type",
        "#prod-ImportDeclaration",
        "#prod-ImportClause",
        "#prod-FromClause",
        "#sec-static-semantics-modulerequests",
        "#prod-FromClause",
        "#prod-ModuleSpecifier",
        "#prod-StringLiteral",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-sv",
        "#prod-StringLiteral",
        "#prod-ExportDeclaration",
        "#prod-ExportFromClause",
        "#prod-FromClause",
        "#sec-static-semantics-modulerequests",
        "#prod-FromClause",
        "#prod-ExportDeclaration",
        "#prod-NamedExports",
        "#prod-VariableStatement",
        "#prod-Declaration",
        "#prod-HoistableDeclaration",
        "#prod-ClassDeclaration",
        "#prod-AssignmentExpression",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#cyclic-module-record",
        "#sourctextmodule-record",
        "#table-module-record-fields",
        "#table-abstract-methods-of-module-records",
        "#sec-abstract-module-records",
        "#realm-record",
        "#realm",
        "#sec-module-environment-records",
        "#sec-environment-records",
        "#sec-module-namespace-objects",
        "#host-environment",
        "#sec-abstract-module-records",
        "#sec-abstract-module-records",
        "#sec-module-environment-records",
        "#host",
        "#cyclic-module-record",
        "#sec-abstract-module-records",
        "#cyclic-module-record",
        "#sourctextmodule-record",
        "#table-module-record-fields",
        "#cyclic-module-record",
        "#table-cyclic-module-fields",
        "#cyclic-module-record",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#integer",
        "#integer",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#prod-ModuleSpecifier",
        "#sec-list-and-record-specification-type",
        "#cyclic-module-record",
        "#sourctextmodule-record",
        "#sec-async-module-execution-fulfilled",
        "#sec-promisecapability-records",
        "#sec-promisecapability-records",
        "#sec-list-and-record-specification-type",
        "#cyclic-module-record",
        "#integer",
        "#table-abstract-methods-of-module-records",
        "#cyclic-module-record",
        "#table-cyclic-module-methods",
        "#cyclic-module-record",
        "#sec-environment-records",
        "#sec-execution-contexts",
        "#sec-execution-contexts",
        "#sec-promisecapability-records",
        "#sec-promisecapability-records",
        "#cyclic-module-record",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-InnerModuleLinking",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-completion-ao",
        "#sec-InnerModuleLinking",
        "#sec-completion-record-specification-type",
        "#cyclic-module-record",
        "#assert",
        "#assert",
        "#assert",
        "#assert",
        "#sec-abstract-module-records",
        "#integer",
        "#sec-completion-record-specification-type",
        "#integer",
        "#sec-completion-record-specification-type",
        "#cyclic-module-record",
        "#assert",
        "#sec-hostresolveimportedmodule",
        "#sec-InnerModuleLinking",
        "#cyclic-module-record",
        "#assert",
        "#assert",
        "#eqn-min",
        "#assert",
        "#assert",
        "#assert",
        "#cyclic-module-record",
        "#sec-abstract-module-records",
        "#cyclic-module-record",
        "#sec-innermoduleevaluation",
        "#assert",
        "#surrounding-agent",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-completion-ao",
        "#sec-innermoduleevaluation",
        "#sec-completion-record-specification-type",
        "#cyclic-module-record",
        "#assert",
        "#assert",
        "#assert",
        "#sec-call",
        "#assert",
        "#assert",
        "#assert",
        "#sec-call",
        "#assert",
        "#sec-abstract-module-records",
        "#integer",
        "#sec-completion-record-specification-type",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-InnerModuleLinking",
        "#cyclic-module-record",
        "#assert",
        "#sec-throwcompletion",
        "#assert",
        "#sec-hostresolveimportedmodule",
        "#sec-innermoduleevaluation",
        "#cyclic-module-record",
        "#assert",
        "#assert",
        "#eqn-min",
        "#assert",
        "#assert",
        "#sec-async-module-execution-fulfilled",
        "#sec-execute-async-module",
        "#assert",
        "#assert",
        "#assert",
        "#cyclic-module-record",
        "#sec-abstract-module-records",
        "#cyclic-module-record",
        "#assert",
        "#assert",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-abstract-closure",
        "#sec-async-module-execution-fulfilled",
        "#sec-createbuiltinfunction",
        "#sec-abstract-closure",
        "#sec-async-module-execution-rejected",
        "#sec-createbuiltinfunction",
        "#sec-performpromisethen",
        "#cyclic-module-record",
        "#sec-list-and-record-specification-type",
        "#cyclic-module-record",
        "#cyclic-module-record",
        "#assert",
        "#assert",
        "#assert",
        "#assert",
        "#sec-gather-available-ancestors",
        "#cyclic-module-record",
        "#assert",
        "#assert",
        "#assert",
        "#assert",
        "#assert",
        "#sec-call",
        "#sec-list-and-record-specification-type",
        "#sec-gather-available-ancestors",
        "#sec-list-and-record-specification-type",
        "#sec-innermoduleevaluation",
        "#assert",
        "#cyclic-module-record",
        "#assert",
        "#sec-execute-async-module",
        "#sec-completion-record-specification-type",
        "#sec-async-module-execution-rejected",
        "#assert",
        "#sec-call",
        "#cyclic-module-record",
        "#sec-ecmascript-language-types",
        "#assert",
        "#assert",
        "#assert",
        "#assert",
        "#sec-throwcompletion",
        "#cyclic-module-record",
        "#sec-async-module-execution-rejected",
        "#assert",
        "#sec-call",
        "#host",
        "#host",
        "#sec-InnerModuleLinking",
        "#sec-innermoduleevaluation",
        "#host",
        "#host",
        "#cyclic-module-record",
        "#host",
        "#sec-abstract-module-records",
        "#sec-hostresolveimportedmodule",
        "#sec-parsemodule",
        "#host",
        "#sec-hostresolveimportedmodule",
        "#host",
        "#sec-InnerModuleLinking",
        "#sec-InnerModuleLinking",
        "#sec-InnerModuleLinking",
        "#sec-InnerModuleLinking",
        "#sec-InnerModuleLinking",
        "#sec-InnerModuleLinking",
        "#sec-innermoduleevaluation",
        "#sec-innermoduleevaluation",
        "#sec-async-module-execution-rejected",
        "#sec-innermoduleevaluation",
        "#sec-innermoduleevaluation",
        "#sec-execute-async-module",
        "#sec-innermoduleevaluation",
        "#sec-innermoduleevaluation",
        "#sec-innermoduleevaluation",
        "#sec-execute-async-module",
        "#sec-innermoduleevaluation",
        "#table-module-graph-cycle-async-fields-1",
        "#sec-async-module-execution-fulfilled",
        "#table-module-graph-cycle-async-fields-2",
        "#sec-async-module-execution-fulfilled",
        "#sec-execute-async-module",
        "#table-module-graph-cycle-async-fields-3",
        "#sec-async-module-execution-fulfilled",
        "#table-module-graph-cycle-async-fields-4",
        "#sec-async-module-execution-fulfilled",
        "#sec-execute-async-module",
        "#table-module-graph-cycle-async-fields-5",
        "#sec-async-module-execution-fulfilled",
        "#table-module-graph-cycle-async-fields-6",
        "#sec-async-module-execution-rejected",
        "#sec-async-module-execution-rejected",
        "#table-module-graph-cycle-async-fields-7",
        "#sec-async-module-execution-rejected",
        "#table-module-graph-cycle-async-fields-8",
        "#sec-async-module-execution-fulfilled",
        "#sec-gather-available-ancestors",
        "#sec-async-module-execution-fulfilled",
        "#table-module-graph-cycle-async-fields-9",
        "#sec-ecmascript-language-source-code",
        "#sec-context-free-grammars",
        "#prod-Module",
        "#sourctextmodule-record",
        "#sec-abstract-module-records",
        "#cyclic-module-record",
        "#table-cyclic-module-fields",
        "#sourctextmodule-record",
        "#table-additional-fields-of-source-text-module-records",
        "#sec-parsemodule",
        "#sourctextmodule-record",
        "#sec-syntactic-grammar",
        "#prod-Module",
        "#sec-context-free-grammars",
        "#sec-execution-contexts",
        "#sec-execution-contexts",
        "#sec-list-and-record-specification-type",
        "#importentry-record",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#importentry-record",
        "#table-importentry-record-fields",
        "#importentry-record",
        "#prod-ModuleSpecifier",
        "#prod-ImportDeclaration",
        "#table-import-forms-mapping-to-importentry-records",
        "#importentry-record",
        "#importentry-record",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#table-exportentry-records",
        "#exportentry-record",
        "#prod-ModuleSpecifier",
        "#prod-ExportDeclaration",
        "#prod-ExportDeclaration",
        "#prod-ModuleSpecifier",
        "#prod-ExportDeclaration",
        "#prod-ModuleSpecifier",
        "#table-export-forms-mapping-to-exportentry-records",
        "#exportentry-record",
        "#sec-algorithm-conventions-abstract-operations",
        "#sourctextmodule-record",
        "#sourctextmodule-record",
        "#sec-list-and-record-specification-type",
        "#sourctextmodule-record",
        "#prod-Module",
        "#sec-parsetext",
        "#prod-Module",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-modulerequests",
        "#sec-static-semantics-importentries",
        "#sec-importedlocalnames",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-exportentries",
        "#exportentry-record",
        "#exportentry-record",
        "#assert",
        "#sec-static-semantics-contains",
        "#sourctextmodule-record",
        "#sourctextmodule-record",
        "#sec-list-and-record-specification-type",
        "#sourctextmodule-record",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#assert",
        "#exportentry-record",
        "#assert",
        "#exportentry-record",
        "#sec-hostresolveimportedmodule",
        "#sec-samevalue",
        "#sourctextmodule-record",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#resolvedbinding-record",
        "#sec-completion-record-specification-type",
        "#sec-abstract-module-records",
        "#sec-abstract-module-records",
        "#resolvedbinding-record",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-abstract-module-records",
        "#sec-samevalue",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#sec-samevalue",
        "#assert",
        "#resolvedbinding-record",
        "#exportentry-record",
        "#sec-samevalue",
        "#sec-hostresolveimportedmodule",
        "#assert",
        "#resolvedbinding-record",
        "#assert",
        "#sec-samevalue",
        "#assert",
        "#exportentry-record",
        "#sec-hostresolveimportedmodule",
        "#assert",
        "#resolvedbinding-record",
        "#assert",
        "#sec-abstract-module-records",
        "#sec-samevalue",
        "#sourctextmodule-record",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#exportentry-record",
        "#assert",
        "#resolvedbinding-record",
        "#assert",
        "#assert",
        "#sec-newmoduleenvironment",
        "#importentry-record",
        "#sec-hostresolveimportedmodule",
        "#sec-getmodulenamespace",
        "#sec-getmodulenamespace",
        "#sec-execution-contexts",
        "#assert",
        "#realm",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-static-semantics-varscopeddeclarations",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-boundnames",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#sec-static-semantics-boundnames",
        "#sec-static-semantics-isconstantdeclaration",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#sec-runtime-semantics-instantiatefunctionobject",
        "#execution-context-stack",
        "#sourctextmodule-record",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-execution-contexts",
        "#realm",
        "#assert",
        "#running-execution-context",
        "#assert",
        "#execution-context-stack",
        "#running-execution-context",
        "#execution-context-stack",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-promisecapability-records",
        "#sec-asyncblockstart",
        "#host-defined",
        "#script-record",
        "#sec-abstract-module-records",
        "#prod-ModuleSpecifier",
        "#sec-completion-record-specification-type",
        "#sec-abstract-module-records",
        "#sec-completion-record-specification-type",
        "#sec-abstract-module-records",
        "#sec-import-calls",
        "#job-activescriptormodule",
        "#host",
        "#job-activescriptormodule",
        "#sec-import-calls",
        "#host",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-abstract-module-records",
        "#sec-abstract-module-records",
        "#sec-abstract-module-records",
        "#sec-abstract-module-records",
        "#host-defined",
        "#host-defined",
        "#script-record",
        "#sec-abstract-module-records",
        "#prod-ModuleSpecifier",
        "#sec-promisecapability-records",
        "#job-activescriptormodule",
        "#sec-import-calls",
        "#sec-finishdynamicimport",
        "#host-environment",
        "#host-environment",
        "#sec-finishdynamicimport",
        "#sec-hostresolveimportedmodule",
        "#sec-finishdynamicimport",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#host-environment",
        "#sec-finishdynamicimport",
        "#host-environment",
        "#sec-finishdynamicimport",
        "#host-defined",
        "#sec-hostresolveimportedmodule",
        "#sec-abstract-module-records",
        "#sec-hostresolveimportedmodule",
        "#sec-promisecapability-records",
        "#sec-import-calls",
        "#host-environment",
        "#sec-hostimportmoduledynamically",
        "#sec-abstract-closure",
        "#assert",
        "#sec-hostresolveimportedmodule",
        "#assert",
        "#sec-completion-ao",
        "#sec-getmodulenamespace",
        "#sec-completion-record-specification-type",
        "#sec-call",
        "#sec-call",
        "#sec-createbuiltinfunction",
        "#sec-abstract-closure",
        "#sec-call",
        "#sec-createbuiltinfunction",
        "#sec-performpromisethen",
        "#sec-abstract-module-records",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#cyclic-module-record",
        "#sec-list-and-record-specification-type",
        "#resolvedbinding-record",
        "#sec-modulenamespacecreate",
        "#sec-hostresolveimportedmodule",
        "#prod-Module",
        "#prod-ModuleBody",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#prod-ModuleItemList",
        "#sec-returnifabrupt",
        "#prod-ModuleItem",
        "#sec-updateempty",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#prod-ImportDeclaration",
        "#prod-ImportClause",
        "#prod-FromClause",
        "#prod-ModuleSpecifier",
        "#prod-ImportClause",
        "#prod-ImportedDefaultBinding",
        "#prod-NameSpaceImport",
        "#prod-NamedImports",
        "#prod-ImportedDefaultBinding",
        "#prod-NameSpaceImport",
        "#prod-ImportedDefaultBinding",
        "#prod-NamedImports",
        "#prod-ImportedDefaultBinding",
        "#prod-ImportedBinding",
        "#prod-NameSpaceImport",
        "#prod-ImportedBinding",
        "#prod-NamedImports",
        "#prod-ImportsList",
        "#prod-ImportsList",
        "#prod-FromClause",
        "#prod-ModuleSpecifier",
        "#prod-ImportsList",
        "#prod-ImportSpecifier",
        "#prod-ImportsList",
        "#prod-ImportSpecifier",
        "#prod-ImportSpecifier",
        "#prod-ImportedBinding",
        "#prod-ModuleExportName",
        "#prod-ImportedBinding",
        "#prod-ModuleSpecifier",
        "#prod-StringLiteral",
        "#prod-ImportedBinding",
        "#prod-BindingIdentifier",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-ImportDeclaration",
        "#sec-list-and-record-specification-type",
        "#importentry-record",
        "#prod-Module",
        "#sec-list-and-record-specification-type",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-importentries",
        "#prod-ModuleItemList",
        "#sec-static-semantics-importentries",
        "#prod-ModuleItem",
        "#list-concatenation",
        "#prod-ModuleItem",
        "#prod-ExportDeclaration",
        "#prod-StatementListItem",
        "#sec-list-and-record-specification-type",
        "#prod-ImportDeclaration",
        "#prod-ImportClause",
        "#prod-FromClause",
        "#sec-static-semantics-modulerequests",
        "#prod-FromClause",
        "#sec-static-semantics-importentriesformodule",
        "#prod-ImportClause",
        "#prod-ImportDeclaration",
        "#prod-ModuleSpecifier",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#importentry-record",
        "#prod-ImportClause",
        "#prod-ImportedDefaultBinding",
        "#prod-NameSpaceImport",
        "#sec-static-semantics-importentriesformodule",
        "#prod-ImportedDefaultBinding",
        "#sec-static-semantics-importentriesformodule",
        "#prod-NameSpaceImport",
        "#list-concatenation",
        "#prod-ImportClause",
        "#prod-ImportedDefaultBinding",
        "#prod-NamedImports",
        "#sec-static-semantics-importentriesformodule",
        "#prod-ImportedDefaultBinding",
        "#sec-static-semantics-importentriesformodule",
        "#prod-NamedImports",
        "#list-concatenation",
        "#prod-ImportedDefaultBinding",
        "#prod-ImportedBinding",
        "#sec-static-semantics-boundnames",
        "#prod-ImportedBinding",
        "#importentry-record",
        "#prod-NameSpaceImport",
        "#prod-ImportedBinding",
        "#sec-static-semantics-stringvalue",
        "#prod-ImportedBinding",
        "#importentry-record",
        "#prod-NamedImports",
        "#sec-list-and-record-specification-type",
        "#prod-ImportsList",
        "#prod-ImportsList",
        "#prod-ImportSpecifier",
        "#sec-static-semantics-importentriesformodule",
        "#prod-ImportsList",
        "#sec-static-semantics-importentriesformodule",
        "#prod-ImportSpecifier",
        "#list-concatenation",
        "#prod-ImportSpecifier",
        "#prod-ImportedBinding",
        "#sec-static-semantics-boundnames",
        "#prod-ImportedBinding",
        "#importentry-record",
        "#prod-ImportSpecifier",
        "#prod-ModuleExportName",
        "#prod-ImportedBinding",
        "#sec-static-semantics-stringvalue",
        "#prod-ModuleExportName",
        "#sec-static-semantics-stringvalue",
        "#prod-ImportedBinding",
        "#importentry-record",
        "#prod-ExportDeclaration",
        "#prod-ExportFromClause",
        "#prod-FromClause",
        "#prod-NamedExports",
        "#prod-VariableStatement",
        "#prod-Declaration",
        "#prod-HoistableDeclaration",
        "#prod-ClassDeclaration",
        "#prod-LineTerminator",
        "#prod-AssignmentExpression",
        "#prod-ExportFromClause",
        "#prod-ModuleExportName",
        "#prod-NamedExports",
        "#prod-NamedExports",
        "#prod-ExportsList",
        "#prod-ExportsList",
        "#prod-ExportsList",
        "#prod-ExportSpecifier",
        "#prod-ExportsList",
        "#prod-ExportSpecifier",
        "#prod-ExportSpecifier",
        "#prod-ModuleExportName",
        "#prod-ModuleExportName",
        "#prod-ModuleExportName",
        "#prod-ExportDeclaration",
        "#prod-NamedExports",
        "#sec-static-semantics-referencedbindings",
        "#prod-NamedExports",
        "#prod-StringLiteral",
        "#prod-IdentifierName",
        "#sec-static-semantics-referencedbindings",
        "#prod-NamedExports",
        "#sec-static-semantics-stringvalue",
        "#prod-ReservedWord",
        "#sec-static-semantics-stringvalue",
        "#sec-static-semantics-referencedbindings",
        "#prod-NamedExports",
        "#prod-IdentifierReference",
        "#sec-list-and-record-specification-type",
        "#prod-Module",
        "#sec-static-semantics-exportednames",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-exportedbindings",
        "#prod-ModuleItemList",
        "#sec-static-semantics-exportedbindings",
        "#prod-ModuleItem",
        "#list-concatenation",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#prod-StatementListItem",
        "#sec-list-and-record-specification-type",
        "#prod-ExportDeclaration",
        "#prod-ExportFromClause",
        "#prod-FromClause",
        "#sec-list-and-record-specification-type",
        "#prod-ExportDeclaration",
        "#prod-NamedExports",
        "#sec-static-semantics-exportedbindings",
        "#prod-NamedExports",
        "#prod-ExportDeclaration",
        "#prod-VariableStatement",
        "#sec-static-semantics-boundnames",
        "#prod-VariableStatement",
        "#prod-ExportDeclaration",
        "#prod-Declaration",
        "#sec-static-semantics-boundnames",
        "#prod-Declaration",
        "#prod-ExportDeclaration",
        "#prod-HoistableDeclaration",
        "#prod-ClassDeclaration",
        "#prod-AssignmentExpression",
        "#sec-static-semantics-boundnames",
        "#prod-ExportDeclaration",
        "#prod-NamedExports",
        "#sec-list-and-record-specification-type",
        "#prod-ExportsList",
        "#prod-ExportsList",
        "#prod-ExportSpecifier",
        "#sec-static-semantics-exportedbindings",
        "#prod-ExportsList",
        "#sec-static-semantics-exportedbindings",
        "#prod-ExportSpecifier",
        "#list-concatenation",
        "#prod-ExportSpecifier",
        "#prod-ModuleExportName",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-stringvalue",
        "#prod-ModuleExportName",
        "#prod-ExportSpecifier",
        "#prod-ModuleExportName",
        "#prod-ModuleExportName",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-stringvalue",
        "#prod-ModuleExportName",
        "#sec-list-and-record-specification-type",
        "#prod-Module",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-exportednames",
        "#prod-ModuleItemList",
        "#sec-static-semantics-exportednames",
        "#prod-ModuleItem",
        "#list-concatenation",
        "#prod-ModuleItem",
        "#prod-ExportDeclaration",
        "#sec-static-semantics-exportednames",
        "#prod-ExportDeclaration",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#prod-StatementListItem",
        "#sec-list-and-record-specification-type",
        "#prod-ExportDeclaration",
        "#prod-ExportFromClause",
        "#prod-FromClause",
        "#sec-static-semantics-exportednames",
        "#prod-ExportFromClause",
        "#prod-ExportFromClause",
        "#sec-list-and-record-specification-type",
        "#prod-ExportFromClause",
        "#prod-ModuleExportName",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-stringvalue",
        "#prod-ModuleExportName",
        "#prod-ExportFromClause",
        "#prod-NamedExports",
        "#sec-static-semantics-exportednames",
        "#prod-NamedExports",
        "#prod-ExportDeclaration",
        "#prod-VariableStatement",
        "#sec-static-semantics-boundnames",
        "#prod-VariableStatement",
        "#prod-ExportDeclaration",
        "#prod-Declaration",
        "#sec-static-semantics-boundnames",
        "#prod-Declaration",
        "#prod-ExportDeclaration",
        "#prod-HoistableDeclaration",
        "#prod-ClassDeclaration",
        "#prod-AssignmentExpression",
        "#prod-NamedExports",
        "#sec-list-and-record-specification-type",
        "#prod-ExportsList",
        "#prod-ExportsList",
        "#prod-ExportSpecifier",
        "#sec-static-semantics-exportednames",
        "#prod-ExportsList",
        "#sec-static-semantics-exportednames",
        "#prod-ExportSpecifier",
        "#list-concatenation",
        "#prod-ExportSpecifier",
        "#prod-ModuleExportName",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-stringvalue",
        "#prod-ModuleExportName",
        "#prod-ExportSpecifier",
        "#prod-ModuleExportName",
        "#prod-ModuleExportName",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-stringvalue",
        "#prod-ModuleExportName",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#prod-Module",
        "#sec-list-and-record-specification-type",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#sec-static-semantics-exportentries",
        "#prod-ModuleItemList",
        "#sec-static-semantics-exportentries",
        "#prod-ModuleItem",
        "#list-concatenation",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#prod-StatementListItem",
        "#sec-list-and-record-specification-type",
        "#prod-ExportDeclaration",
        "#prod-ExportFromClause",
        "#prod-FromClause",
        "#sec-static-semantics-modulerequests",
        "#prod-FromClause",
        "#sec-static-semantics-exportentriesformodule",
        "#prod-ExportFromClause",
        "#prod-ExportDeclaration",
        "#prod-NamedExports",
        "#sec-static-semantics-exportentriesformodule",
        "#prod-NamedExports",
        "#prod-ExportDeclaration",
        "#prod-VariableStatement",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-boundnames",
        "#prod-VariableStatement",
        "#exportentry-record",
        "#prod-ExportDeclaration",
        "#prod-Declaration",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-boundnames",
        "#prod-Declaration",
        "#exportentry-record",
        "#prod-ExportDeclaration",
        "#prod-HoistableDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-HoistableDeclaration",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#prod-ExportDeclaration",
        "#prod-ClassDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-ClassDeclaration",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#prod-ExportDeclaration",
        "#prod-AssignmentExpression",
        "#exportentry-record",
        "#note-star-default-star",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#prod-ExportFromClause",
        "#exportentry-record",
        "#prod-ExportFromClause",
        "#prod-ModuleExportName",
        "#sec-static-semantics-stringvalue",
        "#prod-ModuleExportName",
        "#exportentry-record",
        "#prod-NamedExports",
        "#sec-list-and-record-specification-type",
        "#prod-ExportsList",
        "#prod-ExportsList",
        "#prod-ExportSpecifier",
        "#sec-static-semantics-exportentriesformodule",
        "#prod-ExportsList",
        "#sec-static-semantics-exportentriesformodule",
        "#prod-ExportSpecifier",
        "#list-concatenation",
        "#prod-ExportSpecifier",
        "#prod-ModuleExportName",
        "#sec-static-semantics-stringvalue",
        "#prod-ModuleExportName",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#prod-ExportSpecifier",
        "#prod-ModuleExportName",
        "#prod-ModuleExportName",
        "#sec-static-semantics-stringvalue",
        "#prod-ModuleExportName",
        "#sec-static-semantics-stringvalue",
        "#prod-ModuleExportName",
        "#sec-list-and-record-specification-type",
        "#exportentry-record",
        "#sec-list-and-record-specification-type",
        "#sec-syntactic-grammar",
        "#prod-NamedExports",
        "#sec-list-and-record-specification-type",
        "#prod-ExportsList",
        "#prod-ExportsList",
        "#prod-ExportSpecifier",
        "#sec-static-semantics-referencedbindings",
        "#prod-ExportsList",
        "#sec-static-semantics-referencedbindings",
        "#prod-ExportSpecifier",
        "#list-concatenation",
        "#prod-ExportSpecifier",
        "#prod-ModuleExportName",
        "#prod-ModuleExportName",
        "#sec-static-semantics-referencedbindings",
        "#prod-ModuleExportName",
        "#prod-ModuleExportName",
        "#prod-IdentifierName",
        "#sec-list-and-record-specification-type",
        "#prod-IdentifierName",
        "#prod-ModuleExportName",
        "#prod-StringLiteral",
        "#sec-list-and-record-specification-type",
        "#prod-StringLiteral",
        "#prod-ExportDeclaration",
        "#prod-ExportFromClause",
        "#prod-FromClause",
        "#prod-NamedExports",
        "#prod-ExportDeclaration",
        "#prod-VariableStatement",
        "#prod-VariableStatement",
        "#prod-ExportDeclaration",
        "#prod-Declaration",
        "#prod-Declaration",
        "#prod-ExportDeclaration",
        "#prod-HoistableDeclaration",
        "#prod-HoistableDeclaration",
        "#prod-ExportDeclaration",
        "#prod-ClassDeclaration",
        "#sec-runtime-semantics-bindingclassdeclarationevaluation",
        "#prod-ClassDeclaration",
        "#sec-static-semantics-boundnames",
        "#prod-ClassDeclaration",
        "#running-execution-context",
        "#sec-initializeboundname",
        "#prod-ExportDeclaration",
        "#prod-AssignmentExpression",
        "#sec-isanonymousfunctiondefinition",
        "#prod-AssignmentExpression",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#sec-getvalue",
        "#running-execution-context",
        "#sec-initializeboundname",
        "#prod-Script",
        "#early-error",
        "#early-error",
        "#prod-Script",
        "#prod-Script",
        "#sec-parse-script",
        "#early-error",
        "#prod-Module",
        "#prod-Module",
        "#prod-Module",
        "#early-error",
        "#early-error",
        "#early-error",
        "#early-error",
        "#sec-forbidden-extensions",
        "#host",
        "#prod-Script",
        "#prod-Module",
        "#constructor",
        "#host-defined",
        "#host-defined",
        "#sec-forbidden-extensions",
        "#host",
        "#host-defined",
        "#function-object",
        "#constructor",
        "#sec-strict-mode-code",
        "#function-object",
        "#prod-ArrowFunction",
        "#prod-MethodDefinition",
        "#prod-GeneratorDeclaration",
        "#prod-GeneratorExpression",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncGeneratorExpression",
        "#prod-ClassDeclaration",
        "#prod-ClassExpression",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncArrowFunction",
        "#sec-strict-mode-code",
        "#strict-function",
        "#constructor",
        "#constructor",
        "#constructor",
        "#function-object",
        "#strict-function",
        "#sec-object-type",
        "#strict-function",
        "#sec-patterns",
        "#sec-regular-expressions-patterns",
        "#prod-IdentityEscape",
        "#prod-BindingIdentifier",
        "#sec-strict-mode-code",
        "#early-error",
        "#sec-numeric-literals-early-errors",
        "#prod-TemplateEscapeSequence",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-NonOctalDecimalEscapeSequence",
        "#sec-literals-string-literals",
        "#sec-strict-mode-code",
        "#sec-labelled-function-declarations",
        "#sec-block-level-function-declarations-web-legacy-compatibility-semantics",
        "#sec-functiondeclarations-in-ifstatement-statement-clauses",
        "#sec-initializers-in-forin-statement-heads",
        "#prod-Module",
        "#sec-context-free-grammars",
        "#sec-html-like-comments",
        "#prod-ImportCall",
        "#prod-Script",
        "#prod-Module",
        "#sec-global-object",
        "#sec-global-object",
        "#function-object",
        "#sec-built-in-function-objects",
        "#function-object",
        "#realm-record",
        "#realm",
        "#constructor",
        "#function-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-built-in-function-objects",
        "#constructor",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-properties-of-the-object-prototype-object",
        "#function-object",
        "#constructor",
        "#sec-createbuiltinfunction",
        "#sec-createbuiltinfunction",
        "#function-object",
        "#constructor",
        "#integral-number",
        "#function-object",
        "#sec-properties-of-the-array-prototype-object",
        "#function-object",
        "#function-object",
        "#function-object",
        "#constructor",
        "#property-name",
        "#sec-createbuiltinfunction",
        "#sec-object-type",
        "#sec-createbuiltinfunction",
        "#function-object",
        "#sec-object-type",
        "#sec-global-object",
        "#sec-reflection",
        "#sec-additional-built-in-properties",
        "#sec-object-type",
        "#sec-global-object",
        "#sec-reflection",
        "#sec-additional-built-in-properties",
        "#sec-execution-contexts",
        "#constructor",
        "#host-defined",
        "#host-defined",
        "#sec-global-object",
        "#realm-record",
        "#sec-ecmascript-language-types-number-type",
        "#sec-ecmascript-language-types-number-type",
        "#sec-ecmascript-language-types-undefined-type",
        "#assert",
        "#execution-context-stack",
        "#execution-context-stack",
        "#realm",
        "#sec-performeval",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#current-realm",
        "#sec-hostensurecancompilestrings",
        "#sec-getthisenvironment",
        "#sec-function-environment-records",
        "#implementation-defined",
        "#sec-parsetext",
        "#sec-stringtocodepoints",
        "#prod-Script",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-contains",
        "#prod-ScriptBody",
        "#prod-ScriptBody",
        "#sec-static-semantics-contains",
        "#prod-NewTarget",
        "#sec-static-semantics-contains",
        "#prod-SuperProperty",
        "#sec-static-semantics-contains",
        "#prod-SuperCall",
        "#sec-static-semantics-containsarguments",
        "#sec-static-semantics-isstrict",
        "#running-execution-context",
        "#sec-execution-contexts",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#sec-execution-contexts",
        "#sec-newdeclarativeenvironment",
        "#sec-newdeclarativeenvironment",
        "#sec-execution-contexts",
        "#realm",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-ao",
        "#sec-evaldeclarationinstantiation",
        "#sec-normalcompletion",
        "#execution-context-stack",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-strict-mode-code",
        "#host-defined",
        "#realm-record",
        "#realm-record",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#host-environment",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-normalcompletion",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-static-semantics-vardeclarednames",
        "#sec-static-semantics-varscopeddeclarations",
        "#sec-global-environment-records",
        "#assert",
        "#sec-object-environment-records",
        "#sec-variablestatements-in-catch-blocks",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#sec-list-and-record-specification-type",
        "#sec-private-names",
        "#sec-static-semantics-allprivateidentifiersvalid",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#prod-VariableDeclaration",
        "#prod-ForBinding",
        "#prod-BindingIdentifier",
        "#assert",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#sec-static-semantics-boundnames",
        "#sec-global-environment-records",
        "#sec-web-compat-evaldeclarationinstantiation",
        "#sec-list-and-record-specification-type",
        "#prod-VariableDeclaration",
        "#prod-ForBinding",
        "#prod-BindingIdentifier",
        "#sec-static-semantics-boundnames",
        "#sec-global-environment-records",
        "#sec-global-environment-records",
        "#sec-global-object",
        "#proxy-exotic-object",
        "#sec-static-semantics-lexicallyscopeddeclarations",
        "#sec-static-semantics-boundnames",
        "#sec-static-semantics-isconstantdeclaration",
        "#sec-syntactic-grammar",
        "#sec-static-semantics-boundnames",
        "#sec-runtime-semantics-instantiatefunctionobject",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#step-evaldeclarationinstantiation-post-validation",
        "#sec-global-environment-records",
        "#sec-completion-record-specification-type",
        "#step-evaldeclarationinstantiation-post-validation",
        "#sec-variablestatements-in-catch-blocks",
        "#sec-tonumber",
        "#sec-tonumber",
        "#number-value",
        "#sec-tostring",
        "#sec-trimstring",
        "#prod-StrDecimalLiteral",
        "#sec-tonumber-applied-to-the-string-type",
        "#prod-StrDecimalLiteral",
        "#sec-parsetext",
        "#sec-stringtocodepoints",
        "#prod-StrDecimalLiteral",
        "#assert",
        "#sec-syntactic-grammar",
        "#sec-runtime-semantics-stringnumericvalue",
        "#number-value",
        "#integral-number",
        "#sec-tostring",
        "#sec-trimstring",
        "#\u211d",
        "#sec-toint32",
        "#substring",
        "#integer",
        "#implementation-approximated",
        "#integer",
        "#integer",
        "#\ud835\udd3d",
        "#integer",
        "#integer",
        "#sec-decodeuri-encodeduri",
        "#sec-decodeuricomponent-encodeduricomponent",
        "#sec-encodeuri-uri",
        "#sec-encodeuricomponent-uricomponent",
        "#prod-uri",
        "#prod-uriCharacters",
        "#prod-uriCharacters",
        "#prod-uriCharacter",
        "#prod-uriCharacters",
        "#prod-uriCharacter",
        "#prod-uriReserved",
        "#prod-uriUnescaped",
        "#prod-uriEscaped",
        "#prod-uriReserved",
        "#prod-uriUnescaped",
        "#prod-uriAlpha",
        "#prod-DecimalDigit",
        "#prod-uriMark",
        "#prod-uriEscaped",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-uriAlpha",
        "#prod-uriMark",
        "#surrogate-pair",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#string-concatenation",
        "#sec-codepointat",
        "#sec-list-and-record-specification-type",
        "#string-concatenation",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#substring",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-utf16encodecodepoint",
        "#string-concatenation",
        "#sec-tostring",
        "#prod-uriReserved",
        "#sec-decode",
        "#sec-tostring",
        "#sec-decode",
        "#sec-ecmascript-language-types-string-type",
        "#sec-tostring",
        "#prod-uriReserved",
        "#prod-uriUnescaped",
        "#sec-encode",
        "#sec-ecmascript-language-types-string-type",
        "#sec-tostring",
        "#prod-uriUnescaped",
        "#sec-encode",
        "#sec-aggregate-error-constructor",
        "#sec-array-constructor",
        "#sec-arraybuffer-constructor",
        "#sec-bigint-constructor",
        "#sec-typedarray-constructors",
        "#sec-typedarray-constructors",
        "#sec-boolean-constructor",
        "#sec-dataview-constructor",
        "#sec-date-constructor",
        "#sec-error-constructor",
        "#sec-native-error-types-used-in-this-standard-evalerror",
        "#sec-finalization-registry-constructor",
        "#sec-typedarray-constructors",
        "#sec-typedarray-constructors",
        "#sec-function-constructor",
        "#sec-typedarray-constructors",
        "#sec-typedarray-constructors",
        "#sec-typedarray-constructors",
        "#sec-map-constructor",
        "#sec-number-constructor",
        "#sec-object-constructor",
        "#sec-promise-constructor",
        "#sec-proxy-constructor",
        "#sec-native-error-types-used-in-this-standard-rangeerror",
        "#sec-native-error-types-used-in-this-standard-referenceerror",
        "#sec-regexp-constructor",
        "#sec-set-constructor",
        "#sec-sharedarraybuffer-constructor",
        "#sec-string-constructor",
        "#sec-symbol-constructor",
        "#sec-native-error-types-used-in-this-standard-syntaxerror",
        "#sec-native-error-types-used-in-this-standard-typeerror",
        "#sec-typedarray-constructors",
        "#sec-typedarray-constructors",
        "#sec-typedarray-constructors",
        "#sec-typedarray-constructors",
        "#sec-native-error-types-used-in-this-standard-urierror",
        "#sec-weakmap-constructor",
        "#sec-weak-ref-constructor",
        "#sec-weakset-objects",
        "#sec-atomics-object",
        "#sec-json-object",
        "#sec-math-object",
        "#sec-reflect-object",
        "#constructor",
        "#sec-global-object",
        "#ordinary-object",
        "#constructor",
        "#constructor",
        "#sec-ordinarycreatefromconstructor",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-toobject",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-toobject",
        "#sec-toobject",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinaryobjectcreate",
        "#sec-objectdefineproperties",
        "#sec-ecmascript-data-types-and-values",
        "#sec-objectdefineproperties",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-toobject",
        "#sec-list-and-record-specification-type",
        "#sec-get-o-p",
        "#sec-topropertydescriptor",
        "#sec-list-and-record-specification-type",
        "#sec-definepropertyorthrow",
        "#sec-ecmascript-data-types-and-values",
        "#sec-topropertykey",
        "#sec-topropertydescriptor",
        "#sec-definepropertyorthrow",
        "#sec-toobject",
        "#sec-enumerableownpropertynames",
        "#sec-createarrayfromlist",
        "#sec-ecmascript-data-types-and-values",
        "#sec-setintegritylevel",
        "#sec-requireobjectcoercible",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#assert",
        "#ordinary-object",
        "#sec-abstract-closure",
        "#sec-topropertykey",
        "#sec-createdatapropertyorthrow",
        "#sec-createbuiltinfunction",
        "#sec-add-entries-from-iterable",
        "#sec-toobject",
        "#sec-topropertykey",
        "#sec-frompropertydescriptor",
        "#sec-toobject",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-frompropertydescriptor",
        "#sec-createdatapropertyorthrow",
        "#sec-createarrayfromlist",
        "#sec-getownpropertykeys",
        "#sec-createarrayfromlist",
        "#sec-getownpropertykeys",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-completion-record-specification-type",
        "#sec-toobject",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-toobject",
        "#sec-toobject",
        "#sec-topropertykey",
        "#sec-hasownproperty",
        "#sec-samevalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isextensible-o",
        "#sec-ecmascript-data-types-and-values",
        "#sec-testintegritylevel",
        "#sec-ecmascript-data-types-and-values",
        "#sec-testintegritylevel",
        "#sec-toobject",
        "#sec-enumerableownpropertynames",
        "#sec-createarrayfromlist",
        "#sec-ecmascript-data-types-and-values",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-ecmascript-data-types-and-values",
        "#sec-setintegritylevel",
        "#sec-requireobjectcoercible",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-toobject",
        "#sec-enumerableownpropertynames",
        "#sec-createarrayfromlist",
        "#ordinary-object",
        "#sec-immutable-prototype-exotic-objects-setprototypeof-v",
        "#immutable-prototype-exotic-object",
        "#sec-object-constructor",
        "#sec-topropertykey",
        "#sec-toobject",
        "#sec-hasownproperty",
        "#step-hasownproperty-topropertykey",
        "#step-hasownproperty-toobject",
        "#step-hasownproperty-topropertykey",
        "#sec-ecmascript-data-types-and-values",
        "#sec-toobject",
        "#sec-samevalue",
        "#step-isprototypeof-check-object",
        "#step-isprototypeof-toobject",
        "#sec-topropertykey",
        "#sec-toobject",
        "#step-propertyisenumerable-topropertykey",
        "#step-propertyisenumerable-toobject",
        "#step-propertyisenumerable-topropertykey",
        "#sec-invoke",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-toobject",
        "#sec-isarray",
        "#sec-get-o-p",
        "#sec-well-known-symbols",
        "#sec-ecmascript-data-types-and-values",
        "#string-concatenation",
        "#sec-well-known-symbols",
        "#sec-toobject",
        "#sec-conformance",
        "#sec-conformance",
        "#sec-object-type",
        "#sec-toobject",
        "#sec-requireobjectcoercible",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-conformance",
        "#sec-conformance",
        "#sec-toobject",
        "#sec-iscallable",
        "#sec-topropertykey",
        "#sec-definepropertyorthrow",
        "#sec-toobject",
        "#sec-iscallable",
        "#sec-topropertykey",
        "#sec-definepropertyorthrow",
        "#sec-toobject",
        "#sec-topropertykey",
        "#sec-isaccessordescriptor",
        "#sec-toobject",
        "#sec-topropertykey",
        "#sec-isaccessordescriptor",
        "#sec-properties-of-the-object-prototype-object",
        "#constructor",
        "#sec-global-object",
        "#function-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#function-object",
        "#active-function-object",
        "#sec-createdynamicfunction",
        "#constructor",
        "#constructor",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#constructor",
        "#constructor",
        "#assert",
        "#execution-context-stack",
        "#execution-context-stack",
        "#realm",
        "#current-realm",
        "#sec-hostensurecancompilestrings",
        "#prod-FunctionExpression",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#prod-GeneratorExpression",
        "#prod-GeneratorBody",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncFunctionBody",
        "#prod-FormalParameters",
        "#assert",
        "#prod-AsyncGeneratorExpression",
        "#prod-AsyncGeneratorBody",
        "#prod-FormalParameters",
        "#assert",
        "#sec-tostring",
        "#sec-tostring",
        "#string-concatenation",
        "#string-concatenation",
        "#sec-tostring",
        "#string-concatenation",
        "#sec-stringtocodepoints",
        "#sec-parsetext",
        "#sec-stringtocodepoints",
        "#sec-list-and-record-specification-type",
        "#sec-parsetext",
        "#sec-stringtocodepoints",
        "#sec-list-and-record-specification-type",
        "#sec-parsetext",
        "#sec-list-and-record-specification-type",
        "#sec-getprototypefromconstructor",
        "#current-realm",
        "#sec-ordinaryfunctioncreate",
        "#sec-setfunctionname",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-generator-prototype",
        "#sec-definepropertyorthrow",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-asyncgenerator-prototype",
        "#sec-definepropertyorthrow",
        "#sec-makeconstructor",
        "#constructor",
        "#constructor",
        "#function-object",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-object-type",
        "#sec-properties-of-the-function-prototype-object",
        "#function-object",
        "#constructor",
        "#sec-properties-of-the-object-prototype-object",
        "#function-object",
        "#sec-iscallable",
        "#sec-preparefortailcall",
        "#sec-call",
        "#sec-createlistfromarraylike",
        "#sec-preparefortailcall",
        "#sec-call",
        "#sec-global-object",
        "#sec-toobject",
        "#non-strict-function",
        "#bound-function-exotic-object",
        "#step-function-proto-apply-call",
        "#sec-iscallable",
        "#sec-boundfunctioncreate",
        "#sec-hasownproperty",
        "#sec-get-o-p",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tointegerorinfinity",
        "#assert",
        "#eqn-max",
        "#sec-setfunctionlength",
        "#sec-get-o-p",
        "#sec-ecmascript-data-types-and-values",
        "#sec-setfunctionname",
        "#function-object",
        "#exotic-object",
        "#bound-function-exotic-object",
        "#sec-iscallable",
        "#sec-preparefortailcall",
        "#sec-call",
        "#sec-global-object",
        "#sec-toobject",
        "#non-strict-function",
        "#bound-function-exotic-object",
        "#step-function-proto-call-call",
        "#sec-function-constructor",
        "#sec-ecmascript-data-types-and-values",
        "#sec-hosthassourcetextavailable",
        "#sec-codepointstostring",
        "#sec-built-in-function-objects",
        "#implementation-defined",
        "#prod-NativeFunction",
        "#prod-NativeFunctionAccessor",
        "#prod-PropertyName",
        "#sec-ecmascript-data-types-and-values",
        "#sec-iscallable",
        "#implementation-defined",
        "#prod-NativeFunction",
        "#prod-NativeFunction",
        "#prod-NativeFunctionAccessor",
        "#prod-PropertyName",
        "#prod-FormalParameters",
        "#prod-NativeFunctionAccessor",
        "#sec-ordinaryhasinstance",
        "#constructor",
        "#constructor",
        "#function-object",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#function-object",
        "#sec-function.prototype.bind",
        "#table-internal-slots-of-bound-function-exotic-objects",
        "#integral-number",
        "#property-name",
        "#constructor",
        "#ordinary-object",
        "#constructor",
        "#function-object",
        "#prod-MethodDefinition",
        "#prod-GeneratorMethod",
        "#prod-AsyncGeneratorMethod",
        "#prod-ArrowFunction",
        "#host-defined",
        "#function-object",
        "#host-environment",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-toboolean",
        "#sec-ordinarycreatefromconstructor",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-boolean-prototype-object",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-boolean-constructor",
        "#thisbooleanvalue",
        "#thisbooleanvalue",
        "#ordinary-object",
        "#sec-properties-of-the-boolean-prototype-object",
        "#constructor",
        "#sec-global-object",
        "#sec-tostring",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-tostring",
        "#sec-list-and-record-specification-type",
        "#sec-samevalue",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#realm",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#table-globalsymbolregistry-record-fields",
        "#sec-list-and-record-specification-type",
        "#realm",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-symbol.for",
        "#sec-samevalue",
        "#assert",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-properties-of-the-symbol-prototype-object",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#sec-well-known-symbols",
        "#table-well-known-symbols",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-symbol-constructor",
        "#sec-object-type",
        "#thissymbolvalue",
        "#thissymbolvalue",
        "#sec-symboldescriptivestring",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#string-concatenation",
        "#thissymbolvalue",
        "#thissymbolvalue",
        "#sec-well-known-symbols",
        "#ordinary-object",
        "#sec-properties-of-the-symbol-prototype-object",
        "#sec-native-error-types-used-in-this-standard",
        "#sec-aggregate-error-objects",
        "#constructor",
        "#implementation-defined",
        "#sec-aggregate-error-constructor",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#active-function-object",
        "#sec-ordinarycreatefromconstructor",
        "#sec-tostring",
        "#sec-createnonenumerabledatapropertyorthrow",
        "#sec-installerrorcause",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-error-prototype-object",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-error-constructor",
        "#sec-ecmascript-data-types-and-values",
        "#sec-get-o-p",
        "#sec-tostring",
        "#sec-get-o-p",
        "#sec-tostring",
        "#string-concatenation",
        "#ordinary-object",
        "#sec-properties-of-the-error-prototype-object",
        "#sec-nativeerror-object-structure",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-native-error-types-used-in-this-standard",
        "#constructor",
        "#implementation-defined",
        "#sec-native-error-types-used-in-this-standard",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#active-function-object",
        "#sec-ordinarycreatefromconstructor",
        "#sec-tostring",
        "#sec-createnonenumerabledatapropertyorthrow",
        "#sec-installerrorcause",
        "#step-nativerror-ordinarycreatefromconstructor",
        "#constructor",
        "#constructor",
        "#sec-error-constructor",
        "#sec-properties-of-the-nativeerror-prototype-objects",
        "#constructor",
        "#ordinary-object",
        "#sec-properties-of-the-error-prototype-object",
        "#constructor",
        "#sec-nativeerror-constructors",
        "#constructor",
        "#constructor",
        "#constructor",
        "#ordinary-object",
        "#sec-object.prototype.tostring",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#active-function-object",
        "#sec-ordinarycreatefromconstructor",
        "#sec-tostring",
        "#sec-createnonenumerabledatapropertyorthrow",
        "#sec-installerrorcause",
        "#sec-iterabletolist",
        "#sec-definepropertyorthrow",
        "#sec-createarrayfromlist",
        "#constructor",
        "#sec-error-constructor",
        "#sec-properties-of-the-aggregate-error-prototype-objects",
        "#ordinary-object",
        "#sec-properties-of-the-error-prototype-object",
        "#sec-aggregate-error-constructor",
        "#ordinary-object",
        "#sec-properties-of-the-aggregate-error-prototype-objects",
        "#sec-object.prototype.tostring",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-createnonenumerabledatapropertyorthrow",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-tonumeric",
        "#sec-ecmascript-data-types-and-values",
        "#\ud835\udd3d",
        "#\u211d",
        "#sec-ordinarycreatefromconstructor",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#number-value",
        "#number-value",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isintegralnumber",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isnan-number",
        "#sec-isintegralnumber",
        "#eqn-abs",
        "#\u211d",
        "#integral-number",
        "#\u211d",
        "#\u211d",
        "#number-value",
        "#\ud835\udd3d",
        "#integral-number",
        "#\u211d",
        "#\u211d",
        "#number-value",
        "#\ud835\udd3d",
        "#sec-bibliography",
        "#sec-parsefloat-string",
        "#sec-parseint-string-radix",
        "#sec-properties-of-the-number-prototype-object",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#number-value",
        "#number-value",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#number-value",
        "#thisnumbervalue",
        "#sec-number-constructor",
        "#number-value",
        "#sec-tostring",
        "#thisnumbervalue",
        "#sec-tointegerorinfinity",
        "#assert",
        "#sec-numeric-types-number-tostring",
        "#\u211d",
        "#integer",
        "#integer",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#string-concatenation",
        "#assert",
        "#string-concatenation",
        "#string-concatenation",
        "#step-number-proto-toexponential-intermediate-values",
        "#integer",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#number-value",
        "#thisnumbervalue",
        "#sec-tointegerorinfinity",
        "#assert",
        "#sec-numeric-types-number-tostring",
        "#\u211d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#integer",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#number-value",
        "#host-environment",
        "#implementation-defined",
        "#number-value",
        "#sec-tostring",
        "#thisnumbervalue",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#sec-numeric-types-number-tostring",
        "#\u211d",
        "#integer",
        "#assert",
        "#string-concatenation",
        "#assert",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#integral-number",
        "#thisnumbervalue",
        "#sec-tointegerorinfinity",
        "#sec-tostring",
        "#number-value",
        "#implementation-defined",
        "#sec-numeric-types-number-tostring",
        "#thisnumbervalue",
        "#ordinary-object",
        "#sec-properties-of-the-number-prototype-object",
        "#number-value",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#sec-toprimitive",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numbertobigint",
        "#sec-tobigint",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-isintegralnumber",
        "#\u211d",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-toindex",
        "#sec-tobigint",
        "#\u211d",
        "#eqn-modulo",
        "#\u2124",
        "#\u2124",
        "#sec-toindex",
        "#sec-tobigint",
        "#\u211d",
        "#eqn-modulo",
        "#sec-properties-of-the-bigint-prototype-object",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#thisbigintvalue",
        "#sec-bigint-constructor",
        "#host-environment",
        "#implementation-defined",
        "#integral-number",
        "#thisbigintvalue",
        "#sec-tointegerorinfinity",
        "#sec-tostring",
        "#number-value",
        "#implementation-defined",
        "#sec-numeric-types-bigint-tostring",
        "#thisbigintvalue",
        "#sec-well-known-symbols",
        "#sec-global-object",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#function-object",
        "#constructor",
        "#number-value",
        "#sec-ecmascript-language-types-number-type",
        "#number-value",
        "#number-value",
        "#number-value",
        "#number-value",
        "#number-value",
        "#number-value",
        "#number-value",
        "#number-value",
        "#sec-well-known-symbols",
        "#sec-bibliography",
        "http://www.netlib.org/fdlibm",
        "#sec-tonumber",
        "#\ud835\udd3d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#assert",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#implementation-approximated",
        "#number-value",
        "#assert",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#integral-number",
        "#integral-number",
        "#sec-tonumber",
        "#integral-number",
        "#integral-number",
        "#sec-touint32",
        "#\ud835\udd3d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#integral-number",
        "#integral-number",
        "#sec-tonumber",
        "#integral-number",
        "#integral-number",
        "#sec-tonumber",
        "#sec-bibliography",
        "#sec-bibliography",
        "#number-value",
        "#sec-list-and-record-specification-type",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-touint32",
        "#\u211d",
        "#sec-touint32",
        "#eqn-modulo",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#sec-list-and-record-specification-type",
        "#sec-tonumber",
        "#sec-islessthan",
        "#sec-tonumber",
        "#sec-list-and-record-specification-type",
        "#sec-tonumber",
        "#sec-islessthan",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-numeric-types-number-exponentiate",
        "#number-value",
        "#implementation-defined",
        "#realm",
        "#number-value",
        "#integral-number",
        "#number-value",
        "#sec-tonumber",
        "#integral-number",
        "#integral-number",
        "#sec-tonumber",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#implementation-approximated",
        "#number-value",
        "#\u211d",
        "#sec-tonumber",
        "#integral-number",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-time-values-and-time-range",
        "#sec-time-values-and-time-range",
        "#integral-number",
        "#integer",
        "#integer",
        "#sec-number.min_safe_integer",
        "#sec-number.max_safe_integer",
        "#sec-time-values-and-time-range",
        "#\ud835\udd3d",
        "#eqn-floor",
        "#\u211d",
        "#eqn-msPerDay",
        "#\ud835\udd3d",
        "#\u211d",
        "#eqn-modulo",
        "#\u211d",
        "#eqn-msPerDay",
        "#\u211d",
        "#eqn-modulo",
        "#\u211d",
        "#eqn-modulo",
        "#\u211d",
        "#eqn-modulo",
        "#\u211d",
        "#eqn-modulo",
        "#\u211d",
        "#eqn-modulo",
        "#\u211d",
        "#eqn-modulo",
        "#\ud835\udd3d",
        "#\u211d",
        "#eqn-floor",
        "#\u211d",
        "#eqn-floor",
        "#\u211d",
        "#eqn-floor",
        "#\u211d",
        "#sec-time-values-and-time-range",
        "#eqn-msPerDay",
        "#eqn-DaysFromYear",
        "#sec-time-values-and-time-range",
        "#integral-number",
        "#eqn-TimeFromYear",
        "#eqn-DaysInYear",
        "#eqn-YearFromTime",
        "#eqn-DaysInYear",
        "#eqn-YearFromTime",
        "#integral-number",
        "#eqn-MonthFromTime",
        "#sec-time-values-and-time-range",
        "#eqn-DayWithinYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-InLeapYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-InLeapYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-InLeapYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-InLeapYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-InLeapYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-InLeapYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-InLeapYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-InLeapYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-InLeapYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-InLeapYear",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-Day",
        "#eqn-DaysFromYear",
        "#eqn-YearFromTime",
        "#eqn-MonthFromTime",
        "#integral-number",
        "#sec-time-values-and-time-range",
        "#eqn-DayWithinYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-MonthFromTime",
        "#eqn-DayWithinYear",
        "#eqn-InLeapYear",
        "#eqn-MonthFromTime",
        "#sec-time-values-and-time-range",
        "#\ud835\udd3d",
        "#\u211d",
        "#eqn-Day",
        "#eqn-modulo",
        "#implementation-defined",
        "#integral-number",
        "#sec-time-values-and-time-range",
        "#sec-time-values-and-time-range",
        "#sec-time-values-and-time-range",
        "#number-value",
        "#sec-time-values-and-time-range",
        "#sec-time-values-and-time-range",
        "#sec-time-values-and-time-range",
        "https://www.iana.org/time-zones/",
        "#sec-timeclip",
        "#sec-makedate",
        "#sec-makeday",
        "#sec-maketime",
        "#eqn-msPerHour",
        "#sec-timeclip",
        "#sec-makedate",
        "#sec-makeday",
        "#sec-maketime",
        "#eqn-msPerHour",
        "#sec-time-values-and-time-range",
        "#sec-local-time-zone-adjustment",
        "#sec-time-values-and-time-range",
        "#sec-utc-t",
        "#sec-utc-t",
        "#sec-time-values-and-time-range",
        "#sec-time-values-and-time-range",
        "#sec-local-time-zone-adjustment",
        "#sec-localtime",
        "#sec-localtime",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-time-values-and-time-range",
        "#\ud835\udd3d",
        "#eqn-floor",
        "#\u211d",
        "#eqn-msPerHour",
        "#eqn-modulo",
        "#eqn-HoursPerDay",
        "#\ud835\udd3d",
        "#eqn-floor",
        "#\u211d",
        "#eqn-msPerMinute",
        "#eqn-modulo",
        "#eqn-MinutesPerHour",
        "#\ud835\udd3d",
        "#eqn-floor",
        "#\u211d",
        "#eqn-msPerSecond",
        "#eqn-modulo",
        "#eqn-SecondsPerMinute",
        "#\ud835\udd3d",
        "#\u211d",
        "#eqn-modulo",
        "#\u211d",
        "#eqn-msPerSecond",
        "#eqn-msPerSecond",
        "#\ud835\udd3d",
        "#eqn-SecondsPerMinute",
        "#eqn-msPerMinute",
        "#\ud835\udd3d",
        "#eqn-MinutesPerHour",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#eqn-msPerHour",
        "#eqn-msPerMinute",
        "#eqn-msPerSecond",
        "#sec-bibliography",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#eqn-floor",
        "#\u211d",
        "#\ud835\udd3d",
        "#\u211d",
        "#eqn-modulo",
        "#sec-time-values-and-time-range",
        "#eqn-YearFromTime",
        "#eqn-MonthFromTime",
        "#sec-date-number",
        "#eqn-Day",
        "#eqn-msPerDay",
        "#eqn-abs",
        "#\u211d",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#sec-expanded-years",
        "#sec-time-values-and-time-range",
        "#sec-time-values-and-time-range",
        "#sec-date-time-string-format",
        "#sec-time-values-and-time-range",
        "#sec-date.parse",
        "#sec-time-values-and-time-range",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-time-values-and-time-range",
        "#sec-todatestring",
        "#sec-time-values-and-time-range",
        "#sec-ecmascript-data-types-and-values",
        "#thistimevalue",
        "#sec-toprimitive",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-date.parse",
        "#sec-tonumber",
        "#sec-timeclip",
        "#assert",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#sec-makedate",
        "#sec-makeday",
        "#sec-maketime",
        "#sec-timeclip",
        "#sec-utc-t",
        "#sec-ordinarycreatefromconstructor",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-time-values-and-time-range",
        "#sec-tostring",
        "#sec-tostring",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-time-values-and-time-range",
        "#sec-date-time-string-format",
        "#sec-date-time-string-format",
        "#number-value",
        "#implementation-defined",
        "#sec-date-time-string-format",
        "#sec-properties-of-the-date-prototype-object",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#sec-timeclip",
        "#sec-makedate",
        "#sec-makeday",
        "#sec-maketime",
        "#constructor",
        "#sec-time-values-and-time-range",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-time-values-and-time-range",
        "#sec-ecmascript-data-types-and-values",
        "#thistimevalue",
        "#sec-date-constructor",
        "#thistimevalue",
        "#sec-date-number",
        "#sec-localtime",
        "#thistimevalue",
        "#sec-week-day",
        "#sec-localtime",
        "#thistimevalue",
        "#eqn-YearFromTime",
        "#sec-localtime",
        "#thistimevalue",
        "#eqn-HourFromTime",
        "#sec-localtime",
        "#thistimevalue",
        "#eqn-msFromTime",
        "#sec-localtime",
        "#thistimevalue",
        "#eqn-MinFromTime",
        "#sec-localtime",
        "#thistimevalue",
        "#eqn-MonthFromTime",
        "#sec-localtime",
        "#thistimevalue",
        "#eqn-SecFromTime",
        "#sec-localtime",
        "#thistimevalue",
        "#thistimevalue",
        "#sec-localtime",
        "#eqn-msPerMinute",
        "#thistimevalue",
        "#sec-date-number",
        "#thistimevalue",
        "#sec-week-day",
        "#thistimevalue",
        "#eqn-YearFromTime",
        "#thistimevalue",
        "#eqn-HourFromTime",
        "#thistimevalue",
        "#eqn-msFromTime",
        "#thistimevalue",
        "#eqn-MinFromTime",
        "#thistimevalue",
        "#eqn-MonthFromTime",
        "#thistimevalue",
        "#eqn-SecFromTime",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-localtime",
        "#sec-makedate",
        "#sec-makeday",
        "#eqn-YearFromTime",
        "#eqn-MonthFromTime",
        "#eqn-TimeWithinDay",
        "#sec-timeclip",
        "#sec-utc-t",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-localtime",
        "#eqn-MonthFromTime",
        "#sec-tonumber",
        "#sec-date-number",
        "#sec-tonumber",
        "#sec-makedate",
        "#sec-makeday",
        "#eqn-TimeWithinDay",
        "#sec-timeclip",
        "#sec-utc-t",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-localtime",
        "#eqn-MinFromTime",
        "#eqn-SecFromTime",
        "#eqn-msFromTime",
        "#sec-makedate",
        "#eqn-Day",
        "#sec-maketime",
        "#sec-timeclip",
        "#sec-utc-t",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-localtime",
        "#sec-maketime",
        "#eqn-HourFromTime",
        "#eqn-MinFromTime",
        "#eqn-SecFromTime",
        "#sec-timeclip",
        "#sec-utc-t",
        "#sec-makedate",
        "#eqn-Day",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-localtime",
        "#eqn-SecFromTime",
        "#eqn-msFromTime",
        "#sec-makedate",
        "#eqn-Day",
        "#sec-maketime",
        "#eqn-HourFromTime",
        "#sec-timeclip",
        "#sec-utc-t",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-localtime",
        "#sec-date-number",
        "#sec-makedate",
        "#sec-makeday",
        "#eqn-YearFromTime",
        "#eqn-TimeWithinDay",
        "#sec-timeclip",
        "#sec-utc-t",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-localtime",
        "#eqn-msFromTime",
        "#sec-makedate",
        "#eqn-Day",
        "#sec-maketime",
        "#eqn-HourFromTime",
        "#eqn-MinFromTime",
        "#sec-timeclip",
        "#sec-utc-t",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-timeclip",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-makedate",
        "#sec-makeday",
        "#eqn-YearFromTime",
        "#eqn-MonthFromTime",
        "#eqn-TimeWithinDay",
        "#sec-timeclip",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#eqn-MonthFromTime",
        "#sec-tonumber",
        "#sec-date-number",
        "#sec-tonumber",
        "#sec-makedate",
        "#sec-makeday",
        "#eqn-TimeWithinDay",
        "#sec-timeclip",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#eqn-MinFromTime",
        "#eqn-SecFromTime",
        "#eqn-msFromTime",
        "#sec-makedate",
        "#eqn-Day",
        "#sec-maketime",
        "#sec-timeclip",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-maketime",
        "#eqn-HourFromTime",
        "#eqn-MinFromTime",
        "#eqn-SecFromTime",
        "#sec-timeclip",
        "#sec-makedate",
        "#eqn-Day",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-tonumber",
        "#eqn-SecFromTime",
        "#eqn-msFromTime",
        "#sec-makedate",
        "#eqn-Day",
        "#sec-maketime",
        "#eqn-HourFromTime",
        "#sec-timeclip",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-tonumber",
        "#sec-date-number",
        "#sec-makedate",
        "#sec-makeday",
        "#eqn-YearFromTime",
        "#eqn-TimeWithinDay",
        "#sec-timeclip",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-tonumber",
        "#eqn-msFromTime",
        "#sec-makedate",
        "#eqn-Day",
        "#sec-maketime",
        "#eqn-HourFromTime",
        "#eqn-MinFromTime",
        "#sec-timeclip",
        "#this-Date-object",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-localtime",
        "#sec-datestring",
        "#this-time-value",
        "#sec-date-time-string-format",
        "#this-time-value",
        "#sec-json.stringify",
        "#sec-toobject",
        "#sec-toprimitive",
        "#sec-ecmascript-data-types-and-values",
        "#sec-invoke",
        "#implementation-defined",
        "#host-environment",
        "#implementation-defined",
        "#host-environment",
        "#implementation-defined",
        "#host-environment",
        "#thistimevalue",
        "#sec-todatestring",
        "#sec-date.parse",
        "#sec-tozeropaddeddecimalstring",
        "#\u211d",
        "#eqn-HourFromTime",
        "#sec-tozeropaddeddecimalstring",
        "#\u211d",
        "#eqn-MinFromTime",
        "#sec-tozeropaddeddecimalstring",
        "#\u211d",
        "#eqn-SecFromTime",
        "#string-concatenation",
        "#sec-todatestring-day-names",
        "#sec-week-day",
        "#sec-todatestring-month-names",
        "#eqn-MonthFromTime",
        "#sec-tozeropaddeddecimalstring",
        "#\u211d",
        "#sec-date-number",
        "#eqn-YearFromTime",
        "#sec-tozeropaddeddecimalstring",
        "#eqn-abs",
        "#\u211d",
        "#string-concatenation",
        "#sec-local-time-zone-adjustment",
        "#sec-tozeropaddeddecimalstring",
        "#\u211d",
        "#eqn-MinFromTime",
        "#sec-tozeropaddeddecimalstring",
        "#\u211d",
        "#eqn-HourFromTime",
        "#implementation-defined",
        "#string-concatenation",
        "#implementation-defined",
        "#string-concatenation",
        "#sec-localtime",
        "#string-concatenation",
        "#sec-datestring",
        "#sec-timestring",
        "#sec-timezoneestring",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-localtime",
        "#string-concatenation",
        "#sec-timestring",
        "#sec-timezoneestring",
        "#this-time-value",
        "#this-Date-object",
        "#thistimevalue",
        "#sec-todatestring-day-names",
        "#sec-week-day",
        "#sec-todatestring-month-names",
        "#eqn-MonthFromTime",
        "#sec-tozeropaddeddecimalstring",
        "#\u211d",
        "#sec-date-number",
        "#eqn-YearFromTime",
        "#sec-tozeropaddeddecimalstring",
        "#eqn-abs",
        "#\u211d",
        "#string-concatenation",
        "#sec-timestring",
        "#thistimevalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinarytoprimitive",
        "#ordinary-object",
        "#sec-properties-of-the-date-prototype-object",
        "#sec-time-values-and-time-range",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-ecmascript-data-types-and-values",
        "#sec-symboldescriptivestring",
        "#sec-tostring",
        "#sec-stringcreate",
        "#sec-getprototypefromconstructor",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-list-and-record-specification-type",
        "#\u211d",
        "#sec-touint16",
        "#sec-list-and-record-specification-type",
        "#sec-tonumber",
        "#sec-isintegralnumber",
        "#\u211d",
        "#\u211d",
        "#string-concatenation",
        "#sec-utf16encodecodepoint",
        "#\u211d",
        "#assert",
        "#sec-properties-of-the-string-prototype-object",
        "#sec-list-and-record-specification-type",
        "#sec-toobject",
        "#sec-toobject",
        "#sec-get-o-p",
        "#sec-lengthofarraylike",
        "#sec-list-and-record-specification-type",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#sec-get-o-p",
        "#sec-list-and-record-specification-type",
        "#sec-tostring",
        "#sec-tagged-templates",
        "#string-exotic-object",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#substring",
        "#integral-number",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#substring",
        "#integral-number",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#number-value",
        "#integral-number",
        "#sec-ecmascript-language-types-string-type",
        "#surrogate-pair",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#sec-codepointat",
        "#\ud835\udd3d",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tostring",
        "#string-concatenation",
        "#sec-string-constructor",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-isregexp",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#clamping",
        "#substring",
        "#sec-samevaluenonnumeric",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-isregexp",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#assert",
        "#clamping",
        "#sec-stringindexof",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#assert",
        "#clamping",
        "#\ud835\udd3d",
        "#sec-stringindexof",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tostring",
        "#sec-tonumber",
        "#assert",
        "#sec-tointegerorinfinity",
        "#clamping",
        "#\ud835\udd3d",
        "#integer",
        "#substring",
        "#\ud835\udd3d",
        "#implementation-defined",
        "#sort-order",
        "#host-environment",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tostring",
        "#implementation-defined",
        "#consistent-comparator",
        "#host-environment",
        "#host-environment",
        "https://unicode.org/reports/tr15/",
        "https://unicode.org/notes/tn5/",
        "https://unicode.org/reports/tr10/",
        "#sec-requireobjectcoercible",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-call",
        "#sec-tostring",
        "#sec-regexpcreate",
        "#sec-invoke",
        "#sec-well-known-symbols",
        "#sec-requireobjectcoercible",
        "#sec-isregexp",
        "#sec-get-o-p",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-call",
        "#sec-tostring",
        "#sec-regexpcreate",
        "#sec-invoke",
        "#sec-well-known-symbols",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tostring",
        "https://unicode.org/reports/tr15/",
        "#sec-requireobjectcoercible",
        "#sec-stringpad",
        "#sec-requireobjectcoercible",
        "#sec-stringpad",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-tostring",
        "#\u211d",
        "#sec-tolength",
        "#sec-tostring",
        "#string-concatenation",
        "#string-concatenation",
        "#integer",
        "#integer",
        "#sec-stringpad",
        "#\ud835\udd3d",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#sec-requireobjectcoercible",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-call",
        "#sec-tostring",
        "#sec-tostring",
        "#sec-iscallable",
        "#sec-tostring",
        "#sec-stringindexof",
        "#substring",
        "#substring",
        "#sec-tostring",
        "#sec-call",
        "#\ud835\udd3d",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-getsubstitution",
        "#string-concatenation",
        "#integer",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#substring",
        "#substring",
        "#eqn-min",
        "#sec-well-known-symbols",
        "#sec-properties-of-the-regexp-prototype-object",
        "#integer",
        "#substring",
        "#substring",
        "#\u211d",
        "#sec-stringtonumber",
        "#assert",
        "#sec-stringindexof",
        "#substring",
        "#substring",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-get-o-p",
        "#sec-tostring",
        "#substring",
        "#substring",
        "#string-concatenation",
        "#sec-requireobjectcoercible",
        "#sec-isregexp",
        "#sec-get-o-p",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-call",
        "#sec-tostring",
        "#sec-tostring",
        "#sec-iscallable",
        "#sec-tostring",
        "#eqn-max",
        "#sec-list-and-record-specification-type",
        "#sec-stringindexof",
        "#sec-stringindexof",
        "#substring",
        "#sec-tostring",
        "#sec-call",
        "#\ud835\udd3d",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-getsubstitution",
        "#string-concatenation",
        "#string-concatenation",
        "#substring",
        "#sec-requireobjectcoercible",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-call",
        "#sec-tostring",
        "#sec-regexpcreate",
        "#sec-invoke",
        "#sec-well-known-symbols",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#substring",
        "#sec-well-known-symbols",
        "#sec-requireobjectcoercible",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-call",
        "#sec-tostring",
        "#\u211d",
        "#sec-touint32",
        "#sec-tostring",
        "#sec-createarrayfromlist",
        "#sec-createarrayfromlist",
        "#substring",
        "#sec-list-and-record-specification-type",
        "#sec-createarrayfromlist",
        "#sec-createarrayfromlist",
        "#sec-list-and-record-specification-type",
        "#sec-stringindexof",
        "#substring",
        "#sec-createarrayfromlist",
        "#sec-stringindexof",
        "#substring",
        "#sec-createarrayfromlist",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-isregexp",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#clamping",
        "#substring",
        "#sec-samevaluenonnumeric",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#sec-tointegerorinfinity",
        "#clamping",
        "#clamping",
        "#eqn-min",
        "#eqn-max",
        "#substring",
        "#sec-ecmascript-language-types-string-type",
        "#host-environment",
        "#sec-ecmascript-language-types-string-type",
        "#host-environment",
        "#sec-ecmascript-language-types-string-type",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-stringtocodepoints",
        "#sec-codepointstostring",
        "https://unicode.org/Public/UCD/latest/ucd/UnicodeData.txt",
        "https://unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt",
        "#thisstringvalue",
        "#sec-ecmascript-language-types-string-type",
        "#sec-ecmascript-language-types-string-type",
        "#sec-trimstring",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types-string-type",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#assert",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#sec-ecmascript-language-types-string-type",
        "#sec-ecmascript-language-types-string-type",
        "#sec-trimstring",
        "#sec-ecmascript-language-types-string-type",
        "#sec-trimstring",
        "#thisstringvalue",
        "#sec-iterator-interface",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-abstract-closure",
        "#sec-codepointat",
        "#substring",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#sec-createiteratorfromclosure",
        "#sec-%stringiteratorprototype%-object",
        "#string-exotic-object",
        "#sec-properties-of-the-string-prototype-object",
        "#integer",
        "#constructor",
        "#ordinary-object",
        "#sec-%iteratorprototype%-object",
        "#sec-generatorresume",
        "#sec-well-known-symbols",
        "#constructor",
        "#prod-Pattern",
        "#prod-Pattern",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Alternative",
        "#prod-Alternative",
        "#prod-Disjunction",
        "#prod-Alternative",
        "#prod-Alternative",
        "#prod-Term",
        "#prod-Term",
        "#prod-Assertion",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Quantifier",
        "#prod-Assertion",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Quantifier",
        "#prod-QuantifierPrefix",
        "#prod-QuantifierPrefix",
        "#prod-QuantifierPrefix",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-Atom",
        "#prod-PatternCharacter",
        "#prod-AtomEscape",
        "#prod-CharacterClass",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-SyntaxCharacter",
        "#prod-PatternCharacter",
        "#prod-SourceCharacter",
        "#prod-SyntaxCharacter",
        "#prod-AtomEscape",
        "#prod-DecimalEscape",
        "#prod-CharacterClassEscape",
        "#prod-CharacterEscape",
        "#prod-GroupName",
        "#prod-CharacterEscape",
        "#prod-ControlEscape",
        "#prod-ControlLetter",
        "#prod-DecimalDigit",
        "#prod-HexEscapeSequence",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-IdentityEscape",
        "#prod-ControlEscape",
        "#prod-ControlLetter",
        "#prod-GroupSpecifier",
        "#prod-GroupName",
        "#prod-GroupName",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierStart",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierPart",
        "#prod-RegExpIdentifierStart",
        "#prod-IdentifierStartChar",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#prod-RegExpIdentifierPart",
        "#prod-IdentifierPartChar",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-HexLeadSurrogate",
        "#prod-HexTrailSurrogate",
        "#prod-HexLeadSurrogate",
        "#prod-HexTrailSurrogate",
        "#prod-HexNonSurrogate",
        "#prod-Hex4Digits",
        "#prod-CodePoint",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#prod-HexTrailSurrogate",
        "#prod-HexLeadSurrogate",
        "#prod-HexLeadSurrogate",
        "#prod-HexTrailSurrogate",
        "#prod-HexLeadSurrogate",
        "#prod-Hex4Digits",
        "#prod-Hex4Digits",
        "#prod-HexTrailSurrogate",
        "#prod-Hex4Digits",
        "#prod-Hex4Digits",
        "#prod-HexNonSurrogate",
        "#prod-Hex4Digits",
        "#prod-Hex4Digits",
        "#prod-IdentityEscape",
        "#prod-SyntaxCharacter",
        "#prod-SourceCharacter",
        "#prod-UnicodeIDContinue",
        "#prod-DecimalEscape",
        "#prod-NonZeroDigit",
        "#prod-DecimalDigits",
        "#prod-DecimalDigit",
        "#prod-CharacterClassEscape",
        "#prod-UnicodePropertyValueExpression",
        "#prod-UnicodePropertyValueExpression",
        "#prod-UnicodePropertyValueExpression",
        "#prod-UnicodePropertyName",
        "#prod-UnicodePropertyValue",
        "#prod-LoneUnicodePropertyNameOrValue",
        "#prod-UnicodePropertyName",
        "#prod-UnicodePropertyNameCharacters",
        "#prod-UnicodePropertyNameCharacters",
        "#prod-UnicodePropertyNameCharacter",
        "#prod-UnicodePropertyNameCharacters",
        "#prod-UnicodePropertyValue",
        "#prod-UnicodePropertyValueCharacters",
        "#prod-LoneUnicodePropertyNameOrValue",
        "#prod-UnicodePropertyValueCharacters",
        "#prod-UnicodePropertyValueCharacters",
        "#prod-UnicodePropertyValueCharacter",
        "#prod-UnicodePropertyValueCharacters",
        "#prod-UnicodePropertyValueCharacter",
        "#prod-UnicodePropertyNameCharacter",
        "#prod-DecimalDigit",
        "#prod-UnicodePropertyNameCharacter",
        "#prod-ControlLetter",
        "#prod-CharacterClass",
        "#prod-ClassRanges",
        "#prod-ClassRanges",
        "#prod-ClassRanges",
        "#prod-NonemptyClassRanges",
        "#prod-NonemptyClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-ClassAtom",
        "#prod-ClassAtomNoDash",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-ClassAtomNoDash",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtomNoDash",
        "#prod-ClassAtomNoDash",
        "#prod-SourceCharacter",
        "#prod-ClassEscape",
        "#prod-ClassEscape",
        "#prod-CharacterClassEscape",
        "#prod-CharacterEscape",
        "#sec-regular-expressions-patterns",
        "#sec-patterns-static-semantics-early-errors-annexb",
        "#prod-Pattern",
        "#prod-Disjunction",
        "#prod-Pattern",
        "#prod-GroupSpecifier",
        "#prod-RegExpIdentifierName",
        "#sec-static-semantics-capturinggroupname",
        "#prod-QuantifierPrefix",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-AtomEscape",
        "#prod-GroupName",
        "#prod-Pattern",
        "#prod-GroupSpecifier",
        "#prod-RegExpIdentifierName",
        "#sec-static-semantics-capturinggroupname",
        "#sec-static-semantics-capturinggroupname",
        "#prod-RegExpIdentifierName",
        "#prod-GroupName",
        "#prod-AtomEscape",
        "#prod-DecimalEscape",
        "#sec-patterns-static-semantics-capturing-group-number",
        "#prod-DecimalEscape",
        "#sec-notation",
        "#prod-NonemptyClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-character-value",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-character-value",
        "#prod-ClassAtom",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-ClassAtomNoDash",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtomNoDash",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtomNoDash",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-character-value",
        "#prod-ClassAtomNoDash",
        "#sec-patterns-static-semantics-character-value",
        "#prod-ClassAtom",
        "#prod-RegExpIdentifierStart",
        "#prod-RegExpUnicodeEscapeSequence",
        "#sec-patterns-static-semantics-character-value",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-IdentifierStartChar",
        "#prod-RegExpIdentifierStart",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#sec-regexpidentifiercodepoint",
        "#prod-RegExpIdentifierStart",
        "#prod-UnicodeIDStart",
        "#prod-RegExpIdentifierPart",
        "#prod-RegExpUnicodeEscapeSequence",
        "#sec-patterns-static-semantics-character-value",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-IdentifierPartChar",
        "#prod-RegExpIdentifierPart",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#sec-regexpidentifiercodepoint",
        "#prod-RegExpIdentifierPart",
        "#prod-UnicodeIDContinue",
        "#prod-UnicodePropertyValueExpression",
        "#prod-UnicodePropertyName",
        "#prod-UnicodePropertyValue",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-sourcetext",
        "#prod-UnicodePropertyName",
        "#sec-list-and-record-specification-type",
        "#property-name",
        "#property-name",
        "#table-nonbinary-unicode-properties",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-sourcetext",
        "#prod-UnicodePropertyValue",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-sourcetext",
        "#prod-UnicodePropertyName",
        "#table-unicode-general-category-values",
        "#table-unicode-script-values",
        "#prod-UnicodePropertyValueExpression",
        "#prod-LoneUnicodePropertyNameOrValue",
        "#sec-list-and-record-specification-type",
        "#sec-static-semantics-sourcetext",
        "#prod-LoneUnicodePropertyNameOrValue",
        "#sec-list-and-record-specification-type",
        "#table-unicode-general-category-values",
        "#property-name",
        "#table-binary-unicode-properties",
        "#integer",
        "#sec-patterns-static-semantics-early-errors-annexb",
        "#prod-DecimalEscape",
        "#prod-NonZeroDigit",
        "#prod-NonZeroDigit",
        "#prod-DecimalEscape",
        "#prod-NonZeroDigit",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-NonZeroDigit",
        "#prod-DecimalDigits",
        "#prod-NonZeroDigit",
        "#prod-DecimalDigits",
        "#sec-literals-numeric-literals",
        "#sec-patterns-static-semantics-is-character-class-annexb",
        "#prod-ClassAtom",
        "#prod-ClassAtomNoDash",
        "#prod-SourceCharacter",
        "#prod-ClassEscape",
        "#prod-CharacterEscape",
        "#prod-ClassEscape",
        "#prod-CharacterClassEscape",
        "#integer",
        "#sec-patterns-static-semantics-character-value-annexb",
        "#prod-ClassAtom",
        "#prod-ClassAtomNoDash",
        "#prod-SourceCharacter",
        "#prod-SourceCharacter",
        "#prod-ClassEscape",
        "#prod-ClassEscape",
        "#prod-CharacterEscape",
        "#prod-ControlEscape",
        "#table-controlescape-code-point-values",
        "#prod-CharacterEscape",
        "#prod-ControlLetter",
        "#prod-ControlLetter",
        "#prod-CharacterEscape",
        "#prod-DecimalDigit",
        "#prod-CharacterEscape",
        "#prod-HexEscapeSequence",
        "#prod-HexEscapeSequence",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-HexLeadSurrogate",
        "#prod-HexTrailSurrogate",
        "#sec-patterns-static-semantics-character-value",
        "#prod-HexLeadSurrogate",
        "#sec-patterns-static-semantics-character-value",
        "#prod-HexTrailSurrogate",
        "#sec-utf16decodesurrogatepair",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-Hex4Digits",
        "#prod-Hex4Digits",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-CodePoint",
        "#prod-CodePoint",
        "#prod-HexLeadSurrogate",
        "#prod-Hex4Digits",
        "#prod-HexTrailSurrogate",
        "#prod-Hex4Digits",
        "#prod-HexNonSurrogate",
        "#prod-Hex4Digits",
        "#prod-HexDigits",
        "#prod-CharacterEscape",
        "#prod-IdentityEscape",
        "#prod-IdentityEscape",
        "#sec-list-and-record-specification-type",
        "#prod-UnicodePropertyNameCharacters",
        "#prod-UnicodePropertyNameCharacter",
        "#prod-UnicodePropertyNameCharacters",
        "#prod-UnicodePropertyValueCharacters",
        "#prod-UnicodePropertyValueCharacter",
        "#prod-UnicodePropertyValueCharacters",
        "#sec-list-and-record-specification-type",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierStart",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierPart",
        "#sec-regexpidentifiercodepoints",
        "#prod-RegExpIdentifierName",
        "#sec-codepointstostring",
        "#sec-list-and-record-specification-type",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierStart",
        "#sec-regexpidentifiercodepoint",
        "#prod-RegExpIdentifierStart",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierPart",
        "#sec-regexpidentifiercodepoints",
        "#prod-RegExpIdentifierName",
        "#sec-regexpidentifiercodepoint",
        "#prod-RegExpIdentifierPart",
        "#list-concatenation",
        "#prod-RegExpIdentifierStart",
        "#prod-IdentifierStartChar",
        "#prod-IdentifierStartChar",
        "#prod-RegExpIdentifierPart",
        "#prod-IdentifierPartChar",
        "#prod-IdentifierPartChar",
        "#prod-RegExpIdentifierStart",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-RegExpIdentifierPart",
        "#prod-RegExpUnicodeEscapeSequence",
        "#sec-patterns-static-semantics-character-value",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-RegExpIdentifierStart",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#prod-RegExpIdentifierPart",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#sec-utf16decodesurrogatepair",
        "#sec-abstract-closure",
        "#sec-abstract-closure",
        "#prod-Pattern",
        "#sec-ecmascript-language-types-string-type",
        "#prod-Pattern",
        "#prod-Pattern",
        "#sec-list-and-record-specification-type",
        "#prod-SourceCharacter",
        "#prod-SourceCharacter",
        "#prod-SourceCharacter",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#constructor",
        "#sec-utf16decodesurrogatepair",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#prod-Atom",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#sec-syntactic-grammar",
        "#prod-Atom",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#sec-runtime-semantics-canonicalize-ch",
        "#integer",
        "#integer",
        "#integer",
        "#sec-list-and-record-specification-type",
        "#sec-abstract-closure",
        "#sec-abstract-closure",
        "#sec-abstract-closure",
        "#sec-list-and-record-specification-type",
        "#integer",
        "#prod-Pattern",
        "#prod-Disjunction",
        "#sec-compilesubpattern",
        "#prod-Disjunction",
        "#sec-abstract-closure",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#integer",
        "#sec-pattern-semantics",
        "#sec-pattern-semantics",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-abstract-closure",
        "#sec-regexpbuiltinexec",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-pattern-semantics",
        "#sec-abstract-closure",
        "#sec-list-and-record-specification-type",
        "#implementation-defined",
        "#sec-compilesubpattern-annexb",
        "#prod-Disjunction",
        "#prod-Alternative",
        "#prod-Disjunction",
        "#sec-compilesubpattern",
        "#prod-Alternative",
        "#sec-compilesubpattern",
        "#prod-Disjunction",
        "#assert",
        "#assert",
        "#prod-Alternative",
        "#prod-Disjunction",
        "#prod-Alternative",
        "#prod-Disjunction",
        "#prod-Alternative",
        "#prod-Alternative",
        "#prod-Disjunction",
        "#prod-Alternative",
        "#prod-Alternative",
        "#assert",
        "#assert",
        "#prod-Alternative",
        "#prod-Alternative",
        "#prod-Term",
        "#sec-compilesubpattern",
        "#prod-Alternative",
        "#sec-compilesubpattern",
        "#prod-Term",
        "#assert",
        "#assert",
        "#assert",
        "#assert",
        "#assert",
        "#assert",
        "#assert",
        "#prod-Term",
        "#prod-Alternative",
        "#prod-Term",
        "#prod-Term",
        "#prod-Term",
        "#prod-Alternative",
        "#prod-Alternative",
        "#prod-Term",
        "#prod-Term",
        "#prod-Assertion",
        "#sec-compileassertion",
        "#prod-Assertion",
        "#prod-Term",
        "#prod-Atom",
        "#sec-compileatom",
        "#prod-Atom",
        "#prod-Term",
        "#prod-Atom",
        "#prod-Quantifier",
        "#sec-compileatom",
        "#prod-Atom",
        "#sec-compilequantifier",
        "#prod-Quantifier",
        "#assert",
        "#prod-Term",
        "#prod-Atom",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#sec-syntactic-grammar",
        "#prod-Term",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#sec-syntactic-grammar",
        "#prod-Atom",
        "#assert",
        "#assert",
        "#sec-runtime-semantics-repeatmatcher-abstract-operation",
        "#integer",
        "#integer",
        "#integer",
        "#integer",
        "#assert",
        "#sec-runtime-semantics-repeatmatcher-abstract-operation",
        "#sec-list-and-record-specification-type",
        "#integer",
        "#prod-Atom",
        "#prod-Quantifier",
        "#prod-Quantifier",
        "#prod-Quantifier",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Atom",
        "#step-repeatmatcher-clear-captures",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Atom",
        "#step-repeatmatcher-done",
        "#prod-Atom",
        "#sec-compileassertion-annexb",
        "#prod-Assertion",
        "#assert",
        "#assert",
        "#prod-LineTerminator",
        "#prod-Assertion",
        "#assert",
        "#assert",
        "#prod-LineTerminator",
        "#prod-Assertion",
        "#assert",
        "#assert",
        "#sec-runtime-semantics-iswordchar-abstract-operation",
        "#sec-runtime-semantics-iswordchar-abstract-operation",
        "#prod-Assertion",
        "#assert",
        "#assert",
        "#sec-runtime-semantics-iswordchar-abstract-operation",
        "#sec-runtime-semantics-iswordchar-abstract-operation",
        "#prod-Assertion",
        "#prod-Disjunction",
        "#sec-compilesubpattern",
        "#prod-Disjunction",
        "#assert",
        "#assert",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#prod-Assertion",
        "#prod-Disjunction",
        "#sec-compilesubpattern",
        "#prod-Disjunction",
        "#assert",
        "#assert",
        "#assert",
        "#prod-Assertion",
        "#prod-Disjunction",
        "#sec-compilesubpattern",
        "#prod-Disjunction",
        "#assert",
        "#assert",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#prod-Assertion",
        "#prod-Disjunction",
        "#sec-compilesubpattern",
        "#prod-Disjunction",
        "#assert",
        "#assert",
        "#assert",
        "#integer",
        "#sec-list-and-record-specification-type",
        "#integer",
        "#integer",
        "#prod-Quantifier",
        "#prod-QuantifierPrefix",
        "#sec-compilequantifierprefix",
        "#prod-QuantifierPrefix",
        "#sec-list-and-record-specification-type",
        "#prod-Quantifier",
        "#prod-QuantifierPrefix",
        "#sec-compilequantifierprefix",
        "#prod-QuantifierPrefix",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#integer",
        "#integer",
        "#prod-QuantifierPrefix",
        "#sec-list-and-record-specification-type",
        "#prod-QuantifierPrefix",
        "#sec-list-and-record-specification-type",
        "#prod-QuantifierPrefix",
        "#sec-list-and-record-specification-type",
        "#prod-QuantifierPrefix",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#sec-literals-numeric-literals",
        "#sec-list-and-record-specification-type",
        "#prod-QuantifierPrefix",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#sec-list-and-record-specification-type",
        "#prod-QuantifierPrefix",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#sec-list-and-record-specification-type",
        "#sec-compileatom-annexb",
        "#prod-Atom",
        "#prod-PatternCharacter",
        "#prod-PatternCharacter",
        "#sec-runtime-semantics-charactersetmatcher-abstract-operation",
        "#prod-Atom",
        "#prod-LineTerminator",
        "#sec-runtime-semantics-charactersetmatcher-abstract-operation",
        "#prod-Atom",
        "#prod-CharacterClass",
        "#sec-compilecharacterclass",
        "#prod-CharacterClass",
        "#sec-runtime-semantics-charactersetmatcher-abstract-operation",
        "#prod-Atom",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#sec-compilesubpattern",
        "#prod-Disjunction",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#sec-syntactic-grammar",
        "#prod-Atom",
        "#assert",
        "#assert",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#sec-notation",
        "#assert",
        "#assert",
        "#sec-notation",
        "#prod-Atom",
        "#prod-Disjunction",
        "#sec-compilesubpattern",
        "#prod-Disjunction",
        "#prod-AtomEscape",
        "#prod-DecimalEscape",
        "#sec-patterns-static-semantics-capturing-group-number",
        "#prod-DecimalEscape",
        "#assert",
        "#sec-backreference-matcher",
        "#sec-notation",
        "#prod-AtomEscape",
        "#prod-CharacterEscape",
        "#sec-patterns-static-semantics-character-value",
        "#prod-CharacterEscape",
        "#sec-runtime-semantics-charactersetmatcher-abstract-operation",
        "#prod-AtomEscape",
        "#prod-CharacterClassEscape",
        "#sec-compiletocharset",
        "#prod-CharacterClassEscape",
        "#sec-runtime-semantics-charactersetmatcher-abstract-operation",
        "#prod-AtomEscape",
        "#prod-GroupName",
        "#prod-Pattern",
        "#prod-GroupSpecifier",
        "#prod-RegExpIdentifierName",
        "#sec-static-semantics-capturinggroupname",
        "#sec-static-semantics-capturinggroupname",
        "#prod-RegExpIdentifierName",
        "#prod-GroupName",
        "#assert",
        "#prod-GroupSpecifier",
        "#prod-GroupSpecifier",
        "#prod-Atom",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#sec-syntactic-grammar",
        "#prod-GroupSpecifier",
        "#prod-Atom",
        "#sec-backreference-matcher",
        "#assert",
        "#assert",
        "#eqn-min",
        "#sec-runtime-semantics-canonicalize-ch",
        "#sec-runtime-semantics-canonicalize-ch",
        "#sec-list-and-record-specification-type",
        "#integer",
        "#assert",
        "#assert",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#eqn-min",
        "#integer",
        "#sec-runtime-semantics-canonicalize-ch",
        "#sec-runtime-semantics-canonicalize-ch",
        "https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt",
        "#assert",
        "#sec-codepointstostring",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#sec-abstract-closure",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#sec-list-and-record-specification-type",
        "#prod-CharacterClass",
        "#prod-ClassRanges",
        "#sec-compiletocharset",
        "#prod-ClassRanges",
        "#sec-list-and-record-specification-type",
        "#prod-CharacterClass",
        "#prod-ClassRanges",
        "#sec-compiletocharset",
        "#prod-ClassRanges",
        "#sec-list-and-record-specification-type",
        "#sec-compiletocharset-annexb",
        "#prod-ClassRanges",
        "#prod-NonemptyClassRanges",
        "#prod-ClassAtom",
        "#prod-NonemptyClassRangesNoDash",
        "#sec-compiletocharset",
        "#prod-ClassAtom",
        "#sec-compiletocharset",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-NonemptyClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#sec-compiletocharset",
        "#prod-ClassAtom",
        "#sec-compiletocharset",
        "#prod-ClassAtom",
        "#sec-compiletocharset",
        "#prod-ClassRanges",
        "#sec-runtime-semantics-characterrange-abstract-operation",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-ClassAtomNoDash",
        "#prod-NonemptyClassRangesNoDash",
        "#sec-compiletocharset",
        "#prod-ClassAtomNoDash",
        "#sec-compiletocharset",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-ClassAtomNoDash",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#sec-compiletocharset",
        "#prod-ClassAtomNoDash",
        "#sec-compiletocharset",
        "#prod-ClassAtom",
        "#sec-compiletocharset",
        "#prod-ClassRanges",
        "#sec-runtime-semantics-characterrange-abstract-operation",
        "#prod-ClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtomNoDash",
        "#prod-SourceCharacter",
        "#prod-SourceCharacter",
        "#prod-ClassEscape",
        "#prod-CharacterEscape",
        "#sec-patterns-static-semantics-character-value",
        "#prod-ClassEscape",
        "#prod-ClassAtom",
        "#prod-CharacterClass",
        "#prod-ClassAtom",
        "#prod-CharacterClassEscape",
        "#prod-CharacterClassEscape",
        "#prod-CharacterClassEscape",
        "#prod-CharacterClassEscape",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-CharacterClassEscape",
        "#prod-CharacterClassEscape",
        "#prod-CharacterClassEscape",
        "#prod-CharacterClassEscape",
        "#prod-CharacterClassEscape",
        "#prod-CharacterClassEscape",
        "#prod-UnicodePropertyValueExpression",
        "#sec-compiletocharset",
        "#prod-UnicodePropertyValueExpression",
        "#prod-CharacterClassEscape",
        "#prod-UnicodePropertyValueExpression",
        "#sec-compiletocharset",
        "#prod-UnicodePropertyValueExpression",
        "#prod-UnicodePropertyValueExpression",
        "#prod-UnicodePropertyName",
        "#prod-UnicodePropertyValue",
        "#sec-static-semantics-sourcetext",
        "#prod-UnicodePropertyName",
        "#sec-runtime-semantics-unicodematchproperty-p",
        "#assert",
        "#property-name",
        "#property-name",
        "#table-nonbinary-unicode-properties",
        "#sec-static-semantics-sourcetext",
        "#prod-UnicodePropertyValue",
        "#sec-runtime-semantics-unicodematchpropertyvalue-p-v",
        "#prod-UnicodePropertyValueExpression",
        "#prod-LoneUnicodePropertyNameOrValue",
        "#sec-static-semantics-sourcetext",
        "#prod-LoneUnicodePropertyNameOrValue",
        "#sec-runtime-semantics-unicodematchpropertyvalue-p-v",
        "#sec-list-and-record-specification-type",
        "#table-unicode-general-category-values",
        "#sec-runtime-semantics-unicodematchproperty-p",
        "#assert",
        "#property-name",
        "#table-binary-unicode-properties",
        "#assert",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#property-name",
        "#assert",
        "#table-nonbinary-unicode-properties",
        "#table-binary-unicode-properties",
        "#sec-list-and-record-specification-type",
        "#table-nonbinary-unicode-properties",
        "#table-binary-unicode-properties",
        "#property-name",
        "https://unicode.org/reports/tr18/#RL1.2",
        "#property-name",
        "#property-name",
        "https://unicode.org/reports/tr18/#General_Category_Property",
        "https://unicode.org/reports/tr24/#Script",
        "https://unicode.org/reports/tr24/#Script_Extensions",
        "#property-name",
        "#property-name",
        "https://unicode.org/reports/tr18/#General_Category_Property",
        "https://unicode.org/reports/tr44/#ASCII_Hex_Digit",
        "https://unicode.org/reports/tr44/#Alphabetic",
        "https://unicode.org/reports/tr18/#General_Category_Property",
        "https://unicode.org/reports/tr18/#General_Category_Property",
        "https://unicode.org/reports/tr44/#Bidi_Control",
        "https://unicode.org/reports/tr44/#Bidi_Mirrored",
        "https://unicode.org/reports/tr44/#Case_Ignorable",
        "https://unicode.org/reports/tr44/#Cased",
        "https://unicode.org/reports/tr44/#CWCF",
        "https://unicode.org/reports/tr44/#CWCM",
        "https://unicode.org/reports/tr44/#CWL",
        "https://unicode.org/reports/tr44/#CWKCF",
        "https://unicode.org/reports/tr44/#CWT",
        "https://unicode.org/reports/tr44/#CWU",
        "https://unicode.org/reports/tr44/#Dash",
        "https://unicode.org/reports/tr44/#Default_Ignorable_Code_Point",
        "https://unicode.org/reports/tr44/#Deprecated",
        "https://unicode.org/reports/tr44/#Diacritic",
        "https://unicode.org/reports/tr51/#Emoji_Properties",
        "https://unicode.org/reports/tr51/#Emoji_Properties",
        "https://unicode.org/reports/tr51/#Emoji_Properties",
        "https://unicode.org/reports/tr51/#Emoji_Properties",
        "https://unicode.org/reports/tr51/#Emoji_Properties",
        "https://unicode.org/reports/tr51/#Emoji_Properties",
        "https://unicode.org/reports/tr44/#Extender",
        "https://unicode.org/reports/tr44/#Grapheme_Base",
        "https://unicode.org/reports/tr44/#Grapheme_Extend",
        "https://unicode.org/reports/tr44/#Hex_Digit",
        "https://unicode.org/reports/tr44/#IDS_Binary_Operator",
        "https://unicode.org/reports/tr44/#IDS_Trinary_Operator",
        "https://unicode.org/reports/tr44/#ID_Continue",
        "https://unicode.org/reports/tr44/#ID_Start",
        "https://unicode.org/reports/tr44/#Ideographic",
        "https://unicode.org/reports/tr44/#Join_Control",
        "https://unicode.org/reports/tr44/#Logical_Order_Exception",
        "https://unicode.org/reports/tr44/#Lowercase",
        "https://unicode.org/reports/tr44/#Math",
        "https://unicode.org/reports/tr44/#Noncharacter_Code_Point",
        "https://unicode.org/reports/tr44/#Pattern_Syntax",
        "https://unicode.org/reports/tr44/#Pattern_White_Space",
        "https://unicode.org/reports/tr44/#Quotation_Mark",
        "https://unicode.org/reports/tr44/#Radical",
        "https://unicode.org/reports/tr44/#Regional_Indicator",
        "https://unicode.org/reports/tr44/#STerm",
        "https://unicode.org/reports/tr44/#Soft_Dotted",
        "https://unicode.org/reports/tr44/#Terminal_Punctuation",
        "https://unicode.org/reports/tr44/#Unified_Ideograph",
        "https://unicode.org/reports/tr44/#Uppercase",
        "https://unicode.org/reports/tr44/#Variation_Selector",
        "https://unicode.org/reports/tr44/#White_Space",
        "https://unicode.org/reports/tr44/#XID_Continue",
        "https://unicode.org/reports/tr44/#XID_Start",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#property-name",
        "#property-name",
        "#table-nonbinary-unicode-properties",
        "#assert",
        "#table-unicode-general-category-values",
        "#table-unicode-script-values",
        "#sec-list-and-record-specification-type",
        "#table-unicode-general-category-values",
        "#table-unicode-script-values",
        "https://unicode.org/reports/tr44/#Matching_Symbolic",
        "#sec-white-space",
        "https://unicode.org/Public/UCD/latest/ucd/PropertyAliases.txt",
        "https://unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt",
        "https://unicode.org/reports/tr18/#General_Category_Property",
        "https://unicode.org/reports/tr24/#Script",
        "https://unicode.org/reports/tr24/#Script_Extensions",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-isregexp",
        "#active-function-object",
        "#sec-get-o-p",
        "#sec-samevalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-get-o-p",
        "#sec-get-o-p",
        "#sec-regexpalloc",
        "#sec-regexpinitialize",
        "#prod-StringLiteral",
        "#prod-StringLiteral",
        "#prod-StringLiteral",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ordinarycreatefromconstructor",
        "#sec-definepropertyorthrow",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-tostring",
        "#sec-tostring",
        "#sec-stringtocodepoints",
        "#sec-parsepattern",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#prod-Pattern",
        "#sec-syntactic-grammar",
        "#sec-notation",
        "#sec-compilepattern",
        "#sec-set-o-p-v-throw",
        "#sec-syntactic-grammar",
        "#sec-list-and-record-specification-type",
        "#sec-parsetext",
        "#prod-Pattern",
        "#sec-parsetext",
        "#prod-Pattern",
        "#sec-syntactic-grammar",
        "#prod-GroupName",
        "#sec-parsetext",
        "#prod-Pattern",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-regexpalloc",
        "#sec-regexp-constructor",
        "#sec-regexpinitialize",
        "#prod-Pattern",
        "#prod-Pattern",
        "#sec-ecmascript-language-types-string-type",
        "#sec-abstract-closure",
        "#prod-Pattern",
        "#prod-Pattern",
        "#sec-abstract-closure",
        "#prod-LineTerminator",
        "#string-concatenation",
        "#prod-RegularExpressionLiteral",
        "#prod-SingleLineComment",
        "#prod-RegularExpressionLiteral",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-regexp-prototype-object",
        "#sec-object-type",
        "#constructor",
        "#constructor",
        "#sec-well-known-symbols",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-regexp-constructor",
        "#sec-tostring",
        "#sec-requireinternalslot",
        "#sec-tostring",
        "#sec-regexpbuiltinexec",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-get-o-p",
        "#sec-iscallable",
        "#sec-call",
        "#sec-ecmascript-data-types-and-values",
        "#sec-requireinternalslot",
        "#sec-regexpbuiltinexec",
        "#sec-completion-record-specification-type",
        "#array-exotic-object",
        "#sec-completion-record-specification-type",
        "#\u211d",
        "#sec-tolength",
        "#sec-get-o-p",
        "#sec-stringtocodepoints",
        "#sec-list-and-record-specification-type",
        "#sec-set-o-p-v-throw",
        "#sec-set-o-p-v-throw",
        "#sec-advancestringindex",
        "#assert",
        "#sec-getstringindex",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#sec-list-and-record-specification-type",
        "#sec-notation",
        "#assert",
        "#sec-arraycreate",
        "#assert",
        "#mathematical-value",
        "#sec-createdatapropertyorthrow",
        "#\ud835\udd3d",
        "#sec-createdatapropertyorthrow",
        "#sec-match-records",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-getmatchstring",
        "#sec-createdatapropertyorthrow",
        "#prod-GroupName",
        "#sec-ordinaryobjectcreate",
        "#sec-createdatapropertyorthrow",
        "#integer",
        "#sec-list-and-record-specification-type",
        "#sec-getstringindex",
        "#sec-getstringindex",
        "#sec-match-records",
        "#sec-getmatchstring",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#prod-GroupName",
        "#sec-static-semantics-capturinggroupname",
        "#prod-RegExpIdentifierName",
        "#sec-createdatapropertyorthrow",
        "#sec-makematchindicesindexpairarray",
        "#sec-createdatapropertyorthrow",
        "#integer",
        "#integer",
        "#assert",
        "#sec-codepointat",
        "#integer",
        "#integer",
        "#sec-stringtocodepoints",
        "#sec-list-and-record-specification-type",
        "#table-match-record",
        "#sec-match-records",
        "#integer",
        "#integer",
        "#sec-match-records",
        "#assert",
        "#integer",
        "#assert",
        "#integer",
        "#substring",
        "#sec-match-records",
        "#assert",
        "#integer",
        "#assert",
        "#integer",
        "#sec-createarrayfromlist",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-list-and-record-specification-type",
        "#sec-match-records",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-arraycreate",
        "#sec-ordinaryobjectcreate",
        "#sec-createdatapropertyorthrow",
        "#integer",
        "#sec-getmatchindexpair",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#assert",
        "#sec-createdatapropertyorthrow",
        "#sec-object-type",
        "#sec-regexphasflag",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-samevalue",
        "#sec-properties-of-the-regexp-prototype-object",
        "#sec-object-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-object-type",
        "#sec-regexphasflag",
        "#sec-object-type",
        "#sec-regexphasflag",
        "#sec-object-type",
        "#sec-regexphasflag",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-regexpexec",
        "#assert",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#sec-arraycreate",
        "#sec-regexpexec",
        "#sec-tostring",
        "#sec-get-o-p",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#\u211d",
        "#sec-tolength",
        "#sec-get-o-p",
        "#sec-advancestringindex",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#sec-well-known-symbols",
        "#sec-isregexp",
        "#sec-well-known-symbols",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-speciesconstructor",
        "#sec-regexp-constructor",
        "#sec-tostring",
        "#sec-get-o-p",
        "#sec-construct",
        "#sec-tolength",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#sec-createregexpstringiterator",
        "#sec-object-type",
        "#sec-regexphasflag",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-iscallable",
        "#sec-tostring",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#sec-list-and-record-specification-type",
        "#sec-regexpexec",
        "#sec-tostring",
        "#sec-get-o-p",
        "#\u211d",
        "#sec-tolength",
        "#sec-get-o-p",
        "#sec-advancestringindex",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#sec-lengthofarraylike",
        "#eqn-max",
        "#sec-tostring",
        "#sec-get-o-p",
        "#sec-tointegerorinfinity",
        "#sec-get-o-p",
        "#clamping",
        "#sec-list-and-record-specification-type",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#sec-get-o-p",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#\ud835\udd3d",
        "#sec-call",
        "#sec-tostring",
        "#sec-toobject",
        "#sec-getsubstitution",
        "#string-concatenation",
        "#substring",
        "#string-concatenation",
        "#substring",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-get-o-p",
        "#sec-samevalue",
        "#sec-set-o-p-v-throw",
        "#sec-regexpexec",
        "#sec-get-o-p",
        "#sec-samevalue",
        "#sec-set-o-p-v-throw",
        "#sec-get-o-p",
        "#sec-object-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-samevalue",
        "#sec-properties-of-the-regexp-prototype-object",
        "#assert",
        "#sec-escaperegexppattern",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-speciesconstructor",
        "#sec-regexp-constructor",
        "#sec-tostring",
        "#sec-get-o-p",
        "#string-concatenation",
        "#sec-construct",
        "#sec-arraycreate",
        "#\u211d",
        "#sec-touint32",
        "#sec-regexpexec",
        "#sec-createdatapropertyorthrow",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#sec-regexpexec",
        "#sec-advancestringindex",
        "#\u211d",
        "#sec-tolength",
        "#sec-get-o-p",
        "#eqn-min",
        "#sec-advancestringindex",
        "#substring",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-lengthofarraylike",
        "#eqn-max",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#substring",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-object-type",
        "#sec-regexphasflag",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-regexpexec",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-get-o-p",
        "#sec-tostring",
        "#sec-get-o-p",
        "#string-concatenation",
        "#prod-RegularExpressionLiteral",
        "#sec-object-type",
        "#sec-regexphasflag",
        "#ordinary-object",
        "#sec-properties-of-the-regexp-prototype-object",
        "#sec-abstract-closure",
        "#prod-Pattern",
        "#sec-object-type",
        "#sec-object-type",
        "#integral-number",
        "#sec-regexpbuiltinexec",
        "#constructor",
        "#sec-abstract-closure",
        "#sec-regexpexec",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#sec-tostring",
        "#sec-get-o-p",
        "#\u211d",
        "#sec-tolength",
        "#sec-get-o-p",
        "#sec-advancestringindex",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#sec-createiteratorfromclosure",
        "#sec-%regexpstringiteratorprototype%-object",
        "#ordinary-object",
        "#sec-%iteratorprototype%-object",
        "#sec-generatorresume",
        "#sec-well-known-symbols",
        "#exotic-object",
        "#sec-array-exotic-objects",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#array-exotic-object",
        "#array-exotic-object",
        "#active-function-object",
        "#sec-getprototypefromconstructor",
        "#sec-arraycreate",
        "#sec-arraycreate",
        "#sec-ecmascript-data-types-and-values",
        "#sec-createdatapropertyorthrow",
        "#sec-touint32",
        "#sec-samevaluezero",
        "#sec-set-o-p-v-throw",
        "#assert",
        "#sec-arraycreate",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-createdatapropertyorthrow",
        "#assert",
        "#mathematical-value",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-iscallable",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-isconstructor",
        "#sec-construct",
        "#sec-arraycreate",
        "#sec-getiterator",
        "#sec-throwcompletion",
        "#sec-iteratorclose",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-iteratorstep",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#sec-iteratorvalue",
        "#sec-completion-ao",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-ifabruptcloseiterator",
        "#sec-completion-ao",
        "#sec-createdatapropertyorthrow",
        "#sec-ifabruptcloseiterator",
        "#sec-lengthofarraylike",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-isconstructor",
        "#sec-construct",
        "#\ud835\udd3d",
        "#sec-arraycreate",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-createdatapropertyorthrow",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#constructor",
        "#constructor",
        "#sec-isarray",
        "#\ud835\udd3d",
        "#sec-isconstructor",
        "#sec-construct",
        "#sec-arraycreate",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-createdatapropertyorthrow",
        "#sec-set-o-p-v-throw",
        "#constructor",
        "#constructor",
        "#sec-properties-of-the-array-prototype-object",
        "#sec-object-type",
        "#constructor",
        "#constructor",
        "#sec-well-known-symbols",
        "#array-exotic-object",
        "#sec-properties-of-the-object-prototype-object",
        "#array-exotic-object",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tointegerorinfinity",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-arrayspeciescreate",
        "#sec-isconcatspreadable",
        "#sec-lengthofarraylike",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#step-array-proto-concat-set-length",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-get-o-p",
        "#sec-well-known-symbols",
        "#sec-toboolean",
        "#sec-isarray",
        "#sec-array-constructor",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#eqn-min",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#assert",
        "#sec-deletepropertyorthrow",
        "#sec-toobject",
        "#sec-createarrayiterator",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-iscallable",
        "#sec-arrayspeciescreate",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-call",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tointegerorinfinity",
        "#sec-arrayspeciescreate",
        "#sec-flattenintoarray",
        "#integer",
        "#integer",
        "#integer",
        "#sec-completion-record-specification-type",
        "#integer",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-iscallable",
        "#\u211d",
        "#sec-tostring",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-call",
        "#sec-isarray",
        "#sec-lengthofarraylike",
        "#sec-flattenintoarray",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-iscallable",
        "#sec-arrayspeciescreate",
        "#sec-flattenintoarray",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-samevaluezero",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tointegerorinfinity",
        "#assert",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-samevaluezero",
        "#sec-samevaluezero",
        "#sec-isstrictlyequal",
        "#sec-isstrictlyequal",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tointegerorinfinity",
        "#assert",
        "#sec-hasproperty",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-isstrictlyequal",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tostring",
        "#string-concatenation",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#string-concatenation",
        "#sec-toobject",
        "#sec-createarrayiterator",
        "#sec-isstrictlyequal",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tointegerorinfinity",
        "#eqn-min",
        "#sec-hasproperty",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-isstrictlyequal",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-iscallable",
        "#sec-arrayspeciescreate",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-createdatapropertyorthrow",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-set-o-p-v-throw",
        "#assert",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#sec-get-o-p",
        "#sec-deletepropertyorthrow",
        "#sec-set-o-p-v-throw",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-set-o-p-v-throw",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#eqn-floor",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#sec-set-o-p-v-throw",
        "#sec-set-o-p-v-throw",
        "#sec-deletepropertyorthrow",
        "#sec-deletepropertyorthrow",
        "#sec-set-o-p-v-throw",
        "#assert",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-set-o-p-v-throw",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#assert",
        "#sec-deletepropertyorthrow",
        "#sec-deletepropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#eqn-max",
        "#sec-arrayspeciescreate",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#step-array-proto-slice-set-length",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-iscallable",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-abstract-closure",
        "#sec-tonumber",
        "#sec-call",
        "#sec-tostring",
        "#sec-tostring",
        "#sec-islessthan",
        "#sec-islessthan",
        "#sec-sortindexedproperties",
        "#sec-tostring",
        "#sec-algorithm-conventions-abstract-operations",
        "#step-sortcompare-tostring-x",
        "#step-sortcompare-tostring-y",
        "#consistent-comparator",
        "#integer",
        "#sec-abstract-closure",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#implementation-defined",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-set-o-p-v-throw",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-deletepropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#step-array-sort",
        "#sort-order",
        "#implementation-defined",
        "#consistent-comparator",
        "#sec-array.prototype.sort",
        "#sort-order",
        "#implementation-defined",
        "#sec-tostring",
        "#sort-order",
        "#implementation-defined",
        "#integer",
        "#integer",
        "#integer",
        "#step-array-sort",
        "#step-array-sort",
        "#sec-ecmascript-data-types-and-values",
        "#integer-index",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#clamping",
        "#sec-arrayspeciescreate",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-createdatapropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#sec-deletepropertyorthrow",
        "#sec-deletepropertyorthrow",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#sec-deletepropertyorthrow",
        "#sec-set-o-p-v-throw",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#step-array-proto-splice-set-length",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#implementation-defined",
        "#host-environment",
        "#string-concatenation",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#sec-invoke",
        "#string-concatenation",
        "#implementation-defined",
        "#host-environment",
        "#sec-toobject",
        "#sec-get-o-p",
        "#sec-iscallable",
        "#sec-call",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-hasproperty",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#assert",
        "#sec-deletepropertyorthrow",
        "#sec-set-o-p-v-throw",
        "#sec-tostring",
        "#sec-set-o-p-v-throw",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-toobject",
        "#sec-createarrayiterator",
        "#sec-well-known-symbols",
        "#sec-array.prototype.values",
        "#sec-well-known-symbols",
        "#sec-object-type",
        "#sec-ordinaryobjectcreate",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#array-exotic-object",
        "#sec-properties-of-the-array-prototype-object",
        "#array-index",
        "#sec-object-type",
        "#array-index",
        "#array-index",
        "#property-name",
        "#array-index",
        "#property-name",
        "#sec-array-exotic-objects-defineownproperty-p-desc",
        "#constructor",
        "#sec-abstract-closure",
        "#sec-isdetachedbuffer",
        "#sec-lengthofarraylike",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#assert",
        "#sec-createarrayfromlist",
        "#\ud835\udd3d",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#sec-createiteratorfromclosure",
        "#sec-%arrayiteratorprototype%-object",
        "#ordinary-object",
        "#sec-%iteratorprototype%-object",
        "#sec-generatorresume",
        "#sec-well-known-symbols",
        "#sec-arraybuffer-objects",
        "#constructor",
        "#table-the-typedarray-constructors",
        "#constructor",
        "#table-the-typedarray-constructors",
        "#constructor",
        "#constructor",
        "#sec-toint8",
        "#integer",
        "#sec-touint8",
        "#integer",
        "#sec-touint8clamp",
        "#integer",
        "#sec-toint16",
        "#integer",
        "#sec-touint16",
        "#integer",
        "#sec-toint32",
        "#integer",
        "#sec-touint32",
        "#integer",
        "#sec-tobigint64",
        "#integer",
        "#sec-tobiguint64",
        "#integer",
        "#constructor",
        "#constructor",
        "#function-object",
        "#constructor",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-%typedarray%-intrinsic-object",
        "#constructor",
        "#sec-%typedarray%-intrinsic-object",
        "#constructor",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-isconstructor",
        "#sec-iscallable",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-iterabletolist",
        "#typedarray-create",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-lengthofarraylike",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#typedarray-create",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#sec-isconstructor",
        "#typedarray-create",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-properties-of-the-%typedarrayprototype%-object",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-object-type",
        "#sec-properties-of-the-%typedarrayprototype%-object",
        "#constructor",
        "#constructor",
        "#sec-well-known-symbols",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-validatetypedarray",
        "#sec-tointegerorinfinity",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-isdetachedbuffer",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-isdetachedbuffer",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.copywithin",
        "#sec-validatetypedarray",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#eqn-min",
        "#sec-isdetachedbuffer",
        "#sec-typedarrayelementsize",
        "#sec-getvaluefrombuffer",
        "#sec-setvalueinbuffer",
        "#sec-validatetypedarray",
        "#sec-createarrayiterator",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.every",
        "#sec-validatetypedarray",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.fill",
        "#sec-validatetypedarray",
        "#sec-tobigint",
        "#sec-tonumber",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-isdetachedbuffer",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.filter",
        "#sec-validatetypedarray",
        "#sec-iscallable",
        "#sec-list-and-record-specification-type",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-call",
        "#\ud835\udd3d",
        "#typedarray-species-create",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.find",
        "#sec-validatetypedarray",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.findindex",
        "#sec-validatetypedarray",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-call",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.foreach",
        "#sec-validatetypedarray",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.includes",
        "#sec-validatetypedarray",
        "#sec-tointegerorinfinity",
        "#assert",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-samevaluezero",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.indexof",
        "#sec-validatetypedarray",
        "#sec-tointegerorinfinity",
        "#assert",
        "#sec-hasproperty",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-isstrictlyequal",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.join",
        "#sec-validatetypedarray",
        "#sec-tostring",
        "#string-concatenation",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#string-concatenation",
        "#sec-validatetypedarray",
        "#sec-createarrayiterator",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.lastindexof",
        "#sec-validatetypedarray",
        "#sec-tointegerorinfinity",
        "#eqn-min",
        "#sec-hasproperty",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-isstrictlyequal",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-isdetachedbuffer",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.map",
        "#sec-validatetypedarray",
        "#sec-iscallable",
        "#typedarray-species-create",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.reduce",
        "#sec-validatetypedarray",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.reduceright",
        "#sec-validatetypedarray",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.reverse",
        "#sec-validatetypedarray",
        "#eqn-floor",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#sec-set-o-p-v-throw",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-tointegerorinfinity",
        "#sec-settypedarrayfromtypedarray",
        "#sec-settypedarrayfromarraylike",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-isdetachedbuffer",
        "#sec-isdetachedbuffer",
        "#sec-typedarrayelementtype",
        "#sec-typedarrayelementsize",
        "#sec-typedarrayelementtype",
        "#sec-typedarrayelementsize",
        "#sec-issharedarraybuffer",
        "#sec-issharedarraybuffer",
        "#sec-data-blocks",
        "#sec-samevalue",
        "#sec-clonearraybuffer",
        "#sec-arraybuffer-constructor",
        "#sec-arraybuffer-constructor",
        "#sec-getvaluefrombuffer",
        "#sec-setvalueinbuffer",
        "#sec-getvaluefrombuffer",
        "#sec-setvalueinbuffer",
        "#integer",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-isdetachedbuffer",
        "#sec-typedarrayelementsize",
        "#sec-typedarrayelementtype",
        "#sec-toobject",
        "#sec-lengthofarraylike",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-tobigint",
        "#sec-tonumber",
        "#sec-isdetachedbuffer",
        "#sec-setvalueinbuffer",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.slice",
        "#sec-validatetypedarray",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#eqn-max",
        "#typedarray-species-create",
        "#\ud835\udd3d",
        "#sec-isdetachedbuffer",
        "#sec-typedarrayelementtype",
        "#sec-typedarrayelementtype",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-typedarrayelementsize",
        "#sec-getvaluefrombuffer",
        "#sec-setvalueinbuffer",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.some",
        "#sec-validatetypedarray",
        "#sec-iscallable",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-toboolean",
        "#sec-call",
        "#\ud835\udd3d",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.sort",
        "#sec-%typedarray%-intrinsic-object",
        "#integer-index",
        "#sec-iscallable",
        "#sec-validatetypedarray",
        "#sec-array.prototype.sort",
        "#sec-abstract-closure",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tonumber",
        "#sec-call",
        "#sec-isdetachedbuffer",
        "#sec-sortindexedproperties",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#eqn-max",
        "#sec-typedarrayelementsize",
        "#\ud835\udd3d",
        "#\ud835\udd3d",
        "#typedarray-species-create",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-array.prototype.tolocalestring",
        "#integer-index",
        "#sec-validatetypedarray",
        "#sec-completion-record-specification-type",
        "#sec-array.prototype.tostring",
        "#sec-validatetypedarray",
        "#sec-createarrayiterator",
        "#sec-well-known-symbols",
        "#sec-%typedarray%.prototype.values",
        "#sec-%typedarray%-intrinsic-object",
        "#sec-object-type",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#constructor",
        "#sec-arrayspeciescreate",
        "#sec-well-known-symbols",
        "#constructor",
        "#table-the-typedarray-constructors",
        "#sec-speciesconstructor",
        "#typedarray-create",
        "#assert",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#constructor",
        "#sec-construct",
        "#sec-validatetypedarray",
        "#sec-list-and-record-specification-type",
        "#\u211d",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-isdetachedbuffer",
        "#integer",
        "#table-the-typedarray-constructors",
        "#sec-typedarray-objects",
        "#table-the-typedarray-constructors",
        "#constructor",
        "#constructor",
        "#table-the-typedarray-constructors",
        "#constructor",
        "#constructor",
        "#sec-%typedarray%-intrinsic-object",
        "#constructor",
        "#constructor",
        "#table-the-typedarray-constructors",
        "#constructor",
        "#sec-allocatetypedarray",
        "#sec-ecmascript-data-types-and-values",
        "#sec-allocatetypedarray",
        "#sec-initializetypedarrayfromtypedarray",
        "#sec-initializetypedarrayfromarraybuffer",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getmethod",
        "#sec-well-known-symbols",
        "#sec-iterabletolist",
        "#sec-initializetypedarrayfromlist",
        "#sec-lengthofarraylike",
        "#sec-initializetypedarrayfromarraylike",
        "#assert",
        "#sec-toindex",
        "#sec-allocatetypedarray",
        "#constructor",
        "#table-the-typedarray-constructors",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#constructor",
        "#sec-getprototypefromconstructor",
        "#sec-integerindexedobjectcreate",
        "#assert",
        "#sec-allocatetypedarraybuffer",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-isdetachedbuffer",
        "#sec-typedarrayelementtype",
        "#sec-typedarrayelementsize",
        "#sec-typedarrayelementtype",
        "#sec-typedarrayelementsize",
        "#sec-issharedarraybuffer",
        "#sec-speciesconstructor",
        "#sec-arraybuffer-constructor",
        "#sec-arraybuffer-constructor",
        "#sec-clonearraybuffer",
        "#sec-allocatearraybuffer",
        "#sec-isdetachedbuffer",
        "#sec-getvaluefrombuffer",
        "#sec-setvalueinbuffer",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-typedarrayelementsize",
        "#sec-toindex",
        "#eqn-modulo",
        "#sec-toindex",
        "#sec-isdetachedbuffer",
        "#eqn-modulo",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-allocatetypedarraybuffer",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-set-o-p-v-throw",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-lengthofarraylike",
        "#sec-allocatetypedarraybuffer",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-set-o-p-v-throw",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-typedarrayelementsize",
        "#sec-allocatearraybuffer",
        "#sec-arraybuffer-constructor",
        "#constructor",
        "#sec-%typedarray%-intrinsic-object",
        "#constructor",
        "#table-the-typedarray-constructors",
        "#table-the-typedarray-constructors",
        "#sec-properties-of-typedarray-prototype-objects",
        "#sec-properties-of-the-%typedarrayprototype%-object",
        "#ordinary-object",
        "#table-the-typedarray-constructors",
        "#sec-%typedarray%-intrinsic-object",
        "#integer-indexed-exotic-object",
        "#sec-ecmascript-language-types",
        "#sec-samevaluezero",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-ordinarycreatefromconstructor",
        "#sec-list-and-record-specification-type",
        "#sec-get-o-p",
        "#sec-add-entries-from-iterable",
        "#sec-well-known-symbols",
        "#sec-lengthofarraylike",
        "#sec-ecmascript-language-types",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-iscallable",
        "#sec-getiterator",
        "#sec-iteratorstep",
        "#sec-iteratorvalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-throwcompletion",
        "#sec-iteratorclose",
        "#sec-completion-ao",
        "#sec-get-o-p",
        "#sec-ifabruptcloseiterator",
        "#sec-completion-ao",
        "#sec-get-o-p",
        "#sec-ifabruptcloseiterator",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-ifabruptcloseiterator",
        "#sec-well-known-symbols",
        "#sec-lengthofarraylike",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-map-prototype-object",
        "#sec-object-type",
        "#sec-well-known-symbols",
        "#constructor",
        "#constructor",
        "#sec-well-known-symbols",
        "#constructor",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-map-constructor",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-samevaluezero",
        "#sec-createmapiterator",
        "#sec-requireinternalslot",
        "#sec-iscallable",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-call",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-samevaluezero",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-samevaluezero",
        "#sec-createmapiterator",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-samevaluezero",
        "#sec-list-and-record-specification-type",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#\ud835\udd3d",
        "#sec-createmapiterator",
        "#sec-well-known-symbols",
        "#sec-map.prototype.entries",
        "#sec-well-known-symbols",
        "#ordinary-object",
        "#constructor",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-requireinternalslot",
        "#sec-abstract-closure",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#sec-createarrayfromlist",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#sec-yield",
        "#sec-createiteratorfromclosure",
        "#sec-%mapiteratorprototype%-object",
        "#ordinary-object",
        "#sec-%iteratorprototype%-object",
        "#sec-generatorresume",
        "#sec-well-known-symbols",
        "#sec-ecmascript-language-types",
        "#sec-samevaluezero",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-ordinarycreatefromconstructor",
        "#sec-list-and-record-specification-type",
        "#sec-get-o-p",
        "#sec-iscallable",
        "#sec-getiterator",
        "#sec-iteratorstep",
        "#sec-iteratorvalue",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-ifabruptcloseiterator",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-set-prototype-object",
        "#sec-object-type",
        "#sec-well-known-symbols",
        "#constructor",
        "#constructor",
        "#sec-well-known-symbols",
        "#constructor",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-samevaluezero",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-set-constructor",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-samevaluezero",
        "#sec-createsetiterator",
        "#sec-requireinternalslot",
        "#sec-iscallable",
        "#sec-list-and-record-specification-type",
        "#sec-call",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-samevaluezero",
        "#sec-set.prototype.values",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#\ud835\udd3d",
        "#sec-createsetiterator",
        "#sec-well-known-symbols",
        "#sec-set.prototype.values",
        "#sec-well-known-symbols",
        "#ordinary-object",
        "#ordinary-object",
        "#constructor",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-requireinternalslot",
        "#sec-abstract-closure",
        "#sec-list-and-record-specification-type",
        "#sec-createarrayfromlist",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#assert",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#sec-yield",
        "#sec-createiteratorfromclosure",
        "#sec-%setiteratorprototype%-object",
        "#ordinary-object",
        "#sec-%iteratorprototype%-object",
        "#sec-generatorresume",
        "#sec-well-known-symbols",
        "#sec-ecmascript-language-types",
        "#sec-liveness",
        "#sec-weakref-execution",
        "http://doi.acm.org/10.1145/263698.263733",
        "http://www.jucs.org/jucs_14_21/eliminating_cycles_in_weak",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-ordinarycreatefromconstructor",
        "#sec-list-and-record-specification-type",
        "#sec-get-o-p",
        "#sec-add-entries-from-iterable",
        "#sec-well-known-symbols",
        "#sec-lengthofarraylike",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-weakmap-prototype-object",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-weakmap-constructor",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-samevalue",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-samevalue",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-samevalue",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-samevalue",
        "#sec-list-and-record-specification-type",
        "#sec-well-known-symbols",
        "#ordinary-object",
        "#sec-liveness",
        "#sec-weakref-execution",
        "#sec-weakmap-objects",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-ordinarycreatefromconstructor",
        "#sec-list-and-record-specification-type",
        "#sec-get-o-p",
        "#sec-iscallable",
        "#sec-getiterator",
        "#sec-iteratorstep",
        "#sec-iteratorvalue",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-ifabruptcloseiterator",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-weakset-prototype-object",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-requireinternalslot",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-samevalue",
        "#sec-weakset-constructor",
        "#sec-requireinternalslot",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-samevalue",
        "#sec-requireinternalslot",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-samevalue",
        "#sec-well-known-symbols",
        "#ordinary-object",
        "#sec-atomics-object",
        "#sec-memory-model",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-completion-record-specification-type",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ordinarycreatefromconstructor",
        "#sec-createbytedatablock",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-issharedarraybuffer",
        "#sec-samevalue",
        "#sec-data-blocks",
        "#host",
        "#integer",
        "#integer",
        "#constructor",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-allocatearraybuffer",
        "#sec-isdetachedbuffer",
        "#sec-copydatablockbytes",
        "#sec-typedarray-objects",
        "#integer",
        "#sec-typedarray-objects",
        "#sec-typedarray-objects",
        "#sec-isunclampedintegerelementtype",
        "#sec-isbigintelementtype",
        "#sec-typedarray-objects",
        "#sec-list-and-record-specification-type",
        "#table-the-typedarray-constructors",
        "#sec-bibliography",
        "#sec-bibliography",
        "#number-value",
        "#number-value",
        "#sec-bibliography",
        "#sec-bibliography",
        "#number-value",
        "#number-value",
        "#sec-isunsignedelementtype",
        "#sec-isbigintelementtype",
        "#number-value",
        "#integer",
        "#sec-typedarray-objects",
        "#assert",
        "#sec-isdetachedbuffer",
        "#assert",
        "#table-the-typedarray-constructors",
        "#sec-issharedarraybuffer",
        "#surrounding-agent",
        "#agent-record",
        "#sec-agentsignifier",
        "#sec-isnotearconfiguration",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-memory-model",
        "#sec-memory-model-fundamentals",
        "#sec-chosen-value-records",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#surrounding-agent",
        "#agent-record",
        "#sec-rawbytestonumeric",
        "#sec-typedarray-objects",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-list-and-record-specification-type",
        "#sec-bibliography",
        "#sec-bibliography",
        "#sec-list-and-record-specification-type",
        "#sec-bibliography",
        "#sec-bibliography",
        "#table-the-typedarray-constructors",
        "#table-the-typedarray-constructors",
        "#\u211d",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#integer",
        "#sec-typedarray-objects",
        "#assert",
        "#sec-isdetachedbuffer",
        "#assert",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isbigintelementtype",
        "#sec-ecmascript-data-types-and-values",
        "#table-the-typedarray-constructors",
        "#surrounding-agent",
        "#agent-record",
        "#sec-numerictorawbytes",
        "#sec-issharedarraybuffer",
        "#surrounding-agent",
        "#agent-record",
        "#sec-agentsignifier",
        "#sec-isnotearconfiguration",
        "#sec-memory-model-fundamentals",
        "#integer",
        "#sec-typedarray-objects",
        "#sec-arraybuffer-notation",
        "#assert",
        "#sec-isdetachedbuffer",
        "#assert",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isbigintelementtype",
        "#sec-ecmascript-data-types-and-values",
        "#table-the-typedarray-constructors",
        "#surrounding-agent",
        "#agent-record",
        "#sec-numerictorawbytes",
        "#sec-issharedarraybuffer",
        "#surrounding-agent",
        "#agent-record",
        "#sec-agentsignifier",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-memory-model",
        "#sec-memory-model-fundamentals",
        "#sec-chosen-value-records",
        "#sec-list-and-record-specification-type",
        "#sec-rawbytestonumeric",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-toindex",
        "#sec-allocatearraybuffer",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-ecmascript-data-types-and-values",
        "#sec-properties-of-the-arraybuffer-prototype-object",
        "#sec-object-type",
        "#constructor",
        "#constructor",
        "#sec-well-known-symbols",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#sec-issharedarraybuffer",
        "#sec-isdetachedbuffer",
        "#\ud835\udd3d",
        "#sec-arraybuffer-constructor",
        "#sec-requireinternalslot",
        "#sec-issharedarraybuffer",
        "#sec-isdetachedbuffer",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#eqn-max",
        "#sec-speciesconstructor",
        "#sec-arraybuffer-constructor",
        "#sec-construct",
        "#\ud835\udd3d",
        "#sec-requireinternalslot",
        "#sec-issharedarraybuffer",
        "#sec-isdetachedbuffer",
        "#sec-samevalue",
        "#sec-isdetachedbuffer",
        "#sec-copydatablockbytes",
        "#sec-well-known-symbols",
        "#sec-properties-of-the-arraybuffer-prototype-object",
        "#sec-detacharraybuffer",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ordinarycreatefromconstructor",
        "#sec-createsharedbytedatablock",
        "#sec-data-blocks",
        "#assert",
        "#sec-data-blocks",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#host",
        "#sec-global-object",
        "#sec-toindex",
        "#sec-allocatesharedarraybuffer",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-sharedarraybuffer-prototype-object",
        "#sec-object-type",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#sec-issharedarraybuffer",
        "#\ud835\udd3d",
        "#sec-sharedarraybuffer-constructor",
        "#sec-requireinternalslot",
        "#sec-issharedarraybuffer",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#eqn-min",
        "#eqn-max",
        "#sec-speciesconstructor",
        "#sec-sharedarraybuffer-constructor",
        "#sec-construct",
        "#\ud835\udd3d",
        "#sec-requireinternalslot",
        "#sec-issharedarraybuffer",
        "#sec-data-blocks",
        "#sec-copydatablockbytes",
        "#sec-well-known-symbols",
        "#sec-properties-of-the-sharedarraybuffer-prototype-object",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-toindex",
        "#sec-toboolean",
        "#sec-isdetachedbuffer",
        "#table-the-typedarray-constructors",
        "#sec-getvaluefrombuffer",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-toindex",
        "#sec-isbigintelementtype",
        "#sec-tobigint",
        "#sec-tonumber",
        "#sec-toboolean",
        "#sec-isdetachedbuffer",
        "#table-the-typedarray-constructors",
        "#sec-setvalueinbuffer",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-requireinternalslot",
        "#sec-toindex",
        "#sec-isdetachedbuffer",
        "#sec-toindex",
        "#sec-ordinarycreatefromconstructor",
        "#sec-isdetachedbuffer",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-dataview-prototype-object",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-isdetachedbuffer",
        "#\ud835\udd3d",
        "#sec-object-type",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-isdetachedbuffer",
        "#\ud835\udd3d",
        "#sec-dataview-constructor",
        "#sec-getviewvalue",
        "#sec-getviewvalue",
        "#sec-getviewvalue",
        "#sec-getviewvalue",
        "#sec-getviewvalue",
        "#sec-getviewvalue",
        "#sec-getviewvalue",
        "#sec-getviewvalue",
        "#sec-getviewvalue",
        "#sec-getviewvalue",
        "#sec-setviewvalue",
        "#sec-setviewvalue",
        "#sec-setviewvalue",
        "#sec-setviewvalue",
        "#sec-setviewvalue",
        "#sec-setviewvalue",
        "#sec-setviewvalue",
        "#sec-setviewvalue",
        "#sec-setviewvalue",
        "#sec-setviewvalue",
        "#sec-well-known-symbols",
        "#ordinary-object",
        "#sec-properties-of-the-dataview-prototype-object",
        "#constructor",
        "#sec-global-object",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#constructor",
        "#agent",
        "#agent",
        "#sec-memory-model",
        "#sec-memory-model",
        "#sec-agents",
        "#agent",
        "#sec-data-blocks",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-agent-clusters",
        "#agent",
        "#agent",
        "#sec-agent-clusters",
        "#agent",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-entercriticalsection",
        "#sec-leavecriticalsection",
        "#agent",
        "#agent",
        "#agent",
        "#sec-memory-model-fundamentals",
        "#agent",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-validatetypedarray",
        "#sec-typedarrayelementtype",
        "#sec-isunclampedintegerelementtype",
        "#sec-isbigintelementtype",
        "#sec-completion-record-specification-type",
        "#integer",
        "#sec-completion-record-specification-type",
        "#sec-toindex",
        "#assert",
        "#sec-typedarrayelementsize",
        "#sec-data-blocks",
        "#integer",
        "#sec-waiterlist-objects",
        "#assert",
        "#sec-waiterlist-objects",
        "#sec-waiterlist-objects",
        "#assert",
        "#agent",
        "#sec-waiterlist-objects",
        "#sec-waiterlist-objects",
        "#agent",
        "#sec-waiterlist-objects",
        "#sec-waiterlist-objects",
        "#agent",
        "#sec-memory-model-fundamentals",
        "#sec-waiterlist-objects",
        "#sec-memory-model-fundamentals",
        "#sec-leavecriticalsection",
        "#surrounding-agent",
        "#agent-record",
        "#sec-agent-event-records",
        "#sec-agentsignifier",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#agent",
        "#sec-waiterlist-objects",
        "#agent",
        "#agent",
        "#sec-waiterlist-objects",
        "#assert",
        "#agent",
        "#sec-waiterlist-objects",
        "#agent-record",
        "#sec-agent-event-records",
        "#sec-agentsignifier",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-waiterlist-objects",
        "#sec-waiterlist-objects",
        "#sec-agents",
        "#assert",
        "#agent",
        "#sec-waiterlist-objects",
        "#assert",
        "#sec-waiterlist-objects",
        "#sec-waiterlist-objects",
        "#sec-agents",
        "#assert",
        "#agent",
        "#sec-waiterlist-objects",
        "#assert",
        "#sec-waiterlist-objects",
        "#integer",
        "#sec-list-and-record-specification-type",
        "#sec-agents",
        "#assert",
        "#agent",
        "#sec-waiterlist-objects",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-waiterlist-objects",
        "#sec-agents",
        "#integer",
        "#assert",
        "#agent",
        "#sec-waiterlist-objects",
        "#assert",
        "#sec-agentsignifier",
        "#assert",
        "#assert",
        "#sec-agentcansuspend",
        "#sec-leavecriticalsection",
        "#sec-waiterlist-objects",
        "#agent",
        "#sec-notifywaiter",
        "#sec-entercriticalsection",
        "#agent",
        "#sec-notifywaiter",
        "#sec-waiterlist-objects",
        "#sec-agents",
        "#assert",
        "#agent",
        "#sec-waiterlist-objects",
        "#agent",
        "#sec-arraybuffer-notation",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-validateintegertypedarray",
        "#sec-validateatomicaccess",
        "#sec-tobigint",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#sec-isdetachedbuffer",
        "#sec-validateintegertypedarray",
        "#sec-tobigint",
        "#sec-tointegerorinfinity",
        "#sec-typedarrayelementtype",
        "#sec-getmodifysetvalueinbuffer",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-data-blocks",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-typedarrayelementtype",
        "#surrounding-agent",
        "#agent-record",
        "#sec-arraybuffer-notation",
        "#sec-rawbytestonumeric",
        "#sec-rawbytestonumeric",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-add",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-add",
        "#sec-numerictorawbytes",
        "#assert",
        "#sec-atomicreadmodifywrite",
        "#sec-arraybuffer-notation",
        "#sec-bytelistbitwiseop",
        "#sec-atomicreadmodifywrite",
        "#sec-validateintegertypedarray",
        "#sec-validateatomicaccess",
        "#sec-tobigint",
        "#sec-tobigint",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#sec-isdetachedbuffer",
        "#sec-validateintegertypedarray",
        "#sec-tobigint",
        "#sec-tointegerorinfinity",
        "#sec-typedarrayelementtype",
        "#sec-typedarrayelementsize",
        "#surrounding-agent",
        "#agent-record",
        "#sec-numerictorawbytes",
        "#sec-numerictorawbytes",
        "#sec-issharedarraybuffer",
        "#surrounding-agent",
        "#agent-record",
        "#sec-agentsignifier",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-memory-model",
        "#sec-arraybuffer-notation",
        "#sec-bytelistequal",
        "#sec-arraybuffer-notation",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-chosen-value-records",
        "#sec-list-and-record-specification-type",
        "#sec-bytelistequal",
        "#sec-rawbytestonumeric",
        "#sec-arraybuffer-notation",
        "#sec-atomicreadmodifywrite",
        "#sec-tointegerorinfinity",
        "#agent-record",
        "#surrounding-agent",
        "#agent",
        "#sec-waiterlist-objects",
        "#sec-validateintegertypedarray",
        "#sec-validateatomicaccess",
        "#sec-isdetachedbuffer",
        "#sec-validateintegertypedarray",
        "#sec-validateatomicaccess",
        "#sec-typedarrayelementtype",
        "#sec-getvaluefrombuffer",
        "#sec-arraybuffer-notation",
        "#sec-bytelistbitwiseop",
        "#sec-atomicreadmodifywrite",
        "#sec-validateintegertypedarray",
        "#sec-validateatomicaccess",
        "#sec-tobigint",
        "#\ud835\udd3d",
        "#sec-tointegerorinfinity",
        "#sec-isdetachedbuffer",
        "#sec-validateintegertypedarray",
        "#sec-tobigint",
        "#sec-tointegerorinfinity",
        "#sec-typedarrayelementtype",
        "#sec-setvalueinbuffer",
        "#sec-typedarrayelementtype",
        "#surrounding-agent",
        "#agent-record",
        "#sec-arraybuffer-notation",
        "#sec-rawbytestonumeric",
        "#sec-rawbytestonumeric",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-number-subtract",
        "#assert",
        "#sec-ecmascript-data-types-and-values",
        "#sec-numeric-types-bigint-subtract",
        "#sec-numerictorawbytes",
        "#assert",
        "#sec-atomicreadmodifywrite",
        "#agent",
        "#sec-validateintegertypedarray",
        "#sec-issharedarraybuffer",
        "#sec-validateatomicaccess",
        "#sec-tobigint64",
        "#sec-toint32",
        "#sec-tonumber",
        "#eqn-max",
        "#\u211d",
        "#sec-agentcansuspend",
        "#sec-getwaiterlist",
        "#sec-entercriticalsection",
        "#sec-typedarrayelementtype",
        "#sec-getvaluefrombuffer",
        "#sec-leavecriticalsection",
        "#sec-agentsignifier",
        "#sec-addwaiter",
        "#sec-suspendagent",
        "#assert",
        "#sec-removewaiter",
        "#sec-leavecriticalsection",
        "#agent",
        "#sec-validateintegertypedarray",
        "#sec-validateatomicaccess",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#sec-issharedarraybuffer",
        "#sec-getwaiterlist",
        "#sec-entercriticalsection",
        "#sec-removewaiters",
        "#sec-list-and-record-specification-type",
        "#agent",
        "#sec-notifywaiter",
        "#sec-leavecriticalsection",
        "#\ud835\udd3d",
        "#sec-arraybuffer-notation",
        "#sec-bytelistbitwiseop",
        "#sec-atomicreadmodifywrite",
        "#sec-well-known-symbols",
        "#sec-global-object",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#constructor",
        "#sec-ecmascript-language-types",
        "#sec-tostring",
        "#sec-stringtocodepoints",
        "#string-concatenation",
        "#sec-parsetext",
        "#sec-stringtocodepoints",
        "#prod-Script",
        "#early-error",
        "#sec-object-initializer-static-semantics-early-errors",
        "#sec-parsetext",
        "#assert",
        "#sec-syntactic-grammar",
        "#sec-runtime-semantics-propertydefinitionevaluation",
        "#sec-runtime-semantics-propertydefinitionevaluation",
        "#assert",
        "#prod-ArrayLiteral",
        "#prod-ObjectLiteral",
        "#sec-iscallable",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-createdatapropertyorthrow",
        "#sec-internalizejsonproperty",
        "#prod-PrimaryExpression",
        "#step-json-parse-validate",
        "#step-json-parse-assert-type",
        "#sec-runtime-semantics-propertydefinitionevaluation",
        "#prod-PrimaryExpression",
        "#prod-PrimaryExpression",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-createdataproperty",
        "#sec-get-o-p",
        "#sec-ecmascript-data-types-and-values",
        "#sec-isarray",
        "#sec-lengthofarraylike",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-internalizejsonproperty",
        "#sec-createdataproperty",
        "#sec-enumerableownpropertynames",
        "#sec-internalizejsonproperty",
        "#sec-createdataproperty",
        "#sec-call",
        "#sec-ecmascript-language-types",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-ecmascript-data-types-and-values",
        "#sec-iscallable",
        "#sec-isarray",
        "#sec-list-and-record-specification-type",
        "#sec-lengthofarraylike",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#sec-get-o-p",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tonumber",
        "#sec-tostring",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tointegerorinfinity",
        "#eqn-min",
        "#sec-ecmascript-data-types-and-values",
        "#substring",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-createdatapropertyorthrow",
        "#sec-list-and-record-specification-type",
        "#sec-serializejsonproperty",
        "#sec-tostring",
        "#property-name",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-get-o-p",
        "#sec-ecmascript-data-types-and-values",
        "#sec-getv",
        "#sec-iscallable",
        "#sec-call",
        "#sec-call",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tonumber",
        "#sec-tostring",
        "#sec-ecmascript-data-types-and-values",
        "#sec-quotejsonstring",
        "#sec-ecmascript-data-types-and-values",
        "#sec-tostring",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-iscallable",
        "#sec-isarray",
        "#sec-serializejsonarray",
        "#sec-serializejsonobject",
        "#sec-ecmascript-language-types-string-type",
        "#sec-stringtocodepoints",
        "#table-json-single-character-escapes",
        "#string-concatenation",
        "#leading-surrogate",
        "#trailing-surrogate",
        "#string-concatenation",
        "#sec-unicodeescape",
        "#string-concatenation",
        "#sec-utf16encodecodepoint",
        "#string-concatenation",
        "#assert",
        "#string-concatenation",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#string-concatenation",
        "#sec-enumerableownpropertynames",
        "#sec-list-and-record-specification-type",
        "#sec-serializejsonproperty",
        "#sec-quotejsonstring",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#string-concatenation",
        "#sec-list-and-record-specification-type",
        "#sec-lengthofarraylike",
        "#sec-serializejsonproperty",
        "#sec-tostring",
        "#\ud835\udd3d",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#array-index",
        "#sec-well-known-symbols",
        "#sec-weak-ref-constructor",
        "#sec-weak-ref-constructor",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ordinarycreatefromconstructor",
        "#sec-addtokeptobjects",
        "#sec-weak-ref-constructor",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-weak-ref-prototype-object",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-conformance",
        "#sec-weak-ref-constructor",
        "#sec-requireinternalslot",
        "#sec-weakrefderef",
        "#sec-weak-ref-constructor",
        "#sec-addtokeptobjects",
        "#sec-well-known-symbols",
        "#sec-weak-ref-constructor",
        "#sec-ecmascript-language-types",
        "#sec-addtokeptobjects",
        "#sec-weak-ref-constructor",
        "#ordinary-object",
        "#sec-properties-of-the-weak-ref-prototype-object",
        "#sec-weak-ref-constructor",
        "#sec-finalization-registry-constructor",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-iscallable",
        "#sec-ordinarycreatefromconstructor",
        "#active-function-object",
        "#sec-hostmakejobcallback",
        "#sec-list-and-record-specification-type",
        "#sec-finalization-registry-constructor",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-finalization-registry-prototype-object",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-finalization-registry-constructor",
        "#sec-requireinternalslot",
        "#sec-ecmascript-data-types-and-values",
        "#sec-samevalue",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-liveness",
        "#sec-liveness",
        "#sec-requireinternalslot",
        "#sec-ecmascript-data-types-and-values",
        "#sec-list-and-record-specification-type",
        "#sec-samevalue",
        "#sec-well-known-symbols",
        "#sec-finalization-registry-constructor",
        "#ordinary-object",
        "#sec-properties-of-the-finalization-registry-prototype-object",
        "#sec-finalization-registry-constructor",
        "#sec-object-type",
        "#table-iterable-interface-required-properties",
        "#table-iterator-interface-required-properties",
        "#table-iterator-interface-optional-properties",
        "#table-async-iterable",
        "#table-async-iterator-required",
        "#table-async-iterator-optional",
        "#table-iteratorresult-interface-properties",
        "#sec-ecmascript-language-types",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#constructor",
        "#sec-createasyncfromsynciterator",
        "#sec-iterator-records",
        "#sec-iterator-records",
        "#sec-iterator-records",
        "#sec-ordinaryobjectcreate",
        "#sec-%asyncfromsynciteratorprototype%-object",
        "#sec-get-o-p",
        "#sec-iterator-records",
        "#ordinary-object",
        "#sec-asynciteratorprototype",
        "#assert",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-completion-ao",
        "#sec-iteratornext",
        "#sec-completion-ao",
        "#sec-iteratornext",
        "#sec-ifabruptrejectpromise",
        "#sec-asyncfromsynciteratorcontinuation",
        "#assert",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-completion-ao",
        "#sec-getmethod",
        "#sec-ifabruptrejectpromise",
        "#sec-createiterresultobject",
        "#sec-call",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-ifabruptrejectpromise",
        "#sec-ecmascript-data-types-and-values",
        "#sec-call",
        "#sec-asyncfromsynciteratorcontinuation",
        "#sec-%asyncfromsynciteratorprototype%.return",
        "#assert",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-completion-ao",
        "#sec-getmethod",
        "#sec-ifabruptrejectpromise",
        "#sec-call",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-ifabruptrejectpromise",
        "#sec-ecmascript-data-types-and-values",
        "#sec-call",
        "#sec-asyncfromsynciteratorcontinuation",
        "#ordinary-object",
        "#sec-%asyncfromsynciteratorprototype%-object",
        "#table-async-from-sync-iterator-internal-slots",
        "#sec-iterator-records",
        "#sec-promisecapability-records",
        "#sec-promise-constructor",
        "#sec-promise-constructor",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-iteratorcomplete",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-promise-resolve",
        "#sec-promise-constructor",
        "#sec-ifabruptrejectpromise",
        "#sec-abstract-closure",
        "#sec-createiterresultobject",
        "#sec-createbuiltinfunction",
        "#sec-performpromisethen",
        "#job",
        "#job",
        "#sec-list-and-record-specification-type",
        "#sec-newpromisecapability",
        "#table-promisecapability-record-fields",
        "#sec-promisecapability-records",
        "#function-object",
        "#function-object",
        "#sec-promisecapability-records",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-record-specification-type",
        "#sec-call",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-performpromisethen",
        "#sec-abstract-closure",
        "#sec-newpromisereactionjob",
        "#table-promisereaction-record-fields",
        "#sec-list-and-record-specification-type",
        "#sec-promisecapability-records",
        "#sec-jobcallback-records",
        "#sec-list-and-record-specification-type",
        "#function-object",
        "#function-object",
        "#sec-list-and-record-specification-type",
        "#sec-promise-resolve-functions",
        "#sec-promise-resolve-functions",
        "#sec-createbuiltinfunction",
        "#sec-promise-reject-functions",
        "#sec-promise-reject-functions",
        "#sec-createbuiltinfunction",
        "#sec-list-and-record-specification-type",
        "#active-function-object",
        "#assert",
        "#sec-rejectpromise",
        "#active-function-object",
        "#assert",
        "#sec-samevalue",
        "#sec-rejectpromise",
        "#sec-ecmascript-data-types-and-values",
        "#sec-fulfillpromise",
        "#sec-completion-ao",
        "#sec-get-o-p",
        "#sec-completion-record-specification-type",
        "#sec-rejectpromise",
        "#sec-iscallable",
        "#sec-fulfillpromise",
        "#sec-hostmakejobcallback",
        "#sec-newpromiseresolvethenablejob",
        "#sec-hostenqueuepromisejob",
        "#assert",
        "#sec-triggerpromisereactions",
        "#sec-completion-record-specification-type",
        "#sec-promisecapability-records",
        "#sec-completion-record-specification-type",
        "#constructor",
        "#constructor",
        "#sec-promisecapability-records",
        "#sec-isconstructor",
        "#constructor",
        "#constructor",
        "#sec-promise-executor",
        "#sec-promisecapability-records",
        "#sec-abstract-closure",
        "#sec-createbuiltinfunction",
        "#sec-construct",
        "#sec-iscallable",
        "#sec-iscallable",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-ecmascript-data-types-and-values",
        "#assert",
        "#sec-host-promise-rejection-tracker",
        "#sec-triggerpromisereactions",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#job",
        "#job",
        "#sec-list-and-record-specification-type",
        "#sec-newpromisereactionjob",
        "#sec-hostenqueuepromisejob",
        "#host-defined",
        "#host-environment",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#job",
        "#sec-abstract-closure",
        "#realm-record",
        "#job",
        "#sec-abstract-closure",
        "#job",
        "#sec-abstract-closure",
        "#sec-normalcompletion",
        "#assert",
        "#sec-throwcompletion",
        "#sec-completion-ao",
        "#sec-hostcalljobcallback",
        "#assert",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-promisecapability-records",
        "#sec-completion-record-specification-type",
        "#sec-call",
        "#sec-call",
        "#sec-completion-ao",
        "#sec-getfunctionrealm",
        "#sec-completion-record-specification-type",
        "#current-realm",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#job",
        "#sec-abstract-closure",
        "#realm-record",
        "#job",
        "#sec-abstract-closure",
        "#sec-createresolvingfunctions",
        "#sec-completion-ao",
        "#sec-hostcalljobcallback",
        "#sec-completion-record-specification-type",
        "#sec-call",
        "#sec-completion-ao",
        "#sec-getfunctionrealm",
        "#sec-completion-record-specification-type",
        "#current-realm",
        "#sec-list-and-record-specification-type",
        "#job",
        "#job",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-iscallable",
        "#sec-ordinarycreatefromconstructor",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-createresolvingfunctions",
        "#sec-completion-ao",
        "#sec-call",
        "#sec-completion-record-specification-type",
        "#sec-call",
        "#function-object",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-newpromisecapability",
        "#sec-completion-ao",
        "#sec-getpromiseresolve",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-getiterator",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-performpromiseall",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-iteratorclose",
        "#sec-ifabruptrejectpromise",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-completion-record-specification-type",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-get-o-p",
        "#sec-iscallable",
        "#constructor",
        "#sec-promisecapability-records",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-createarrayfromlist",
        "#sec-call",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-call",
        "#sec-promise.all-resolve-element-functions",
        "#sec-promise.all-resolve-element-functions",
        "#sec-createbuiltinfunction",
        "#sec-invoke",
        "#active-function-object",
        "#sec-createarrayfromlist",
        "#sec-call",
        "#sec-newpromisecapability",
        "#sec-completion-ao",
        "#sec-getpromiseresolve",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-getiterator",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-performpromiseallsettled",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-iteratorclose",
        "#sec-ifabruptrejectpromise",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-promisecapability-records",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-createarrayfromlist",
        "#sec-call",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-call",
        "#sec-promise.allsettled-resolve-element-functions",
        "#sec-promise.allsettled-resolve-element-functions",
        "#sec-createbuiltinfunction",
        "#sec-list-and-record-specification-type",
        "#sec-promise.allsettled-reject-element-functions",
        "#sec-promise.allsettled-reject-element-functions",
        "#sec-createbuiltinfunction",
        "#sec-invoke",
        "#active-function-object",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createarrayfromlist",
        "#sec-call",
        "#active-function-object",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#sec-createarrayfromlist",
        "#sec-call",
        "#sec-newpromisecapability",
        "#sec-completion-ao",
        "#sec-getpromiseresolve",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-getiterator",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-performpromiseany",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-iteratorclose",
        "#sec-ifabruptrejectpromise",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-promisecapability-records",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-definepropertyorthrow",
        "#sec-createarrayfromlist",
        "#sec-throwcompletion",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-call",
        "#sec-promise.any-reject-element-functions",
        "#sec-promise.any-reject-element-functions",
        "#sec-createbuiltinfunction",
        "#sec-invoke",
        "#active-function-object",
        "#sec-definepropertyorthrow",
        "#sec-createarrayfromlist",
        "#sec-call",
        "#sec-properties-of-the-promise-prototype-object",
        "#sec-newpromisecapability",
        "#sec-completion-ao",
        "#sec-getpromiseresolve",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-getiterator",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-ao",
        "#sec-performpromiserace",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-iteratorclose",
        "#sec-ifabruptrejectpromise",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-promisecapability-records",
        "#function-object",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#sec-iteratorstep",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-completion-ao",
        "#sec-iteratorvalue",
        "#sec-completion-record-specification-type",
        "#sec-returnifabrupt",
        "#sec-call",
        "#sec-invoke",
        "#sec-newpromisecapability",
        "#sec-call",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-ecmascript-data-types-and-values",
        "#sec-promise-resolve",
        "#constructor",
        "#constructor",
        "#constructor",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ispromise",
        "#sec-get-o-p",
        "#sec-samevalue",
        "#sec-newpromisecapability",
        "#sec-call",
        "#sec-object-type",
        "#constructor",
        "#constructor",
        "#sec-well-known-symbols",
        "#sec-properties-of-the-object-prototype-object",
        "#ordinary-object",
        "#sec-invoke",
        "#sec-promise-constructor",
        "#sec-ecmascript-data-types-and-values",
        "#sec-speciesconstructor",
        "#sec-promise-constructor",
        "#assert",
        "#sec-isconstructor",
        "#sec-iscallable",
        "#sec-abstract-closure",
        "#sec-call",
        "#sec-promise-resolve",
        "#sec-abstract-closure",
        "#sec-createbuiltinfunction",
        "#sec-invoke",
        "#sec-createbuiltinfunction",
        "#sec-abstract-closure",
        "#sec-call",
        "#sec-promise-resolve",
        "#sec-abstract-closure",
        "#sec-throwcompletion",
        "#sec-createbuiltinfunction",
        "#sec-invoke",
        "#sec-createbuiltinfunction",
        "#sec-invoke",
        "#sec-ispromise",
        "#sec-speciesconstructor",
        "#sec-promise-constructor",
        "#sec-newpromisecapability",
        "#sec-performpromisethen",
        "#sec-promisecapability-records",
        "#sec-ecmascript-language-types",
        "#assert",
        "#sec-ispromise",
        "#sec-iscallable",
        "#sec-hostmakejobcallback",
        "#sec-iscallable",
        "#sec-hostmakejobcallback",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-newpromisereactionjob",
        "#sec-hostenqueuepromisejob",
        "#assert",
        "#sec-host-promise-rejection-tracker",
        "#sec-newpromisereactionjob",
        "#sec-hostenqueuepromisejob",
        "#sec-well-known-symbols",
        "#ordinary-object",
        "#sec-properties-of-the-promise-prototype-object",
        "#sec-properties-of-the-promise-prototype-object",
        "#table-internal-slots-of-promise-instances",
        "#sec-ecmascript-language-types",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#prod-GeneratorDeclaration",
        "#prod-GeneratorExpression",
        "#prod-GeneratorMethod",
        "#sec-generatorfunction-constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#function-object",
        "#active-function-object",
        "#sec-createdynamicfunction",
        "#sec-function-p1-p2-pn-body",
        "#constructor",
        "#function-object",
        "#constructor",
        "#sec-function-constructor",
        "#sec-object-type",
        "#sec-properties-of-the-generatorfunction-prototype-object",
        "#figure-2",
        "#ordinary-object",
        "#function-object",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#table-internal-slots-of-generator-instances",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-generatorfunction-constructor",
        "#sec-properties-of-generator-prototype",
        "#sec-well-known-symbols",
        "#function-object",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#sec-function-instances-length",
        "#sec-function-instances-name",
        "#ordinary-object",
        "#function-object",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-AsyncGeneratorExpression",
        "#prod-AsyncGeneratorMethod",
        "#sec-asyncgeneratorfunction-constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#function-object",
        "#active-function-object",
        "#sec-createdynamicfunction",
        "#sec-function-p1-p2-pn-body",
        "#constructor",
        "#function-object",
        "#constructor",
        "#sec-function-constructor",
        "#sec-object-type",
        "#sec-properties-of-asyncgeneratorfunction-prototype",
        "#ordinary-object",
        "#function-object",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#table-internal-slots-of-asyncgenerator-instances",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-asyncgeneratorfunction-constructor",
        "#sec-properties-of-asyncgenerator-prototype",
        "#sec-well-known-symbols",
        "#function-object",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#integral-number",
        "#sec-function-instances-name",
        "#ordinary-object",
        "#function-object",
        "#sec-properties-of-generator-prototype",
        "#ordinary-object",
        "#sec-%iteratorprototype%-object",
        "#sec-properties-of-the-generatorfunction-prototype-object",
        "#sec-generatorresume",
        "#sec-completion-record-specification-type",
        "#sec-generatorresumeabrupt",
        "#sec-throwcompletion",
        "#sec-generatorresumeabrupt",
        "#sec-well-known-symbols",
        "#table-internal-slots-of-generator-instances",
        "#sec-execution-contexts",
        "#sec-execution-contexts",
        "#prod-FunctionBody",
        "#sec-syntactic-grammar",
        "#sec-abstract-closure",
        "#assert",
        "#running-execution-context",
        "#sec-execution-contexts",
        "#sec-syntactic-grammar",
        "#assert",
        "#sec-abstract-closure",
        "#assert",
        "#execution-context-stack",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-execution-contexts",
        "#assert",
        "#sec-createiterresultobject",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-requireinternalslot",
        "#sec-requireinternalslot",
        "#assert",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-generatorvalidate",
        "#sec-createiterresultobject",
        "#assert",
        "#running-execution-context",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-normalcompletion",
        "#assert",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-generatorvalidate",
        "#sec-execution-contexts",
        "#sec-createiterresultobject",
        "#assert",
        "#running-execution-context",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#assert",
        "#execution-context-stack",
        "#running-execution-context",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#assert",
        "#sec-execution-contexts",
        "#assert",
        "#sec-getgeneratorkind",
        "#execution-context-stack",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#prod-YieldExpression",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-getgeneratorkind",
        "#sec-asyncgeneratoryield",
        "#sec-generatoryield",
        "#sec-createiterresultobject",
        "#sec-abstract-closure",
        "#sec-yield",
        "#sec-ordinaryobjectcreate",
        "#running-execution-context",
        "#sec-execution-contexts",
        "#realm",
        "#current-realm",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-generatorstart",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-properties-of-asyncgenerator-prototype",
        "#ordinary-object",
        "#sec-asynciteratorprototype",
        "#sec-properties-of-asyncgeneratorfunction-prototype",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-completion-ao",
        "#sec-asyncgeneratorvalidate",
        "#sec-ifabruptrejectpromise",
        "#sec-createiterresultobject",
        "#sec-call",
        "#sec-normalcompletion",
        "#sec-asyncgeneratorenqueue",
        "#sec-asyncgeneratorresume",
        "#assert",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-completion-ao",
        "#sec-asyncgeneratorvalidate",
        "#sec-ifabruptrejectpromise",
        "#sec-completion-record-specification-type",
        "#sec-asyncgeneratorenqueue",
        "#sec-asyncgeneratorawaitreturn",
        "#sec-asyncgeneratorresume",
        "#assert",
        "#sec-newpromisecapability",
        "#sec-promise-constructor",
        "#sec-completion-ao",
        "#sec-asyncgeneratorvalidate",
        "#sec-ifabruptrejectpromise",
        "#sec-call",
        "#sec-throwcompletion",
        "#sec-asyncgeneratorenqueue",
        "#sec-asyncgeneratorresume",
        "#assert",
        "#sec-well-known-symbols",
        "#sec-execution-contexts",
        "#sec-execution-contexts",
        "#sec-list-and-record-specification-type",
        "#sec-asyncgeneratorrequest-records",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-promisecapability-records",
        "#prod-FunctionBody",
        "#sec-syntactic-grammar",
        "#sec-abstract-closure",
        "#assert",
        "#running-execution-context",
        "#sec-execution-contexts",
        "#sec-syntactic-grammar",
        "#assert",
        "#sec-abstract-closure",
        "#sec-completion-ao",
        "#assert",
        "#execution-context-stack",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-normalcompletion",
        "#sec-normalcompletion",
        "#sec-asyncgeneratorcompletestep",
        "#sec-asyncgeneratordrainqueue",
        "#sec-list-and-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-requireinternalslot",
        "#sec-requireinternalslot",
        "#sec-requireinternalslot",
        "#sec-completion-record-specification-type",
        "#sec-promisecapability-records",
        "#sec-asyncgeneratorrequest-records",
        "#sec-completion-record-specification-type",
        "#realm-record",
        "#assert",
        "#sec-call",
        "#assert",
        "#running-execution-context",
        "#realm",
        "#running-execution-context",
        "#realm",
        "#sec-createiterresultobject",
        "#running-execution-context",
        "#realm",
        "#sec-createiterresultobject",
        "#sec-call",
        "#sec-completion-record-specification-type",
        "#assert",
        "#running-execution-context",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-completion-record-specification-type",
        "#assert",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#sec-completion-ao",
        "#await",
        "#assert",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-ecmascript-language-types",
        "#sec-completion-record-specification-type",
        "#running-execution-context",
        "#assert",
        "#sec-execution-contexts",
        "#assert",
        "#sec-getgeneratorkind",
        "#await",
        "#sec-normalcompletion",
        "#assert",
        "#execution-context-stack",
        "#execution-context-stack",
        "#realm",
        "#sec-asyncgeneratorcompletestep",
        "#sec-completion-ao",
        "#sec-asyncgeneratorunwrapyieldresumption",
        "#execution-context-stack",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-completion-record-specification-type",
        "#sec-asyncgeneratorunwrapyieldresumption",
        "#prod-YieldExpression",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-completion-ao",
        "#assert",
        "#sec-promise-resolve",
        "#sec-promise-constructor",
        "#sec-abstract-closure",
        "#sec-normalcompletion",
        "#sec-asyncgeneratorcompletestep",
        "#sec-asyncgeneratordrainqueue",
        "#sec-createbuiltinfunction",
        "#sec-abstract-closure",
        "#sec-throwcompletion",
        "#sec-asyncgeneratorcompletestep",
        "#sec-asyncgeneratordrainqueue",
        "#sec-createbuiltinfunction",
        "#sec-performpromisethen",
        "#sec-asyncgeneratorrequest-records",
        "#sec-completion-record-specification-type",
        "#assert",
        "#sec-completion-ao",
        "#sec-asyncgeneratorawaitreturn",
        "#sec-normalcompletion",
        "#sec-asyncgeneratorcompletestep",
        "#sec-abstract-closure",
        "#await",
        "#sec-yield",
        "#sec-ordinaryobjectcreate",
        "#running-execution-context",
        "#sec-execution-contexts",
        "#realm",
        "#current-realm",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-asyncgeneratorstart",
        "#execution-context-stack",
        "#running-execution-context",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncMethod",
        "#prod-AsyncArrowFunction",
        "#sec-async-function-constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#constructor",
        "#function-object",
        "#active-function-object",
        "#sec-createdynamicfunction",
        "#sec-function-p1-p2-pn-body",
        "#constructor",
        "#function-object",
        "#constructor",
        "#sec-function-constructor",
        "#sec-object-type",
        "#sec-async-function-prototype-properties",
        "#ordinary-object",
        "#function-object",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-async-function-constructor",
        "#sec-well-known-symbols",
        "#function-object",
        "#table-internal-slots-of-ecmascript-function-objects",
        "#constructor",
        "#sec-function-instances-length",
        "#sec-function-instances-name",
        "#sec-promisecapability-records",
        "#running-execution-context",
        "#sec-asyncblockstart",
        "#sec-asyncblockstart",
        "#sec-promisecapability-records",
        "#sec-syntactic-grammar",
        "#sec-execution-contexts",
        "#assert",
        "#sec-promisecapability-records",
        "#running-execution-context",
        "#sec-execution-contexts",
        "#assert",
        "#execution-context-stack",
        "#sec-execution-contexts",
        "#execution-context-stack",
        "#running-execution-context",
        "#sec-call",
        "#sec-call",
        "#assert",
        "#sec-call",
        "#execution-context-stack",
        "#running-execution-context",
        "#assert",
        "#execution-context-stack",
        "#running-execution-context",
        "#assert",
        "#sec-completion-record-specification-type",
        "#await",
        "#step-asyncblockstart-return-undefined",
        "#sec-global-object",
        "#ordinary-object",
        "#sec-properties-of-the-object-prototype-object",
        "#function-object",
        "#constructor",
        "#sec-iscallable",
        "#sec-createlistfromarraylike",
        "#sec-preparefortailcall",
        "#sec-call",
        "#sec-isconstructor",
        "#sec-isconstructor",
        "#sec-createlistfromarraylike",
        "#sec-construct",
        "#sec-ecmascript-data-types-and-values",
        "#sec-topropertykey",
        "#sec-topropertydescriptor",
        "#sec-ecmascript-data-types-and-values",
        "#sec-topropertykey",
        "#sec-ecmascript-data-types-and-values",
        "#sec-topropertykey",
        "#sec-ecmascript-data-types-and-values",
        "#sec-topropertykey",
        "#sec-frompropertydescriptor",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-topropertykey",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-createarrayfromlist",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-topropertykey",
        "#sec-ecmascript-data-types-and-values",
        "#sec-ecmascript-data-types-and-values",
        "#sec-well-known-symbols",
        "#constructor",
        "#sec-global-object",
        "#constructor",
        "#sec-proxycreate",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-proxycreate",
        "#sec-abstract-closure",
        "#active-function-object",
        "#assert",
        "#sec-createbuiltinfunction",
        "#sec-ordinaryobjectcreate",
        "#sec-properties-of-the-object-prototype-object",
        "#sec-createdatapropertyorthrow",
        "#sec-createdatapropertyorthrow",
        "#module-namespace-exotic-object",
        "#constructor",
        "#prod-ImportDeclaration",
        "#prod-NameSpaceImport",
        "#sec-module-namespace-exotic-objects",
        "#sec-well-known-symbols",
        "#sec-memory-model-fundamentals",
        "#agent",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-algorithm-conventions-abstract-operations",
        "#agent",
        "#sec-agent-clusters",
        "#agent",
        "#sec-list-and-record-specification-type",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model",
        "#sec-data-blocks",
        "#integer",
        "#integer",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model",
        "#sec-data-blocks",
        "#integer",
        "#integer",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-memory-model-fundamentals",
        "#sec-data-blocks",
        "#integer",
        "#integer",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-arraybuffer-notation",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-data-blocks",
        "#host",
        "#integer",
        "#host",
        "#agent",
        "#agent",
        "#sec-agent-clusters",
        "#sec-agent-order",
        "#sec-candidate-executions",
        "#sec-list-and-record-specification-type",
        "#sec-agent-event-records",
        "#sec-agents",
        "#agent",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-list-and-record-specification-type",
        "#sec-chosen-value-records",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-agent-clusters",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-agent-event-records",
        "#agent",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-chosen-value-records",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-agent-order",
        "#sec-set-and-relation-specification-type",
        "#sec-reads-bytes-from",
        "#sec-reads-from",
        "#sec-set-and-relation-specification-type",
        "#sec-host-synchronizes-with",
        "#sec-set-and-relation-specification-type",
        "#sec-synchronizes-with",
        "#sec-set-and-relation-specification-type",
        "#sec-happens-before",
        "#sec-set-and-relation-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-candidate-executions",
        "#sec-agent-event-records",
        "#sec-candidate-executions",
        "#sec-event-set",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-candidate-executions",
        "#sec-event-set",
        "#sec-sharedatablockeventset",
        "#sec-candidate-executions",
        "#integer",
        "#sec-list-and-record-specification-type",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-list-and-record-specification-type",
        "#assert",
        "#sec-memory-model-fundamentals",
        "#assert",
        "#sec-memory-model-fundamentals",
        "#sec-valueofreadevent",
        "#sec-memory-model-fundamentals",
        "#sec-list-and-record-specification-type",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-candidate-executions",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-list-and-record-specification-type",
        "#sec-data-blocks",
        "#assert",
        "#sec-list-and-record-specification-type",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-composewriteeventbytes",
        "#sec-candidate-executions",
        "#sec-set-and-relation-specification-type",
        "#sec-event-set",
        "#sec-agent-event-records",
        "#sec-list-and-record-specification-type",
        "#agent",
        "#agent",
        "#sec-set-and-relation-specification-type",
        "#sec-set-and-relation-specification-type",
        "#sec-candidate-executions",
        "#sec-sharedatablockeventset",
        "#sec-list-and-record-specification-type",
        "#sec-sharedatablockeventset",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-sharedatablockeventset",
        "#sec-list-and-record-specification-type",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-candidate-executions",
        "#sec-set-and-relation-specification-type",
        "#sec-sharedatablockeventset",
        "#sec-candidate-executions",
        "#host",
        "#sec-set-and-relation-specification-type",
        "#host",
        "#sec-hosteventset",
        "#host",
        "#sec-happens-before",
        "#host",
        "#sec-candidate-executions",
        "#sec-set-and-relation-specification-type",
        "#sec-happens-before",
        "#sec-reads-from",
        "#sec-memory-model-fundamentals",
        "#sec-reads-from",
        "#sec-candidate-executions",
        "#sec-set-and-relation-specification-type",
        "#sec-sharedatablockeventset",
        "#sec-event-set",
        "#sec-agent-order",
        "#sec-candidate-executions",
        "#sec-candidate-executions",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-sharedatablockeventset",
        "#sec-valueofreadevent",
        "#integer",
        "#sec-candidate-executions",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-sharedatablockeventset",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-candidate-executions",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-sharedatablockeventset",
        "#assert",
        "#integer",
        "#integer",
        "#sec-candidate-executions",
        "#sec-set-and-relation-specification-type",
        "#sec-event-set",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-sharedatablockeventset",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-sharedatablockeventset",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-sharedatablockeventset",
        "#agent",
        "#sec-candidate-executions",
        "#sec-event-set",
        "#sec-happens-before",
        "#sec-synchronizes-with",
        "#sec-candidate-executions",
        "#host",
        "#sec-host-synchronizes-with",
        "#sec-set-and-relation-specification-type",
        "#sec-set-and-relation-specification-type",
        "#sec-sharedatablockeventset",
        "#sec-memory-model-fundamentals",
        "#sec-memory-model-fundamentals",
        "#sec-sharedatablockeventset",
        "#sec-sharedatablockeventset",
        "#sec-memory-model",
        "#agent",
        "#sec-memory-model",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#agent",
        "#sec-memory-model",
        "#sec-memory-model",
        "#sec-agent-order",
        "#sec-agent-order",
        "#agent",
        "#sec-valueofreadevent",
        "#sec-agent-order",
        "#sec-memory-order",
        "#agent",
        "#sec-memory-order",
        "#agent",
        "#sec-memory-model",
        "#sec-memory-model",
        "#sec-memory-model",
        "#sec-memory-model",
        "#prod-SourceCharacter",
        "#prod-InputElementDiv",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-Comment",
        "#prod-CommonToken",
        "#prod-DivPunctuator",
        "#prod-RightBracePunctuator",
        "#prod-InputElementRegExp",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-Comment",
        "#prod-CommonToken",
        "#prod-RightBracePunctuator",
        "#prod-RegularExpressionLiteral",
        "#prod-InputElementRegExpOrTemplateTail",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-Comment",
        "#prod-CommonToken",
        "#prod-RegularExpressionLiteral",
        "#prod-TemplateSubstitutionTail",
        "#prod-InputElementTemplateTail",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-Comment",
        "#prod-CommonToken",
        "#prod-DivPunctuator",
        "#prod-TemplateSubstitutionTail",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-LineTerminatorSequence",
        "#prod-Comment",
        "#prod-MultiLineComment",
        "#prod-SingleLineComment",
        "#prod-MultiLineComment",
        "#prod-MultiLineCommentChars",
        "#prod-MultiLineCommentChars",
        "#prod-MultiLineNotAsteriskChar",
        "#prod-MultiLineCommentChars",
        "#prod-PostAsteriskCommentChars",
        "#prod-PostAsteriskCommentChars",
        "#prod-MultiLineNotForwardSlashOrAsteriskChar",
        "#prod-MultiLineCommentChars",
        "#prod-PostAsteriskCommentChars",
        "#prod-MultiLineNotAsteriskChar",
        "#prod-SourceCharacter",
        "#prod-MultiLineNotForwardSlashOrAsteriskChar",
        "#prod-SourceCharacter",
        "#prod-SingleLineComment",
        "#prod-SingleLineCommentChars",
        "#prod-SingleLineCommentChars",
        "#prod-SingleLineCommentChar",
        "#prod-SingleLineCommentChars",
        "#prod-SingleLineCommentChar",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-CommonToken",
        "#prod-IdentifierName",
        "#prod-PrivateIdentifier",
        "#prod-Punctuator",
        "#prod-NumericLiteral",
        "#prod-StringLiteral",
        "#prod-Template",
        "#prod-PrivateIdentifier",
        "#prod-IdentifierName",
        "#prod-IdentifierName",
        "#prod-IdentifierStart",
        "#prod-IdentifierName",
        "#prod-IdentifierPart",
        "#prod-IdentifierStart",
        "#prod-IdentifierStartChar",
        "#prod-UnicodeEscapeSequence",
        "#prod-IdentifierPart",
        "#prod-IdentifierPartChar",
        "#prod-UnicodeEscapeSequence",
        "#prod-IdentifierStartChar",
        "#prod-UnicodeIDStart",
        "#prod-IdentifierPartChar",
        "#prod-UnicodeIDContinue",
        "#prod-UnicodeIDStart",
        "#prod-UnicodeIDContinue",
        "#prod-ReservedWord",
        "#prod-Punctuator",
        "#prod-OptionalChainingPunctuator",
        "#prod-OtherPunctuator",
        "#prod-OptionalChainingPunctuator",
        "#prod-DecimalDigit",
        "#prod-OtherPunctuator",
        "#prod-DivPunctuator",
        "#prod-RightBracePunctuator",
        "#prod-NullLiteral",
        "#prod-BooleanLiteral",
        "#prod-NumericLiteralSeparator",
        "#prod-NumericLiteral",
        "#prod-DecimalLiteral",
        "#prod-DecimalBigIntegerLiteral",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-BigIntLiteralSuffix",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-DecimalBigIntegerLiteral",
        "#prod-BigIntLiteralSuffix",
        "#prod-NonZeroDigit",
        "#prod-DecimalDigits",
        "#prod-BigIntLiteralSuffix",
        "#prod-NonZeroDigit",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalDigits",
        "#prod-BigIntLiteralSuffix",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-BinaryIntegerLiteral",
        "#prod-OctalIntegerLiteral",
        "#prod-HexIntegerLiteral",
        "#prod-BigIntLiteralSuffix",
        "#prod-DecimalLiteral",
        "#prod-DecimalIntegerLiteral",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalIntegerLiteral",
        "#prod-ExponentPart",
        "#prod-DecimalIntegerLiteral",
        "#prod-NonZeroDigit",
        "#prod-NonZeroDigit",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalDigits",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#prod-DecimalDigits",
        "#prod-DecimalDigit",
        "#prod-DecimalDigits",
        "#prod-DecimalDigit",
        "#prod-DecimalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-DecimalDigit",
        "#prod-DecimalDigit",
        "#prod-NonZeroDigit",
        "#prod-ExponentPart",
        "#prod-ExponentIndicator",
        "#prod-SignedInteger",
        "#prod-ExponentIndicator",
        "#prod-SignedInteger",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-BinaryIntegerLiteral",
        "#prod-BinaryDigits",
        "#prod-BinaryDigits",
        "#prod-BinaryDigits",
        "#prod-BinaryDigit",
        "#prod-BinaryDigits",
        "#prod-BinaryDigit",
        "#prod-BinaryDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-BinaryDigit",
        "#prod-BinaryDigit",
        "#prod-OctalIntegerLiteral",
        "#prod-OctalDigits",
        "#prod-OctalDigits",
        "#prod-OctalDigits",
        "#prod-OctalDigit",
        "#prod-OctalDigits",
        "#prod-OctalDigit",
        "#prod-OctalDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-OctalDigit",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#prod-NonOctalDigit",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-NonOctalDigit",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#prod-DecimalDigit",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-LegacyOctalLikeDecimalIntegerLiteral",
        "#prod-OctalDigit",
        "#prod-OctalDigit",
        "#prod-NonOctalDigit",
        "#prod-HexIntegerLiteral",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-HexDigit",
        "#prod-HexDigits",
        "#prod-HexDigit",
        "#prod-HexDigits",
        "#prod-NumericLiteralSeparator",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-StringLiteral",
        "#prod-DoubleStringCharacters",
        "#prod-SingleStringCharacters",
        "#prod-DoubleStringCharacters",
        "#prod-DoubleStringCharacter",
        "#prod-DoubleStringCharacters",
        "#prod-SingleStringCharacters",
        "#prod-SingleStringCharacter",
        "#prod-SingleStringCharacters",
        "#prod-DoubleStringCharacter",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-EscapeSequence",
        "#prod-LineContinuation",
        "#prod-SingleStringCharacter",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-EscapeSequence",
        "#prod-LineContinuation",
        "#prod-LineContinuation",
        "#prod-LineTerminatorSequence",
        "#prod-EscapeSequence",
        "#prod-CharacterEscapeSequence",
        "#prod-DecimalDigit",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-NonOctalDecimalEscapeSequence",
        "#prod-HexEscapeSequence",
        "#prod-UnicodeEscapeSequence",
        "#prod-CharacterEscapeSequence",
        "#prod-SingleEscapeCharacter",
        "#prod-NonEscapeCharacter",
        "#prod-SingleEscapeCharacter",
        "#prod-NonEscapeCharacter",
        "#prod-SourceCharacter",
        "#prod-EscapeCharacter",
        "#prod-LineTerminator",
        "#prod-EscapeCharacter",
        "#prod-SingleEscapeCharacter",
        "#prod-DecimalDigit",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-NonZeroOctalDigit",
        "#prod-OctalDigit",
        "#prod-ZeroToThree",
        "#prod-OctalDigit",
        "#prod-OctalDigit",
        "#prod-FourToSeven",
        "#prod-OctalDigit",
        "#prod-ZeroToThree",
        "#prod-OctalDigit",
        "#prod-OctalDigit",
        "#prod-NonZeroOctalDigit",
        "#prod-OctalDigit",
        "#prod-ZeroToThree",
        "#prod-FourToSeven",
        "#prod-NonOctalDecimalEscapeSequence",
        "#prod-HexEscapeSequence",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-UnicodeEscapeSequence",
        "#prod-Hex4Digits",
        "#prod-CodePoint",
        "#prod-Hex4Digits",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-RegularExpressionLiteral",
        "#prod-RegularExpressionBody",
        "#prod-RegularExpressionFlags",
        "#prod-RegularExpressionBody",
        "#prod-RegularExpressionFirstChar",
        "#prod-RegularExpressionChars",
        "#prod-RegularExpressionChars",
        "#prod-RegularExpressionChars",
        "#prod-RegularExpressionChar",
        "#prod-RegularExpressionFirstChar",
        "#prod-RegularExpressionNonTerminator",
        "#prod-RegularExpressionBackslashSequence",
        "#prod-RegularExpressionClass",
        "#prod-RegularExpressionChar",
        "#prod-RegularExpressionNonTerminator",
        "#prod-RegularExpressionBackslashSequence",
        "#prod-RegularExpressionClass",
        "#prod-RegularExpressionBackslashSequence",
        "#prod-RegularExpressionNonTerminator",
        "#prod-RegularExpressionNonTerminator",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-RegularExpressionClass",
        "#prod-RegularExpressionClassChars",
        "#prod-RegularExpressionClassChars",
        "#prod-RegularExpressionClassChars",
        "#prod-RegularExpressionClassChar",
        "#prod-RegularExpressionClassChar",
        "#prod-RegularExpressionNonTerminator",
        "#prod-RegularExpressionBackslashSequence",
        "#prod-RegularExpressionFlags",
        "#prod-RegularExpressionFlags",
        "#prod-IdentifierPartChar",
        "#prod-Template",
        "#prod-NoSubstitutionTemplate",
        "#prod-TemplateHead",
        "#prod-NoSubstitutionTemplate",
        "#prod-TemplateCharacters",
        "#prod-TemplateHead",
        "#prod-TemplateCharacters",
        "#prod-TemplateSubstitutionTail",
        "#prod-TemplateMiddle",
        "#prod-TemplateTail",
        "#prod-TemplateMiddle",
        "#prod-TemplateCharacters",
        "#prod-TemplateTail",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacter",
        "#prod-TemplateCharacters",
        "#prod-TemplateCharacter",
        "#prod-TemplateEscapeSequence",
        "#prod-NotEscapeSequence",
        "#prod-LineContinuation",
        "#prod-LineTerminatorSequence",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-TemplateEscapeSequence",
        "#prod-CharacterEscapeSequence",
        "#prod-DecimalDigit",
        "#prod-HexEscapeSequence",
        "#prod-UnicodeEscapeSequence",
        "#prod-NotEscapeSequence",
        "#prod-DecimalDigit",
        "#prod-DecimalDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-NotCodePoint",
        "#prod-HexDigit",
        "#prod-CodePoint",
        "#prod-HexDigit",
        "#prod-NotCodePoint",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-CodePoint",
        "#prod-HexDigits",
        "#prod-HexDigits",
        "#prod-IdentifierReference",
        "#prod-Identifier",
        "#prod-BindingIdentifier",
        "#prod-Identifier",
        "#prod-LabelIdentifier",
        "#prod-Identifier",
        "#prod-Identifier",
        "#prod-IdentifierName",
        "#prod-ReservedWord",
        "#prod-PrimaryExpression",
        "#prod-IdentifierReference",
        "#prod-Literal",
        "#prod-ArrayLiteral",
        "#prod-ObjectLiteral",
        "#prod-FunctionExpression",
        "#prod-ClassExpression",
        "#prod-GeneratorExpression",
        "#prod-AsyncFunctionExpression",
        "#prod-AsyncGeneratorExpression",
        "#prod-RegularExpressionLiteral",
        "#prod-TemplateLiteral",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-BindingIdentifier",
        "#prod-BindingPattern",
        "#prod-Expression",
        "#prod-BindingIdentifier",
        "#prod-Expression",
        "#prod-BindingPattern",
        "#prod-PrimaryExpression",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ParenthesizedExpression",
        "#prod-Expression",
        "#prod-Literal",
        "#prod-NullLiteral",
        "#prod-BooleanLiteral",
        "#prod-NumericLiteral",
        "#prod-StringLiteral",
        "#prod-ArrayLiteral",
        "#prod-Elision",
        "#prod-ElementList",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-AssignmentExpression",
        "#prod-Elision",
        "#prod-SpreadElement",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-AssignmentExpression",
        "#prod-ElementList",
        "#prod-Elision",
        "#prod-SpreadElement",
        "#prod-Elision",
        "#prod-Elision",
        "#prod-SpreadElement",
        "#prod-AssignmentExpression",
        "#prod-ObjectLiteral",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinition",
        "#prod-PropertyDefinitionList",
        "#prod-PropertyDefinition",
        "#prod-PropertyDefinition",
        "#prod-IdentifierReference",
        "#prod-CoverInitializedName",
        "#prod-PropertyName",
        "#prod-AssignmentExpression",
        "#prod-MethodDefinition",
        "#prod-AssignmentExpression",
        "#prod-PropertyName",
        "#prod-LiteralPropertyName",
        "#prod-ComputedPropertyName",
        "#prod-LiteralPropertyName",
        "#prod-IdentifierName",
        "#prod-StringLiteral",
        "#prod-NumericLiteral",
        "#prod-ComputedPropertyName",
        "#prod-AssignmentExpression",
        "#prod-CoverInitializedName",
        "#prod-IdentifierReference",
        "#prod-Initializer",
        "#prod-Initializer",
        "#prod-AssignmentExpression",
        "#prod-TemplateLiteral",
        "#prod-NoSubstitutionTemplate",
        "#prod-SubstitutionTemplate",
        "#prod-SubstitutionTemplate",
        "#prod-TemplateHead",
        "#prod-Expression",
        "#prod-TemplateSpans",
        "#prod-TemplateSpans",
        "#prod-TemplateTail",
        "#prod-TemplateMiddleList",
        "#prod-TemplateTail",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#prod-TemplateMiddleList",
        "#prod-TemplateMiddle",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-PrimaryExpression",
        "#prod-MemberExpression",
        "#prod-Expression",
        "#prod-MemberExpression",
        "#prod-IdentifierName",
        "#prod-MemberExpression",
        "#prod-TemplateLiteral",
        "#prod-SuperProperty",
        "#prod-MetaProperty",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-MemberExpression",
        "#prod-PrivateIdentifier",
        "#prod-SuperProperty",
        "#prod-Expression",
        "#prod-IdentifierName",
        "#prod-MetaProperty",
        "#prod-NewTarget",
        "#prod-ImportMeta",
        "#prod-NewTarget",
        "#prod-ImportMeta",
        "#prod-NewExpression",
        "#prod-MemberExpression",
        "#prod-NewExpression",
        "#prod-CallExpression",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-SuperCall",
        "#prod-ImportCall",
        "#prod-CallExpression",
        "#prod-Arguments",
        "#prod-CallExpression",
        "#prod-Expression",
        "#prod-CallExpression",
        "#prod-IdentifierName",
        "#prod-CallExpression",
        "#prod-TemplateLiteral",
        "#prod-CallExpression",
        "#prod-PrivateIdentifier",
        "#prod-CallExpression",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-CallMemberExpression",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-SuperCall",
        "#prod-Arguments",
        "#prod-ImportCall",
        "#prod-AssignmentExpression",
        "#prod-Arguments",
        "#prod-ArgumentList",
        "#prod-ArgumentList",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-ArgumentList",
        "#prod-AssignmentExpression",
        "#prod-OptionalExpression",
        "#prod-MemberExpression",
        "#prod-OptionalChain",
        "#prod-CallExpression",
        "#prod-OptionalChain",
        "#prod-OptionalExpression",
        "#prod-OptionalChain",
        "#prod-OptionalChain",
        "#prod-Arguments",
        "#prod-Expression",
        "#prod-IdentifierName",
        "#prod-TemplateLiteral",
        "#prod-PrivateIdentifier",
        "#prod-OptionalChain",
        "#prod-Arguments",
        "#prod-OptionalChain",
        "#prod-Expression",
        "#prod-OptionalChain",
        "#prod-IdentifierName",
        "#prod-OptionalChain",
        "#prod-TemplateLiteral",
        "#prod-OptionalChain",
        "#prod-PrivateIdentifier",
        "#prod-LeftHandSideExpression",
        "#prod-NewExpression",
        "#prod-CallExpression",
        "#prod-OptionalExpression",
        "#prod-UpdateExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LeftHandSideExpression",
        "#prod-LineTerminator",
        "#prod-LeftHandSideExpression",
        "#prod-LineTerminator",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UpdateExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-UnaryExpression",
        "#prod-AwaitExpression",
        "#prod-ExponentiationExpression",
        "#prod-UnaryExpression",
        "#prod-UpdateExpression",
        "#prod-ExponentiationExpression",
        "#prod-MultiplicativeExpression",
        "#prod-ExponentiationExpression",
        "#prod-MultiplicativeExpression",
        "#prod-MultiplicativeOperator",
        "#prod-ExponentiationExpression",
        "#prod-MultiplicativeOperator",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-AdditiveExpression",
        "#prod-MultiplicativeExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-ShiftExpression",
        "#prod-AdditiveExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-RelationalExpression",
        "#prod-ShiftExpression",
        "#prod-PrivateIdentifier",
        "#prod-ShiftExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-EqualityExpression",
        "#prod-RelationalExpression",
        "#prod-BitwiseANDExpression",
        "#prod-EqualityExpression",
        "#prod-BitwiseANDExpression",
        "#prod-EqualityExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-BitwiseORExpression",
        "#prod-BitwiseXORExpression",
        "#prod-LogicalANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-LogicalANDExpression",
        "#prod-BitwiseORExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalANDExpression",
        "#prod-LogicalORExpression",
        "#prod-LogicalANDExpression",
        "#prod-CoalesceExpression",
        "#prod-CoalesceExpressionHead",
        "#prod-BitwiseORExpression",
        "#prod-CoalesceExpressionHead",
        "#prod-CoalesceExpression",
        "#prod-BitwiseORExpression",
        "#prod-ShortCircuitExpression",
        "#prod-LogicalORExpression",
        "#prod-CoalesceExpression",
        "#prod-ConditionalExpression",
        "#prod-ShortCircuitExpression",
        "#prod-ShortCircuitExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentExpression",
        "#prod-ConditionalExpression",
        "#prod-YieldExpression",
        "#prod-ArrowFunction",
        "#prod-AsyncArrowFunction",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentOperator",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-AssignmentOperator",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentPattern",
        "#prod-ObjectAssignmentPattern",
        "#prod-ArrayAssignmentPattern",
        "#prod-ObjectAssignmentPattern",
        "#prod-AssignmentRestProperty",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentRestProperty",
        "#prod-ArrayAssignmentPattern",
        "#prod-Elision",
        "#prod-AssignmentRestElement",
        "#prod-AssignmentElementList",
        "#prod-AssignmentElementList",
        "#prod-Elision",
        "#prod-AssignmentRestElement",
        "#prod-AssignmentRestProperty",
        "#prod-DestructuringAssignmentTarget",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentProperty",
        "#prod-AssignmentPropertyList",
        "#prod-AssignmentProperty",
        "#prod-AssignmentElementList",
        "#prod-AssignmentElisionElement",
        "#prod-AssignmentElementList",
        "#prod-AssignmentElisionElement",
        "#prod-AssignmentElisionElement",
        "#prod-Elision",
        "#prod-AssignmentElement",
        "#prod-AssignmentProperty",
        "#prod-IdentifierReference",
        "#prod-Initializer",
        "#prod-PropertyName",
        "#prod-AssignmentElement",
        "#prod-AssignmentElement",
        "#prod-DestructuringAssignmentTarget",
        "#prod-Initializer",
        "#prod-AssignmentRestElement",
        "#prod-DestructuringAssignmentTarget",
        "#prod-DestructuringAssignmentTarget",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-AssignmentExpression",
        "#prod-Expression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-BlockStatement",
        "#prod-VariableStatement",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-IfStatement",
        "#prod-BreakableStatement",
        "#prod-ContinueStatement",
        "#prod-BreakStatement",
        "#prod-ReturnStatement",
        "#prod-WithStatement",
        "#prod-LabelledStatement",
        "#prod-ThrowStatement",
        "#prod-TryStatement",
        "#prod-DebuggerStatement",
        "#prod-Declaration",
        "#prod-HoistableDeclaration",
        "#prod-ClassDeclaration",
        "#prod-LexicalDeclaration",
        "#prod-HoistableDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-GeneratorDeclaration",
        "#prod-AsyncFunctionDeclaration",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-BreakableStatement",
        "#prod-IterationStatement",
        "#prod-SwitchStatement",
        "#prod-BlockStatement",
        "#prod-Block",
        "#prod-Block",
        "#prod-StatementList",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#prod-StatementList",
        "#prod-StatementListItem",
        "#prod-StatementListItem",
        "#prod-Statement",
        "#prod-Declaration",
        "#prod-LexicalDeclaration",
        "#prod-LetOrConst",
        "#prod-BindingList",
        "#prod-LetOrConst",
        "#prod-BindingList",
        "#prod-LexicalBinding",
        "#prod-BindingList",
        "#prod-LexicalBinding",
        "#prod-LexicalBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-VariableStatement",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclaration",
        "#prod-VariableDeclarationList",
        "#prod-VariableDeclaration",
        "#prod-VariableDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-BindingPattern",
        "#prod-ObjectBindingPattern",
        "#prod-ArrayBindingPattern",
        "#prod-ObjectBindingPattern",
        "#prod-BindingRestProperty",
        "#prod-BindingPropertyList",
        "#prod-BindingPropertyList",
        "#prod-BindingRestProperty",
        "#prod-ArrayBindingPattern",
        "#prod-Elision",
        "#prod-BindingRestElement",
        "#prod-BindingElementList",
        "#prod-BindingElementList",
        "#prod-Elision",
        "#prod-BindingRestElement",
        "#prod-BindingRestProperty",
        "#prod-BindingIdentifier",
        "#prod-BindingPropertyList",
        "#prod-BindingProperty",
        "#prod-BindingPropertyList",
        "#prod-BindingProperty",
        "#prod-BindingElementList",
        "#prod-BindingElisionElement",
        "#prod-BindingElementList",
        "#prod-BindingElisionElement",
        "#prod-BindingElisionElement",
        "#prod-Elision",
        "#prod-BindingElement",
        "#prod-BindingProperty",
        "#prod-SingleNameBinding",
        "#prod-PropertyName",
        "#prod-BindingElement",
        "#prod-BindingElement",
        "#prod-SingleNameBinding",
        "#prod-BindingPattern",
        "#prod-Initializer",
        "#prod-SingleNameBinding",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-BindingRestElement",
        "#prod-BindingIdentifier",
        "#prod-BindingPattern",
        "#prod-EmptyStatement",
        "#prod-ExpressionStatement",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-IfStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-Statement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-IterationStatement",
        "#prod-DoWhileStatement",
        "#prod-WhileStatement",
        "#prod-ForStatement",
        "#prod-ForInOfStatement",
        "#prod-DoWhileStatement",
        "#prod-Statement",
        "#prod-Expression",
        "#prod-WhileStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForStatement",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-VariableDeclarationList",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForInOfStatement",
        "#prod-LeftHandSideExpression",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-LeftHandSideExpression",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForBinding",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-AssignmentExpression",
        "#prod-Statement",
        "#prod-ForDeclaration",
        "#prod-LetOrConst",
        "#prod-ForBinding",
        "#prod-ForBinding",
        "#prod-BindingIdentifier",
        "#prod-BindingPattern",
        "#prod-ContinueStatement",
        "#prod-LineTerminator",
        "#prod-LabelIdentifier",
        "#prod-BreakStatement",
        "#prod-LineTerminator",
        "#prod-LabelIdentifier",
        "#prod-ReturnStatement",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-WithStatement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#prod-CaseBlock",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-DefaultClause",
        "#prod-CaseClauses",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#prod-CaseClauses",
        "#prod-CaseClause",
        "#prod-CaseClause",
        "#prod-Expression",
        "#prod-StatementList",
        "#prod-DefaultClause",
        "#prod-StatementList",
        "#prod-LabelledStatement",
        "#prod-LabelIdentifier",
        "#prod-LabelledItem",
        "#prod-LabelledItem",
        "#prod-Statement",
        "#prod-FunctionDeclaration",
        "#prod-ThrowStatement",
        "#prod-LineTerminator",
        "#prod-Expression",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Block",
        "#prod-Finally",
        "#prod-Block",
        "#prod-Catch",
        "#prod-Finally",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#prod-Block",
        "#prod-Finally",
        "#prod-Block",
        "#prod-CatchParameter",
        "#prod-BindingIdentifier",
        "#prod-BindingPattern",
        "#prod-DebuggerStatement",
        "#prod-UniqueFormalParameters",
        "#prod-FormalParameters",
        "#prod-FormalParameters",
        "#prod-FunctionRestParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FormalParameterList",
        "#prod-FunctionRestParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#prod-FormalParameterList",
        "#prod-FormalParameter",
        "#prod-FunctionRestParameter",
        "#prod-BindingRestElement",
        "#prod-FormalParameter",
        "#prod-BindingElement",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FunctionExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-FunctionBody",
        "#prod-FunctionBody",
        "#prod-FunctionStatementList",
        "#prod-FunctionStatementList",
        "#prod-StatementList",
        "#prod-ArrowFunction",
        "#prod-ArrowParameters",
        "#prod-LineTerminator",
        "#prod-ConciseBody",
        "#prod-ArrowParameters",
        "#prod-BindingIdentifier",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ConciseBody",
        "#prod-ExpressionBody",
        "#prod-FunctionBody",
        "#prod-ExpressionBody",
        "#prod-AssignmentExpression",
        "#prod-ArrowParameters",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-CoverParenthesizedExpressionAndArrowParameterList",
        "#prod-ArrowFormalParameters",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncArrowFunction",
        "#prod-LineTerminator",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-LineTerminator",
        "#prod-AsyncConciseBody",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-LineTerminator",
        "#prod-AsyncConciseBody",
        "#prod-AsyncConciseBody",
        "#prod-ExpressionBody",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncArrowBindingIdentifier",
        "#prod-BindingIdentifier",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-MemberExpression",
        "#prod-Arguments",
        "#prod-AsyncArrowFunction",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-LineTerminator",
        "#prod-AsyncConciseBody",
        "#prod-CoverCallExpressionAndAsyncArrowHead",
        "#prod-AsyncArrowHead",
        "#prod-LineTerminator",
        "#prod-ArrowFormalParameters",
        "#prod-MethodDefinition",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-FunctionBody",
        "#prod-GeneratorMethod",
        "#prod-AsyncMethod",
        "#prod-AsyncGeneratorMethod",
        "#prod-ClassElementName",
        "#prod-FunctionBody",
        "#prod-ClassElementName",
        "#prod-PropertySetParameterList",
        "#prod-FunctionBody",
        "#prod-PropertySetParameterList",
        "#prod-FormalParameter",
        "#prod-GeneratorDeclaration",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorExpression",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorMethod",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-GeneratorBody",
        "#prod-GeneratorBody",
        "#prod-FunctionBody",
        "#prod-YieldExpression",
        "#prod-LineTerminator",
        "#prod-AssignmentExpression",
        "#prod-LineTerminator",
        "#prod-AssignmentExpression",
        "#prod-AsyncGeneratorDeclaration",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-LineTerminator",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorExpression",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorMethod",
        "#prod-LineTerminator",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncGeneratorBody",
        "#prod-AsyncGeneratorBody",
        "#prod-FunctionBody",
        "#prod-AsyncFunctionDeclaration",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-LineTerminator",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionExpression",
        "#prod-LineTerminator",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncMethod",
        "#prod-LineTerminator",
        "#prod-ClassElementName",
        "#prod-UniqueFormalParameters",
        "#prod-AsyncFunctionBody",
        "#prod-AsyncFunctionBody",
        "#prod-FunctionBody",
        "#prod-AwaitExpression",
        "#prod-UnaryExpression",
        "#prod-ClassDeclaration",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#prod-ClassTail",
        "#prod-ClassExpression",
        "#prod-BindingIdentifier",
        "#prod-ClassTail",
        "#prod-ClassTail",
        "#prod-ClassHeritage",
        "#prod-ClassBody",
        "#prod-ClassHeritage",
        "#prod-LeftHandSideExpression",
        "#prod-ClassBody",
        "#prod-ClassElementList",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#prod-ClassElementList",
        "#prod-ClassElement",
        "#prod-ClassElement",
        "#prod-MethodDefinition",
        "#prod-MethodDefinition",
        "#prod-FieldDefinition",
        "#prod-FieldDefinition",
        "#prod-ClassStaticBlock",
        "#prod-FieldDefinition",
        "#prod-ClassElementName",
        "#prod-Initializer",
        "#prod-ClassElementName",
        "#prod-PropertyName",
        "#prod-PrivateIdentifier",
        "#prod-ClassStaticBlock",
        "#prod-ClassStaticBlockBody",
        "#prod-ClassStaticBlockBody",
        "#prod-ClassStaticBlockStatementList",
        "#prod-ClassStaticBlockStatementList",
        "#prod-StatementList",
        "#prod-Script",
        "#prod-ScriptBody",
        "#prod-ScriptBody",
        "#prod-StatementList",
        "#prod-Module",
        "#prod-ModuleBody",
        "#prod-ModuleBody",
        "#prod-ModuleItemList",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#prod-ModuleItemList",
        "#prod-ModuleItem",
        "#prod-ModuleItem",
        "#prod-ImportDeclaration",
        "#prod-ExportDeclaration",
        "#prod-StatementListItem",
        "#prod-ModuleExportName",
        "#prod-IdentifierName",
        "#prod-StringLiteral",
        "#prod-ImportDeclaration",
        "#prod-ImportClause",
        "#prod-FromClause",
        "#prod-ModuleSpecifier",
        "#prod-ImportClause",
        "#prod-ImportedDefaultBinding",
        "#prod-NameSpaceImport",
        "#prod-NamedImports",
        "#prod-ImportedDefaultBinding",
        "#prod-NameSpaceImport",
        "#prod-ImportedDefaultBinding",
        "#prod-NamedImports",
        "#prod-ImportedDefaultBinding",
        "#prod-ImportedBinding",
        "#prod-NameSpaceImport",
        "#prod-ImportedBinding",
        "#prod-NamedImports",
        "#prod-ImportsList",
        "#prod-ImportsList",
        "#prod-FromClause",
        "#prod-ModuleSpecifier",
        "#prod-ImportsList",
        "#prod-ImportSpecifier",
        "#prod-ImportsList",
        "#prod-ImportSpecifier",
        "#prod-ImportSpecifier",
        "#prod-ImportedBinding",
        "#prod-ModuleExportName",
        "#prod-ImportedBinding",
        "#prod-ModuleSpecifier",
        "#prod-StringLiteral",
        "#prod-ImportedBinding",
        "#prod-BindingIdentifier",
        "#prod-ExportDeclaration",
        "#prod-ExportFromClause",
        "#prod-FromClause",
        "#prod-NamedExports",
        "#prod-VariableStatement",
        "#prod-Declaration",
        "#prod-HoistableDeclaration",
        "#prod-ClassDeclaration",
        "#prod-LineTerminator",
        "#prod-AssignmentExpression",
        "#prod-ExportFromClause",
        "#prod-ModuleExportName",
        "#prod-NamedExports",
        "#prod-NamedExports",
        "#prod-ExportsList",
        "#prod-ExportsList",
        "#prod-ExportsList",
        "#prod-ExportSpecifier",
        "#prod-ExportsList",
        "#prod-ExportSpecifier",
        "#prod-ExportSpecifier",
        "#prod-ModuleExportName",
        "#prod-ModuleExportName",
        "#prod-ModuleExportName",
        "#prod-StringNumericLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrWhiteSpace",
        "#prod-StrNumericLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrWhiteSpace",
        "#prod-StrWhiteSpaceChar",
        "#prod-StrWhiteSpace",
        "#prod-StrWhiteSpaceChar",
        "#prod-WhiteSpace",
        "#prod-LineTerminator",
        "#prod-StrNumericLiteral",
        "#prod-StrDecimalLiteral",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-StrDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-StrUnsignedDecimalLiteral",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-DecimalDigits",
        "#prod-ExponentPart",
        "#prod-StringNumericLiteral",
        "#sec-literals-numeric-literals",
        "#prod-StringIntegerLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrWhiteSpace",
        "#prod-StrIntegerLiteral",
        "#prod-StrWhiteSpace",
        "#prod-StrIntegerLiteral",
        "#prod-SignedInteger",
        "#prod-NonDecimalIntegerLiteral",
        "#prod-uri",
        "#prod-uriCharacters",
        "#prod-uriCharacters",
        "#prod-uriCharacter",
        "#prod-uriCharacters",
        "#prod-uriCharacter",
        "#prod-uriReserved",
        "#prod-uriUnescaped",
        "#prod-uriEscaped",
        "#prod-uriReserved",
        "#prod-uriUnescaped",
        "#prod-uriAlpha",
        "#prod-DecimalDigit",
        "#prod-uriMark",
        "#prod-uriEscaped",
        "#prod-HexDigit",
        "#prod-HexDigit",
        "#prod-uriAlpha",
        "#prod-uriMark",
        "#prod-Pattern",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Alternative",
        "#prod-Alternative",
        "#prod-Disjunction",
        "#prod-Alternative",
        "#prod-Alternative",
        "#prod-Term",
        "#prod-Term",
        "#prod-Assertion",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-Quantifier",
        "#prod-Assertion",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-Quantifier",
        "#prod-QuantifierPrefix",
        "#prod-QuantifierPrefix",
        "#prod-QuantifierPrefix",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-Atom",
        "#prod-PatternCharacter",
        "#prod-AtomEscape",
        "#prod-CharacterClass",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-SyntaxCharacter",
        "#prod-PatternCharacter",
        "#prod-SourceCharacter",
        "#prod-SyntaxCharacter",
        "#prod-AtomEscape",
        "#prod-DecimalEscape",
        "#prod-CharacterClassEscape",
        "#prod-CharacterEscape",
        "#prod-GroupName",
        "#prod-CharacterEscape",
        "#prod-ControlEscape",
        "#prod-ControlLetter",
        "#prod-DecimalDigit",
        "#prod-HexEscapeSequence",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-IdentityEscape",
        "#prod-ControlEscape",
        "#prod-ControlLetter",
        "#prod-GroupSpecifier",
        "#prod-GroupName",
        "#prod-GroupName",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierStart",
        "#prod-RegExpIdentifierName",
        "#prod-RegExpIdentifierPart",
        "#prod-RegExpIdentifierStart",
        "#prod-IdentifierStartChar",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#prod-RegExpIdentifierPart",
        "#prod-IdentifierPartChar",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-HexLeadSurrogate",
        "#prod-HexTrailSurrogate",
        "#prod-HexLeadSurrogate",
        "#prod-HexTrailSurrogate",
        "#prod-HexNonSurrogate",
        "#prod-Hex4Digits",
        "#prod-CodePoint",
        "#prod-UnicodeLeadSurrogate",
        "#prod-UnicodeTrailSurrogate",
        "#prod-HexTrailSurrogate",
        "#prod-HexLeadSurrogate",
        "#prod-HexLeadSurrogate",
        "#prod-HexTrailSurrogate",
        "#prod-HexLeadSurrogate",
        "#prod-Hex4Digits",
        "#prod-Hex4Digits",
        "#prod-HexTrailSurrogate",
        "#prod-Hex4Digits",
        "#prod-Hex4Digits",
        "#prod-HexNonSurrogate",
        "#prod-Hex4Digits",
        "#prod-Hex4Digits",
        "#prod-IdentityEscape",
        "#prod-SyntaxCharacter",
        "#prod-SourceCharacter",
        "#prod-UnicodeIDContinue",
        "#prod-DecimalEscape",
        "#prod-NonZeroDigit",
        "#prod-DecimalDigits",
        "#prod-DecimalDigit",
        "#prod-CharacterClassEscape",
        "#prod-UnicodePropertyValueExpression",
        "#prod-UnicodePropertyValueExpression",
        "#prod-UnicodePropertyValueExpression",
        "#prod-UnicodePropertyName",
        "#prod-UnicodePropertyValue",
        "#prod-LoneUnicodePropertyNameOrValue",
        "#prod-UnicodePropertyName",
        "#prod-UnicodePropertyNameCharacters",
        "#prod-UnicodePropertyNameCharacters",
        "#prod-UnicodePropertyNameCharacter",
        "#prod-UnicodePropertyNameCharacters",
        "#prod-UnicodePropertyValue",
        "#prod-UnicodePropertyValueCharacters",
        "#prod-LoneUnicodePropertyNameOrValue",
        "#prod-UnicodePropertyValueCharacters",
        "#prod-UnicodePropertyValueCharacters",
        "#prod-UnicodePropertyValueCharacter",
        "#prod-UnicodePropertyValueCharacters",
        "#prod-UnicodePropertyValueCharacter",
        "#prod-UnicodePropertyNameCharacter",
        "#prod-DecimalDigit",
        "#prod-UnicodePropertyNameCharacter",
        "#prod-ControlLetter",
        "#prod-CharacterClass",
        "#prod-ClassRanges",
        "#prod-ClassRanges",
        "#prod-ClassRanges",
        "#prod-NonemptyClassRanges",
        "#prod-NonemptyClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-ClassAtom",
        "#prod-ClassAtomNoDash",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-ClassAtomNoDash",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtomNoDash",
        "#prod-ClassAtomNoDash",
        "#prod-SourceCharacter",
        "#prod-ClassEscape",
        "#prod-ClassEscape",
        "#prod-CharacterClassEscape",
        "#prod-CharacterEscape",
        "#host",
        "#host",
        "#host",
        "#sec-comments",
        "#sec-context-free-grammars",
        "#prod-Module",
        "#prod-annexB-Comment",
        "#prod-annexB-MultiLineComment",
        "#prod-SingleLineComment",
        "#prod-annexB-SingleLineHTMLOpenComment",
        "#prod-annexB-SingleLineHTMLCloseComment",
        "#prod-annexB-SingleLineDelimitedComment",
        "#prod-annexB-MultiLineComment",
        "#prod-annexB-FirstCommentLine",
        "#prod-LineTerminator",
        "#prod-MultiLineCommentChars",
        "#prod-annexB-HTMLCloseComment",
        "#prod-annexB-FirstCommentLine",
        "#prod-annexB-SingleLineDelimitedCommentChars",
        "#prod-annexB-SingleLineHTMLOpenComment",
        "#prod-SingleLineCommentChars",
        "#prod-annexB-SingleLineHTMLCloseComment",
        "#prod-LineTerminatorSequence",
        "#prod-annexB-HTMLCloseComment",
        "#prod-annexB-SingleLineDelimitedComment",
        "#prod-annexB-SingleLineDelimitedCommentChars",
        "#prod-annexB-HTMLCloseComment",
        "#prod-annexB-WhiteSpaceSequence",
        "#prod-annexB-SingleLineDelimitedCommentSequence",
        "#prod-SingleLineCommentChars",
        "#prod-annexB-SingleLineDelimitedCommentChars",
        "#prod-annexB-SingleLineNotAsteriskChar",
        "#prod-annexB-SingleLineDelimitedCommentChars",
        "#prod-annexB-SingleLinePostAsteriskCommentChars",
        "#prod-annexB-SingleLineNotAsteriskChar",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-annexB-SingleLinePostAsteriskCommentChars",
        "#prod-annexB-SingleLineNotForwardSlashOrAsteriskChar",
        "#prod-annexB-SingleLineDelimitedCommentChars",
        "#prod-annexB-SingleLinePostAsteriskCommentChars",
        "#prod-annexB-SingleLineNotForwardSlashOrAsteriskChar",
        "#prod-SourceCharacter",
        "#prod-LineTerminator",
        "#prod-annexB-WhiteSpaceSequence",
        "#prod-WhiteSpace",
        "#prod-annexB-WhiteSpaceSequence",
        "#prod-annexB-SingleLineDelimitedCommentSequence",
        "#prod-annexB-SingleLineDelimitedComment",
        "#prod-annexB-WhiteSpaceSequence",
        "#prod-annexB-SingleLineDelimitedCommentSequence",
        "#prod-annexB-MultiLineComment",
        "#prod-annexB-SingleLineHTMLCloseComment",
        "#prod-LineTerminator",
        "#sec-patterns",
        "#sec-context-free-grammars",
        "#prod-annexB-Term",
        "#prod-annexB-Assertion",
        "#prod-Atom",
        "#prod-Quantifier",
        "#prod-Atom",
        "#prod-annexB-QuantifiableAssertion",
        "#prod-Quantifier",
        "#prod-annexB-Assertion",
        "#prod-annexB-ExtendedAtom",
        "#prod-Quantifier",
        "#prod-annexB-ExtendedAtom",
        "#prod-annexB-Assertion",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-annexB-QuantifiableAssertion",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-annexB-QuantifiableAssertion",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-annexB-ExtendedAtom",
        "#prod-annexB-AtomEscape",
        "#prod-CharacterClass",
        "#prod-Disjunction",
        "#prod-Disjunction",
        "#prod-annexB-InvalidBracedQuantifier",
        "#prod-annexB-ExtendedPatternCharacter",
        "#prod-annexB-InvalidBracedQuantifier",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-DecimalDigits",
        "#prod-annexB-ExtendedPatternCharacter",
        "#prod-SourceCharacter",
        "#prod-annexB-AtomEscape",
        "#prod-DecimalEscape",
        "#prod-DecimalEscape",
        "#sec-patterns-static-semantics-capturing-group-number",
        "#prod-DecimalEscape",
        "#prod-CharacterClassEscape",
        "#prod-annexB-CharacterEscape",
        "#prod-GroupName",
        "#prod-annexB-CharacterEscape",
        "#prod-ControlEscape",
        "#prod-ControlLetter",
        "#prod-DecimalDigit",
        "#prod-HexEscapeSequence",
        "#prod-RegExpUnicodeEscapeSequence",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-annexB-IdentityEscape",
        "#prod-annexB-IdentityEscape",
        "#prod-SyntaxCharacter",
        "#prod-annexB-SourceCharacterIdentityEscape",
        "#prod-annexB-SourceCharacterIdentityEscape",
        "#prod-SourceCharacter",
        "#prod-SourceCharacter",
        "#prod-annexB-ClassAtomNoDash",
        "#prod-SourceCharacter",
        "#prod-annexB-ClassEscape",
        "#prod-annexB-ClassEscape",
        "#prod-annexB-ClassControlLetter",
        "#prod-CharacterClassEscape",
        "#prod-annexB-CharacterEscape",
        "#prod-annexB-ClassControlLetter",
        "#prod-DecimalDigit",
        "#sec-patterns-static-semantics-early-errors",
        "#prod-annexB-ExtendedAtom",
        "#prod-annexB-InvalidBracedQuantifier",
        "#prod-NonemptyClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-character-value",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-character-value",
        "#prod-ClassAtom",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-annexB-ClassAtomNoDash",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-annexB-ClassAtomNoDash",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-annexB-ClassAtomNoDash",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-character-value",
        "#prod-annexB-ClassAtomNoDash",
        "#sec-patterns-static-semantics-character-value",
        "#prod-ClassAtom",
        "#sec-patterns-static-semantics-is-character-class",
        "#prod-annexB-ClassAtomNoDash",
        "#sec-patterns-static-semantics-character-value",
        "#prod-annexB-ClassAtomNoDash",
        "#prod-annexB-ClassEscape",
        "#prod-annexB-ClassControlLetter",
        "#prod-annexB-ClassControlLetter",
        "#prod-annexB-CharacterEscape",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-LegacyOctalEscapeSequence",
        "#sec-string-literals-static-semantics-mv",
        "#sec-compilesubpattern",
        "#prod-annexB-Term",
        "#prod-Atom",
        "#prod-Quantifier",
        "#prod-Atom",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#prod-Atom",
        "#prod-GroupSpecifier",
        "#prod-Disjunction",
        "#prod-annexB-ExtendedAtom",
        "#prod-Disjunction",
        "#prod-annexB-Term",
        "#prod-annexB-QuantifiableAssertion",
        "#prod-Quantifier",
        "#prod-annexB-Term",
        "#prod-Atom",
        "#prod-Quantifier",
        "#prod-annexB-QuantifiableAssertion",
        "#prod-Atom",
        "#prod-annexB-Term",
        "#prod-annexB-ExtendedAtom",
        "#prod-Quantifier",
        "#prod-annexB-Term",
        "#prod-Atom",
        "#prod-Quantifier",
        "#prod-annexB-ExtendedAtom",
        "#prod-Atom",
        "#prod-annexB-Term",
        "#prod-annexB-ExtendedAtom",
        "#prod-annexB-Term",
        "#prod-Atom",
        "#prod-annexB-ExtendedAtom",
        "#prod-Atom",
        "#sec-compileassertion",
        "#prod-annexB-Assertion",
        "#prod-Disjunction",
        "#prod-annexB-Assertion",
        "#prod-Disjunction",
        "#prod-annexB-QuantifiableAssertion",
        "#prod-annexB-QuantifiableAssertion",
        "#prod-annexB-Assertion",
        "#sec-compileatom",
        "#prod-Atom",
        "#prod-Atom",
        "#prod-PatternCharacter",
        "#prod-annexB-ExtendedAtom",
        "#prod-annexB-ExtendedAtom",
        "#prod-Atom",
        "#prod-annexB-ExtendedAtom",
        "#sec-runtime-semantics-charactersetmatcher-abstract-operation",
        "#prod-annexB-ExtendedAtom",
        "#prod-annexB-ExtendedPatternCharacter",
        "#prod-annexB-ExtendedPatternCharacter",
        "#sec-runtime-semantics-charactersetmatcher-abstract-operation",
        "#sec-compiletocharset",
        "#sec-compiletocharset",
        "#prod-NonemptyClassRanges",
        "#prod-ClassAtom",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#sec-compiletocharset",
        "#prod-ClassAtom",
        "#sec-compiletocharset",
        "#prod-ClassAtom",
        "#sec-compiletocharset",
        "#prod-ClassRanges",
        "#sec-runtime-semantics-characterrangeorunion-abstract-operation",
        "#prod-NonemptyClassRangesNoDash",
        "#prod-annexB-ClassAtomNoDash",
        "#prod-ClassAtom",
        "#prod-ClassRanges",
        "#sec-compiletocharset",
        "#prod-annexB-ClassAtomNoDash",
        "#sec-compiletocharset",
        "#prod-ClassAtom",
        "#sec-compiletocharset",
        "#prod-ClassRanges",
        "#sec-runtime-semantics-characterrangeorunion-abstract-operation",
        "#sec-compiletocharset",
        "#prod-annexB-ClassEscape",
        "#prod-annexB-ClassControlLetter",
        "#sec-patterns-static-semantics-character-value",
        "#prod-annexB-ClassEscape",
        "#prod-annexB-ClassAtomNoDash",
        "#sec-runtime-semantics-characterrange-abstract-operation",
        "#host",
        "#table-additional-well-known-intrinsic-objects",
        "#table-well-known-intrinsic-objects",
        "#sec-escape-string",
        "#sec-escape-string",
        "#sec-unescape-string",
        "#sec-unescape-string",
        "#sec-global-object",
        "#sec-tostring",
        "#integer",
        "#string-concatenation",
        "#assert",
        "#string-concatenation",
        "#string-concatenation",
        "#sec-global-object",
        "#sec-tostring",
        "#substring",
        "#substring",
        "#prod-HexDigits",
        "#string-concatenation",
        "#sec-tonumber",
        "#\u211d",
        "#string-concatenation",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#sec-tointegerorinfinity",
        "#eqn-max",
        "#sec-tointegerorinfinity",
        "#eqn-min",
        "#substring",
        "#sec-createhtml",
        "#sec-completion-record-specification-type",
        "#sec-completion-record-specification-type",
        "#sec-requireobjectcoercible",
        "#sec-tostring",
        "#string-concatenation",
        "#sec-tostring",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#string-concatenation",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-createhtml",
        "#sec-string.prototype.trimstart",
        "#sec-string.prototype.trimend",
        "#thistimevalue",
        "#eqn-YearFromTime",
        "#sec-localtime",
        "#thistimevalue",
        "#sec-tonumber",
        "#sec-localtime",
        "#this-Date-object",
        "#sec-tointegerorinfinity",
        "#\ud835\udd3d",
        "#sec-makeday",
        "#eqn-MonthFromTime",
        "#sec-date-number",
        "#sec-utc-t",
        "#sec-makedate",
        "#eqn-TimeWithinDay",
        "#this-Date-object",
        "#sec-timeclip",
        "#this-Date-object",
        "#sec-date.prototype.toutcstring",
        "#sec-requireinternalslot",
        "#sec-ecmascript-data-types-and-values",
        "#sec-regexpinitialize",
        "#prod-LabelledStatement",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#non-strict-code",
        "#prod-LabelledStatement",
        "#prod-FunctionDeclaration",
        "#prod-LabelledItem",
        "#sec-labelled-statements-static-semantics-early-errors",
        "#prod-LabelledItem",
        "#prod-FunctionDeclaration",
        "#sec-strict-mode-code",
        "#early-error",
        "#prod-WithStatement",
        "#prod-annexB-IfStatement",
        "#prod-IterationStatement",
        "#prod-FunctionDeclaration",
        "#non-strict-code",
        "#prod-FunctionDeclaration",
        "#prod-Block",
        "#prod-StatementList",
        "#prod-FunctionDeclaration",
        "#prod-Block",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Block",
        "#prod-IdentifierReference",
        "#prod-StatementList",
        "#prod-Block",
        "#prod-Block",
        "#prod-Block",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Block",
        "#prod-IdentifierReference",
        "#prod-StatementList",
        "#prod-Block",
        "#prod-IdentifierReference",
        "#prod-FunctionDeclaration",
        "#prod-BindingIdentifier",
        "#prod-Block",
        "#prod-IdentifierReference",
        "#prod-StatementList",
        "#prod-Block",
        "#prod-IdentifierReference",
        "#prod-Block",
        "#prod-Block",
        "#sec-ordinary-and-exotic-objects-behaviours",
        "#sec-ecmascript-language-statements-and-declarations",
        "#sec-ecmascript-language-functions-and-classes",
        "#sec-ordinary-and-exotic-objects-behaviours",
        "#sec-ecmascript-language-functions-and-classes",
        "#sec-eval-x",
        "#sec-globaldeclarationinstantiation",
        "#prod-FunctionDeclaration",
        "#early-error",
        "#sec-functiondeclarationinstantiation",
        "#step-functiondeclarationinstantiation-web-compat-insertion-point",
        "#prod-FunctionDeclaration",
        "#prod-StatementList",
        "#prod-Block",
        "#prod-CaseClause",
        "#prod-DefaultClause",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#prod-FunctionDeclaration",
        "#prod-VariableStatement",
        "#prod-BindingIdentifier",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#sec-function-definitions-runtime-semantics-evaluation",
        "#running-execution-context",
        "#running-execution-context",
        "#sec-globaldeclarationinstantiation",
        "#step-globaldeclarationinstantiation-web-compat-insertion-point",
        "#sec-static-semantics-isstrict",
        "#list-concatenation",
        "#prod-FunctionDeclaration",
        "#prod-StatementList",
        "#prod-Block",
        "#prod-CaseClause",
        "#prod-DefaultClause",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#prod-FunctionDeclaration",
        "#prod-VariableStatement",
        "#prod-BindingIdentifier",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#sec-function-definitions-runtime-semantics-evaluation",
        "#running-execution-context",
        "#running-execution-context",
        "#sec-evaldeclarationinstantiation",
        "#step-evaldeclarationinstantiation-web-compat-insertion-point",
        "#list-concatenation",
        "#prod-FunctionDeclaration",
        "#prod-StatementList",
        "#prod-Block",
        "#prod-CaseClause",
        "#prod-DefaultClause",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#prod-FunctionDeclaration",
        "#prod-VariableStatement",
        "#prod-BindingIdentifier",
        "#assert",
        "#sec-object-environment-records",
        "#sec-global-environment-records",
        "#sec-global-environment-records",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#sec-function-definitions-runtime-semantics-evaluation",
        "#running-execution-context",
        "#running-execution-context",
        "#sec-block-static-semantics-early-errors",
        "#prod-Block",
        "#prod-StatementList",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-StatementList",
        "#sec-strict-mode-code",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-StatementList",
        "#sec-static-semantics-vardeclarednames",
        "#prod-StatementList",
        "#sec-switch-statement-static-semantics-early-errors",
        "#prod-SwitchStatement",
        "#prod-Expression",
        "#prod-CaseBlock",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-CaseBlock",
        "#sec-strict-mode-code",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-CaseBlock",
        "#sec-static-semantics-vardeclarednames",
        "#prod-CaseBlock",
        "#sec-blockdeclarationinstantiation",
        "#step-blockdeclarationinstantiation-createmutablebinding",
        "#sec-blockdeclarationinstantiation",
        "#step-blockdeclarationinstantiation-initializebinding",
        "#assert",
        "#prod-FunctionDeclaration",
        "#prod-annexB-IfStatement",
        "#sec-if-statement",
        "#prod-annexB-IfStatement",
        "#prod-Expression",
        "#prod-FunctionDeclaration",
        "#prod-Statement",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-FunctionDeclaration",
        "#prod-Expression",
        "#prod-FunctionDeclaration",
        "#prod-FunctionDeclaration",
        "#prod-Expression",
        "#prod-FunctionDeclaration",
        "#non-strict-code",
        "#prod-FunctionDeclaration",
        "#prod-StatementListItem",
        "#prod-BlockStatement",
        "#prod-BlockStatement",
        "#sec-block-level-function-declarations-web-legacy-compatibility-semantics",
        "#sec-try-statement-static-semantics-early-errors",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-Block",
        "#sec-static-semantics-boundnames",
        "#prod-CatchParameter",
        "#sec-static-semantics-boundnames",
        "#prod-CatchParameter",
        "#sec-static-semantics-lexicallydeclarednames",
        "#prod-Block",
        "#sec-static-semantics-boundnames",
        "#prod-CatchParameter",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Block",
        "#prod-CatchParameter",
        "#prod-CatchParameter",
        "#prod-BindingIdentifier",
        "#prod-Block",
        "#prod-Catch",
        "#prod-CatchParameter",
        "#prod-CatchParameter",
        "#prod-Initializer",
        "#sec-function-calls-runtime-semantics-evaluation",
        "#prod-Block",
        "#prod-Catch",
        "#sec-evaldeclarationinstantiation",
        "#step-evaldeclarationinstantiation-throw-duplicate-binding",
        "#sec-environment-records",
        "#prod-Catch",
        "#step-evaldeclarationinstantiation-web-compat-bindingexists",
        "#sec-environment-records",
        "#prod-Catch",
        "#prod-annexB-ForInOfStatement",
        "#sec-for-in-and-for-of-statements",
        "#prod-annexB-ForInOfStatement",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-Expression",
        "#prod-Statement",
        "#non-strict-code",
        "#sec-static-semantic-rules",
        "#sec-static-semantics-containsduplicatelabels",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-annexB-ForInOfStatement",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsduplicatelabels",
        "#prod-Statement",
        "#sec-static-semantic-rules",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-annexB-ForInOfStatement",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedbreaktarget",
        "#prod-Statement",
        "#sec-static-semantic-rules",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-annexB-ForInOfStatement",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-containsundefinedcontinuetarget",
        "#prod-Statement",
        "#sec-static-semantic-rules",
        "#sec-static-semantics-isdestructuring",
        "#sec-static-semantics-isdestructuring",
        "#prod-BindingIdentifier",
        "#prod-Identifier",
        "#sec-static-semantic-rules",
        "#sec-static-semantics-vardeclarednames",
        "#sec-static-semantics-vardeclarednames",
        "#prod-annexB-ForInOfStatement",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-boundnames",
        "#prod-BindingIdentifier",
        "#sec-static-semantics-vardeclarednames",
        "#prod-Statement",
        "#list-concatenation",
        "#sec-static-semantic-rules",
        "#sec-static-semantics-varscopeddeclarations",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-annexB-ForInOfStatement",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-Expression",
        "#prod-Statement",
        "#prod-BindingIdentifier",
        "#sec-static-semantics-varscopeddeclarations",
        "#prod-Statement",
        "#list-concatenation",
        "#sec-runtime-semantics",
        "#sec-runtime-semantics-forinofloopevaluation",
        "#sec-runtime-semantics-forinofloopevaluation",
        "#prod-annexB-ForInOfStatement",
        "#prod-BindingIdentifier",
        "#prod-Initializer",
        "#prod-Expression",
        "#prod-Statement",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-resolvebinding",
        "#sec-isanonymousfunctiondefinition",
        "#prod-Initializer",
        "#sec-runtime-semantics-namedevaluation",
        "#prod-Initializer",
        "#prod-Initializer",
        "#sec-getvalue",
        "#sec-putvalue",
        "#sec-runtime-semantics-forinofheadevaluation",
        "#prod-Expression",
        "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset",
        "#prod-BindingIdentifier",
        "#prod-Statement",
        "#host-defined",
        "#sec-toboolean",
        "#sec-islooselyequal",
        "#sec-algorithm-conventions-abstract-operations",
        "#sec-typeof-operator",
        "https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all",
        "#host-defined",
        "#exotic-object",
        "#table-toboolean-conversions",
        "#sec-IsHTMLDDA-internal-slot",
        "#sec-islooselyequal",
        "#step-abstract-equality-comparison-web-compat-insertion-point",
        "#sec-ecmascript-data-types-and-values",
        "#sec-IsHTMLDDA-internal-slot",
        "#sec-ecmascript-data-types-and-values",
        "#sec-IsHTMLDDA-internal-slot",
        "#step-typeof-web-compat-insertion-point",
        "#sec-typeof-operator-runtime-semantics-evaluation",
        "#sec-ecmascript-data-types-and-values",
        "#sec-IsHTMLDDA-internal-slot",
        "#sec-keywords-and-reserved-words",
        "#sec-strict-mode-code",
        "#sec-keywords-and-reserved-words",
        "#sec-strict-mode-code",
        "#prod-NumericLiteral",
        "#prod-LegacyOctalIntegerLiteral",
        "#prod-DecimalIntegerLiteral",
        "#prod-NonOctalDecimalIntegerLiteral",
        "#sec-strict-mode-code",
        "#prod-EscapeSequence",
        "#prod-LegacyOctalEscapeSequence",
        "#prod-EscapeSequence",
        "#prod-NonOctalDecimalEscapeSequence",
        "#sec-global-object",
        "#sec-strict-mode-code",
        "#prod-LeftHandSideExpression",
        "#sec-putvalue",
        "#prod-LeftHandSideExpression",
        "#sec-object-type",
        "#sec-object-type",
        "#sec-assignment-operators",
        "#prod-IdentifierReference",
        "#sec-static-semantics-stringvalue",
        "#prod-LeftHandSideExpression",
        "#sec-assignment-operators",
        "#prod-UpdateExpression",
        "#sec-update-expressions",
        "#prod-UnaryExpression",
        "#sec-prefix-increment-operator",
        "#sec-prefix-decrement-operator",
        "#strict-function",
        "#sec-object-type",
        "#sec-createunmappedargumentsobject",
        "#strict-function",
        "#array-index",
        "#sec-arguments-exotic-objects",
        "#strict-function",
        "#sec-functiondeclarationinstantiation",
        "#sec-static-semantics-stringvalue",
        "#prod-BindingIdentifier",
        "#sec-strict-mode-code",
        "#sec-identifiers-static-semantics-early-errors",
        "#sec-eval-x",
        "#sec-strict-mode-code",
        "#sec-global-object",
        "#sec-ordinarycallbindthis",
        "#sec-function.prototype.apply",
        "#sec-function.prototype.call",
        "#sec-strict-mode-code",
        "#prod-UnaryExpression",
        "#sec-delete-operator-static-semantics-early-errors",
        "#sec-strict-mode-code",
        "#sec-delete-operator-runtime-semantics-evaluation",
        "#sec-strict-mode-code",
        "#prod-WithStatement",
        "#prod-WithStatement",
        "#sec-with-statement-static-semantics-early-errors",
        "#prod-CatchParameter",
        "#sec-strict-mode-code",
        "#sec-static-semantics-boundnames",
        "#prod-CatchParameter",
        "#sec-try-statement-static-semantics-early-errors",
        "#prod-BindingIdentifier",
        "#prod-FormalParameters",
        "#strict-function",
        "#constructor",
        "#sec-function-definitions-static-semantics-early-errors",
        "#sec-createdynamicfunction",
        "#strict-function",
        "#sec-hosts-and-implementations",
        "#host",
        "#sec-hostcalljobcallback",
        "#sec-host-cleanup-finalization-registry",
        "#sec-hostenqueuepromisejob",
        "#sec-hostensurecancompilestrings",
        "#sec-hostfinalizeimportmeta",
        "#sec-hostgetimportmetaproperties",
        "#sec-hosthassourcetextavailable",
        "#sec-hostimportmoduledynamically",
        "#sec-hostmakejobcallback",
        "#sec-host-promise-rejection-tracker",
        "#sec-hostresolveimportedmodule",
        "#sec-initializehostdefinedrealm",
        "#realm-record",
        "#table-realm-record-fields",
        "#script-record",
        "#table-script-records",
        "#sec-abstract-module-records",
        "#table-module-record-fields",
        "#sec-jobcallback-records",
        "#table-jobcallback-records",
        "#table-candidate-execution-records",
        "#sec-IsHTMLDDA-internal-slot",
        "#sec-global-object",
        "#sec-global-object",
        "#job",
        "#sec-abstract-closure",
        "#sec-jobs",
        "#table-essential-internal-methods",
        "#exotic-object",
        "#sec-forbidden-extensions",
        "#sec-candeclareglobalvar",
        "#sec-createglobalfunctionbinding",
        "#sec-global-object",
        "#sec-array-exotic-objects-defineownproperty-p-desc",
        "#integer",
        "#array-index",
        "#sec-timeclip",
        "#sec-timeclip",
        "#sec-time-values-and-time-range",
        "#sec-time-values-and-time-range",
        "#sec-time-values-and-time-range",
        "#sec-date-time-string-format",
        "#sec-date.prototype.toisostring",
        "#sec-date-time-string-format",
        "#sec-date.prototype.tostring",
        "#this-time-value",
        "#sec-regexp-pattern-flags",
        "#sec-escaperegexppattern",
        "#sec-regexp.prototype-@@match",
        "#sec-regexp.prototype-@@replace",
        "#sec-array.prototype.sort",
        "#sec-tonumber",
        "#number-value",
        "#implementation-defined",
        "#sec-tonumber",
        "#sec-reference-record-specification-type",
        "#sec-reference-record-specification-type",
        "#sec-tonumber-applied-to-the-string-type",
        "#sec-tonumber",
        "#prod-BinaryIntegerLiteral",
        "#prod-OctalIntegerLiteral",
        "#sec-code-realms",
        "#sec-syntactic-grammar",
        "#realm",
        "#sec-white-space",
        "#sec-names-and-keywords",
        "#prod-IdentifierName",
        "#prod-IdentifierName",
        "#prod-Identifier",
        "#sec-rules-of-automatic-semicolon-insertion",
        "#sec-object-initializer-static-semantics-early-errors",
        "#early-error",
        "#sec-assignment-operators-static-semantics-early-errors",
        "#sec-strict-mode-code",
        "#prod-FunctionExpression",
        "#early-error",
        "#sec-block",
        "#prod-StatementList",
        "#prod-LineTerminator",
        "#prod-Identifier",
        "#prod-LexicalDeclaration",
        "#prod-Identifier",
        "#sec-expression-statement",
        "#prod-StatementListItem",
        "#prod-LexicalDeclaration",
        "#prod-ExpressionStatement",
        "#sec-if-statement-runtime-semantics-evaluation",
        "#prod-IfStatement",
        "#prod-Statement",
        "#prod-Statement",
        "#sec-completion-record-specification-type",
        "#prod-IfStatement",
        "#sec-iteration-statements",
        "#prod-LexicalDeclaration",
        "#prod-Expression",
        "#sec-iteration-statements",
        "#prod-ForDeclaration",
        "#prod-LeftHandSideExpression",
        "#sec-iteration-statements",
        "#prod-VariableDeclaration",
        "#sec-keywords-and-reserved-words",
        "#prod-ForBinding",
        "#non-strict-code",
        "#sec-iteration-statements",
        "#prod-IterationStatement",
        "#sec-completion-record-specification-type",
        "#prod-Statement",
        "#prod-IterationStatement",
        "#prod-Statement",
        "#sec-completion-record-specification-type",
        "#prod-IterationStatement",
        "#sec-completion-record-specification-type",
        "#sec-with-statement-runtime-semantics-evaluation",
        "#prod-WithStatement",
        "#sec-completion-record-specification-type",
        "#prod-Statement",
        "#prod-WithStatement",
        "#sec-completion-record-specification-type",
        "#prod-WithStatement",
        "#sec-completion-record-specification-type",
        "#sec-switch-statement-runtime-semantics-evaluation",
        "#prod-SwitchStatement",
        "#sec-completion-record-specification-type",
        "#prod-CaseBlock",
        "#prod-SwitchStatement",
        "#sec-completion-record-specification-type",
        "#prod-SwitchStatement",
        "#sec-completion-record-specification-type",
        "#sec-try-statement",
        "#early-error",
        "#prod-Catch",
        "#prod-Identifier",
        "#prod-Catch",
        "#prod-Initializer",
        "#prod-Catch",
        "#sec-try-statement",
        "#sec-evaldeclarationinstantiation",
        "#prod-Catch",
        "#prod-Identifier",
        "#prod-Catch",
        "#sec-try-statement-runtime-semantics-evaluation",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-TryStatement",
        "#sec-completion-record-specification-type",
        "#prod-TryStatement",
        "#prod-Block",
        "#prod-TryStatement",
        "#sec-completion-record-specification-type",
        "#prod-Catch",
        "#sec-completion-record-specification-type",
        "#prod-TryStatement",
        "#prod-Finally",
        "#prod-Finally",
        "#sec-completion-record-specification-type",
        "#sec-runtime-semantics-methoddefinitionevaluation",
        "#function-object",
        "#sec-object-type",
        "#prod-ObjectLiteral",
        "#constructor",
        "#constructor",
        "#sec-object.freeze",
        "#ordinary-object",
        "#sec-object.getownpropertydescriptor",
        "#sec-toobject",
        "#sec-object.getownpropertynames",
        "#sec-toobject",
        "#sec-object.getprototypeof",
        "#sec-toobject",
        "#sec-object.isextensible",
        "#ordinary-object",
        "#sec-object.isfrozen",
        "#ordinary-object",
        "#sec-object.issealed",
        "#ordinary-object",
        "#sec-object.keys",
        "#sec-toobject",
        "#sec-object.preventextensions",
        "#ordinary-object",
        "#sec-object.seal",
        "#ordinary-object",
        "#sec-function.prototype.bind",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-function-instances-length",
        "#sec-properties-of-the-nativeerror-constructors",
        "#constructor",
        "#constructor",
        "#sec-properties-of-the-function-prototype-object",
        "#sec-properties-of-the-date-prototype-object",
        "#sec-properties-of-the-date-prototype-object",
        "#sec-string.prototype.localecompare",
        "#sec-string.prototype.tolowercase",
        "#sec-string.prototype.touppercase",
        "#sec-string.prototype.trim",
        "#sec-regexp-pattern-flags",
        "#sec-properties-of-the-regexp-prototype-object",
        "#sec-properties-of-the-regexp-prototype-object",
        "#sec-properties-of-the-regexp-prototype-object",
        "#sec-object-type",
        "#sec-properties-of-the-regexp-prototype-object",
        "#sec-object-type",
        "#sec-atomics.notify",
        "#sec-asyncfromsynciteratorcontinuation",
        "#sec-asyncgeneratorresume",
        "#job",
        "https://github.com/tc39/ecma262",
        "https://github.com/bterlson/ecmarkup",
        "https://github.com/rbuckton/grammarkdown",
        "https://github.com/domenic/ecmarkdown",
        "https://unicode.org/versions/latest",
        "https://unicode.org/notes/tn5/",
        "https://unicode.org/reports/tr10/",
        "https://unicode.org/reports/tr15/",
        "https://unicode.org/reports/tr18/",
        "https://unicode.org/reports/tr24/",
        "https://unicode.org/reports/tr31/",
        "https://unicode.org/reports/tr44/",
        "https://unicode.org/reports/tr51/",
        "https://www.iana.org/time-zones",
        "https://tools.ietf.org/html/rfc1738",
        "https://tools.ietf.org/html/rfc2396",
        "https://tools.ietf.org/html/rfc3629",
        "https://tools.ietf.org/html/rfc7231",
        "https://ecma-international.org/",
        "#",
        "#",
        "#"
    ]
}