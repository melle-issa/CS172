{
    "title": "Webmention",
    "body": "\n\n\n\n\nWebmention\nW3C Recommendation 12 January 2017\n\nThis version:\nhttps://www.w3.org/TR/2017/REC-webmention-20170112/\nLatest published version:\nhttps://www.w3.org/TR/webmention/\nLatest editor's draft:\nhttps://webmention.net/draft/\nTest suite:\nhttps://webmention.rocks/\nImplementation report:\nhttps://webmention.net/implementation-reports/\nPrevious version:\nhttps://www.w3.org/TR/2016/PR-webmention-20161101/\nEditor:\nAaron Parecki\n\n\nRepository:\n\n\n                      Github\n                    \n\n\n\n                      Issues\n                    \n\n\n\n                      Commits\n                    \n\n\n\n      Please check the errata for any errors or issues reported since publication.\n    \n\n      The English version of this specification is the only normative version. Non-normative\n      translations may also be available.\n    \n\nCopyright \u00a9 2017\n\n      W3C\u00ae (MIT,\n      ERCIM,\n      Keio, Beihang).\n      W3C liability,\n      trademark and\n      permissive document license rules apply.\n    \n\n\n\nAbstract\n\n      Webmention is a simple way to notify any URL when you mention it on your site. From the receiver's perspective, it's a way to request notifications when other sites mention it.\n    \n\nAuthor's Note\nThis section is non-normative.\nThis specification was contributed to the W3C from the\n        IndieWeb community. More history and evolution of Webmention can be found on the\n        IndieWeb wiki.\n\n\n\nStatus of This Document\n\nThis section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current W3C publications and the latest revision of this technical report can be found in the W3C technical reports index at https://www.w3.org/TR/.\n\n\n      This document was published by the Social Web Working Group as a Recommendation. If you wish to make comments regarding this document, please send them to\n      public-socialweb@w3.org (subscribe,\n      archives). All comments are welcome.\n    \n\n      Please see the Working Group's implementation\n              report.\n    \n\n      This document has been reviewed by W3C Members, by software developers, and by other W3C groups and interested parties, and is endorsed by the Director as a W3C Recommendation. It is a stable document and may be used as reference material or cited from another document. W3C's role in making the Recommendation is to draw attention to the specification and to promote its widespread deployment. This enhances the functionality and interoperability of the Web.\n    \n\n      This document was produced by a group operating under the\n      5 February 2004 W3C Patent\n              Policy.\n      W3C maintains a public list of any patent\n                disclosures made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains\n      Essential\n              Claim(s) must disclose the information in accordance with\n      section\n              6 of the W3C Patent Policy.\n    \nW3C expects the functionality specified in this Recommendation will not be affected by changes to Fetch.\nThis document is governed by the 1 September 2015 W3C Process Document.\n    \n\n\nTable of Contents\n\n1. Introduction\n\n1.1 Social Web Working Group\n1.2 Background\n1.3 Overview\n1.4 Protocol Summary\n\n\n2. Conformance\n\n2.1 Conformance Classes\n2.2 Test Suite and Reporting\n\n\n3. Webmention Protocol\n\n3.1 Sending Webmentions\n\n3.1.1 Create a source document that mentions the target\n3.1.2 Sender discovers receiver Webmention endpoint\n3.1.3 Sender notifies receiver\n3.1.4 Sending Webmentions for updated posts\n3.1.5 Sending Webmentions for deleted posts\n\n\n3.2 Receiving Webmentions\n\n3.2.1 Request Verification\n3.2.2 Webmention Verification\n3.2.3 Error Responses\n3.2.4 Updating existing Webmentions\n\n\n\n\n4. Security Considerations\n\n4.1 Preventing Abuse\n4.2 Limits on GET requests\n4.3 Avoid sending Webmentions to localhost\n4.4 Cross-Site Request Forgery\n4.5 Limit access to protected resources\n4.6 Security and Privacy Review\n\n\n5. Other Considerations\n\n5.1 Sending Webmentions from non-HTML content\n5.2 Sending Webmentions for large datasets\n5.3 Respecting cache headers on discovery\n\n\n6. IANA Considerations\nA. URIs for Form-Encoded Properties\nB. Extensions\n\nB.1 Vouch\nB.2 Salmention\nB.3 Private Webmention\n\n\nC. Resources\n\nC.1 Articles\nC.2 Implementations\n\n\nD. Acknowledgements\nE. Change Log\n\nE.1 Changes from 01 November PR to REC\n\n\nF. References\n\nF.1 Normative references\nF.2 Informative references\n\n\n\n\n\n\n1. Introduction\n\nA Webmention is a notification that one URL links to another. For example, Alice writes an interesting post on her blog. Bob then writes a response to her post on his own site, linking back to Alice's original post. Bob's publishing software sends a Webmention to Alice notifying that her article was replied to, and Alice's software can show that reply as a comment on the original post.\nSending a Webmention is not limited to blog posts, and can be used for additional kinds of content and responses as well. For example, a response can be an RSVP to an event, an indication that someone \"likes\" another post, a \"bookmark\" of another post, and many others. Webmention enables these interactions to happen across different websites, enabling a distributed social web.\n\n1.1 Social Web Working Group\n\nThis section is non-normative.\nWebmention is one of several related specifications being produced by the Social Web Working Group. Implementers interested in alternative approaches and complimentary protocols should start by reading the overview document [social-web-protocols].\n\n\n1.2 Background\n\nThis section is non-normative.\nThe Webmention spec began as a simplified version of the [Pingback] spec. Where Pingback required sending the source and target URLs in an XML-RPC payload, Webmention simplified that to a form-encoded payload, which meant it could easily be used in HTML forms, was easier to work with since more tools exist for form-encoded payloads, and was not vulnerable to accidentally exposing other parts of a system's code via XML-RPC.\nWebmention then continued on to more thoroughly specify the details of sending and verifying the request, and expanded to support sending notifications when a source document was updated or deleted. More information can be found in the Webmention FAQ on the IndieWeb wiki.\n\n\n1.3 Overview\n\nThis section is non-normative.\nA typical Webmention flow is as follows:\n      \n\nAlice posts some interesting content on her site (which is set up to receive Webmentions).\nBob sees this content and comments about it on his site, linking back to Alice's original post.\nUsing Webmention, Bob's publishing software automatically notifies Alice's server that her post has been linked to by the URL of Bob's post.\nAlice's publishing software verifies that Bob's post actually contains a mention of her post and then includes this information on her site.\n\n\n\n\n1.4 Protocol Summary\n\nThis section is non-normative.\nWebmentions are sent \"from\" a source URL \"to\" a target URL to notify the target that it has been mentioned at the source URL.\n\nUser Aaron writes a post on his blog.\nUser Barnaby writes a post on his blog that links to Aaron's post.\nAfter publishing the post (i.e., after it has a URL), Barnaby's server notices the mention of Aaron's post as part of the publishing process.\nBarnaby's server does Webmention discovery on Aaron's post to find its Webmention endpoint (if not found, process stops).\nBarnaby's server sends a Webmention notification to Aaron's post's Webmention endpoint with:\n          \nsource set to Barnaby's post's permalink\ntarget set to Aaron's post's permalink.\n\n\nAaron's server receives the Webmention.\nAaron's server verifies that target in the Webmention is a valid permalink on Aaron's blog (if not, processing stops).\nAaron's server verifies that the source in the Webmention (when retrieved, after following redirects [FETCH]) contains a hyperlink to the target (if not, processing stops).\n\n\n\n\n\n2. Conformance\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"\n      SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].\n\n2.1 Conformance Classes\n\nWebmention implementations are either senders or receivers. This section describes the conformance criteria for both.\nListed below are known types of Webmention implementations.\nSenders\nA Webmention Sender is an implementation that sends Webmentions. In order for a Sender to send a Webmention, there must first be a document at a URL that is accessible to the Receiver.\nThe conformance criteria for Webmention senders is described in Sending Webmentions\nListed below are some known types of Webmention Senders.\n\nBlogging or microblogging software\nPlugins for existing CMS software\nBrowser plugins to send a Webmention from a context menu on behalf of the page you're viewing\nWeb APIs to offload the Webmention endpoint discovery and Webmention delivery\nProxy services that converts existing social media posts to HTML posts and sends Webmentions\n\nReceivers\nA Webmention Receiver is an implementation that receives Webmentions to one or more target URLs on which the Receiver's Webmention endpoint is advertised. In order to receive a Webmention, there must be a URL that advertises the Receiver's Webmention endpoint. The URL is not considered part of the Receiver's implementation, as it may exist in an entirely different system or domain.\nThe conformance criteria for Webmention receivers is described in Receiving Webmentions\nListed below are some known types of Webmention Receivers.\n\nBlogging or microblogging software\nPlugins for existing CMS software\nWeb services and APIs to receive Webmentions and display them as comments via Javascript embed\n\n\n\n2.2 Test Suite and Reporting\n\nPlease submit your implementation reports at http://webmention.net/implementation-reports/. Instructions are provided at the URL. The implementation report template references the tests available at webmention.rocks.\nwebmention.rocks provides many test cases you can use to live-test your implementation. It also is a useful tool to use while developing a Webmention implementation, as it provides detailed responses when errors are encountered.\n\n\n\n\n3. Webmention Protocol\n\nThis specification uses the link rel registry as defined by [HTML5] for both HTML and HTTP link relations.\n\n3.1 Sending Webmentions\n\n\n3.1.1 Create a source document that mentions the target\n\nWebmentions are sent \"from\" a source URL \"to\" a target URL to notify the target that it has been mentioned at the source URL. Before a Webmention can be sent, there needs to be a source URL to send the Webmention \"from\", often a blog post but may be any type of content.\nFor example, the URL at https://waterpigs.example/post-by-barnaby may contain the following HTML that has a link to Aaron's post.\n\n\nExample 1\n<!doctype html>\n<html>\n  <body>\n    <a href=\"https://aaronpk.example/post-by-aaron\">This is a great post</a>\n  </body>\n</html>\n\n\n\n\n3.1.2 Sender discovers receiver Webmention endpoint\n\nThe sender MUST fetch the target URL (and follow redirects [FETCH]) and check for an HTTP Link header [RFC5988] with a rel value of webmention. If the content type of the document is HTML, then the sender MUST look for an HTML <link> and\n          <a> element with a rel value of webmention. If more than one of these is present, the first HTTP Link header takes precedence, followed by the first <link> or <a> element in document order. Senders MUST support all three options and fall back in this order.\nThe endpoint MAY be a relative URL, in which case the sender MUST resolve it relative to the\n          target URL according to [URL].\nThe endpoint MAY contain query string parameters, which MUST be preserved as query string parameters and MUST NOT be sent as POST body parameters when sending the Webmention request.\nSenders MAY initially make an HTTP HEAD request [RFC7231] to check for the Link header before making a GET request.\n\n\nExample 2\nGET /post-by-aaron HTTP/1.1\nHost: aaronpk.example\nHTTP/1.1 200 OK\nLink: <http://aaronpk.example/webmention-endpoint>; rel=\"webmention\"\n\n<html>\n<head>\n...\n<link href=\"http://aaronpk.example/webmention-endpoint\" rel=\"webmention\" />\n...\n</head>\n<body>\n....\n<a href=\"http://aaronpk.example/webmention-endpoint\" rel=\"webmention\">webmention</a>\n...\n</body>\n</html>\n\n\nSenders MAY customize the HTTP User Agent [RFC7231] used when fetching the target URL in order to indicate to the recipient that this request is made as part of Webmention discovery. In this case, it is recommended to include the string \"Webmention\" in the User Agent. This provides people with a pointer to find out why the discovery request was made.\n\n\n3.1.3 Sender notifies receiver\n\nThe sender MUST post x-www-form-urlencoded [HTML5] source and\n          target parameters to the Webmention endpoint, where\n          source is the URL of the sender's page containing a link, and target is the URL of the page being linked to.\nNote that if the Webmention endpoint URL contains query string parameters, the query string parameters MUST be preserved, and MUST NOT be sent in the POST body.\nThe Webmention endpoint will validate and process the request, and return an HTTP status code [RFC7231]. Most often, 202 Accepted or 201 Created will be returned, indicating that the request is queued and being processed asynchronously to prevent DoS (Denial of Service) attacks. If the response code is 201, the Location header will include a URL that can be used to monitor the status of the request.\nAny 2xx response code MUST be considered a success.\n\n\nExample 3\nPOST /webmention-endpoint HTTP/1.1\nHost: aaronpk.example\nContent-Type: application/x-www-form-urlencoded\n\nsource=https://waterpigs.example/post-by-barnaby&\ntarget=https://aaronpk.example/post-by-aaron\n\n\nHTTP/1.1 202 Accepted\n\n\n\n\n3.1.4 Sending Webmentions for updated posts\n\nIf the source URL was updated, the sender SHOULD re-send any previously sent Webmentions, (including re-sending a Webmention to a URL that may have been removed from the document), and SHOULD send Webmentions for any new links that appear at the URL.\nThis allows the recipients of Webmentions to update their display of the source document, or otherwise notify the recipient that a post that mentioned one of their URLs was updated.\nWhen sending a Webmention when a post is updated, the sender MUST re-discover the Webmention endpoint of each target URL, in case the target has updated their Webmention endpoint.\nIf a response to the source URL is shown on the source URL page (e.g. as a comment), then sender SHOULD treat that as an update of the source URL and re-send any previously sent Webmentions.\n\n\n3.1.5 Sending Webmentions for deleted posts\n\nIf the source URL was deleted, the sender SHOULD return an HTTP 410 Gone status code for the URL, and SHOULD display a \"tombstone\" representation of the deleted post, typically by blanking out the values of any properties in the post, and/or replacing the primary content of the post (e.g. the name and/or content of [h-entry]) with \"Deleted\". The sender SHOULD then re-send Webmentions for every previously sent Webmention for that document.\nThis allows receivers which may have displayed a previously received Webmention as a comment or other interaction to remove it from view if they support deletes, while providing a reasonable fallback for receivers which only support updates.\n\n\n\n3.2 Receiving Webmentions\n\nUpon receipt of a POST request containing the source and\n        target parameters, the receiver SHOULD verify the parameters (see Request Verification below) and then\n        SHOULD queue and process the request asynchronously, to prevent DoS attacks. There are three possible responses to the request, depending on how the receiver processes it.\nIf the receiver creates a status page which the sender can use to check the status, the receiver MUST reply with an HTTP 201 Created response with a Location header pointing to the status URL. The response body MAY contain content.\n\n\nExample 4\nHTTP/1.1 201 Created\nLocation: http://aaronpk.example/webmention/DEhB9Jme\n\n\nIf the receiver processes the request asynchronously but does not return a status URL, the receiver MUST reply with an HTTP 202 Accepted response. The response body MAY contain content, in which case a human-readable response is recommended.\n\n\nExample 5\nHTTP/1.1 202 Accepted\n\n\nIf the receiver chooses to process the request and perform the verification step synchronously (not recommended), it MUST respond with a 200 OK status on success.\n\n3.2.1 Request Verification\n\nThe receiver MUST check that source and target are valid URLs [URL] and are of schemes that are supported by the receiver. (Most commonly this means checking that the source and target schemes are http or https).\nThe receiver MUST reject the request if the source URL is the same as the target URL.\nThe receiver SHOULD check that target is a valid resource for which it can accept Webmentions. This check SHOULD happen synchronously to reject invalid Webmentions before more in-depth verification begins. What a \"valid resource\" means is up to the receiver. For example, some receivers may accept Webmentions for multiple domains, others may accept Webmentions for only the same domain the endpoint is on.\nNote that a target URL may contain a fragment identifier, and if the receiver limits which URLs can receive Webmentions, the fragment SHOULD be ignored when checking if the URL is supported.\n\n\n3.2.2 Webmention Verification\n\nWebmention verification SHOULD be handled asynchronously to prevent DoS (Denial of Service) attacks.\nIf the receiver is going to use the Webmention in some way, (displaying it as a comment on a post, incrementing a \"like\" counter, notifying the author of a post), then it MUST perform an HTTP GET request on source, following any HTTP redirects (and SHOULD limit the number of redirects it follows) to confirm that it actually mentions the target. The receiver SHOULD include an HTTP Accept header indicating its preference of content types that are acceptable.\nThe receiver SHOULD use per-media-type rules to determine whether the source document mentions the target URL. For example, in an [\n          HTML5] document, the receiver should look for <a href=\"*\">,\n          <img href=\"*\">, <video src=\"*\"> and other similar links. In a JSON ([RFC7159]) document, the receiver should look for properties whose values are an exact match for the URL. If the document is plain text, the receiver should look for the URL by searching for the string. Other content types may be handled at the implementer's discretion. The source document MUST have an exact match of the target URL provided in order for it to be considered a valid Webmention.\nAt this point, the receiver MAY publish content from the source page on the target page or other pages, along with any other data it picks up from the source. For example, the receiver may display the contents of the source as a comment on the post, or may display the author's profile photo in a list of others who have sent similar Webmentions, e.g. showing a list of people who have all \"liked\" a post.\n\nNote\nWhen republishing content from the source page, care should be taken to ensure you are not unintentionally changing the visibility of the content. For example, if the source document is visible only to a limited audience, you should ensure the republished content is not visible to the general public. The source document may be restricted to a specific audience either by some form of authentication, or because the source URL was behind a firewall that the receiver is also behind.\n\n\n\n3.2.3 Error Responses\n\nIf the Webmention was not successful because of something the\n          sender did, it MUST return a 400 Bad Request status code and MAY include a description of the error in the response body.\nPossible sender-related errors that can be returned synchronously before making a GET request to the source:\n\n        \n\nSpecified target URL not found.\nSpecified target URL does not accept Webmentions.\nsource URL was malformed or is not a supported URL scheme (e.g. a mailto: link)\n\n\nPossible sender-related errors that can occur after fetching the contents of the source URL:\n\n        \n\nsource URL not found.\nsource URL does not contain a link to the target URL.\n\n\nIf the Webmention was not successful because of an error on the receiver's server, it SHOULD return a 500 Internal Server Error status code and MAY include a description of the error in the response body.\n\n\n3.2.4 Updating existing Webmentions\n\nIf receiver had received a Webmention in the past with the same\n          source and target then,\n\n        \n\n\n            If both the verification steps are successful, it SHOULD update any existing data it picked from source for the existing Webmention.\n            \n\n                When a Webmention implementation does support updating (i.e., a \"Webmention update implementation\"), it MUST support updating data from properties of the primary object of the source. (e.g. properties of the [h-entry] of the page).\n                \n\n                    A Webmention update implementation MAY support updating data from children, or other descendant objects of the primary object (e.g. a comment h-entry inside the h-entry of the page). Note: Implementations that support this may wish to consider supporting it according to the [Salmention] extension.\n                  \n\n\n\n\nIf it received a 410 Gone status code on step 2 (performing a GET request on source), or received a 200 OK status code and does not find a mention of target on source, it SHOULD delete the existing Webmention, or mark it as deleted.\nProcessing Webmentions SHOULD be idempotent. That is, receiving multiple Webmentions for the same source and target with no content changes should not show as multiple replies.\n\n\n\n\n\n\n\n4. Security Considerations\n\n\n4.1 Preventing Abuse\n\n\nThe verification process SHOULD be queued and processed asynchronously to prevent DoS attacks per section 3.2.\nReceivers MUST verify Webmentions per section 3.2.2.\nIf a receiver chooses to display data it picks up from source, it MUST ensure that the data is encoded and/or filtered to prevent [XSS] and [CSRF] attacks.\nReceivers MAY moderate Webmentions before publishing them.\nReceivers MAY periodically re-verify Webmentions and update them.\n\n\n\n4.2 Limits on GET requests\n\nThe Webmention protocol relies on the sender making a GET (or HEAD) request to discover the receiver's endpoint, followed by the receiver making a GET request to the sender's web page to verify the link. This means a sender can cause a receiver to make GET requests to arbitrary URLs, opening up a potential DoS vector.\nReceivers MAY make an initial HTTP HEAD request when verifying the link and decide whether to make a full GET request after initially inspecting the content type, length, or other HTTP headers returned.\nReceivers SHOULD place limits on the number of HTTP redirects they follow, for example limiting the number to 20, in order to prevent being stuck in a redirect loop if the sender continues to send redirects.\nReceivers SHOULD place limits on the amount of data and time they spend fetching unverified source URLs. For example, if a source URL doesn't respond within 5 seconds, it can treat that as a failure. Similarly, the receiver can fetch only the first 1mb of the page, since any reasonable HTML or JSON page will be smaller than that.\n\n\n4.3 Avoid sending Webmentions to localhost\n\nWhen the sender discovers the receiver's Webmention endpoint, there are few legitimate reasons for the endpoint to be localhost or any other loopback address. If the sender has any services that listen on localhost that don't require authentication, it's possible for a malicious Webmention receiver to craft a Webmention endpoint that could cause the sender to make an arbitrary POST request to itself.\nDuring the discovery step, if the sender discovers the endpoint is localhost or a loopback IP address (127.0.0.0/8), it SHOULD NOT send the Webmention to that endpoint.\n\n\n4.4 Cross-Site Request Forgery\n\nThis specification does not define any special handling of a Webmention request that may contain additional headers or parameters such as authentication headers or session cookies. However, if a Webmention endpoint does accept requests with additional headers, it SHOULD protect itself against Cross-Site Request Forgery (CSRF) attacks. One way to prevent CSRF attacks is by including a CSRF token in a query string parameter of the Webmention endpoint, so that a Webmention sender finds the token when discovering the endpoint.\nFor example, the target URL could advertise a Webmention endpoint that includes a CSRF token:\n\n\nExample 6\nGET /post-by-aaron HTTP/1.1\nHost: aaronpk.example\nHTTP/1.1 200 OK\nLink: <http://aaronpk.example/webmention?csrf=Q0NTVhYjI0NTVkNDA3M>; rel=\"webmention\"\n\n\nThen, when the Webmention endpoint is processing a request, it can first check the validity of the CSRF token before any other processing.\n\n\n4.5 Limit access to protected resources\n\nIt is possible for an attacker to advertise a Webmention endpoint that points to an arbitrary URL. As such, if you install software that sends Webmentions on a server that is behind a firewall or otherwise has access to normally protected resources, you should be aware that an attacker can cause the server to send a POST request to an internal server. You SHOULD take precautions to ensure this server cannot access protected resources by either:\n\nrunning the sender in an environment that does not have access to such internal resources\nproxying all HTTP requests from this sender through a proxy that blocks access to internal resources\n\n\n\n4.6 Security and Privacy Review\n\nThese questions provide an overview of security and privacy considerations for this specification as guided by Self-Review Questionnaire: Security and Privacy ([security-privacy-questionnaire]).\n\nDoes this specification deal with personally-identifiable information?\nThe only potentially personally-identifiable information involved in Webmention are the source and target URLs.\nDoes this specification deal with high-value data?\nNo, there is no authentication or other credentials involved.\nDoes this specification introduce new state for an origin that persists across browsing sessions?\nNo\nDoes this specification expose persistent, cross-origin state to the web?\nThe Webmention receiver may create a temporary resource with information about the Webmention request.\nDoes this specification expose any other data to an origin that it doesn't currently have access to?\nNo\nDoes this specification enable new script execution/loading mechanisms?\nNo\nDoes this specification allow an origin access to a user's location?\nNo\nDoes this specification allow an origin access to sensors on a user's device?\nNo\nDoes this specification allow an origin access to aspects of a user's local computing environment?\nNo\nDoes this specification allow an origin access to other devices?\nNo\nDoes this specification allow an origin some measure of control over a user agent's native UI?\nNo\nDoes this specification expose temporary identifiers to the web?\nNo\nDoes this specification distinguish between behavior in first-party and third-party contexts?\nNo\nHow should this specification work in the context of a user agent's \"incognito\" mode?\nWebmention does not maintain any state so there are no considerations when in \"incognito\" mode.\nDoes this specification persist data to a user's local device?\nNo\nDoes this specification allow downgrading default security characteristics?\nNo\n\n\n\n\n\n5. Other Considerations\n\n\n5.1 Sending Webmentions from non-HTML content\n\nIf your source document is not HTML, (such as a PDF), or is otherwise restricted from fetching the raw source via a plain HTTP GET request, (such as behind a paywall, or requires a click-through license agreement), you will need to set up an HTML \"landing page\" that lists all the targets you wish to send Webmentions to. After creating this HTML landing page, you can use its URL as the source URL when sending Webmentions. This gives receivers a URL they can fetch to verify the link to their target URL, while avoiding making the complete source document public.\nCreating an HTML landing page can help increase the number of inbound links to your content, by providing people with a useful place to link to when referencing otherwise restricted content such as scholarly articles. In the case of a scholarly article, the landing page should include the list of references in the HTML, so that you can use them as Webmention target URLs.\n\n\n5.2 Sending Webmentions for large datasets\n\nIf your Webmention source document is particularly large (such as a large HTML page with thousands of records in a table, or a very large JSON file), you will likely want to avoid sending a Webmention with that source URL. Doing so may cause receivers to download the entire dataset, using a lot of your bandwidth, or receivers may download only the first portion of the file in order to restrict their own bandwidth usage, potentially causing the verification to fail. If the receiver republishes a link to your source document, other visitors may follow that link and inadvertently download the entire dataset as well.\nSimilar to how it is considered good practice to break up large datasets into pages when being viewed in a browser, when sending Webmentions, you should send Webmentions only from smaller pages of data if your source document is large. If your dataset is HTML, then you can use your (likely) existing HTML pages as source URLs. If your dataset is JSON, you may need to create URLs with smaller JSON documents in pages that you can use as source URLs.\n\n\n5.3 Respecting cache headers on discovery\n\nWhen performing Webmention discovery, Senders SHOULD respect the HTTP cache headers [RFC7234] returned by the target URL and avoid fetching the target URL more often than is indicated by the headers.\n\n\n\n\n6. IANA Considerations\n\nThe link relation type below has been registered by IANA per Section 6.2.1 of [RFC5988]:\n\nRelation Name:\nwebmention\nDescription:\nIdentifies a target URI that supports the Webmention protocol. This allows clients that mention a resource in some form of publishing process to contact that endpoint and inform it that this resource has been mentioned.\nReference:\nW3C Webmention\n        Specification (http://www.w3.org/TR/webmention/)\nNotes:\nThis is a similar \"Linkback\" mechanism to the ones of Refback, Trackback, and Pingback. It uses a different protocol, though, and thus should be discoverable through its own link relation type.\n\n\n\n\nA. URIs for Form-Encoded Properties\n\nIf your implementation wants to treat the source and target parameters as URIs, you can prefix the terms with http://www.w3.org/ns/webmention#.\n\n\n\nB. Extensions\n\nThis section is non-normative.\nThe following Webmention Extension Specifications have 2+ interoperable implementations live on the web and are thus listed here:\n\nB.1 Vouch\n\nThe [Vouch] protocol is an anti-spam extension to Webmention.\n\n\nB.2 Salmention\n\nThe [Salmention] protocol is an extension to Webmention to propagate comments and other interactions upstream.\n\n\nB.3 Private Webmention\n\nThe [Private-Webmention] protocol is an extension to Webmention that supports sending and verifying Webmentions for posts that have access control.\n\n\n\n\nC. Resources\n\nThis section is non-normative.\n\n\n\nTest Suite and Debug Tool\nFAQ\nImplementation Guide\nImplementation Details\nBrainstorming\n\n\n\nC.1 Articles\n\nThis section is non-normative.\nYou can find a list of articles about Webmention on the IndieWeb wiki.\n\n\nC.2 Implementations\n\nThis section is non-normative.\nYou can find a list of Webmention implementations on webmention.net\n\n\n\n\nD. Acknowledgements\n\nThe editor wishes to thank Sandeep Shetty for contributing the original draft of the Webmention specification.\nAdditionally, the editor wishes to thank the IndieWeb community and other implementers for their support, encouragement and enthusiasm, including but not limited to: Amy Guy, Benjamin Roberts, Ben Werdm\u00fcller, Dave Wilkinson, Rob Sanderson, and Tantek \u00c7elik.\n\n\n\nE. Change Log\n\nThis section is non-normative.\n\nE.1 Changes from 01 November PR to REC\n\n\nEditorial clarification around sending to loopback addresses\nUpdated JSON reference to RFC7159 from the obsolete RFC4627\nAdded informative note about breaking up large documents into pages when sending Webmentions from large datasets\nAdded note about republishing potentially restricted visibilty content\nAdded informative reference to OWASP documents about XSS and CSRF\nClarified \"publish\" vs \"display\" in security considerations\nAdded an item to 4.1 security considerations to reiterate verifying Webmentions\nRe-ordered 4.1 security considerations based on chronological order\nEditorial nits\n\n\n\n\n\n\nF. References\n\n\nF.1 Normative references\n\n[FETCH]\nAnne van Kesteren. WHATWG. Fetch Standard. Living Standard. URL: https://fetch.spec.whatwg.org/\n[HTML5]\nIan Hickson; Robin Berjon; Steve Faulkner; Travis Leithead; Erika Doyle Navara; Theresa O'Connor; Silvia Pfeiffer. W3C. HTML5. 28 October 2014. W3C Recommendation. URL: https://www.w3.org/TR/html5/\n[RFC2119]\nS. Bradner. IETF. Key words for use in RFCs to Indicate Requirement Levels. March 1997. Best Current Practice. URL: https://tools.ietf.org/html/rfc2119\n[RFC5988]\nM. Nottingham. IETF. Web Linking. October 2010. Proposed Standard. URL: https://tools.ietf.org/html/rfc5988\n[RFC7231]\nR. Fielding, Ed.; J. Reschke, Ed.. IETF. Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. June 2014. Proposed Standard. URL: https://tools.ietf.org/html/rfc7231\n[URL]\n\n\nNote: URLs can be used in numerous different manners, in many differing contexts. For the purpose of producing strict URLs one may wish to consider [RFC3986] and [RFC3987]. The URL specification defines the term URL, various algorithms for dealing with URLs, and an API for constructing, parsing, and resolving URLs. Developers are advised to keep abreast of the latest URL developments by tracking the progress of https://url.spec.whatwg.org/.\nAs a word of caution, there are notable differences in the manner in which Web browsers and other software stacks outside the HTML context handle URLs. While no changes would be accepted to URL processing that would break existing Web content, some important parts of URL processing should therefore be considered as implementation-defined (e.g. parsing file: URLs or operating on URLs that would be syntax errors under the [RFC3986] [RFC3987] syntax).\n Anne van Kesteren. WHATWG. URL Standard. Continually Updated Specification. URL: https://url.spec.whatwg.org/\n\n\n\n\nF.2 Informative references\n\n[CSRF]\nOWASP. Cross-Site Request Forgery. Living Document. URL: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n[Pingback]\nStuart Langridge; Ian Hickson. hixie.ch. Pingback 1.0. Stable Specification. URL: http://www.hixie.ch/specs/pingback/pingback\n[Private-Webmention]\nAaron Parecki. IndieWeb. Private Webmention. Living Specification. URL: https://indieweb.org/Private-Webmention\n[RFC7159]\nT. Bray, Ed.. IETF. The JavaScript Object Notation (JSON) Data Interchange Format. March 2014. Proposed Standard. URL: https://tools.ietf.org/html/rfc7159\n[RFC7234]\nR. Fielding, Ed.; M. Nottingham, Ed.; J. Reschke, Ed.. IETF. Hypertext Transfer Protocol (HTTP/1.1): Caching. June 2014. Proposed Standard. URL: https://tools.ietf.org/html/rfc7234\n[Salmention]\nBen Roberts; Tantek \u00c7elik. IndieWeb. Salmention. Living Specification. URL: https://indieweb.org/Salmention\n[Vouch]\nAaron Parecki; Tantek \u00c7elik. IndieWeb. Vouch. Living Specification. URL: https://indieweb.org/Vouch\n[XSS]\nOWASP. Cross-Site Scripting. Living Document. URL: https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\n[h-entry]\nTantek \u00c7elik. microformats.org. h-entry. Living Specification. URL: http://microformats.org/wiki/h-entry\n[security-privacy-questionnaire]\nMike West. W3C. Self-Review Questionnaire: Security and Privacy. 10 December 2015. W3C Note. URL: https://www.w3.org/TR/security-privacy-questionnaire/\n[social-web-protocols]\nAmy Guy. W3C. Social Web Protocols. 2 November 2016. W3C Working Draft. URL: https://www.w3.org/TR/social-web-protocols/\n\n\n\n\n\u2191\n\n",
    "links": [
        "https://www.w3.org/",
        "https://www.w3.org/TR/2017/REC-webmention-20170112/",
        "https://www.w3.org/TR/webmention/",
        "https://webmention.net/draft/",
        "https://webmention.rocks/",
        "https://webmention.net/implementation-reports/",
        "https://www.w3.org/TR/2016/PR-webmention-20161101/",
        "https://aaronparecki.com/",
        "https://github.com/w3c/webmention",
        "https://github.com/w3c/webmention/issues",
        "https://github.com/w3c/webmention/commits/master",
        "https://webmention.net/errata/",
        "https://www.w3.org/2003/03/Translations/byTechnology?technology=https://www.w3.org/TR/webmention/",
        "https://www.w3.org/Consortium/Legal/ipr-notice#Copyright",
        "https://www.w3.org/",
        "https://www.csail.mit.edu/",
        "https://www.ercim.eu/",
        "https://www.keio.ac.jp/",
        "http://ev.buaa.edu.cn/",
        "https://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer",
        "https://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks",
        "https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document",
        "https://indieweb.org/",
        "https://indieweb.org/webmention",
        "https://www.w3.org/TR/",
        "http://www.w3.org/Social/WG",
        "mailto:public-socialweb@w3.org",
        "mailto:public-socialweb-request@w3.org?subject=subscribe",
        "https://lists.w3.org/Archives/Public/public-socialweb/",
        "https://webmention.net/implementation-reports/",
        "https://www.w3.org/Consortium/Patent-Policy-20040205/",
        "https://www.w3.org/2004/01/pp-impl/72531/status",
        "https://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential",
        "https://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure",
        "https://www.w3.org/2015/Process-20150901/",
        "#introduction",
        "#social-web-working-group",
        "#background",
        "#overview",
        "#protocol-summary",
        "#conformance",
        "#conformance-classes",
        "#test-suite-and-reporting",
        "#webmention-protocol",
        "#sending-webmentions",
        "#create-a-source-document-that-mentions-the-target",
        "#sender-discovers-receiver-webmention-endpoint",
        "#sender-notifies-receiver",
        "#sending-webmentions-for-updated-posts",
        "#sending-webmentions-for-deleted-posts",
        "#receiving-webmentions",
        "#request-verification",
        "#webmention-verification",
        "#error-responses",
        "#updating-existing-webmentions",
        "#security-considerations",
        "#preventing-abuse",
        "#limits-on-get-requests",
        "#avoid-sending-webmentions-to-localhost",
        "#cross-site-request-forgery",
        "#limit-access-to-protected-resources",
        "#security-and-privacy-review",
        "#other-considerations",
        "#sending-webmentions-from-non-html-content",
        "#sending-webmentions-for-large-datasets",
        "#respecting-cache-headers-on-discovery",
        "#iana-considerations",
        "#uris-for-form-encoded-properties",
        "#extensions",
        "#vouch",
        "#salmention",
        "#private-webmention",
        "#resources",
        "#articles",
        "#implementations",
        "#acknowledgements",
        "#change-log",
        "#changes-from-01-november-pr-to-rec",
        "#references",
        "#normative-references",
        "#informative-references",
        "https://www.w3.org/TR/webmention",
        "#bib-social-web-protocols",
        "#bib-Pingback",
        "https://indieweb.org/Webmention-faq",
        "#bib-FETCH",
        "#bib-RFC2119",
        "#sending-webmentions",
        "#receiving-webmentions",
        "https://webmention.net/implementation-reports/",
        "https://webmention.rocks/",
        "https://webmention.rocks/",
        "#bib-HTML5",
        "#bib-FETCH",
        "#bib-RFC5988",
        "#bib-URL",
        "#bib-RFC7231",
        "#bib-RFC7231",
        "#bib-HTML5",
        "#bib-RFC7231",
        "#bib-h-entry",
        "#request-verification",
        "#bib-URL",
        "#bib-HTML5",
        "#bib-RFC7159",
        "#bib-h-entry",
        "#bib-Salmention",
        "#receiving-webmentions",
        "#webmention-verification",
        "#bib-XSS",
        "#bib-CSRF",
        "#bib-security-privacy-questionnaire",
        "#sender-discovers-receiver-webmention-endpoint",
        "#bib-RFC7234",
        "#bib-RFC5988",
        "http://www.w3.org/TR/webmention/",
        "https://indieweb.org/Vouch",
        "#bib-Vouch",
        "https://indieweb.org/Salmention",
        "#bib-Salmention",
        "https://indieweb.org/Private-Webmention",
        "#bib-Private-Webmention",
        "https://webmention.rocks",
        "https://indieweb.org/Webmention-faq",
        "https://indieweb.org/webmention-implementation-guide",
        "https://indieweb.org/webmention-implementation-details",
        "https://indieweb.org/Webmention-brainstorming",
        "https://indieweb.org/webmention#Articles",
        "http://webmention.net/implementations/",
        "http://sandeep.io/",
        "https://indieweb.org/",
        "https://www.w3.org/TR/2016/PR-webmention-20161101/",
        "https://fetch.spec.whatwg.org/",
        "https://fetch.spec.whatwg.org/",
        "https://www.w3.org/TR/html5/",
        "https://www.w3.org/TR/html5/",
        "https://tools.ietf.org/html/rfc2119",
        "https://tools.ietf.org/html/rfc2119",
        "https://tools.ietf.org/html/rfc5988",
        "https://tools.ietf.org/html/rfc5988",
        "https://tools.ietf.org/html/rfc7231",
        "https://tools.ietf.org/html/rfc7231",
        "https://www.ietf.org/rfc/rfc3986",
        "https://www.ietf.org/rfc/rfc3987",
        "https://url.spec.whatwg.org/",
        "https://www.ietf.org/rfc/rfc3986",
        "https://www.ietf.org/rfc/rfc3987",
        "https://url.spec.whatwg.org/",
        "https://url.spec.whatwg.org/",
        "https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)",
        "https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)",
        "http://www.hixie.ch/specs/pingback/pingback",
        "http://www.hixie.ch/specs/pingback/pingback",
        "https://indieweb.org/Private-Webmention",
        "https://indieweb.org/Private-Webmention",
        "https://tools.ietf.org/html/rfc7159",
        "https://tools.ietf.org/html/rfc7159",
        "https://tools.ietf.org/html/rfc7234",
        "https://tools.ietf.org/html/rfc7234",
        "https://indieweb.org/Salmention",
        "https://indieweb.org/Salmention",
        "https://indieweb.org/Vouch",
        "https://indieweb.org/Vouch",
        "https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)",
        "https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)",
        "http://microformats.org/wiki/h-entry",
        "http://microformats.org/wiki/h-entry",
        "https://www.w3.org/TR/security-privacy-questionnaire/",
        "https://www.w3.org/TR/security-privacy-questionnaire/",
        "https://www.w3.org/TR/social-web-protocols/",
        "https://www.w3.org/TR/social-web-protocols/",
        "#toc"
    ]
}