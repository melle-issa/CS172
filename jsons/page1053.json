{
    "title": "Per-block CSS with theme.json \u2013 WordPress Developer Blog",
    "body": "\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\n\n\n\nNewsDownload & ExtendGet WordPressThemesPatternsPluginsMobileHostingOpenverse \u2197\ufe0eLearnLearn WordPressDocumentationForumsDevelopersWordPress.tv \u2197\ufe0eCommunityMake WordPressPhoto DirectoryFive for the FutureWordCamp \u2197\ufe0eMeetups \u2197\ufe0eJob Board \u2197\ufe0eAboutAbout WordPressShowcaseEnterpriseGutenberg \u2197\ufe0eWordPress Swag Store \u2197\ufe0eGet WordPress\n\n\n\n\n\n\n\n\n\n\n\nSearch in WordPress.org\n\n\n\n\n\n\n\n\n\n\t\tGet WordPress\t\n\n\n\nWordPress Developer Blog\n\n\n\n\n\n\nHomeThemesPluginsBlock developmentLearningBeginnersAdvancedConceptsAboutUpdatesTips and guidelinesHow to contributeDeveloper DocsCode ReferenceCoding StandardsBlock EditorCommon APIsThemesPluginsREST APIWP-CLI \n\n\n\n\n\n\n\nPer-block CSS with theme.json\nApril 21, 2023\n\nBy\nJustin Tadlock\nin\nThemes\n\n\n\n\n\n\n\n\nWordPress 6.2 added support for per-block CSS in theme.json. That means now you can add in snippets of custom code when the built-in design tools don\u2019t quite cover your use case.\ntheme.json supports enough CSS features to cover most common styles. But it cannot reasonably cover every scenario and still have a matching design tool in the editor UI, which is an important consideration. If the interface covered every possibility, the user experience would suffer.\nThere are times when you still need good ol\u2019 CSS for block themes.\u00a0\nWhy not just stick CSS in style.css and be done with it? Why bother mixing CSS into theme.json?\nThe answers to those questions are up to you\u2014you\u2019re the theme designer. But the primary advantage of using theme.json over a stylesheet is that the .json file plugs the CSS back into the UI. And users can customize the code directly in the block\u2019s custom CSS panel.\nModern WordPress lets themes and users communicate. The theme serves up a configuration via theme.json, and users can customize it in the interface. Under the hood, it\u2019s all formatted into JSON\u2014even the user customizations\u2014and works under a standard set of rules. The more you buy into this system as a designer, the more flexibility your users will have.\nThere are a few pitfalls too, and you will learn about those. The system isn\u2019t perfect, but the tools are solid enough that you can start digging into this feature and deciding when and where to use it.\nAdding per-block CSS\nYou should already be familiar with how to customize block styles in theme.json. If not, get up to speed with the global settings and styles documentation.\nYou add custom styles by adding a new css property to a styles.blocks.[block-name] object in theme.json. And here\u2019s something cool: when you add CSS in this way, you do not need to know the selector. WordPress will automatically generate that for the block.\nNotice how this JSON code formats the css property:\n{\n\t\"css\": \"color: red;\"\n}\nThe value is a CSS declaration that probably looks familiar. The only difference is that the JSON wraps the declaration in quotes and assigns it to the css property.\nNow, try your hand at adding a single CSS declaration. This theme.json code example adds a custom letter-spacing value to the Post Title block:\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 2,\n\t\"styles\": {\n\t\t\"blocks\": {\n\t\t\t\"core/post-title\": {\n\t\t\t\t\"css\": \"letter-spacing: 1px;\"\n\t\t\t}\n\t\t}\n\t}\n}\nSave those changes to your theme.json. WordPress will generate the CSS for this on the front end and in the editor:\n.wp-block-post-title {\n\tletter-spacing: 1px;\n}\nNow, open the Appearance > Editor screen in the WordPress admin. Then, open the Styles panel and select Blocks > Post Title > Additional block CSS. Your custom CSS should appear, as you see below:\n\nBecause you registered the CSS in theme.json, your users can make changes to it directly, right in the interface. They can skip the complexities of CSS specificity, and they\u2019ll never know the hassle of trying to find the proper selectors with this example.\nThat\u2019s a pretty powerful bridge between you and your users.\nAt the moment, WordPress only lets you add CSS to blocks in theme.json. There is an open ticket to add element support.\nTips, tricks, and pitfalls\nYou have learned how to add basic CSS declarations, but there are also a few tricks you can use to handle more complex scenarios.\nUsing the & selector and brackets\nWordPress supports the & selector, much as you would see in a language like Sass. But it is not exactly the same. For example, it doesn\u2019t support nested CSS blocks.\u00a0\nBut it does work for appending selectors to the WordPress-generated block class.\u00a0\nA minute ago, you targeted the Post Title block, which has a class of\u00a0 .wp-block-post-title. What if you wanted to target that only when it has a custom class attached to it? As, maybe, when you\u2019re registering a custom block style variation?\u00a0\nSuppose you registered a block style named letter-spacing-sm, which would have a generated class of .is-style-letter-spacing-sm. You could append that class with &.is-style-letter-spacing-sm and wrap your CSS declaration with brackets:\n{\n\t\"core/post-title\": {\n\t\t\"css\": \"&.is-style-letter-spacing-sm { letter-spacing: 1px; }\"\n\t}\n}\nWordPress will generate this CSS:\n.wp-block-post-title.is-style-letter-spacing-sm {\n\tletter-spacing: 1px;\n}\nTechnically, you could write your custom code without the ampersand, and WordPress will append it correctly. But the & gives you a visual reminder that .is-style-letter-spacing-sm is being appended to another class.\nTargeting a nested element\nWhere the ampersand really shines is with targeting nested elements. For example, suppose you wanted to rotate the text of Image block captions, as below:\n\nIf you wrote the code below, you would end up with a broken selector:\n{\n\t\"core/image\": {\n\t\t\"css\": \"figcaption { transform: rotate( 1deg ); }\"\n\t}\n}\nWordPress would append figcaption to the block class name:\n.wp-block-imagefigcaption {\n\ttransform: rotate( 1deg );\n}\nYou either have to put a space at the beginning of your code or use &. Remembering to add a space is not ideal, and it would be easier to break when users make edits.\nIt\u2019s a lot easier and less prone to errors to write it like so:\n{\n\t\"core/image\": {\n\t\t\"css\": \"& figcaption { transform: rotate( 1deg ); }\"\n\t}\n}\nWhich will trigger WordPress to generate the expected CSS code block:\n.wp-block-image figcaption {\n\ttransform: rotate( 1deg );\n}\nLarge CSS code blocks\nIf you\u2019ve worked with JSON enough in the past, you\u2019ve likely already noticed a couple of major drawbacks to saving CSS as JSON string values:\n\nThere\u2019s no built-in syntax highlighting for the CSS.\nJSON doesn\u2019t support line breaks, so forget about using multi-line CSS blocks.\n\nThere might be some tooling to help you work around those limitations, but you will quickly run into issues when using the default system.\nFor example, you might want add a border that looks hand-drawn to the <img> element output by the Image block, as you see below:\n\nThis design takes several CSS declarations to pull off:\n{\n\t\"core/image\": {\n\t\t\"css\": \"& img { border: 2px solid currentColor; overflow: hidden; box-shadow: 0 4px 10px 0 rgba( 0, 0, 0, 0.3 ); border-radius: 255px 15px 225px 15px/15px 225px 15px 255px !important; }\"\n\t}\n}\nAnd it\u2019s the moment that you might start questioning whether using this feature is worth it, since JSON is not the ideal method for writing big blocks of CSS code. Add more than a few CSS declarations, and things get really messy, really fast.\nThe code also looks messy in the editor\u2014hard for your users to read and a little scary for some to edit. One way around this: use \\n for line breaks and \\t for tabs in the final string. Here\u2019s an example:\n{\n\t\"core/image\": {\n\t\t\"css\": \"& img {\\n\\tborder: 2px solid currentColor;\\n\\toverflow: hidden;\\n\\tbox-shadow: 0 4px 10px 0 rgba( 0, 0, 0, 0.3 );\\n\\tborder-radius: 255px 15px 225px 15px/15px 225px 15px 255px !important;\\n}\"\n\t}\n}\nThat will give users a nicely-formatted CSS block in the interface:\n& img {\n\tborder: 2px solid currentColor;\n\toverflow: hidden;\n\tbox-shadow: 0 4px 10px 0 rgba( 0, 0, 0, 0.3 );\n\tborder-radius: 255px 15px 225px 15px/15px 225px 15px 255px !important;\n}\nThe JSON might not look great to you, but your users will likely appreciate the CSS formatting.\nTip: use \\\" to escape double-quotes in your CSS when used in a JSON string.\nWhen to use CSS in theme.json\nCSS support in theme.json can be both a powerful feature and a recipe for headache. In its current state, it works well when you have small design changes for specific blocks, especially if your theme doesn\u2019t load any stylesheets.\nThe integration with the Styles interface in the Site Editor is also great for users who want to customize these bits of CSS that your theme adds.\nIf you want to get the most out of it while also using bigger blocks of CSS, you want tools that soothe the pain points. For example, a script that pulls CSS from stylesheet files, formats the code as a valid JSON string, and saves it to theme.json could be the answer. That\u2019s outside the scope of this post, but maybe it\u2019ll motivate you to build solutions that push the boundaries of what theming could be.\nUltimately, it\u2019s another tool in the toolbox. Use it when it makes sense for your project.\nProps to @marybaum, @bph, and @poena for feedback and review. Photo of palm trees by @shameemreza from the\u00a0WordPress photos directory.\n\n\n\nTags: \nblock themes, classic themes, theme.json\n\n\n\n3 responses to \u201cPer-block CSS with theme.json\u201d\n\n\n\nAlister Cameron\nApril 24, 2023\n\nEven for simple things \u2013 such as animations \u2013 hover states and such would be good to include.\n\nReply\n\n\n\n\nDominique Pijnenburg\nApril 24, 2023\n\nGood ideas at the end of the article! \nI am still wondering if the user should always be able to access these kind of things, but at least having the ability to provide the access is a good thing.\n\nReply\n\n\n\n\nEroan\nApril 24, 2023\n\nReally nice evolution, it will help so much in customizing default blocks for client projects \ud83d\ude0d\n\nReply\n\n\n\nLeave a Reply Cancel replyYour email address will not be published. Required fields are marked *Comment * Name * \nEmail * \nWebsite \n Save my name, email, and website in this browser for the next time I comment.\n Notify me of follow-up comments by email. Notify me of new posts by email. \n\n\u0394 \n\n\n\n\n\n\n\n\n\nRelease Dev Notes\nRequests library upgraded to 2.0.5 in WordPress 6.2March 8, 2023 by Colin StewartPatterns API expanded to include template_types propertyMarch 7, 2023 by Jorge CostaIntroduction of Block Inspector TabsMarch 7, 2023 by Aaron RobertshawShadows in Global Styles with WordPress 6.2March 7, 2023 by Ben DwyerIntroducing the HTML API in WordPress 6.2March 7, 2023 by Birgit Pauli-Haack\nView all Dev Notes from the latest WordPress version \n\n\nLearn WordPress for Developers\nOn Learn WordPress you find courses, workshops and video tutorials. \nIntroduction to Block Development: Build your first custom block\nUsing the WordPress Data Layer\nDevelopers Guide to Block Themes (Part 1)\nA Developers Guide to Block Themes  (Part 2)\nSee also the  calendar of online workshops. You\u2019ll find events for developers are happening every week.\nSubscribe to the Developer Blog\n\n\n\n\n\n\n\t\t\t\t\t\t\tEmail Address\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\tSubscribe\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\tJoin 528 other subscribers\t\t\t\t\t\n\n\n\n\n\n\n\n\nAboutNewsHostingDonateSwag\nDocumentationDevelopersGet InvolvedLearn\nShowcasePluginsThemesPatterns\nWordCampWordPress.TVBuddyPressbbPress\nWordPress.comMattPrivacyPublic Code\n\n\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\nWordPress.org\n\n\n\n \n\n\n\nVisit our Facebook page\nVisit our Twitter account\nVisit our Instagram account\nVisit our LinkedIn account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "links": [
        "https://wordpress.org/",
        "https://wordpress.org/news/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/mobile/",
        "https://wordpress.org/hosting/",
        "https://openverse.org/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://wordpress.org/support/forums/",
        "https://developer.wordpress.org/",
        "https://wordpress.tv/",
        "https://make.wordpress.org/",
        "https://make.wordpress.org/",
        "https://wordpress.org/photos/",
        "https://wordpress.org/five-for-the-future/",
        "https://central.wordcamp.org/",
        "https://www.meetup.com/pro/wordpress/",
        "https://jobs.wordpress.net/",
        "https://wordpress.org/about/",
        "https://wordpress.org/about/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/enterprise/",
        "https://wordpress.org/gutenberg/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://developer.wordpress.org/news",
        "/news",
        "https://developer.wordpress.org/news/category/themes/",
        "https://developer.wordpress.org/news/category/plugins",
        "https://developer.wordpress.org/news/category/block-development/",
        "https://developer.wordpress.org/news/category/learning/",
        "https://developer.wordpress.org/news/category/beginners/",
        "https://developer.wordpress.org/news/category/advanced/",
        "https://developer.wordpress.org/news/category/concepts/",
        "https://developer.wordpress.org/news/about/",
        "https://developer.wordpress.org/news/category/updates/",
        "https://developer.wordpress.org/news/tips-and-guidelines-for-writers/",
        "https://developer.wordpress.org/news/how-to-contribute/",
        "https://developer.wordpress.org/reference/",
        "https://developer.wordpress.org/coding-standards/",
        "https://developer.wordpress.org/block-editor/",
        "https://developer.wordpress.org/apis/",
        "https://developer.wordpress.org/themes/",
        "https://developer.wordpress.org/plugins/",
        "https://developer.wordpress.org/rest-api/",
        "https://developer.wordpress.org/cli/commands/",
        "https://developer.wordpress.org/news/category/themes/",
        "https://developer.wordpress.org/themes/advanced-topics/theme-json/",
        "https://github.com/WordPress/gutenberg/issues/48439",
        "https://developer.wordpress.org/news/2023/02/creating-custom-block-styles-in-wordpress-themes/",
        "https://profiles.wordpress.org/marybaum/",
        "https://profiles.wordpress.org/bph/",
        "https://profiles.wordpress.org/poena/",
        "https://profiles.wordpress.org/shameemreza/",
        "https://wordpress.org/photos",
        "https://developer.wordpress.org/news/tag/block-themes/",
        "https://developer.wordpress.org/news/tag/classic-themes/",
        "https://developer.wordpress.org/news/tag/theme-json/",
        "http://alistercameron.com",
        "https://developer.wordpress.org/news/2023/04/per-block-css-with-theme-json/#comment-260",
        "https://developer.wordpress.org/news/2023/04/per-block-css-with-theme-json/?replytocom=260#respond",
        "https://noesteijver.nl",
        "https://developer.wordpress.org/news/2023/04/per-block-css-with-theme-json/#comment-261",
        "https://developer.wordpress.org/news/2023/04/per-block-css-with-theme-json/?replytocom=261#respond",
        "https://agencewebperformance.fr/",
        "https://developer.wordpress.org/news/2023/04/per-block-css-with-theme-json/#comment-262",
        "https://developer.wordpress.org/news/2023/04/per-block-css-with-theme-json/?replytocom=262#respond",
        "/news/2023/04/per-block-css-with-theme-json/#respond",
        "https://make.wordpress.org/core/2023/03/08/requests-library-upgraded-to-2-0-5-in-wordpress-6-2/",
        "https://make.wordpress.org/core/2023/03/07/patterns-api-expanded-to-include-template_types-property/",
        "https://make.wordpress.org/core/2023/03/07/introduction-of-block-inspector-tabs/",
        "https://make.wordpress.org/core/2023/03/07/shadows-in-global-styles-with-wordpress-6-2/",
        "https://make.wordpress.org/core/2023/03/07/introducing-the-html-api-in-wordpress-6-2/",
        "https://make.wordpress.org/core/tag/dev-notes/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/course/introduction-to-block-development-build-your-first-custom-block/",
        "https://learn.wordpress.org/course/using-the-wordpress-data-layer/",
        "https://learn.wordpress.org/course/a-developers-guide-to-block-themes-part-1/",
        "https://learn.wordpress.org/course/a-developers-guide-to-block-themes-part-2/",
        "https://learn.wordpress.org/online-workshops/",
        "https://wordpress.org/about/",
        "https://wordpress.org/news/",
        "https://wordpress.org/hosting/",
        "https://wordpressfoundation.org/donate/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://developer.wordpress.org/",
        "https://make.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://central.wordcamp.org/",
        "https://wordpress.tv/",
        "https://buddypress.org/",
        "https://bbpress.org/",
        "https://wordpress.com/?ref=wporg-footer",
        "https://ma.tt/",
        "https://wordpress.org/about/privacy/",
        "https://publiccode.eu/",
        "https://wordpress.org/",
        "https://wordpress.org/",
        "https://www.facebook.com/WordPress/",
        "https://twitter.com/WordPress",
        "https://www.instagram.com/wordpress/",
        "https://www.linkedin.com/company/wordpress"
    ]
}