{
    "title": "Everything you need to know about spacing in block themes \u2013 WordPress Developer Blog",
    "body": "\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\n\n\n\nNewsDownload & ExtendGet WordPressThemesPatternsPluginsMobileHostingOpenverse \u2197\ufe0eLearnLearn WordPressDocumentationForumsDevelopersWordPress.tv \u2197\ufe0eCommunityMake WordPressPhoto DirectoryFive for the FutureWordCamp \u2197\ufe0eMeetups \u2197\ufe0eJob Board \u2197\ufe0eAboutAbout WordPressShowcaseEnterpriseGutenberg \u2197\ufe0eWordPress Swag Store \u2197\ufe0eGet WordPress\n\n\n\n\n\n\n\n\n\n\n\nSearch in WordPress.org\n\n\n\n\n\n\n\n\n\n\t\tGet WordPress\t\n\n\n\nWordPress Developer Blog\n\n\n\n\n\n\nHomeThemesPluginsBlock developmentLearningBeginnersAdvancedConceptsAboutUpdatesTips and guidelinesHow to contributeDeveloper DocsCode ReferenceCoding StandardsBlock EditorCommon APIsThemesPluginsREST APIWP-CLI \n\n\n\n\n\n\n\nEverything you need to know about spacing in block themes\nMarch 22, 2023\n\nBy\nJustin Tadlock\nin\nThemes\n\n\n\n\n\n\n\n\nIn design, spacing is everything. Too little of it, and your text gets cramped and tough to read. Too much of it, things start to feel like they\u2019re floating away. As with most things in life, you need a balance, and when you\u2019re building a website, spacing plays a crucial role in accomplishing that.\nTraditionally, web designers handled spacing in a stylesheet. Some designers would spend hours meticulously tinkering with spacing to get everything just right. Then they\u2019d scrap it all and start over the minute they added a typeface with a different x-height. Others would build on top of a system\u2014maybe a design framework\u2014that suited their style well enough they use it for most projects. Either way, it typically meant working directly with CSS.\nWith block themes, you will set most of your spacing in the theme.json file (classic/hybrid themes may also support this feature). Making the switch to JSON can feel a little foreign if you are new to block theming. But once you open the file, the style rules will look more like CSS rules than you might have expected; the main differences are in syntax. And, ultimately, every style configuration maps back to CSS properties on output.\nThis tutorial will walk you through configuring global spacing settings and styling properties like margin and padding in theme.json. It will also outline some additional tips, such as adding contextual spacing and customizing the Spacer block.\nTable of contents\nGlobal settings and stylesConfiguring global settingsCustomizing the spacing scaleRegistering custom spacing sizesConfiguring global stylesA primer on global stylesThe spacing objectCreating a vertical rhythm (block spacing)Applying spacing to blocksContextual spacing for headingsRoot padding aware alignmentsUsing the Spacer blockCustom Spacer block variationsResponsive Spacer blocks\nGlobal settings and styles\nThemes can define global settings and styles via their theme.json files. The settings.spacing object lets you configure options for the user interface and define preset values your users can apply to many other places. Under the styles object, you can use spacing presets at the root, element, or block level.\nConfiguring global settings\nThe settings.spacing key in theme.json is a configuration object for spacing. Each of the options let you do one of two things:\n\nEnable or disable an option in the interface\nCreate a group of presets or options that users can select in the interface or use in block or element styles\n\nHere is the complete list of available settings as of WordPress 6.2:\n\nblockGap: (boolean/null) Whether to enable the Block Spacing option for blocks that support it. Defaults to null. If set to null, the CSS is also disabled.\nmargin: (boolean) Whether to enable the Margin option for supported blocks. Defaults to false.\npadding: (boolean) Whether to enable the Padding option for supported blocks. Defaults to false.\ncustomSpacingSize: (boolean) Whether to allow users to input custom spacing values for supported blocks. Defaults to true.\nspacingScale: (object) A configuration object for defining a custom spacing scale. WordPress defines a default scale with seven steps that increment by 1.5rem.\nspacingSizes: (array) A set of custom size objects that may overrule the spacing scale or add to it.\nunits: (array) A set of possible CSS units that users can select from when adding custom spacing.\n\nMost of these should be straightforward for you to configure. You will learn more about the two most complex settings, spacingScale and spacingSizes, in the next sections.\nThe following is an example theme.json with all of the settings enabled for the user. It also includes a set of custom spacing sizes:\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": true,\n\t\t\t\"margin\": true,\n\t\t\t\"padding\": true,\n\t\t\t\"customSpacingSize\": true,\n\t\t\t\"spacingScale\": {\n\t\t\t\t\"steps\": 0\n\t\t\t},\n\t\t\t\"spacingSizes\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Step 1 - Fixed\",\n\t\t\t\t\t\"size\": \"0.25rem\",\n\t\t\t\t\t\"slug\": \"10\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Step 2 - Fixed\",\n\t\t\t\t\t\"size\": \"0.5rem\",\n\t\t\t\t\t\"slug\": \"20\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"units\": [\n\t\t\t\t\"%\",\n\t\t\t\t\"px\",\n\t\t\t\t\"em\",\n\t\t\t\t\"rem\",\n\t\t\t\t\"vh\",\n\t\t\t\t\"vw\"\n\t\t\t]\n\t\t}\n\t}\n}\nCustomizing the spacing scale\nWordPress generates a default spacing scale, as shown in this table:\nCSS Custom PropertyCSS Value--wp--preset--spacing--200.44rem--wp--preset--spacing--300.67rem--wp--preset--spacing--401rem--wp--preset--spacing--501.5rem--wp--preset--spacing--602.25rem--wp--preset--spacing--703.38rem--wp--preset--spacing--805.06rem\nYour users can select from the range of values if your theme enables support for the blockGap, margin, or padding settings. You can also use these values in the styles section of your theme.json file, or your stylesheets\u2014just reference the CSS custom property.\nYou can also configure a custom spacing scale if the default one in WordPress does not suit your design. How? Configure settings.spacing.spacingScale. It accepts these properties:\n\noperator: (string) The operator used to increment the scale, which can be a * for multiplication or a + for addition. Defaults to *.\nincrement: \u00a0(integer) A numeric value used to increment the scale. The default value is 1.5.\nsteps: (integer) The total number of steps in the scale. The default value is 7.\nmediumStep: (integer) The medium value of the scale. The default value is 1.5.\nunit: (string) A valid CSS spacing unit (e.g., px, em, rem, vh, vw, and %). The default value is rem.\n\nThe following theme.json example creates a scale with seven steps that increments by 0.25rem:\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"spacing\": {\n\t\t\t\"spacingScale\": {\n\t\t\t\t\"operator\": \"+\",\n\t\t\t\t\"increment\": 0.25,\n\t\t\t\t\"steps\": 7,\n\t\t\t\t\"mediumStep\": 1,\n\t\t\t\t\"unit\": \"rem\"\n\t\t\t}\n\t\t}\n\t}\n}\nThe code will create a scale that is much different than the original WordPress scale. Compare the default values to those shown in this table:\nCSS Custom PropertyCSS Value--wp--preset--spacing--200.25rem--wp--preset--spacing--300.5rem--wp--preset--spacing--400.75rem--wp--preset--spacing--501rem--wp--preset--spacing--601.25rem--wp--preset--spacing--701.5rem--wp--preset--spacing--801.75rem\nWhile settings.spacing.spacingScale makes it easy to create a scale on the fly, it is limited. It does let you use viewport units, but it does not let you calculate your own fluid sizes. For that reason, you might want to opt out of the spacing scale and register custom sizes.\nRegistering custom spacing sizes\nIf you want tighter control over the spacing, opt for registering custom sizes instead of a scale.\u00a0\nStart by defining an array of presets in settings.spacing.spacingSizes. The array should contain objects that define individual sizes and set these properties:\n\nname: (string) A human-readable title for the spacing size that can be translated into other languages.\nsize: (string) A valid CSS size. This can be a number and unit, a fluid size using clamp(), or a reference to another custom CSS property.\nslug: (string) The slug for the size, which will be appended to a generated CSS custom property: --wp--preset--spacing--{slug}.\n\nThe following code example registers a mix of five spacing sizes, both fixed and fluid. Also, note that settings.spacingScale.steps\u00a0is set to 0, which disables the default core scale.\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"spacing\": {\n\t\t\t\"spacingScale\": {\n\t\t\t\t\"steps\": 0\n\t\t\t},\n\t\t\t\"spacingSizes\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Step 1 - Fixed\",\n\t\t\t\t\t\"size\": \"0.25rem\",\n\t\t\t\t\t\"slug\": \"10\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Step 2 - Fixed\",\n\t\t\t\t\t\"size\": \"0.5rem\",\n\t\t\t\t\t\"slug\": \"20\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Step 3 - Fixed\",\n\t\t\t\t\t\"size\": \"0.75rem\",\n\t\t\t\t\t\"slug\": \"30\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Step 4 - Fixed\",\n\t\t\t\t\t\"size\": \"1rem\",\n\t\t\t\t\t\"slug\": \"40\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Step 5 - Fluid\",\n\t\t\t\t\t\"size\": \"clamp(1.125rem, 1.25vw + 0.7rem, 1.25rem)\",\n\t\t\t\t\t\"slug\": \"50\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}\nThese options should appear as choices for the Block Spacing, Margin, and Padding controls in supported blocks, as shown in the following screenshot:\n\nYou can register as many custom sizes as you need. But once you make more than seven, the UI will change to a dropdown select field instead of a range slider.\u00a0\nTechnically, you can use the spacing scale and custom sizes at the same time. It\u2019s generally less cumbersome to opt for one over the other. But, there are times when you might need to tack an extra custom size on top of the generated scale.\nConfiguring global styles\nIn the previous sections, you learned how to configure custom spacing options and presets. Those earlier steps were important, because now you will use what you just built as the foundation for styling blocks and elements in theme.json\u2014and maybe for accessing presets in custom CSS.\nA primer on global styles\nThe styles object in theme.json governs the look of the root element, blocks, and supported HTML elements. (For more on how this works, read the guide in the Theme Handbook.)\u00a0\nFor now, know that you can add custom styles at these levels:\n\nstyles: Any styles applied here are added directly to the root element of the document.\nblocks: Houses block objects with custom styles. These can also house an elements object for styling elements within a specific block.\nelements: Holds HTML element objects with custom styles.\n\nThis should be structured like this theme.json example:\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 2,\n\t\"styles\": {\n\t\t\"blocks\": {},\n\t\t\"elements\": {}\n\t}\n}\nThe spacing object\nWhen you are styling the root element, blocks, or supported HTML elements, you must add a spacing object to hold the blockGap, margin, and padding properties.\nThe following is an example of what this object might look like:\n{\n\t\"spacing\": {\n\t\t\"blockGap\": \"2rem\",\n\t\t\"margin\": {\n\t\t\t\"top\": \"1rem\",\n\t\t\t\"bottom\": \"1rem\"\n\t\t},\n\t\t\"padding\": {\n\t\t\t\"top\": \"2rem\",\n\t\t\t\"bottom\": \"2rem\",\n\t\t\t\"right\": \"1rem\",\n\t\t\t\"left\": \"1rem\"\n\t\t}\n\t}\n}\nThe values you add must be valid CSS that includes references to the CSS custom properties configured via settings.spacing in theme.json. Both margin and padding support setting all four sides, but the blockGap style should only be a single value.\nCreating a vertical rhythm (block spacing)\nA huge part of creating a pleasing design is getting the vertical rhythm of the page just right. Of course, spacing is only one aspect; your typography, particularly line heights, is just as important. This tutorial will assume you know what values to apply and will focus on how to add those values to your theme.\nYou will learn how to control the spacing in between blocks like the whitespace between paragraphs in this screenshot:\n\nIn traditional design, you might define this as margin-top to all block-level HTML elements in your CSS to keep them consistently spaced. In WordPress, this property is named blockGap. In essence, the two methods work the same.\nTechnically, the blockGap property maps to both the CSS margin-top and gap properties, depending on whether the blocks are in a flow or flex layout, respectively. So, it is, quite literally, the \u201cgap\u201d between blocks.\nThe blockGap property is displayed as Block Spacing in the user interface.\nBy default, WordPress sets a block gap of 24px, which will work in some designs but not every single one. It\u2019s likely this is the one style you will customize for every theme.\nSuppose your design needed 2rem between blocks and elements by default. You would add this to the top level of the styles object, as you see in this code:\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 2,\n\t\"styles\": {\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": \"2rem\"\n\t\t}\n\t}\n}\nApplying spacing to blocks\nNow, it\u2019s time to start applying some of those custom spacing presets you registered earlier. Remember you can reference a preset with its CSS custom property, which will follow the --wp--preset--spacing--{slug} naming convention.\nSuppose you want to use this design for the core Pullquote block:\n\nSince you have top and bottom borders, you will want some spacing between them and the inner text. You can do that using one of your custom presets.\nHere\u2019s an example set of styles you could use for the Pullquote block:\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 2,\n\t\"styles\": {\n\t\t\"blocks\": {\n\t\t\t\"core/pullquote\": {\n\t\t\t\t\"border\": {\n\t\t\t\t\t\"color\": \"var( --wp--preset--color--black )\",\n\t\t\t\t\t\"style\": \"solid\",\n\t\t\t\t\t\"width\": \"var( --wp--preset--spacing--10 )\"\n\t\t\t\t},\n\t\t\t\t\"spacing\": {\n\t\t\t\t\t\"padding\": {\n\t\t\t\t\t\t\"top\": \"var( --wp--preset--spacing--30 )\",\n\t\t\t\t\t\t\"bottom\": \"var( --wp--preset--spacing--30 )\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nTo get the whitespace you need between the text and borders, the code added top and bottom padding using one of the presets from the spacing scale.\nYou likely noticed that the preceding code also used a preset for the border width. Because presets are just CSS custom properties, you can use them in lots of places and for lots of things when you need them.\nContextual spacing for headings\nWhen you\u2019re designing body copy, it\u2019s common to add spacing to a heading that follows a paragraph and then close up the space between the heading and elements that follow. Depending on your design, that may be true of other elements.\nIt won\u2019t always work just to add some extra margin above your headings in theme.json, because the blockGap setting will almost always override vertical margin settings. Often, all you can do is write some custom CSS.\nDepending on your actual scenario, you may have to adjust things. So, think of the example below as a guideline, not a rule.\nAssume you have a blockGap setting of 2rem. But, in the normal \u201cflow\u201d layout, you want to add 3rem of top margin to headings and reduce the top margin of sibling elements to 1rem, so your content looks like this:\n\nThis CSS will do the job:\n.is-layout-flow * + :is( h1, h2, h3, h4, h5, h6 ),\n.wp-block-post-content * + :is( h1, h2, h3, h4, h5, h6 )  {\n\tmargin-top: 3rem;\n}\n\n.is-layout-flow :is( h1, h2, h3, h4, h5, h6 ) + *,\n.wp-block-post-content :is( h1, h2, h3, h4, h5, h6 ) + * {\n\tmargin-top: 1rem;\n}\nThe code specifically targets .wp-block-post-content so that it works in the post editor. That\u2019s because the editor itself has no way of knowing the front-end layout of your post content. In some cases, you might only target the Post Content block; in others, you might target other blocks.\nThere are some edge cases this CSS does not cover. For example, you might want different spacing between a Heading block and Spacer or some other block/element.\nRoot padding aware alignments\nIn some designs, the root element of the page needs horizontal padding. But when you build those designs, you sometimes need to let blocks stretch the full width of the screen\u2014beyond the left and right padding. Fortunately, WordPress 6.1 introduced a setting that lets you do exactly that.\nTechnically, this isn\u2019t only a spacing feature\u2014it partly falls in the world of layout. But, it does affect decisions you make with horizontal spacing on the root element.\nIf you want to enable alignments that are aware of the root padding, you can enable settings.useRootPaddingAwareAlignments in theme.json, like this:\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"useRootPaddingAwareAlignments\": true\n\t},\n\t\"styles\": {\n\t\t\"spacing\": {\n\t\t\t\"padding\": {\n\t\t\t\t\"left\": \"var( --wp--preset--spacing--40 )\",\n\t\t\t\t\"right\": \"var( --wp--preset--spacing--40 )\"\n\t\t\t}\n\t\t}\n\t}\n}\nOf course, this setting only makes sense if you have set left and right padding on the root element, as in the preceding code block.\nWordPress works a little magic behind the scenes when this setting is enabled. Instead of applying the padding to the root, it adds a .has-global-padding class to inner container blocks, which applies the padding to the blocks themselves. And, when a full-width block is nested inside of those, it applies a negative margin to stretch outside their container.\nHere\u2019s a full-width image stretching beyond its padded container to the edges of the screen:\n\nUsing the Spacer block\nFrom a technical viewpoint, the Spacer block is not an ideal method of spacing. It adds an empty <div> to the document output, just to create whitespace. This breaks every good web design standard out there, especially the separation of content and style.\nHowever, it is arguably the most intuitive spacing tool in WordPress. From a user-experience standpoint, it\u2019s easier to recommend users place Spacer blocks wherever they need them than to teach new users, especially, to configure spacing block by block.\nBut, is it a good theme development tool? Maybe, at least in a few cases.\nIn general, when building themes, you should lean on block gap, margin, and padding settings to handle spacing. But, there is a case for deploying the Spacer block in custom patterns, or in template parts, that users might need to adjust for themselves, without a lot of fuss.\u00a0\nSometimes, the user experience wins out over the purist\u2019s vision of designing by the book. Ultimately, you\u2019ll need to decide where and when you use the block.\nBecause the fact remains that users do have access to it. Which means some of them will use it. In the next few sections, you will learn how to improve this experience with workarounds for the Spacer block\u2019s current limitations.\nUpdate: As of Gutenberg 15.6, the Spacer block supports spacing presets. The following sub-sections of this article will likely not be necessary once WordPress 6.3 has shipped.\nCustom Spacer block variations\nOne downside to the Spacer block is that it does not currently support theme-defined height presets. What\u2019s more, the custom heights users select are not responsive.\u00a0\nThe good news: there are ways to design around those limitations. The rest of the news: those workarounds have their limitations.\nFor example, one workaround is to register block variations with custom heights. These heights can be fixed or fluid sizes.\nCreate a new assets/js/editor.js file in your theme folder. Then, add the following code to register small, medium, and large variations of the Spacer block:\nwp.domReady( () => {\n\twp.blocks.registerBlockVariation( 'core/spacer', {\n\t\tname: 'small',\n\t\ttitle: 'Spacer: Small',\n\t\tattributes: {\n\t\t\theight: '2rem'\n\t\t},\n\t\tscope: [ 'block', 'inserter', 'transform' ]\n\t} );\n\n\twp.blocks.registerBlockVariation( 'core/spacer', {\n\t\tname: 'medium',\n\t\ttitle: 'Spacer: Medium',\n\t\tattributes: {\n\t\t\theight: 'clamp(2rem, calc(2rem + ((1vw - 0.4rem) * 8.3333)), 4rem)'\n\t\t},\n\t\tscope: [ 'block', 'inserter', 'transform' ]\n\t} );\n\n\twp.blocks.registerBlockVariation( 'core/spacer', {\n\t\tname: 'large',\n\t\ttitle: 'Spacer: Large',\n\t\tattributes: {\n\t\t\theight: 'clamp(4rem, calc(4rem + ((1vw - 0.4rem) * 16.6667)), 8rem)'\n\t\t},\n\t\tscope: [ 'block', 'inserter', 'transform' ]\n\t} );\n} );\nFor the small variation, the code uses a fixed height value. The medium and large variations use clamp() to create fluid sizes that adjust based on the screen\u2019s width.\u00a0\nA clamp() value will show up as empty in the Height control in the Spacer block\u2019s sidebar. But, it is saved correctly as an attribute, and the CSS works as it should.\nFor your custom variations to appear, load the editor.js file in the editor by adding the following code your theme\u2019s functions.php file:\nadd_action( 'enqueue_block_editor_assets', 'themeslug_editor_scripts' );\n\nfunction themeslug_editor_scripts() {\n\twp_enqueue_script(\n\t\t'themeslug-editor',\n\t\tget_theme_file_uri( 'assets/js/editor.js' ),\n\t\t[ 'wp-blocks', 'wp-dom-ready', 'wp-edit-post' ],\n\t\tfilemtime( get_theme_file_path( 'assets/js/editor.js' ) ),\n\t\ttrue\n\t);\n}\nNow, when you insert the Spacer block, you should see a dropdown of your custom variations in the editor, as in the screenshot below:\n\nThe variations should also appear in the inserter and be available via slash commands. If you want to control where the variations are available, you can do that in the scope parameter when you\u2019re registering them.\nResponsive Spacer blocks\nAnother trick: you can limit overly tall Spacer blocks with custom CSS media queries. You do risk overruling your user\u2019s intention, so think about your theme\u2019s audience before you do this.\nYou could add the custom CSS to your theme\u2019s primary style.css file. But, since you will probably tie this code to a specific block, you should register a custom block stylesheet, as described in Leveraging theme.json and per-block styles for more performant themes.\nCreate a new assets/css/blocks/core-spacer.css file in your theme and add this code to it:\n@media ( max-width: 48rem ) {\n        .wp-block-spacer {\n                max-height: 4rem;\n        }\n}\n\n@media ( max-width: 40rem ) {\n        .wp-block-spacer {\n                max-height: 2rem;\n        }\n}\nThe preceding code limits every instance of the Spacer block to a maximum height of 4rem on medium screen sizes and 2rem on small screens. Of course, you should adjust those numbers to suit your design.\nNow, add this code to your functions.php file to load the block stylesheet on both the editor and front-end views:\nadd_action( 'init', 'themeslug_enqueue_block_styles' );\n\nfunction themeslug_enqueue_block_styles() {\n\twp_enqueue_block_style( 'core/spacer', array(\n\t\t'handle' => 'themeslug-block-spacer',\n\t\t'src'    => get_theme_file_uri( 'assets/css/blocks/core-spacer.css' ),\n\t\t'path'   => get_theme_file_path( 'assets/css/blocks/core-spacer.css' )\n\t) );\n}\nProps to @marybaum and @bph for feedback and review. Photo of dog and Wapuu by  @wapuu from the\u00a0WordPress photos directory.\n\n\n\nTags: \nblock themes, theme.json\n\n\n\n8 responses to \u201cEverything you need to know about spacing in block themes\u201d\n\n\n\nScott Fennell\nMarch 22, 2023\n\nThanks for this article and everything else you\u2019ve done for the community.\nHOWEVER!!!\nMedia queries being relegated to custom css makes it harder to get excited about embracing The New WordPress.  It seems like they should be a first class citizen when registering styles, anywhere styles are registered.\n\nReply\n\n\n\n\nJustin Tadlock\nMarch 22, 2023\n\nThank you for reading and the feedback.\nThe one example of using a media query here is just a workaround for a custom use case. I\u2019d much prefer fluid sizing for the Spacer block based on presets, which would be at the moment of registration. The example in the post could\u2019ve also been just as easily handled with a fluid size, but I wanted to provide another approach. Regardless, I agree that it should be handled when registering the style preset.\nThere\u2019s an open ticket, which definitely could use a PR (maybe even a \u201cgood first issue\u201d for anyone looking to contribute). That would definitely fix the need for the custom CSS in this case.\n\nReply\n\n\n\n\nScott Fennell\nMarch 22, 2023\n\nI set myself up here for a pretty straightforward rebuttal, because of the existence of fluid sizing.  Touche.\nBut more broadly, the non-size-related cases of\u2026\n\u2013 \u201cshow this element on small screens, and instead show that on large screens\u201d\n\u2013 \u201cmake this red on small screens and blue on large screens.\u201d\nstill seem to be in need of acknowledgement from the Gutenberg project.\nApologies for being a bit off topic.  It\u2019s an excellent article about spacing.\n\nReply\n\n\n\n\nJustin Tadlock\nMarch 22, 2023\n\nOh, I thought you were talking about the media query example in the post. I actually have another post here on the Dev Blog that dives into the current approach of following more of an intrinsic design path rather than responsive UI controls: Intrinsic design, theming, and rethinking how to design with WordPress. That\u2019s a good place to add feedback on the broader topic.\nThere are definitely folks working on the Gutenberg project who acknowledge those use cases. It\u2019s a topic that is discussed often and with a lot of care, particularly around the user experience.\nSpeaking for myself, I want to see how much we can push without too many responsive settings first. I don\u2019t know if the correct answer is putting everything in core vs. letting plugins extend what core is doing\u2014there\u2019s probably a good middle ground somewhere in there. I\u2019ve personally coming around more and more to the idea of adding more settings directly into core (vs. the old approach of limiting options), which has proven to be a good thing in many cases.\n\nReply\n\n\n\n\nMatt Whiteley\nMarch 22, 2023\n\nGreat article Justin. Out of curiosity, do you know of a way to limit the spacing to vertical only (top & bottom)? I love the steps spacing, but almost 100% of the time I only want the vertical padding to vary, not he horizontal and since it adds the CSS inline, aside form overriding the horizontal padding with !important CSS, which is no good, it isn\u2019t the greatest solution.\n\nReply\n\n\n\n\nbrettsmason\nMarch 23, 2023\n\nI had a similar issue. I worked out that this can be achieved using the blocks.registerBlockType JavaScript filter.\nHere is a full example I use for the group block:\n/**\n * @param {Object} settings The block settings\n * @param {string} name     The block name\n * @return {Object} The block settings\n */\nfunction groupSupports(settings, name) {\n\tif (name !== 'core/group') {\n\t\treturn settings;\n\t}\n\treturn assign({}, settings, {\n\t\tsupports: assign({}, settings.supports, {\n\t\t\tspacing: {\n\t\t\t\tpadding: ['top', 'bottom'],\n\t\t\t\tmargin: ['top', 'bottom'],\n\t\t\t},\n\t\t}),\n\t});\n}\naddFilter(\n\t'blocks.registerBlockType',\n\t'pulsar/group-block/supports',\n\tgroupSupports\n);\n\nReply\n\n\n\n\nMatt Whiteley\nMarch 23, 2023\n\nGreat tip! I\u2019ll be giving this a try today. Thanks!\n\nReply\n\n\n\n\nAvaGen\nMarch 24, 2023\n\nGreat resource. Thank you for this\n\nReply\n\n\n\nLeave a Reply Cancel replyYour email address will not be published. Required fields are marked *Comment * Name * \nEmail * \nWebsite \n Save my name, email, and website in this browser for the next time I comment.\n Notify me of follow-up comments by email. Notify me of new posts by email. \n\n\u0394 \n\n\n\n\n\n\n\n\n\nRelease Dev Notes\nRequests library upgraded to 2.0.5 in WordPress 6.2March 8, 2023 by Colin StewartPatterns API expanded to include template_types propertyMarch 7, 2023 by Jorge CostaIntroduction of Block Inspector TabsMarch 7, 2023 by Aaron RobertshawShadows in Global Styles with WordPress 6.2March 7, 2023 by Ben DwyerIntroducing the HTML API in WordPress 6.2March 7, 2023 by Birgit Pauli-Haack\nView all Dev Notes from the latest WordPress version \n\n\nLearn WordPress for Developers\nOn Learn WordPress you find courses, workshops and video tutorials. \nIntroduction to Block Development: Build your first custom block\nUsing the WordPress Data Layer\nDevelopers Guide to Block Themes (Part 1)\nA Developers Guide to Block Themes  (Part 2)\nSee also the  calendar of online workshops. You\u2019ll find events for developers are happening every week.\nSubscribe to the Developer Blog\n\n\n\n\n\n\n\t\t\t\t\t\t\tEmail Address\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\tSubscribe\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\tJoin 528 other subscribers\t\t\t\t\t\n\n\n\n\n\n\n\n\nAboutNewsHostingDonateSwag\nDocumentationDevelopersGet InvolvedLearn\nShowcasePluginsThemesPatterns\nWordCampWordPress.TVBuddyPressbbPress\nWordPress.comMattPrivacyPublic Code\n\n\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\nWordPress.org\n\n\n\n \n\n\n\nVisit our Facebook page\nVisit our Twitter account\nVisit our Instagram account\nVisit our LinkedIn account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "links": [
        "https://wordpress.org/",
        "https://wordpress.org/news/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/mobile/",
        "https://wordpress.org/hosting/",
        "https://openverse.org/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://wordpress.org/support/forums/",
        "https://developer.wordpress.org/",
        "https://wordpress.tv/",
        "https://make.wordpress.org/",
        "https://make.wordpress.org/",
        "https://wordpress.org/photos/",
        "https://wordpress.org/five-for-the-future/",
        "https://central.wordcamp.org/",
        "https://www.meetup.com/pro/wordpress/",
        "https://jobs.wordpress.net/",
        "https://wordpress.org/about/",
        "https://wordpress.org/about/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/enterprise/",
        "https://wordpress.org/gutenberg/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://developer.wordpress.org/news",
        "/news",
        "https://developer.wordpress.org/news/category/themes/",
        "https://developer.wordpress.org/news/category/plugins",
        "https://developer.wordpress.org/news/category/block-development/",
        "https://developer.wordpress.org/news/category/learning/",
        "https://developer.wordpress.org/news/category/beginners/",
        "https://developer.wordpress.org/news/category/advanced/",
        "https://developer.wordpress.org/news/category/concepts/",
        "https://developer.wordpress.org/news/about/",
        "https://developer.wordpress.org/news/category/updates/",
        "https://developer.wordpress.org/news/tips-and-guidelines-for-writers/",
        "https://developer.wordpress.org/news/how-to-contribute/",
        "https://developer.wordpress.org/reference/",
        "https://developer.wordpress.org/coding-standards/",
        "https://developer.wordpress.org/block-editor/",
        "https://developer.wordpress.org/apis/",
        "https://developer.wordpress.org/themes/",
        "https://developer.wordpress.org/plugins/",
        "https://developer.wordpress.org/rest-api/",
        "https://developer.wordpress.org/cli/commands/",
        "https://developer.wordpress.org/news/category/themes/",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#global-settings-and-styles",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#configuring-global-settings",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#customizing-the-spacing-scale",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#registering-custom-spacing-sizes",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#configuring-global-styles",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#a-primer-on-global-styles",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#the-spacing-object",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#creating-a-vertical-rhythm-block-spacing",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#applying-spacing-to-blocks",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#contextual-spacing-for-headings",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#root-padding-aware-alignments",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#using-the-spacer-block",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#custom-spacer-block-variations",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#responsive-spacer-blocks",
        "https://developer.wordpress.org/themes/advanced-topics/theme-json/#styles",
        "https://github.com/WordPress/gutenberg/pull/44002",
        "https://github.com/WordPress/gutenberg/issues/43816",
        "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/",
        "https://developer.wordpress.org/news/2022/12/leveraging-theme-json-and-per-block-styles-for-more-performant-themes/",
        "https://profiles.wordpress.org/marybaum/",
        "https://profiles.wordpress.org/bph/",
        "https://profiles.wordpress.org/wapuu/",
        "https://wordpress.org/photos",
        "https://developer.wordpress.org/news/tag/block-themes/",
        "https://developer.wordpress.org/news/tag/theme-json/",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#comment-110",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/?replytocom=110#respond",
        "https://profiles.wordpress.org/greenshady/",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#comment-111",
        "https://github.com/WordPress/gutenberg/issues/43816",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/?replytocom=111#respond",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#comment-112",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/?replytocom=112#respond",
        "https://profiles.wordpress.org/greenshady/",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#comment-113",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/?replytocom=113#respond",
        "https://whiteleydesigns.com",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#comment-114",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/?replytocom=114#respond",
        "https://profiles.wordpress.org/brettsmason/",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#comment-116",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/?replytocom=116#respond",
        "https://whiteleydesigns.com",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#comment-117",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/?replytocom=117#respond",
        "https://shop.avagen.ro",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#comment-119",
        "https://developer.wordpress.org/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/?replytocom=119#respond",
        "/news/2023/03/everything-you-need-to-know-about-spacing-in-block-themes/#respond",
        "https://make.wordpress.org/core/2023/03/08/requests-library-upgraded-to-2-0-5-in-wordpress-6-2/",
        "https://make.wordpress.org/core/2023/03/07/patterns-api-expanded-to-include-template_types-property/",
        "https://make.wordpress.org/core/2023/03/07/introduction-of-block-inspector-tabs/",
        "https://make.wordpress.org/core/2023/03/07/shadows-in-global-styles-with-wordpress-6-2/",
        "https://make.wordpress.org/core/2023/03/07/introducing-the-html-api-in-wordpress-6-2/",
        "https://make.wordpress.org/core/tag/dev-notes/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/course/introduction-to-block-development-build-your-first-custom-block/",
        "https://learn.wordpress.org/course/using-the-wordpress-data-layer/",
        "https://learn.wordpress.org/course/a-developers-guide-to-block-themes-part-1/",
        "https://learn.wordpress.org/course/a-developers-guide-to-block-themes-part-2/",
        "https://learn.wordpress.org/online-workshops/",
        "https://wordpress.org/about/",
        "https://wordpress.org/news/",
        "https://wordpress.org/hosting/",
        "https://wordpressfoundation.org/donate/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://developer.wordpress.org/",
        "https://make.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://central.wordcamp.org/",
        "https://wordpress.tv/",
        "https://buddypress.org/",
        "https://bbpress.org/",
        "https://wordpress.com/?ref=wporg-footer",
        "https://ma.tt/",
        "https://wordpress.org/about/privacy/",
        "https://publiccode.eu/",
        "https://wordpress.org/",
        "https://wordpress.org/",
        "https://www.facebook.com/WordPress/",
        "https://twitter.com/WordPress",
        "https://www.instagram.com/wordpress/",
        "https://www.linkedin.com/company/wordpress"
    ]
}