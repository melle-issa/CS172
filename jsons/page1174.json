{
    "title": "How webpack and WordPress packages interact \u2013 WordPress Developer Blog",
    "body": "\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\n\n\n\nNewsDownload & ExtendGet WordPressThemesPatternsPluginsMobileHostingOpenverse \u2197\ufe0eLearnLearn WordPressDocumentationForumsDevelopersWordPress.tv \u2197\ufe0eCommunityMake WordPressPhoto DirectoryFive for the FutureWordCamp \u2197\ufe0eMeetups \u2197\ufe0eJob Board \u2197\ufe0eAboutAbout WordPressShowcaseEnterpriseGutenberg \u2197\ufe0eWordPress Swag Store \u2197\ufe0eGet WordPress\n\n\n\n\n\n\n\n\n\n\n\nSearch in WordPress.org\n\n\n\n\n\n\n\n\n\n\t\tGet WordPress\t\n\n\n\nWordPress Developer Blog\n\n\n\n\n\n\nHomeThemesPluginsBlock developmentLearningBeginnersAdvancedConceptsAboutUpdatesTips and guidelinesHow to contributeDeveloper DocsCode ReferenceCoding StandardsBlock EditorCommon APIsThemesPluginsREST APIWP-CLI \n\n\n\n\n\n\n\nHow webpack and WordPress packages interact\nApril 25, 2023\n\nBy\nRyan Welcher\nin\nAdvanced, Block development, Concepts, Plugins\n\n\n\n\n\n\n\n\n\nFor your users, working with blocks makes everything look easy on the front end. But behind the scenes, your life will get a lot easier\u2014for real\u2014the better you understand and use the build process that turns your React and JSX into plain JavaScript that any browser can read.\nIn front-end development, the concept of a transpiler is not new. (That\u2019s a program that translates a source code from one language to another.) You\u2019ve probably heard of SASS and CoffeeScript; their output has to go through a transpiler before the browser can present it. \nWe can can use a transpiler to lighten our load of tedious, repetitive tasks, like browser prefixing. Plugins like Babel and PostCSS let us concentrate on our code, and what it does, and the plugins add the prefixes and whatever else our code needs to work in every browser.\u00a0\nBeyond transpilers, there are also bundlers\u2014and lots of them!\u2014to manage build processes. Tools like Grunt and Bower were among the first and are now almost ten years old. For the most part, the web has moved on to more modern tools, like  webpack, Vite, and more.\nWordPress uses webpack\nFor its build process, WordPress uses webpack. You\u2019ll find it in the @wordpress/scripts package, which gets output alongside the blocks that come from the @wordpress/create-block package. \nA fun fact: that\u2019s the very package the Gutenberg project uses to build the Gutenberg plugin! \nThe intention of that package is to configure webpack for you, so you can hit the ground running with your project. Because configuring webpack yourself can be notoriously difficult.\n\n\nImports that \u201cdon\u2019t exist\u201d\nIf you come from a JavaScript background, you have likely worked with packages before. You start by installing the packages with npm install, then you import items from those packages to use in your project.\u00a0\nYou will also be familiar with how importing items from packages affects the size of your bundle (the JavaScript file that webpack outputs). Typically, the more you import, the bigger the file gets, and you address the issue with techniques like code splitting and tree shaking.\nWhen you\u2019re working with WordPress packages, you may have noticed two things: \n\nYou never install the packages using npm install.\u00a0 \nNo matter how many items you import from @wordpress/* packages, the bundle size doesn\u2019t change much, if at all.\n\nHas WordPress found a way to work with JavaScript that requires no imports and doesn\u2019t increase bundle size no matter how many things you import?\nThe short answer is: Yes. But only for packages that ship with WordPress. Because  WordPress automatically enqueues and adds these packages to a global wp object.\n\nBecause these packages are already available, it makes much more sense to use those instead of rebundling them with your custom scripts\u2014and that\u2019s exactly what is happening behind the scenes.\nFor example, this code snippet generates a very simple Button component, imported from the @wordpress/components package.\nimport { Button } from '@wordpress/components';\n\nconst MyComponent = () => {\n\u00a0\u00a0\u00a0return <Button>{__('Click me!')}</Button>;\n}\nexport default MyComponent;\nIf you take a look at the file webpack transpiles this into, you will see some lines that look like this. This is webpack exporting some paths to packages of items we\u2019re using on the wp global\n/***/ \"@wordpress/components\":\n\n/*!************************************!*\\\n\n\u00a0!*** external [\"wp\",\"components\"] ***!\n\n\u00a0\\************************************/\n\n/***/ ((module) => {\n\nmodule.exports = window[\"wp\"][\"components\"];\n\n/***/ }),\n\n/***/ \"@wordpress/element\":\n\n/*!*********************************!*\\\n\n\u00a0!*** external [\"wp\",\"element\"] ***!\n\n\u00a0\\*********************************/\n\n/***/ ((module) => {\n\nmodule.exports = window[\"wp\"][\"element\"];\nThen, later in the file, we have this. It is pretty terse, but this is webpack creating variables that refer to the exports it defined above. Those variables contain all of the contents of that package.\nvar _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ \"@wordpress/element\");\n\nvar _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);\n\nvar _wordpress_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wordpress/components */ \"@wordpress/components\");\n\nvar _wordpress_components__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_wordpress_components__WEBPACK_IMPORTED_MODULE_1__);\nFinally, the actual component references those variables to retrieve the items you need.\nconst MyComponent = () => {\n     return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_components__WEBPACK_IMPORTED_MODULE_1__.Button, null, \"'Click me!\");\n};\n\nconst __WEBPACK_DEFAULT_EXPORT__ = (MyComponent);\nThere is a lot going on here, so if you\u2019re overwhelmed at this point, don\u2019t worry. You don\u2019t actually need to read (or understand) this file.\nIf you simplify the code to replace the variables with the actual paths, it looks something like this. And it gets a lot easier to see what is going on!\nconst MyComponent = () => {\n return (0,wp.element.createElement)(wp.components.Button, null, \"'Click me!\");\n};\n\nconst __WEBPACK_DEFAULT_EXPORT__ = (MyComponent);\nAs you can see, your code has changed: it looks at the wp global instead of the packages being imported.\nYou may have noticed that in the example above wp.element.createElement is used, but in the myComponent example, there is no reference to it at all. This function is being added by the build process.It is part of React, and it creates React components without using JSX. See the official documentation for more details.\nSo the big question is: how does Webpack do this?\n\n\nDependencyExtractionWebPackPlugin\nAs part of the webpack configuration you get in the @wordpress/scripts package, there is a custom webpack plugin called the DependencyExtractionWebPackPlugin, and it does two very important things to make all of this work:\n\nConvert the Imports\nAutomate dependency management\n\nJob One: convert the imports\nIts first job is to detect any import statements that start with wordpress (and some others) and make them access the wp global instead.\nEssentially, it turns this code\nimport { Button } from '@wordpress/components';\nInto this:\nconst { Button } = wp.components;\nAny third-party packages that are installed in your project are not converted and will still increase the bundle size.\nJob Two: Automate the dependency management\nWhen you enqueue a script in WordPress, typically you need to define an array of dependencies that will load before your script. \nBut when you\u2019re using the  webpack workflow in this post, that\u2019s Job Two of the DependencyExtractionWebPackPlugin. \nIt will generate a PHP file called index.asset.php that lists the dependencies it just converted from the import statements. Then it will version each one, based on the last time the file was built.\n<?php return array('dependencies' => array('wp-components', 'wp-element'), 'version' => '1d75a9e186898f1d6300');\nindex.asset.php is the default name but it is derived from the name of the entry point name as defined in webpack. If we defined the entry point name as test, the emitted file would be called test.asset.php. This is only important if you are extending the webpack configuration.\nIf you\u2019re building blocks, the block registration process automatically loads this file. But if you wanted to use it in your code, you could do something like the following\nadd_action( 'enqueue_block_editor_assets', 'enqueue_my_file' );\n\nfunction enqueue_my_file() {\n\t// Find the path.\n\t$dependencies_file_path = plugin_dir_path( __FILE__ ) . 'build/index.asset.php';\n\t// If the file exists, enqueue it.\n\tif ( file_exists( $dependencies_file_path ) ) {\n\t\t$dependencies = require $dependencies_file_path;\n\t\twp_enqueue_script(\n\t\t\t'my-script',\n\t\t\tplugin_dir_url( __FILE__ ) . 'build/index.js',\n\t\t\t$dependencies['dependencies'],\n\t\t\t$dependencies['version']\n\t\t);\n\t}\n}\nThis file is extremely handy. Once you reference it, you never have to worry about updating your dependencies again!\n\n\nBypassing the build process\nYou may be wondering, why would I need this? All it does is convert the code to something I can just as easily write myself.\nWell, the simple answer is, you don\u2019t. You can bypass the build process altogether and write standard JavaScript; it will work fine.\nFor example:\nconst MyComponent = function () {\n   return wp.element.createElement( wp.components.Button, null, \"'Click me!\" );\n}\nThis code is perfectly valid, and there are many examples available in the Gutenberg Examples repository that don\u2019t use the build process at all.\n\n\nBenefits of using a build process\nAgain, you don\u2019t really have to use the build process. It\u2019s entirely optional.\nBut look what you get from the build process:\n\nAutomatic block detection\nAutomated dependency management\nUse of JSX\nImport syntax\nStatic code analysis\nAvailable commands\n\nAll at no extra charge! (Just kidding \u2026 ) But take a look at why you might want these benefits.\nAutomatic block detection\nIf you are building custom blocks, the build process can automatically detect and build any blocks that get added to your project.\nAutomated dependency management\nWe\u2019ve already discussed automatic dependency management, but here\u2019s the thing: if you don\u2019t use the build process for a custom block, you still need to create the index.asset.php file. It\u2019s required for block registration. And then you get to update the dependencies manually.\nSo as they say on those cheesy police shows: you can do it the hard way, or you can do it the easy way.\nYou can use JSX\nWhen you use the build process, you can use JSX syntax. That\u2019s a syntax extension for JavaScript a lot of developers use with React.js, which is the framework Gutenberg is built on. Its syntax looks a lot like HTML, which makes it easier to read (and easier to maintain!) than vanilla JS.\nJSX\nreturn (\n   <p { ...useBlockProps() }>\n       { __(\n           'My First Block \u2013 hello from the editor!',\n           'my-first-block'\n       ) }\n   </p>\n);\nVanilla JavaScript\nreturn el(\n   'p',\n   useBlockProps(),\n   __( 'My First Block \u2013 hello from the editor!', 'my-first-block' )\n);\nImport syntax\nLeveraging the build process lets you use JavaScript modules to import and export files and components. Which makes your code easier to organize and much easier to reuse.\nStatic code analysis\nThe build process gives you lots of tools that check your code\u2019s formatting and fix linting issues. Automatically.\nAnd more\nAnd the benefits above are just the beginning. There are a lot more commands and other tools that can make your life easier and your projects better. Check it all out in the official documentation for the @wordpress/scripts package\n{\n   \"scripts\": {\n       \"build\": \"wp-scripts build\",\n       \"check-engines\": \"wp-scripts check-engines\",\n       \"check-licenses\": \"wp-scripts check-licenses\",\n       \"format\": \"wp-scripts format\",\n       \"lint:css\": \"wp-scripts lint-style\",\n       \"lint:js\": \"wp-scripts lint-js\",\n       \"lint:md:docs\": \"wp-scripts lint-md-docs\",\n       \"lint:md:js\": \"wp-scripts lint-md-js\",\n       \"lint:pkg-json\": \"wp-scripts lint-pkg-json\",\n       \"packages-update\": \"wp-scripts packages-update\",\n       \"plugin-zip\": \"wp-scripts plugin-zip\",\n       \"start\": \"wp-scripts start\",\n       \"test:e2e\": \"wp-scripts test-e2e\",\n       \"test:unit\": \"wp-scripts test-unit-js\"\n   }\n}\n\n\n\nCustomizing the Webpack configuration\nAs the official documentation points out, you can customize webpack to your needs. How? Add a webpack.config.js, then extend the default configuration. We could spend the next week going into all the ways you can extend the configuration, but we\u2019d be way beyond the scope of this article. Suffice it to say there\u2019s a lot to unpack in the webpack documentation.\nBut there is one common case that\u2019s worth covering here.\nWhat if you want to create custom blocks in your project, but you also need to generate a separate file for another use case? For example, what if you want to generate SlotFills? \nTo get started, you need to add a new entry point.\n// Import the original config from the @wordpress/scripts package.\nconst defaultConfig = require( '@wordpress/scripts/config/webpack.config' );\n\n\n// Import the helper to find and generate the entry points in the src directory\nconst { getWebpackEntryPoints } = require( '@wordpress/scripts/utils/config' );\n\n\n// Add a new entry point by extending the Webpack config.\nmodule.exports = {\n   ...defaultConfig,\n   entry: {\n       ...getWebpackEntryPoints(),\n       custom: './path/to/index.js',\n   },\n};\n\nThe caveat here is that you also want to maintain the functionality that detects and builds blocks dynamically\u2014normally handled with the getWebpackEntryPoints function.\n\nThank you to @bph, @greenshady, and @marybaum for reviewing this post.\n\n\n\nTags: \nBlock development, Extenders, Learning\n\n\n\n4 responses to \u201cHow webpack and WordPress packages interact\u201d\n\n\n\nJuan Pablo Mu\u00f1oz Upegui\nApril 26, 2023\n\nHi, thanks for post. I just have a question. How can I add to \u201cnpm run build\u201d a folder with assets?\nThanks\n\nReply\n\n\n\n\nRyan Welcher\nApril 27, 2023\n\nI\u2019d need more information on what you are trying to do here but currently you can refer to assets (such as fonts and images) in your code and the wordpress/scripts will build them for you.\nSee the Advanced Usage section here \u2013 https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/#using-fonts-and-images\n\nReply\n\n\n\n\nJohn\nApril 27, 2023\n\nGreat article. I have a question. What rule must be in the webpack.config.js file so that I can compile any separate custom.scss file? For example, the custom.scss file is located in /plugin-path/_src/sass/custom.scss and I want it to be compiled to /plugin-path/assets/css/custom.css\n\nReply\n\n\n\n\nDovid Levine\nApril 28, 2023\n\nGreat article!\nIf the scripts are just proxy\u2019s for WordPress\u2019s built in bundles, how can I make sure the script versions I\u2019m using are compatible with a range of WP versions?\nIs there a way to target a minimum WP version (like WPCompatibility does for phpcs?)\n\nReply\n\n\n\nLeave a Reply Cancel replyYour email address will not be published. Required fields are marked *Comment * Name * \nEmail * \nWebsite \n Save my name, email, and website in this browser for the next time I comment.\n Notify me of follow-up comments by email. Notify me of new posts by email. \n\n\u0394 \n\n\n\n\n\n\n\n\n\nRelease Dev Notes\nRequests library upgraded to 2.0.5 in WordPress 6.2March 8, 2023 by Colin StewartPatterns API expanded to include template_types propertyMarch 7, 2023 by Jorge CostaIntroduction of Block Inspector TabsMarch 7, 2023 by Aaron RobertshawShadows in Global Styles with WordPress 6.2March 7, 2023 by Ben DwyerIntroducing the HTML API in WordPress 6.2March 7, 2023 by Birgit Pauli-Haack\nView all Dev Notes from the latest WordPress version \n\n\nLearn WordPress for Developers\nOn Learn WordPress you find courses, workshops and video tutorials. \nIntroduction to Block Development: Build your first custom block\nUsing the WordPress Data Layer\nDevelopers Guide to Block Themes (Part 1)\nA Developers Guide to Block Themes  (Part 2)\nSee also the  calendar of online workshops. You\u2019ll find events for developers are happening every week.\nSubscribe to the Developer Blog\n\n\n\n\n\n\n\t\t\t\t\t\t\tEmail Address\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\tSubscribe\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\tJoin 528 other subscribers\t\t\t\t\t\n\n\n\n\n\n\n\n\nAboutNewsHostingDonateSwag\nDocumentationDevelopersGet InvolvedLearn\nShowcasePluginsThemesPatterns\nWordCampWordPress.TVBuddyPressbbPress\nWordPress.comMattPrivacyPublic Code\n\n\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\nWordPress.org\n\n\n\n \n\n\n\nVisit our Facebook page\nVisit our Twitter account\nVisit our Instagram account\nVisit our LinkedIn account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "links": [
        "https://wordpress.org/",
        "https://wordpress.org/news/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/mobile/",
        "https://wordpress.org/hosting/",
        "https://openverse.org/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://wordpress.org/support/forums/",
        "https://developer.wordpress.org/",
        "https://wordpress.tv/",
        "https://make.wordpress.org/",
        "https://make.wordpress.org/",
        "https://wordpress.org/photos/",
        "https://wordpress.org/five-for-the-future/",
        "https://central.wordcamp.org/",
        "https://www.meetup.com/pro/wordpress/",
        "https://jobs.wordpress.net/",
        "https://wordpress.org/about/",
        "https://wordpress.org/about/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/enterprise/",
        "https://wordpress.org/gutenberg/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://developer.wordpress.org/news",
        "/news",
        "https://developer.wordpress.org/news/category/themes/",
        "https://developer.wordpress.org/news/category/plugins",
        "https://developer.wordpress.org/news/category/block-development/",
        "https://developer.wordpress.org/news/category/learning/",
        "https://developer.wordpress.org/news/category/beginners/",
        "https://developer.wordpress.org/news/category/advanced/",
        "https://developer.wordpress.org/news/category/concepts/",
        "https://developer.wordpress.org/news/about/",
        "https://developer.wordpress.org/news/category/updates/",
        "https://developer.wordpress.org/news/tips-and-guidelines-for-writers/",
        "https://developer.wordpress.org/news/how-to-contribute/",
        "https://developer.wordpress.org/reference/",
        "https://developer.wordpress.org/coding-standards/",
        "https://developer.wordpress.org/block-editor/",
        "https://developer.wordpress.org/apis/",
        "https://developer.wordpress.org/themes/",
        "https://developer.wordpress.org/plugins/",
        "https://developer.wordpress.org/rest-api/",
        "https://developer.wordpress.org/cli/commands/",
        "https://developer.wordpress.org/news/category/advanced/",
        "https://developer.wordpress.org/news/category/block-development/",
        "https://developer.wordpress.org/news/category/concepts/",
        "https://developer.wordpress.org/news/category/plugins/",
        "https://babeljs.io/",
        "https://postcss.org/",
        "https://gruntjs.com/",
        "https://bower.io/",
        "https://webpack.js.org/",
        "https://vitejs.dev/",
        "https://webpack.js.org/guides/code-splitting/",
        "https://webpack.js.org/guides/tree-shaking/",
        "https://react.dev/reference/react/createElement",
        "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-element/#createelement",
        "https://webpack.js.org/plugins/",
        "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dependency-extraction-webpack-plugin/",
        "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dependency-extraction-webpack-plugin/#webpack",
        "https://developer.wordpress.org/reference/functions/wp_enqueue_script/#parameters",
        "https://webpack.js.org/concepts/entry-points/",
        "https://github.com/WordPress/gutenberg-examples/tree/trunk/blocks-non-jsx",
        "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/#automatic-block-json-detection-and-the-source-code-directory",
        "https://reactjs.org/docs/introducing-jsx.html",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",
        "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/",
        "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/#provide-your-own-webpack-config",
        "https://webpack.js.org/concepts/#entry",
        "https://github.com/WordPress/gutenberg/blob/trunk/packages/scripts/utils/config.js#L191",
        "https://profiles.wordpress.org/bph/",
        "https://profiles.wordpress.org/greenshady/",
        "https://profiles.wordpress.org/marybaum/",
        "https://developer.wordpress.org/news/tag/block-development/",
        "https://developer.wordpress.org/news/tag/extenders/",
        "https://developer.wordpress.org/news/tag/learning/",
        "https://developer.wordpress.org/news/2023/04/how-webpack-and-wordpress-packages-interact/#comment-265",
        "https://developer.wordpress.org/news/2023/04/how-webpack-and-wordpress-packages-interact/?replytocom=265#respond",
        "https://profiles.wordpress.org/welcher/",
        "https://developer.wordpress.org/news/2023/04/how-webpack-and-wordpress-packages-interact/#comment-267",
        "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/#using-fonts-and-images",
        "https://developer.wordpress.org/news/2023/04/how-webpack-and-wordpress-packages-interact/?replytocom=267#respond",
        "https://developer.wordpress.org/news/2023/04/how-webpack-and-wordpress-packages-interact/#comment-269",
        "https://developer.wordpress.org/news/2023/04/how-webpack-and-wordpress-packages-interact/?replytocom=269#respond",
        "https://profiles.wordpress.org/justlevine/",
        "https://developer.wordpress.org/news/2023/04/how-webpack-and-wordpress-packages-interact/#comment-270",
        "https://developer.wordpress.org/news/2023/04/how-webpack-and-wordpress-packages-interact/?replytocom=270#respond",
        "/news/2023/04/how-webpack-and-wordpress-packages-interact/#respond",
        "https://make.wordpress.org/core/2023/03/08/requests-library-upgraded-to-2-0-5-in-wordpress-6-2/",
        "https://make.wordpress.org/core/2023/03/07/patterns-api-expanded-to-include-template_types-property/",
        "https://make.wordpress.org/core/2023/03/07/introduction-of-block-inspector-tabs/",
        "https://make.wordpress.org/core/2023/03/07/shadows-in-global-styles-with-wordpress-6-2/",
        "https://make.wordpress.org/core/2023/03/07/introducing-the-html-api-in-wordpress-6-2/",
        "https://make.wordpress.org/core/tag/dev-notes/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/course/introduction-to-block-development-build-your-first-custom-block/",
        "https://learn.wordpress.org/course/using-the-wordpress-data-layer/",
        "https://learn.wordpress.org/course/a-developers-guide-to-block-themes-part-1/",
        "https://learn.wordpress.org/course/a-developers-guide-to-block-themes-part-2/",
        "https://learn.wordpress.org/online-workshops/",
        "https://wordpress.org/about/",
        "https://wordpress.org/news/",
        "https://wordpress.org/hosting/",
        "https://wordpressfoundation.org/donate/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://developer.wordpress.org/",
        "https://make.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://central.wordcamp.org/",
        "https://wordpress.tv/",
        "https://buddypress.org/",
        "https://bbpress.org/",
        "https://wordpress.com/?ref=wporg-footer",
        "https://ma.tt/",
        "https://wordpress.org/about/privacy/",
        "https://publiccode.eu/",
        "https://wordpress.org/",
        "https://wordpress.org/",
        "https://www.facebook.com/WordPress/",
        "https://twitter.com/WordPress",
        "https://www.instagram.com/wordpress/",
        "https://www.linkedin.com/company/wordpress"
    ]
}