{
    "title": "Intrinsic design, theming, and rethinking how to design with WordPress \u2013 WordPress Developer Blog",
    "body": "\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\n\n\n\nNewsDownload & ExtendGet WordPressThemesPatternsPluginsMobileHostingOpenverse \u2197\ufe0eLearnLearn WordPressDocumentationForumsDevelopersWordPress.tv \u2197\ufe0eCommunityMake WordPressPhoto DirectoryFive for the FutureWordCamp \u2197\ufe0eMeetups \u2197\ufe0eJob Board \u2197\ufe0eAboutAbout WordPressShowcaseEnterpriseGutenberg \u2197\ufe0eWordPress Swag Store \u2197\ufe0eGet WordPress\n\n\n\n\n\n\n\n\n\n\n\nSearch in WordPress.org\n\n\n\n\n\n\n\n\n\n\t\tGet WordPress\t\n\n\n\nWordPress Developer Blog\n\n\n\n\n\n\nHomeThemesPluginsBlock developmentLearningBeginnersAdvancedConceptsAboutUpdatesTips and guidelinesHow to contributeDeveloper DocsCode ReferenceCoding StandardsBlock EditorCommon APIsThemesPluginsREST APIWP-CLI \n\n\n\n\n\n\n\nIntrinsic design, theming, and rethinking how to design with WordPress\nFebruary 23, 2023\n\nBy\nJustin Tadlock\nin\nConcepts, Themes\n\n\n\n\n\n\n\n\n\nOne of the oft-repeated questions in developer circles who have closely followed WordPress\u2019 revolution via the Gutenberg project has been:\u00a0When are we going to get more responsive controls? Specifically, this question is often framed around the ability to change some design element of a block based on desktop, tablet, or mobile views.\nThis is an important question to ask. Designers have been having similar discussions for decades at this point. If you\u2019ve been around long enough, you\u2019ve likely built a few perfectly-aligned sites with tables, lived through the frustrating era of floats, and have finally come to grips with the power of flexbox and grid layouts. It\u2019s a constantly shifting discipline.\u00a0\nFor the last decade or so, most web designers have learned to utilize the power of media queries based on the viewer\u2019s screen size. Web design needed to adjust to handle a rapidly-changing world where site visitors were suddenly carrying around computers in the palm of their hands or reading from the comfort of their big-screen TV in the living room. However, this proliferation of varying devices created a new problem: there are no truly standard sizes (best educated guesses, but not standards), and even if there were, it could all change tomorrow. Media queries were a good stop-gap solution, but overuse of them can also bloat a site\u2019s CSS.\nTherefore, design needed to continue evolving into something that could handle the ever-changing web. That\u2019s where intrinsic design comes in.\nWhat is intrinsic design?\nThe Merriam-Webster dictionary defines intrinsic as \u201cbelonging to the essential nature or constitution of a thing.\u201d That begs the question: What is the \u201cessential nature\u201d of the web?\nPart of the web\u2019s nature is that it is constantly changing. Unlike print design where you know exactly the width and height of every page and can perfectly align everything without worrying about elements shifting, the web is a fluid medium. It always has been, and intrinsic design seeks to solve problems based on this simple truth.\nModern-day fluid typography is one of the foundational examples of this idea in action.\u00a0 Imagine that you wanted your h1 headings for a design to be 64px. In the early days of web design you were likely viewing this on an 800-pixel monitor and used the following CSS to handle that:\nh1 {\n\tfont-size: 64px;\n}\nIn responsive web design based on media queries, you likely realized that 64px doesn\u2019t look great on all devices. Maybe you added a media query to change it based on the device viewport, as shown in the following CSS snippet:\nh1 {\n\tfont-size: 48px;\n}\n\n@media screen and ( min-width: 767px ) {\n\th1 {\n\t\tfont-size: 64px;\n\t}\n}\nThis could quickly balloon to multiple media queries based on the number of viewport sizes you needed to target. Plus, it doesn\u2019t really solve the problem of designing based on the nature of the web.\nFollowing an intrinsic design method would mean to approach the problem in a way that it doesn\u2019t matter what size the viewport is. The heading\u2019s size can contract and expand regardless. With features such as viewport units and clamp(), this is very much possible in modern CSS, as shown in the following snippet:\nh1 {\n\tfont-size: clamp( 2.25rem, 6vw, 3rem );\n}\nThis is an overly simplistic example of a wide-ranging topic, but the goal is to get theme authors to continually rethink and reevaluate the best solutions for solving problems with the tools at their disposal.\nIt also doesn\u2019t mean that media queries and, potentially, container queries are not crucial elements in the designer\u2019s toolbox. There are scenarios in which it will make sense to continue using them. However, they do not always need to be the only tools you use.\nIn essence, intrinsic design ensures that an individual item knows how to lay itself out, regardless where it\u2019s used on a page.\nWhat does intrinsic design mean to WordPress?\nWith the introduction of the block editor in WordPress 5.0 and, particularly, the launch of block theming in 5.8, the landscape of designing on top of WordPress changed. The ultimate goal of building sites from within the UI was becoming more and more of a reality. For the health of the WordPress project, this meant making some tough decisions about not jumping head first into adding every possible CSS property as an option in the interface.\nIt quickly became apparent that a slower and more methodical approach was necessary to keep the UI from creating a UX nightmare. Each new design tool could result in years of technical debt.\nIn addition, users can insert blocks and block patterns literally anywhere. There is no way for the theme to know in which context they are used and account for all use cases. Are the blocks in a content area with a sidebar? Is the layout full-width, wide, or constrained? Does it follow flow or flex layout? There are too many scenarios to tackle this using media queries at the block level.\nThe reality is that design still needs to account for fluidity in screen sizes. WordPress needed to face this problem using modern techniques while keeping a check on UI bloat.In a Gutenberg ticket titled Responsive blocks & intrinsic web design, Joen Asmussen presented some thinking behind this approach:\n\nUltimately the motivation isn\u2019t necessarily to rid ourselves of media queries entirely, but rather to explore the question: how much can a single block pattern do to be responsive out of the box? A welcome side-effect, potentially, is a vastly simplified UI for editing. Media- or container-queries could be seen as a progressive enhancement on built-in intrinsic behaviors.\n\nIt is not a problem that solves itself overnight. Instead, it is an iterative process where developers have seen the release of new tools and techniques over the last few major releases and can expect more to come.\nIt is also a mindset. Not only do core contributors need to think in these terms, the theming community must do the same. It must continue asking itself whether today\u2019s methods are the right ones for tomorrow.\nTools and techniques for theme authors\nAt the block level, theme authors do not have much control. While it\u2019s technically possible to write a lot of custom CSS to overrule what core WordPress is doing, it is often best to avoid that scenario. The next major update could wipe out much of your work.\u00a0\nThis is especially true with container/layout blocks, such as Group, Row, Stack, and Columns. In almost every scenario, the general rule of thumb should be to work with what WordPress provides. These blocks and their supported features are becoming more powerful with each new release.\nWhere theme authors have the most control is within theme.json by utilizing typography and spacing presets.\nFluid typography\nWordPress 6.1 introduced built-in support for fluid font sizes via theme.json. This feature allows theme developers to register custom sizes within a specified range to grow and shrink based on the screen size, and WordPress handles all of the complex calculations behind the scenes.\nTheme authors can set all sizes to fluid or enable/disable the feature for individual sizes. The following theme.json code is a redacted example from the Twenty Twenty-Three theme and shows three examples of how this can be set via the settings.typography.fontSizes property:\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"typography\": {\n\t\t\t\"fluid\": true,\n\t\t\t\"fontSizes\": [\n\t\t\t\t{\n\t\t\t\t\t\"fluid\": {\n\t\t\t\t\t\t\"min\": \"1rem\",\n\t\t\t\t\t\t\"max\": \"1.125rem\"\n\t\t\t\t\t},\n\t\t\t\t\t\"size\": \"1.125rem\",\n\t\t\t\t\t\"slug\": \"medium\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fluid\": {\n\t\t\t\t\t\t\"min\": \"1.75rem\",\n\t\t\t\t\t\t\"max\": \"1.875rem\"\n\t\t\t\t\t},\n\t\t\t\t\t\"size\": \"1.75rem\",\n\t\t\t\t\t\"slug\": \"large\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fluid\": false,\n\t\t\t\t\t\"size\": \"2.25rem\",\n\t\t\t\t\t\"slug\": \"x-large\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}\nFrom a user\u2019s viewpoint this will look like a normal selection of sizes in the UI:\n\nHowever, how large or small the font sizes appear is entirely dependent on the size of the screen. This is a huge win for creating typography that naturally flows with the device the reader is viewing on.\nFluid spacing\nWordPress doesn\u2019t include a fluid spacing system out of the box similar to font sizes. However, it provides theme developers with the freedom to build custom spacing presets, which means they can add any valid CSS values they choose, including using clamp() to create fluid margin, padding, and gap options.\nThe Twenty Twenty-Three theme serves as a solid example of how to implement fluid spacing presets via the settings.spacing.spacingSizes setting in theme.json. The following is a redacted example of the JSON code from the theme:\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"spacing\": {\n\t\t\t\"spacingScale\": {\n\t\t\t\t\"steps\": 0\n\t\t\t},\n\t\t\t\"spacingSizes\": [\n\t\t\t\t{\n\t\t\t\t\t\"size\": \"clamp(1.5rem, 5vw, 2rem)\",\n\t\t\t\t\t\"slug\": \"30\",\n\t\t\t\t\t\"name\": \"1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"size\": \"clamp(1.8rem, 1.8rem + ((1vw - 0.48rem) * 2.885), 3rem)\",\n\t\t\t\t\t\"slug\": \"40\",\n\t\t\t\t\t\"name\": \"2\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"size\": \"clamp(2.5rem, 8vw, 4.5rem)\",\n\t\t\t\t\t\"slug\": \"50\",\n\t\t\t\t\t\"name\": \"3\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}\nThere are several online tools for calculating the clamp() values and even formulas for doing it on your own, such as this clamp tutorial from Smashing Magazine.\nAdding custom presets works well by providing end-users a simple slider in the UI for adjusting margin, padding, and gap on blocks that support any of those options, as shown in the following screenshot:\n\nUsers do not have to worry about what these odd-looking values are. They simply work regardless of what screen size their visitors are viewing from.\nFor theme authors, this is a powerful method of integrating existing CSS features into the WordPress global styles system.\nProps to @colorful-tones for an early draft of this post and @annezazu, @mburridge, @matveb, and @bph for feedback and review.\n\n\n\nTags: \nblock themes, Extenders\n\n\n\n23 responses to \u201cIntrinsic design, theming, and rethinking how to design with WordPress\u201d\n\n\n\nJohn Hooks\nFebruary 23, 2023\n\nThank you for this article! I\u2019m new to WordPress development and been trying to immerse myself in the environment, and I\u2019ve heard the term \u201cIntrinsic Design\u201d used multiple times and needed help putting it in context in the world of WordPress.\n\nReply\n\n\n\n\nSimone Maranzana\nFebruary 23, 2023\n\nThe \u201cintrinsic\u201d approach is really powerful, but cannot be considered the only way to build a website.\nThe lack of a structured data for queries (both media and container) is an issue, that every developer of plugins (or themes) is forced to solve it in different ways, none of which are part of theme.json and the style engine.\n\nReply\n\n\n\n\nSam\nFebruary 23, 2023\n\nContainers are a growing issue for us, the inability to define a range of container sizes. Instead asking content writers to remember and define pixel values on a group block.\n\nReply\n\n\n\n\nCarolina Nymark\nFebruary 24, 2023\n\nYou can use group block variations with pre-set widths that your users can insert.\n\nReply\n\n\n\n\nSimone Maranzana\nFebruary 24, 2023\n\nBlock variations cannot be combined, so you can end up pretty soon with a ton of variations, we have experience this issue in a project last year, if you want to rely on the core functionality is really hard to make the things works fine for the end user.\n\nReply\n\n\n\n\nGreg Zi\u00f3\u0142kowski\nMarch 3, 2023\n\nI found an issue in the Gutenberg repository that proposes precisely that: https://github.com/WordPress/gutenberg/issues/14598. It was opened 4 years ago!\n\nReply\n\n\n\n\nJustin Tadlock\nMarch 3, 2023\n\nBlock variations and block style variations (block styles for short) are different things. The recommendation from Carolina above was to use the former, but the ticket is for the latter.\nBlock variations allow you to set the attributes for a block. This variation can be inserted like any other block. Block styles are essentially glorified HTML classes that can be applied to a block.\nWhile the ticket on block styles was opened four years ago, a solution to the existing problems with the proposal haven\u2019t been solved yet, primarily dealing with styles meant to be mutually exclusive. Joen Asmussen recently commented and left what would be a great starting point in approaching this problem to adding multiple classes.\n\n\n\n\n\n\nJustin Tadlock\nFebruary 24, 2023\n\nIt\u2019s long been on my wish list to have more than the current width-alignment settings. There\u2019s an open ticket that I both recommend following and noting your feedback/support on.\nVariations or patterns would be my current go-to solutions. But, if they are not flexible enough for a particular use case, I would add a custom control to the Group block sidebar for handling it (also, I\u2019m mentally noting that we need a good tutorial for appending custom controls).\n\nReply\n\n\n\n\nMarius\nFebruary 24, 2023\n\nThank you for bringing this topic up.\nThe block themes truly make things easier, but without the ability to add custom CSS in the block editor, it still limits creativity.\n\nReply\n\n\n\n\nBirgit Pauli-Haack\nFebruary 24, 2023\n\nHi Marius. Thanks for reading! As highlighted in our \u201cWhat\u2019s new for developers (February 2023)\u201d post, Custom CSS is coming to WordPress with the veresion 6.2, scheduled for March 28, 2023. You can already test it via the WordPress 6.2 Beta 3 version\n\nReply\n\n\n\n\ngyurmey\nFebruary 24, 2023\n\nThank you Birgit!\nI can\u2019t seem to find that information. I only see mention of custom CSS in Site Editor (not Post/Page Editor). Have I missed something?\n\nReply\n\n\n\n\nSimone Maranzana\nFebruary 24, 2023\n\nAny plans to add a syntax highlighter on the CSS editor? Because is really easy for a non tech-savvy user make mistakes, and the only \u201cwarning\u201d is a little red icon in the bottom right corner, almost invisible. A global CSS editor should be considered, because block themes doesn\u2019t support style.css file.\n\nReply\n\n\n\n\nJustin Tadlock\nFebruary 24, 2023\n\nI cannot say for sure about syntax highlighting, but I know there are plans for inline code completion and linting. I don\u2019t expect that until WordPress 6.3. The goal is at least parity with the \u201cAdditional CSS\u201d section in the customizer, and I expect to see syntax highlighting as a part of that.\nBlock themes do support style.css. Support for loading and using stylesheets should always be around.\n\nReply\n\n\n\n\nSimone Maranzana\nFebruary 24, 2023\n\nYou\u2019re right Justin, my bad, and thanks for the clarification about the syntax highlight.\nI mean that out of the box the Twenty Twenty Three theme doesn\u2019t load the style.css file (and in the theme.json mindset should not be used), so a non tech-savvy user is not able to paste even a simple CSS code (a generic one, not related to a specific block) without loading the file creating the functions.php file and enqueue it (not straightforward for someone that doesn\u2019t understand PHP).\nThe entire philosophy of the Site Editor (and block themes) is to provide a no-code tool, by encoding all the CSS rules in a theme.json file (so can be discouraged the use of a style.css file), but the \u201cresponsive\u201d behavior cannot be achieved only with an intrinsic approach and the lack of a structured data for the queries (media or container) is a big issue. \nEven with a \u201cintrinsic mindset\u201d the users still asks for a more specific and precise control over some basic components like the columns block, and on a project with a custom design is really easy to need that kind of control, and I don\u2019t think that is a good idea to write a media query in the CSS textarea of the block, is the kind of data that must be configured and shared globally.\n\n\n\n\n\n\nTommaso\nFebruary 24, 2023\n\nHey, thanks for sharing!\nI\u2019m not a developer so I wasn\u2019t aware of intrinsic design.\nI can write some CSS but I generally take the no-code approach.\nI think intrinsic design is very interesting, but as you said,it has some limitations.\nIn my websites and ecommerce stores, the header menu is designed differently on mobile and desktop:\non desktop the logo is small and on the left, with the menu on the right.\nOn mobile the logo is bigger and centered. The menu is off canvas.\nAnd sometimes I have certain parts of the page that are only shown on desktop and not on mobile, or that are completely different on mobile and desktop and this require building two different designs and showing each one of them depending on the viewport.\nThis is easily achievable with Elementor and with any other wordpress page builder, and it\u2019s even possible with Kadence Blocks, but unfortunately not with Gutenberg out of the box.\nAnd since Gutenberg is also designed for no-code users, I think this responsive controls are required: ultimately this is the end goal of wysiwyg tools: not write code.\nI personally think that FSE is not production ready until it has responsive controls.\n\nReply\n\n\n\n\nJustin Tadlock\nFebruary 24, 2023\n\nThank you for your feedback. It is great hearing from non-developers on how they are using WordPress too.\nThe goal is not for every piece to forever be stuck without any responsive controls. Intrinsic design is more about the foundation and making sure that every block can lay itself out naturally, regardless of where it\u2019s placed. The more coverage that we can get there, the more robust the design system will be in the long term.\nThen, especially after gathering feedback like yours, contributors can start filling in those gaps that are missing from the developer tools and user controls. Additional responsive controls will then be an enhancement on top of a more solid system.\nAlso, there\u2019s absolutely nothing wrong with using plugins to upgrade the default experience. The one thing that WordPress truly excels at is being extensible. I\u2019ve heard a lot of great things about Kadence Blocks.\n\nReply\n\n\n\n\nTommaso\nFebruary 24, 2023\n\nThanks for your reply.\nCorrect me if I\u2019m wrong, from what I understand it seems like Intrinsic design makes every block and element the right size and position regardless of the viewport size, so it should work fine for 90% of the times.\nThen, if you want something more specific, like in the case I described above with an element centered on mobile and aligned left on desktop, you need responsive controls.\nIs that correct?\nI think this is a valid approach, but unfortunately, especially in order to build websites and stores that have specific design requirements, responsive controls are needed.\nI agree that extensibility is a great thing for WordPress, however I think that standardizing the experience for very common use cases is also needed, otherwise if I have to install another plugin for such a basic requirement, I can go all in and use Elementor, Breakdance, Divi, etc and style the entire website.\n\nReply\n\n\n\n\nJustin Tadlock\nFebruary 24, 2023\n\nJust to make sure I\u2019m 100% clear, neither I nor the core devs are arguing that additional responsive controls are unnecessary. The approach is about exploring what modern features (including but not limited to the intrinsic design concept) can be used before dropping in a lot of new settings fields and making the user experience worse or creating technical debt. And, this is especially true while the site editor is still in this beta phase.\nOnce most of those options are exhausted, then progressively enhance the user interface with responsive controls as needed.\nThis is also the Developer Blog, so the goal is to start getting theme and plugin authors to think about solutions from different viewpoints. In time, my hope is for the entire development community to create better solutions for users. Maybe that includes responsive controls for every block; maybe it\u2019s something none of us have thought of yet.\n\nThen, if you want something more specific, like in the case I described above with an element centered on mobile and aligned left on desktop, you need responsive controls.\nIs that correct?\n\nIt might be the correct solution. There are some more modern techniques that could potentially handle the use case without additional responsive controls based on media queries. Without getting too far into the weeds of the specific scenario, there might be a flexbox-based solution for that. And, that\u2019s what this article is about\u2014getting developers to explore some of these other solutions.\nSo much more is possible in the world of CSS in the last few years compared to when media queries were introduced (about 12 years ago, I think). The hard part is figuring out how to best represent those solutions in the UI and to also do them in the most performant way possible on the front end.\nBelieve me, it\u2019s tough to wait around for those features/solutions to land when you just need to do something on your website now. I feel like I\u2019ve been there my entire career. That\u2019s why I\u2019m an advocate of using plugins to bridge the gap between what WordPress currently does and what you need. Plugins can explore and iterate on ideas much faster than WordPress, which is a good thing.\n\nReply\n\n\n\n\nAndrei Chira\nFebruary 24, 2023\n\nWe\u2019re always trying to educate, but it\u2019s terribly hard to get people to do things the WordPress way, and use the tools that WordPress provides out-of-the-box, not just as a skeleton on top of which to put a bloated buider.\n\nReply\n\n\n\n\nHuang\nFebruary 24, 2023\n\nCustom CSS for each individual block and on every post/page. This should be high priority.\n\nReply\n\n\n\n\nRob Glidden\nFebruary 25, 2023\n\nShort comment:\nIntrinsic design isn\u2019t the future of the modern Web platform, it is the present.  And has been so for a while.\nI\u2019d like WordPress to fully, not \u201cincrementally\u201d, embrace intrinsic design.  Grid block, Responsive block, and Flex block.\nI understand the perception that css grid is \u201chard to abstract\u201d in a UI.  To me the key is that \u201call abstractions leak\u201d, the architecture maxim says.  That\u2019s a good thing when its the modern Web.\nLonger comment:\n\u201cIntrinsic design\u201d was coined in 2018 \u2013 search for \u201cEverything You Know About Web Design Just Changed\u201d by Jen Simmons.\nJen meant the new design options enabled by the modern web features that were then just rolling out \u2014 particularly flexbox, grid and viewport units (horizontal and vertical). With media queries as a useful fallback.\nInterestingly, Gutenberg was architected circa 2017 \u2014 a transition era when the modern Web was already envisioned and standardized, but not yet fully deployed. So architects had to use transition \u201cbridges and hacks\u201d  like React, bundling, and an architecture philosophy of \u201cincrementalism\u201d.\nBut 2023 isn\u2019t 2017.  The modern Web is here. And even more intrinsic design-ish stuff in the pipeline.\nLet\u2019s say WordPress had a intrinsic design grid block and a responsive block:\nResponsive block.  You\u2019d put in different inner blocks for different viewport sizes as you saw fit.\nThere are already many blocks that show different inner blocks based on some logical condition \u2014 for example I wrote one to show different inner blocks depending on whether logged in or not.\nGrid block. A full-featured grid block is a challenging UI, because css-grid has many features. But same basic idea of different inner blocks in different grid areas.\nMy guess it will be very tempting to take the old-fashioned \u201cincrementalism\u201d approach and roll out a simplified grid block version.\nBut I for one think it would be better for WordPress to drop circa-2017 incrementalism.\nThe group, row, stack and nav blocks are fine as far as they go, and simplification abstractions have their place.\nBut wysiwyg is about the \u201cwhat you get\u201d part \u2014 i.e. the modern web. Not a Figma auto layout feature that evolves for years.\n\nReply\n\n\n\n\nlesley.pizza\nFebruary 27, 2023\n\nThanks for this Justin. It gave me a *great* foundation to understand all of this stuff. \nIt\u2019s especially useful given how much chatter there is about the lack of responsive controls. As someone who has griped a lot about this, it\u2019s great to:\n1. understand how everything is conceptualised/architected on a high level\n2. know that the lack of responsive controls is acknowledged by core devs and has not been ruled out.\nI also thought the comments here were really helpful as well as it gave additional perspective and helped me know what others in the community are thinking.\nI\u2019m so glad you\u2019re here writing about this stuff!\n\nReply\n\n\n\n\nMateus Machado Luna\nMarch 29, 2023\n\nI\u2019m 100% in for the responsive \u201cintrinsic\u201d solutions that we have so far. Both fluid font sizes and spacing are way better than setting spacing for separate devices (I\u2019ve been working with this in Elementor and it can be painful).\nThe greater argument for me is that designs should not be defined by devices, because as you pointed, we cannot see what is coming next (SmartTVs, SmartWatches???). I\u2019ve never being 100% satisfied with my layouts when in-between breakpoints like mobile-to-tablet. What about ladscape? What about high-res? What about freaking window tilings?? \nSo yes, that seems the way to go. That said, I think you guys already recognize that there are situations where we need a \u201cbreakpoint\u201d. I don\u2019t like to plan this breakpoints by container size, but mostly by content size. In my opinion, no matter how much we try to avoid, there are two scenarios that we are not covering\u2026\n1 \u2013 Overlays. They are part of UI/UX for decades and the very fact that Gutenberg already does this in the mobile menu shows that we need an official and configurable solution for this. How serious it is that we cannot define a breakpoint/condition to decide when the toggle menu should appear? I get that not every menu must be a collapsible panel, but haven\u2019t we accepted that sticky headings were a thing? If so, we do admit some things must be placed above others. If we have an official solution for this, those eager to build smartphone-ready UIs will take benefit and those that are OK with a more traditional layout will still take benefit.\n2 \u2013 Carousels. I\u2019m fine with them being available only via plugins because I understand how complex it is to add a Swiper.js dependency. But to be honest, for any UI with large lists of contents, it is so meaningful to have a simple horizontal-scroll list instead of breaking columns into rows\u2026 We may not have fancy arrows and transition animations, but we could be using them to overflow content that we do not want to be squeezed in a column. And maybe, using a bit of \u201cscrol-snap\u201d magic, the experience could be improved without needing layers of Javascript.\nJust a few considerations. Hope we can evolve on this topic.\n\nReply\n\n\n\nLeave a Reply Cancel replyYour email address will not be published. Required fields are marked *Comment * Name * \nEmail * \nWebsite \n Save my name, email, and website in this browser for the next time I comment.\n Notify me of follow-up comments by email. Notify me of new posts by email. \n\n\u0394 \n\n\n\n\n\n\n\n\n\nRelease Dev Notes\nRequests library upgraded to 2.0.5 in WordPress 6.2March 8, 2023 by Colin StewartPatterns API expanded to include template_types propertyMarch 7, 2023 by Jorge CostaIntroduction of Block Inspector TabsMarch 7, 2023 by Aaron RobertshawShadows in Global Styles with WordPress 6.2March 7, 2023 by Ben DwyerIntroducing the HTML API in WordPress 6.2March 7, 2023 by Birgit Pauli-Haack\nView all Dev Notes from the latest WordPress version \n\n\nLearn WordPress for Developers\nOn Learn WordPress you find courses, workshops and video tutorials. \nIntroduction to Block Development: Build your first custom block\nUsing the WordPress Data Layer\nDevelopers Guide to Block Themes (Part 1)\nA Developers Guide to Block Themes  (Part 2)\nSee also the  calendar of online workshops. You\u2019ll find events for developers are happening every week.\nSubscribe to the Developer Blog\n\n\n\n\n\n\n\t\t\t\t\t\t\tEmail Address\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\tSubscribe\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\tJoin 528 other subscribers\t\t\t\t\t\n\n\n\n\n\n\n\n\nAboutNewsHostingDonateSwag\nDocumentationDevelopersGet InvolvedLearn\nShowcasePluginsThemesPatterns\nWordCampWordPress.TVBuddyPressbbPress\nWordPress.comMattPrivacyPublic Code\n\n\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\nWordPress.org\n\n\n\n \n\n\n\nVisit our Facebook page\nVisit our Twitter account\nVisit our Instagram account\nVisit our LinkedIn account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "links": [
        "https://wordpress.org/",
        "https://wordpress.org/news/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/mobile/",
        "https://wordpress.org/hosting/",
        "https://openverse.org/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://wordpress.org/support/forums/",
        "https://developer.wordpress.org/",
        "https://wordpress.tv/",
        "https://make.wordpress.org/",
        "https://make.wordpress.org/",
        "https://wordpress.org/photos/",
        "https://wordpress.org/five-for-the-future/",
        "https://central.wordcamp.org/",
        "https://www.meetup.com/pro/wordpress/",
        "https://jobs.wordpress.net/",
        "https://wordpress.org/about/",
        "https://wordpress.org/about/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/enterprise/",
        "https://wordpress.org/gutenberg/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://developer.wordpress.org/news",
        "/news",
        "https://developer.wordpress.org/news/category/themes/",
        "https://developer.wordpress.org/news/category/plugins",
        "https://developer.wordpress.org/news/category/block-development/",
        "https://developer.wordpress.org/news/category/learning/",
        "https://developer.wordpress.org/news/category/beginners/",
        "https://developer.wordpress.org/news/category/advanced/",
        "https://developer.wordpress.org/news/category/concepts/",
        "https://developer.wordpress.org/news/about/",
        "https://developer.wordpress.org/news/category/updates/",
        "https://developer.wordpress.org/news/tips-and-guidelines-for-writers/",
        "https://developer.wordpress.org/news/how-to-contribute/",
        "https://developer.wordpress.org/reference/",
        "https://developer.wordpress.org/coding-standards/",
        "https://developer.wordpress.org/block-editor/",
        "https://developer.wordpress.org/apis/",
        "https://developer.wordpress.org/themes/",
        "https://developer.wordpress.org/plugins/",
        "https://developer.wordpress.org/rest-api/",
        "https://developer.wordpress.org/cli/commands/",
        "https://developer.wordpress.org/news/category/concepts/",
        "https://developer.wordpress.org/news/category/themes/",
        "https://github.com/WordPress/gutenberg/issues/34641",
        "https://make.wordpress.org/core/2022/09/26/core-editor-improvement-catalyst-for-creativity/",
        "https://make.wordpress.org/core/2022/10/03/fluid-font-sizes-in-wordpress-6-1/",
        "https://developer.wordpress.org/themes/advanced-topics/theme-json/#custom-spacing-sizes",
        "https://www.smashingmagazine.com/2022/10/fluid-typography-clamp-sass-functions/",
        "https://profiles.wordpress.org/colorful-tones/",
        "https://profiles.wordpress.org/annezazu/",
        "https://profiles.wordpress.org/mburridge/",
        "https://profiles.wordpress.org/matveb/",
        "https://profiles.wordpress.org/bph/",
        "https://developer.wordpress.org/news/tag/block-themes/",
        "https://developer.wordpress.org/news/tag/extenders/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-59",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=59#respond",
        "https://profiles.wordpress.org/simo_m/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-60",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=60#respond",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-61",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=61#respond",
        "https://profiles.wordpress.org/poena/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-63",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=63#respond",
        "https://profiles.wordpress.org/simo_m/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-69",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=69#respond",
        "https://profiles.wordpress.org/gziolo/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-88",
        "https://github.com/WordPress/gutenberg/issues/14598",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=88#respond",
        "https://profiles.wordpress.org/greenshady/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-89",
        "https://github.com/WordPress/gutenberg/issues/14598#issuecomment-1383769347",
        "https://profiles.wordpress.org/greenshady/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-71",
        "https://github.com/WordPress/gutenberg/issues/44653",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=71#respond",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-64",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=64#respond",
        "https://profiles.wordpress.org/bph/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-65",
        "https://developer.wordpress.org/news/2023/02/whats-new-for-developers-february-2023/#custom-css",
        "https://make.wordpress.org/core/2023/02/21/wordpress-6-2-beta-3/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=65#respond",
        "https://profiles.wordpress.org/gyurmey/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-66",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=66#respond",
        "https://profiles.wordpress.org/simo_m/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-68",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=68#respond",
        "https://profiles.wordpress.org/greenshady/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-72",
        "https://github.com/WordPress/gutenberg/issues/47945",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=72#respond",
        "https://profiles.wordpress.org/simo_m/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-75",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-67",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=67#respond",
        "https://profiles.wordpress.org/greenshady/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-73",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=73#respond",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-76",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=76#respond",
        "https://profiles.wordpress.org/greenshady/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-77",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=77#respond",
        "https://simplenet.ro",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-70",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=70#respond",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-74",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=74#respond",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-78",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=78#respond",
        "https://profiles.wordpress.org/lesleysim/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-79",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=79#respond",
        "https://profiles.wordpress.org/wetah/",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#comment-127",
        "https://developer.wordpress.org/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/?replytocom=127#respond",
        "/news/2023/02/intrinsic-design-theming-and-rethinking-how-to-design-with-wordpress/#respond",
        "https://make.wordpress.org/core/2023/03/08/requests-library-upgraded-to-2-0-5-in-wordpress-6-2/",
        "https://make.wordpress.org/core/2023/03/07/patterns-api-expanded-to-include-template_types-property/",
        "https://make.wordpress.org/core/2023/03/07/introduction-of-block-inspector-tabs/",
        "https://make.wordpress.org/core/2023/03/07/shadows-in-global-styles-with-wordpress-6-2/",
        "https://make.wordpress.org/core/2023/03/07/introducing-the-html-api-in-wordpress-6-2/",
        "https://make.wordpress.org/core/tag/dev-notes/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/course/introduction-to-block-development-build-your-first-custom-block/",
        "https://learn.wordpress.org/course/using-the-wordpress-data-layer/",
        "https://learn.wordpress.org/course/a-developers-guide-to-block-themes-part-1/",
        "https://learn.wordpress.org/course/a-developers-guide-to-block-themes-part-2/",
        "https://learn.wordpress.org/online-workshops/",
        "https://wordpress.org/about/",
        "https://wordpress.org/news/",
        "https://wordpress.org/hosting/",
        "https://wordpressfoundation.org/donate/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://developer.wordpress.org/",
        "https://make.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://central.wordcamp.org/",
        "https://wordpress.tv/",
        "https://buddypress.org/",
        "https://bbpress.org/",
        "https://wordpress.com/?ref=wporg-footer",
        "https://ma.tt/",
        "https://wordpress.org/about/privacy/",
        "https://publiccode.eu/",
        "https://wordpress.org/",
        "https://wordpress.org/",
        "https://www.facebook.com/WordPress/",
        "https://twitter.com/WordPress",
        "https://www.instagram.com/wordpress/",
        "https://www.linkedin.com/company/wordpress"
    ]
}