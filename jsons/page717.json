{
    "title": "The benefits of prioritizing and measuring performance in WordPress 6.2 \u2013 Make WordPress Core",
    "body": "\nSkip to content\n\n\nLog InRegister \n\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\n\n\n\nNewsDownload & ExtendGet WordPressThemesPatternsPluginsMobileHostingOpenverse \u2197\ufe0eLearnLearn WordPressDocumentationForumsDevelopersWordPress.tv \u2197\ufe0eCommunityMake WordPressPhoto DirectoryFive for the FutureWordCamp \u2197\ufe0eMeetups \u2197\ufe0eJob Board \u2197\ufe0eAboutAbout WordPressShowcaseEnterpriseGutenberg \u2197\ufe0eWordPress Swag Store \u2197\ufe0eGet WordPress\n\n\n\n\n\n\n\n\n\n\n\nSearch in WordPress.org\n\n\n\n\n\n\n\n\n\n\t\tGet WordPress\t\n\n\nMenu\n\nMake WordPress Core\n\n\nTickets\nComponents\nHandbook\nBrowse Source\nTrac Timeline\nCreate a New Ticket\n \n\n\n\nHide welcome box\n\n\n\n\nWelcome!\nThe WordPress coreCore Core is the set of software required to run WordPress. The Core Development Team builds WordPress. development team builds WordPress! Follow this site for\u00a0general updates, status reports, and the occasional code debate. There\u2019s lots of ways to contribute:\nFound a bugbug A bug is an error or unexpected result. Performance improvements, code optimization, and are considered enhancements, not defects. After feature freeze, only bugs are dealt with, with regressions (adverse changes from the previous version) being the highest priority.? Create a ticket in the bug tracker.\nWant to contribute? Get started quickly with tickets marked as good first bugs for new contributors or join a bug scrub. There\u2019s more on the reports page, like patches needing testing, and on feature projects page.\nOther questions? Here is a detailed handbook for contributors, complete with tutorials.\n\n\nCommunication\nCore uses Slack\u00a0for real-time communication. Contributors live all over the world, so there are discussions happening at all hours of the day.\nCore development meetings are every Wednesday at 20:00 UTC in the #core channel on Slack. Anyone can join and participate or listen in!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nFelix Arntz\n\n2:59 pm on April 25, 2023 \n\n\n\nTags: 6.2 ( 85 ), performance ( 192 ), retrospective ( 16 ) \u00a0\u00a0\n\t\t\t\t\n\nThe benefits of prioritizing and measuring performance in WordPress 6.2\n\n\nBased on lab benchmarks, WordPress 6.2 loads 14-18% faster overall for blockBlock Block is the abstract term used to describe units of markup that, composed together, form the content or layout of a webpage using the WordPress editor. The idea combines concepts of what in the past may have achieved with shortcodes, custom HTML, and embed discovery into a single consistent API and user experience. themes and 2-5% faster overall for classic themes (measured via Largest Contentful Paint / LCP). Particularly server-side performance (measured via Time to First Byte / TTFB) is seeing a major boost of 17-23% for block themes and 3-5% for classic themes, which directly contributes to the overall load time.\nThis post provides more information and a retrospective on how those performance wins were achieved in the WordPress 6.2 release cycle.\nLearning from previous WordPress coreCore Core is the set of software required to run WordPress. The Core Development Team builds WordPress. releases\nDuring the betaBeta A pre-release of software that is given out to a large group of users to trial under real conditions. Beta versions have gone through alpha testing in-house and are generally fairly close in look, feel and function to the final product; however, design changes often occur as part of the process./RCrelease candidate One of the final stages in the version release cycle, this version signals the potential to be a final release to the public. Also see alpha (beta). testing phase of WordPress 6.1 in November 2022, it became evident that a few notable performance regressions had made it into the release when compared to the performance of WordPress 6.0. While the single most impactful performance regressionregression A software bug that breaks or degrades something that previously worked. Regressions are often treated as critical bugs or blockers. Recent regressions may be given higher priorities. A \"3.6 regression\" would be a bug in 3.6 that worked as intended in 3.5. was addressed before the 6.1 stable release in one of its release candidates, overall performance still regressed slightly when using a block theme. Previous WordPress core releases, especially 6.0, saw more notable performance regressions. Despite other performance enhancements landing in those releases, the regressions effectively ended up canceling out the enhancements. In WordPress 6.2, this is significantly different, with all key metrics improving over the previous release, as highlighted in these performance benchmarks shared by @oandregal.\nFor WordPress 6.1, the regressions were discussed in a general assessment of WordPress 6.1 RC performance. Despite contributors from different core teams quickly prioritizing and investigating the issues, it was too late in the release cycle to address them all. This was a great learning experience: As much as we are working on performance enhancements, it is as important to continuously monitor performance of existing core features to avoid regressions. The more regressions there are, the less impactful any other performance enhancements are overall. While this seems logical and simple, it sometimes still takes an actual learning experience to get things right.\nIt is great to see that we have put these learnings into practice, and the performance wins in WordPress 6.2 demonstrate that. So what changed in the 6.2 release cycle?\nIncreased focus on performance measurement\nWhen trying to summarize how performance work changed between the 6.1 and the 6.2 cycle in a single word, an increased focus on measurement proved to be the deciding factor. The following elaborates on the nuance of that simplified statement.\nIdentifying performance bottlenecks and opportunities for improvement\nIt was clearly visible that contributors were keen to rectify the 6.1 regressions and learn from that prior release. This already surfaced in the WordPress 6.1.1 follow up release which contained a few performance-related fixes: 12 of 30 tickets fixed in that release were focused on performance.\nNumerous contributors from different core teams actively worked towards identifying and addressing performance bottlenecks, by both benchmarking and profiling WordPress core performance.\nProfiling WordPress core has been tremendously helpful in identifying performance issues on the server-side, which has led to the notably improved TTFB performance we are seeing in WordPress 6.2. Common tools used for server-side profiling among contributors have been the open sourceOpen Source Open Source denotes software for which the original source code is made freely available and may be redistributed and modified.  Open Source **must be** delivered via a licensing model, see GPL. tools Xdebug and XHProf and the SaaS tool Blackfire. Contributors have been starting to define and document standardized ways for using these tools, which are intended to be published in the Make Performance Handbook soon.\nFor benchmarking WordPress core on the other hand, there was less clarity or known tools that could be used as is. While contributors initially came up with individual tooling of their choice to measure performance, the different benchmarking approaches had varying degrees of accuracy and ease of use, so it soon became clear that a more consistent approach would be needed. This was one of the key topics discussed in the first performance focused hallway hangout in January. From there, several contributors started more coordinated efforts for measuring performance, for both manual benchmarks locally and automated benchmarks via continuous integration.\nThe Performance Lead role\nAnother change that was made for the WordPress 6.2 cycle which has been supporting everything I have mentioned so far is the introduction of a new Performance Lead role as part of the release squad. This came as a result of the aforementioned performance focused hallway hangout, and I ended up stepping into this role for the 6.2 release. This enabled me to closely collaborate and support the other contributors and coordinate with them our performance measurement approaches. As mentioned before, I would like to emphasize that the performance wins in this release are a result of excellent work from several contributors on identifying performance weaknesses. The introduction of the Performance Lead role then merely brought a better representation of performance alongside the other members of the release squad.\nI hope the role of the Performance Lead is here to stay, and I am excited to see additional contributors step into this role in the future.\nAssessing performance on individual WordPress core patches / pull requests\nAs mentioned before, profiling is the recommended approach to identify performance bottlenecks in WordPress core. However, once a pull request with a potential fix is implemented, it is also crucial to measure the actual performance impact and through that validate whether the outcome is as expected. While profiling gives us an idea about the potential performance impact, it comes with caveats such as the overhead of the profiling tools running on the WordPress site, and also that it only captures a single request, which as mentioned above is subject to a good degree of variance when it comes to performance.\nVarious contributors in the WordPress 6.2 cycle benchmarked performance on individual pull requests, whether to prove a positive impact or performance or ensure that no regression is introduced. Different tools were used to assess the impact, often CLICLI Command Line Interface. Terminal (Bash) in Mac, Command Prompt in Windows, or WP-CLI for WordPress. commands like \u201cbenchmark-server-timing\u201d or \u201cbenchmark-web-vitals\u201d. The \u201cbenchmark-server-timing\u201d command has been most helpful for individual PRs with server-side performance impact, for example it was used in the #57502 ticketticket Created for both bug reports and feature development on the bug tracker. (see this comment), which is possibly the largest single performance enhancementenhancement Enhancements are simple improvements to WordPress, such as the addition of a hook, a new feature, or an improvement to an existing feature. in the 6.2 release. The \u201cbenchmark-web-vitals\u201d command however has still been useful for a few situations where performance decisions came down to exclusively client-side performance, for example in the #56990 ticket (see this comment), which explores the classic-themes.css performance impact.\nLaunching an automated performance testing workflow\nIn the WordPress 6.2 cycle, most of these benchmarks were conducted manually, which sometimes is a necessity due to the nature of the pull request, but other times is rather inefficient. Furthermore, it would not be feasible to benchmark performance manually for every WordPress core change \u2013 and that is precisely how a performance regression may be merged unnoticed. Several contributors have been collaborating on introducing an automated performance measuring CI workflow to WordPress core, and a first MVPMinimum Viable Product \"A minimum viable product (MVP) is a product with just enough features to satisfy early customers, and to provide feedback for future product development.\" - WikiPedia was committed to WordPress core in [55459]. With this CI workflow, WordPress core performance metrics are now recorded for every single commit and are available in this dashboard. This allows us to easily spot a potential regression where previously it would have gone unnoticed. While at this point, there is still a sizable amount of variance in the data points and a limited number of metrics are available, the team will iterate in the coming weeks and months. This is only the starting point, and additional features like CWV support are already being planned. Needless to say, this is a major milestone and win for monitoring performance in WordPress core and will reduce some of the measuring workload already for the upcoming 6.3 cycle.\nAssessing performance of WordPress core holistically\nWhile assessing performance on every individual WordPress core change (pull request / commit) is very important to ensure continuous monitoring of performance and avoid regressions, it is also important to keep track of overall performance in WordPress core. This is particularly true during the Beta and RC stages of a release cycle.\nAt this point in particular, it is advisable to use the production ZIP version of WordPress core (e.g. a particular Beta or RC release) instead of measuring in the WordPress core development environment. The \u201cbenchmark-web-vitals\u201d command mentioned in the previous section is perfect for this use-case, as it provides high-level performance metrics that capture both server-side and client-side performance. The resulting data can then be compared with the same metrics from e.g. the previous stable release, to get an idea how performance of WordPress core has changed (hopefully improved!) in the new release. This approach is what the numbers I shared in the beginning of this post are based on.\nPerformance benchmarks for WordPress 6.2\nI would like to share a few more detailed numbers for the WordPress 6.2 performance improvements. Generally, I have been benchmarking two different scenarios, which showcase particularly the server-side performance enhancements (with #57502 contributing the most to them):\nHome page using a block theme (Twenty Twenty-Three) with the default content (\u201cHello World!\u201d post)\nHome page using a classic theme (Twenty Twenty-One) with the default content (\u201cHello World!\u201d post)\nSince WordPress 6.2 included one notable client-side performance enhancement that affects only sites using images (see #56930), I included two more scenarios to assess that impact too:\nHome page using a block theme (Twenty Twenty-Three) with the default content (\u201cHello World!\u201d post) and a featured imageFeatured image A featured image is the main image used on your blog archive page and is pulled when the post or page is shared on social media. The image can be used to display in widget areas on your site or in a summary list of posts. on that post\nHome page using a classic theme (Twenty Twenty-One) with the default content (\u201cHello World!\u201d post) and a featured image on that post\nFor all of these scenarios, I then loaded the URLURL A specific web address of a website or web page on the Internet, such as a website\u2019s URL www.wordpress.org 20 times using the \u201cbenchmark-web-vitals\u201d command and recorded the metrics. The full metrics include more granular percentiles, but by far the most important ones are the medians (p50). Here is the data for the two scenarios with only the default \u201cHello world!\u201d post (no featured image):\nScenarioMetricWP 6.1.1 medianWP 6.2 medianDiff %Block Theme: Twenty Twenty-ThreeLCP281.7ms241.15ms-14.39%TTFB176.75ms137.8ms-22.04%Classic Theme: Twenty Twenty-OneLCP209.65ms203.65ms-2.86%TTFB75.3ms72.6ms-3.59%For comparison, here is the same data for the two alternative scenarios where the post has a featured image. Note how the LCP improvement for block themes is even more pronounced in this scenario:\nScenarioMetricWP 6.1.1 medianWP 6.2 medianDiff %Block Theme: Twenty Twenty-ThreeLCP292.8ms241.4ms-17.55%TTFB167.7ms138.45ms-17.44%Classic Theme: Twenty Twenty-OneLCP217.65ms206.95ms-4.92%TTFB75.35ms72.85ms-3.32%The full data can be inspected in this spreadsheet.\nTo close this section, it should be noted that of course the 4 scenarios above are not representative of what most actual WordPress sites look like. Some other benchmarks were using the theme unit testunit test Code written to test a small piece of code or functionality within a larger application. Everything from themes to WordPress core have a series of unit tests. Also see regression. data, and while that is more content, it is not necessarily more accurate either. There are inevitably limitations from lab analyses, and we will never be able to capture the \u201caverage\u201d or \u201crealistic\u201d WordPress site synthetically. However, the Core Performance Team is exploring a few good baseline scenarios as part of enhancing the aforementioned automated core performance testing CI workflow, and it would be great if in the 6.3 cycle we could align the benchmarks to use similar scenarios rather than every contributor including myself having their own scenarios for benchmarking.\nFor some of the individual ticket highlights that contributed to the performance improvements in WordPress 6.2, please see the recent core editor improvements post.\nComparing performance between block themes and classic themes\nYou may have noticed in the data above that the classic theme is apparently loading faster than the block theme. Let me clarify that a bit since, while that is technically true based on my benchmarks, the data may be deceiving at first glance.\nLet\u2019s take another look at the data from the first table above: For the LCP metric, the classic theme already loads notably faster (203.65ms vs 241.15ms, based on the first two scenarios for WordPress 6.2), but for TTFB, it\u2019s almost twice as fast (72.6ms vs 137.8ms). Server-side performance is better in classic themes mainly because block themes have to handle more data since much of what a classic theme\u2019s code is responsible for is now handled through more dynamic features that furthermore rely on making additional database queries. However, it also needs to be acknowledged that block theme support in WordPress core is still relatively new (little more than 1 year old now), while the logic for classic themes has seen more than a decade of refinements. In other words, chances are there is still a lot of headroom for improving server-side performance of block themes, while for classic themes there is probably less of that. The performance improvements in WordPress 6.2 perfectly indicate that, noting that TTFB with a block theme has improved far more than TTFB with a classic theme.\nNow here comes the most important part though: In client-side performance, block themes are much faster than classic themes. The way to spot that is by looking at the difference between the LCP metric and the TTFB metric, and here\u2019s why: LCP can be considered representative of the overall load time, while TTFB is the server response time. So \u201cLCP minus TTFB\u201d is representative of the client-side load time. If you make this calculation for the above data points for WordPress 6.2, you can clearly see the benefits of the block theme when it comes to client-side performance (103.35ms vs 131.05ms). These benefits are evident due to the more dynamic logic that is applied in block themes to e.g. load scripts and stylesheets. Rather than the common pattern of enqueuing a big stylesheet and big script in the theme, block themes load assets more granularly and dynamically, only for what is actually needed on the current page.\nYou may argue that it doesn\u2019t matter that client-side performance is ~30ms faster in a block theme if at the same time server-side performance is ~65ms slower. Yes, in this benchmark the classic theme is overall ~35ms faster than the block theme \u2013 however that is without any caching. It is a common best practice for WordPress sites to use a full page cache to avoid the need for all the WordPress server-side logic to run on every page load or, even better, to avoid the request to hit the WordPress site at all in favor of serving a cached response. While by far not all WordPress sites use a full page cache, many do. And in that case, the server-side performance becomes potentially less relevant. Keep in mind however that even then improving server-side performance is still important: As mentioned, many sites still do not use a full page cache, and even for those that do, certain dynamic content is almost impossible to reliably cache. However, if your WordPress site uses primarily static content and a full page cache, block themes are already faster than classic themes today \u2013 because they are faster client-side. You can \u201ccache\u201d away server-side performance problems, but you cannot do that on the client-side. In other words: Despite block themes being slower on the server-side, they provide a better foundation for building performant sites in the long run.\nAppendix: Tools to measure and profile performance\nTo finish this post, here you find a list of links to some of the tools mentioned:\nAutomated WordPress core performance dashboard\n\u201cBenchmark-web-vitals\u201d command\n\u201cBenchmark-server-timing\u201d command\nPerformance Lab plugin Server-Timing API\nMini plugin to \u201cunlock\u201d full metrics\nMini plugin as a starting point to expose additional metrics\n\nGutenberg pull request to add XHProf to @wordpress/env package\nDocumentation for how to add XHProf to core development environment\nProps @annezazu @tweetythierry @desrosj @joemcgill @hellofromtonya @spacedmonkey for extensive review and proofreading.\n#6-2, #performance, #retrospectiveShare this:TwitterFacebookLogin to Reply\n\n\n\n\n\n\n\nLeave a Reply Cancel replyYou must be logged in to post a comment. \nThis site uses Akismet to reduce spam. Learn how your comment data is processed.\n\n\n\nPost navigation\n\u2190 WP Feature Notifications: 2023 Status Update Performance Chat Summary: 25 April 2023 \u2192\n\n\n\n\n\n\n\n\nSearch\n\n\n\nEmail Updates\n\n\nEnter your email address to subscribe to this blog and receive notifications of new posts by email.\n\n\n\n\t\t\t\t\t\t\tEmail Address\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\tSubscribe\t\t\t\t\t\t\n\n\n\n\t\t\t\t\tJoin 5,560 other subscribers\t\t\t\t\n\nRecent UpdatesRecent CommentsNo RepliesRecent UpdatesRecent CommentsNo RepliesCurrent Release The current release in progress is WordPress 6.3.\nPlanned future releases are listed on the Project Roadmap.\nFeature projects not tied to specific releases can be found on the Features page.\n\nRegular ChatsNote: All chats happen on Slack.\n\n\n\nWeekly Developer Meetings: Wednesday 20:00 UTC in #core\n\n\nAbout the Dev Chat\n\n\nAgendas | Summaries\n\n\n\n\n\nAPAC Triage Sessions Tuesday 5:00 UTC alternating between #core and #core-editor\n\n\nJavaScript Weekly Chat Tuesday 14:00 UTC in #core-js\n\n\nPerformance Weekly Chat Tuesday 15:00 UTC in #core-performance\n\n\nMultisite Weekly Chat Tuesday 17:00 UTC in #core-multisite\n\n\nREST API Weekly Chat Thursday 18:00 UTC in #core-restapi\n\n\nEditor Weekly Chat Wednesday 14:00 UTC in #core-editor\n\n\nNew Contributors Chat Wednesday 19:00 UTC in #core\n\n\nImages/Media Weekly Chat Thursday 15:00 UTC in #core-media\n\n\nCSS Weekly Chat Thursday 21:00 UTC in #core-css\n\n\nCustomize Weekly Chat Monday 19:00 UTC in #core-customize\n\n\n\n\nSee all meetings \u2192 \nRecent Posts and Comments\n\n\n\t\t\tTeam Pledges\n\t\t\n\n1853 people have pledged time to contribute to Core Team efforts! When looking for help on a project or program, try starting by reaching out to them!\t\t\n\n\n\n\n\n\n\nAboutNewsHostingDonateSwag\nDocumentationDevelopersGet InvolvedLearn\nShowcasePluginsThemesPatterns\nWordCampWordPress.TVBuddyPressbbPress\nWordPress.comMattPrivacyPublic Code\n\n\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\nWordPress.org\n\n\n\n \n\n\n\nVisit our Facebook page\nVisit our Twitter account\nVisit our Instagram account\nVisit our LinkedIn account\n\n\n\n\n\n\n \n\n\n\n\nssearch\nccompose new post\nr reply\ne edit\nt go to top\nj go to the next post or comment\nk go to the previous post or comment\no toggle comment visibility\nesc cancel edit post or comment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\t\tPlease enable JavaScript to view this page properly.\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n",
    "links": [
        "#content",
        "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2F2023%2F04%2F25%2Fthe-benefits-of-prioritizing-and-measuring-performance-in-wordpress-6-2%2F&locale=en_US",
        "https://login.wordpress.org/register?locale=en_US",
        "https://wordpress.org/",
        "https://wordpress.org/news/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/mobile/",
        "https://wordpress.org/hosting/",
        "https://openverse.org/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://wordpress.org/support/forums/",
        "https://developer.wordpress.org/",
        "https://wordpress.tv/",
        "https://make.wordpress.org/",
        "https://make.wordpress.org/",
        "https://wordpress.org/photos/",
        "https://wordpress.org/five-for-the-future/",
        "https://central.wordcamp.org/",
        "https://www.meetup.com/pro/wordpress/",
        "https://jobs.wordpress.net/",
        "https://wordpress.org/about/",
        "https://wordpress.org/about/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/enterprise/",
        "https://wordpress.org/gutenberg/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "#",
        "https://make.wordpress.org/core/",
        "https://make.wordpress.org/core/reports/",
        "https://make.wordpress.org/core/components/",
        "https://make.wordpress.org/core/handbook/",
        "https://core.trac.wordpress.org/browser",
        "https://core.trac.wordpress.org/timeline",
        "https://login.wordpress.org/?redirect_to=https://core.trac.wordpress.org/newticket",
        "https://wordpress.org/support/bb-login.php?redirect_to=https://core.trac.wordpress.org/newticket",
        "https://core.trac.wordpress.org/tickets/good-first-bugs",
        "https://make.wordpress.org/core/handbook/testing/bug-gardening/",
        "https://make.wordpress.org/core/reports/",
        "https://core.trac.wordpress.org/tickets/needs-testing",
        "https://make.wordpress.org/core/features/",
        "https://make.wordpress.org/core/handbook/",
        "https://make.wordpress.org/chat/",
        "http://time.is/2000_in_UTC",
        "https://wordpress.slack.com/messages/core/",
        "https://make.wordpress.org/chat/",
        "https://profiles.wordpress.org/flixos90/",
        "https://profiles.wordpress.org/flixos90/",
        "https://make.wordpress.org/core/tag/6-2/",
        "https://make.wordpress.org/core/tag/performance/",
        "https://make.wordpress.org/core/tag/retrospective/",
        "https://web.dev/lcp/",
        "https://web.dev/ttfb/",
        "#alpha-beta",
        "#blocker",
        "https://oandre.gal/evolution-of-wordpress-ttfb-5-6-to-6-2/",
        "https://profiles.wordpress.org/oandregal/",
        "https://core.trac.wordpress.org/query?milestone=6.1.1&col=id&col=summary&col=focuses&col=owner&col=type&order=focuses",
        "https://xdebug.org/",
        "https://github.com/longxinH/xhprof",
        "https://www.blackfire.io/",
        "https://make.wordpress.org/core/2022/12/16/hallway-hangout-performance-considerations-for-block-themes/",
        "https://make.wordpress.org/core/2022/12/16/hallway-hangout-performance-considerations-for-block-themes/",
        "https://github.com/GoogleChromeLabs/wpp-research/tree/main/cli#benchmark-server-timing",
        "https://github.com/GoogleChromeLabs/wpp-research/tree/main/cli#benchmark-web-vitals",
        "https://core.trac.wordpress.org/ticket/57502",
        "https://github.com/WordPress/wordpress-develop/pull/3789#issuecomment-1405803691",
        "https://core.trac.wordpress.org/ticket/56990",
        "https://core.trac.wordpress.org/ticket/56990#comment:42",
        "https://make.wordpress.org/core/2023/02/02/automated-performance-monitoring-in-wordpress-core/",
        "https://en.wikipedia.org/wiki/Minimum_viable_product",
        "https://core.trac.wordpress.org/changeset/55459",
        "https://www.codevitals.run/project/wordpress",
        "https://core.trac.wordpress.org/ticket/57502",
        "https://core.trac.wordpress.org/ticket/56930",
        "https://docs.google.com/spreadsheets/d/1LroIJoYz-O9CpfJzaiKYYMWJ7GbE5RZoW1rf1R4FqyA/edit#gid=576773622",
        "#regression",
        "https://make.wordpress.org/core/2023/04/05/wordpress-6-2-performance-improvements-for-all-themes/",
        "https://www.codevitals.run/project/wordpress",
        "https://github.com/GoogleChromeLabs/wpp-research/tree/main/cli#benchmark-web-vitals",
        "https://github.com/GoogleChromeLabs/wpp-research/tree/main/cli#benchmark-server-timing",
        "https://github.com/WordPress/performance/pull/553",
        "https://gist.github.com/felixarntz/9c3d7150c74082e69bb426393b68b12e",
        "https://gist.github.com/felixarntz/63c05392dbf7d51cc7f8f4a424b1ff39",
        "https://github.com/WordPress/gutenberg/pull/48147",
        "https://github.com/GoogleChromeLabs/wpp-research/tree/main/tools/xhprof",
        "https://profiles.wordpress.org/annezazu/",
        "https://profiles.wordpress.org/tweetythierry/",
        "https://profiles.wordpress.org/desrosj/",
        "https://profiles.wordpress.org/joemcgill/",
        "https://profiles.wordpress.org/hellofromtonya/",
        "https://profiles.wordpress.org/spacedmonkey/",
        "https://make.wordpress.org/core/tag/6-2/",
        "https://make.wordpress.org/core/tag/performance/",
        "https://make.wordpress.org/core/tag/retrospective/",
        "https://make.wordpress.org/core/2023/04/25/the-benefits-of-prioritizing-and-measuring-performance-in-wordpress-6-2/?share=twitter",
        "https://make.wordpress.org/core/2023/04/25/the-benefits-of-prioritizing-and-measuring-performance-in-wordpress-6-2/?share=facebook",
        "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2F2023%2F04%2F25%2Fthe-benefits-of-prioritizing-and-measuring-performance-in-wordpress-6-2%2F%23respond&locale=en_US",
        "/core/2023/04/25/the-benefits-of-prioritizing-and-measuring-performance-in-wordpress-6-2/#respond",
        "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2F2023%2F04%2F25%2Fthe-benefits-of-prioritizing-and-measuring-performance-in-wordpress-6-2%2F&locale=en_US",
        "https://akismet.com/privacy/",
        "https://make.wordpress.org/core/2023/04/25/wp-feature-notifications-2023-status-update/",
        "https://make.wordpress.org/core/2023/04/25/performance-chat-summary-25-april-2023/",
        "#",
        "https://make.wordpress.org/core/",
        "https://make.wordpress.org/core/?o2_recent_comments=1",
        "https://make.wordpress.org/core/?replies=none",
        "https://make.wordpress.org/core/6-3/",
        "https://wordpress.org/about/roadmap/",
        "https://make.wordpress.org/core/features/",
        "https://make.wordpress.org/chat/",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230503T2000",
        "https://wordpress.slack.com/archives/C02RQBWTW",
        "http://make.wordpress.org/core/weekly-developer-chats/",
        "http://make.wordpress.org/core/tag/agenda",
        "http://make.wordpress.org/core/tag/summary",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230502T0500",
        "https://wordpress.slack.com/archives/C02RQBWTW",
        "https://wordpress.slack.com/archives/C02QB2JS7",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230502T1400",
        "https://wordpress.slack.com/archives/C5UNMSU4R",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230502T1500",
        "https://wordpress.slack.com/archives/C02KGN5K076",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230502T1700",
        "https://wordpress.slack.com/archives/C03BVB47S",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230504T1800",
        "https://wordpress.slack.com/archives/C02RQC26G",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230503T1400",
        "https://wordpress.slack.com/archives/C02QB2JS7",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230503T1900",
        "https://wordpress.slack.com/archives/C02RQBWTW",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230504T1500",
        "https://wordpress.slack.com/archives/C02SX62S6",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230504T2100",
        "https://wordpress.slack.com/archives/CQ7V4966Q",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230508T1900",
        "https://wordpress.slack.com/archives/C0381N237",
        "https://make.wordpress.org/meetings/",
        "https://make.wordpress.org/core/pledges/",
        "https://wordpress.org/about/",
        "https://wordpress.org/news/",
        "https://wordpress.org/hosting/",
        "https://wordpressfoundation.org/donate/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://developer.wordpress.org/",
        "https://make.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://central.wordcamp.org/",
        "https://wordpress.tv/",
        "https://buddypress.org/",
        "https://bbpress.org/",
        "https://wordpress.com/?ref=wporg-footer",
        "https://ma.tt/",
        "https://wordpress.org/about/privacy/",
        "https://publiccode.eu/",
        "https://wordpress.org/",
        "https://wordpress.org/",
        "https://www.facebook.com/WordPress/",
        "https://twitter.com/WordPress",
        "https://www.instagram.com/wordpress/",
        "https://www.linkedin.com/company/wordpress"
    ]
}