{
    "title": "Status update on the SQLite project \u2013 Make WordPress Core",
    "body": "\nSkip to content\n\n\nLog InRegister \n\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\n\n\n\nNewsDownload & ExtendGet WordPressThemesPatternsPluginsMobileHostingOpenverse \u2197\ufe0eLearnLearn WordPressDocumentationForumsDevelopersWordPress.tv \u2197\ufe0eCommunityMake WordPressPhoto DirectoryFive for the FutureWordCamp \u2197\ufe0eMeetups \u2197\ufe0eJob Board \u2197\ufe0eAboutAbout WordPressShowcaseEnterpriseGutenberg \u2197\ufe0eWordPress Swag Store \u2197\ufe0eGet WordPress\n\n\n\n\n\n\n\n\n\n\n\nSearch in WordPress.org\n\n\n\n\n\n\n\n\n\n\t\tGet WordPress\t\n\n\nMenu\n\nMake WordPress Core\n\n\nTickets\nComponents\nHandbook\nBrowse Source\nTrac Timeline\nCreate a New Ticket\n \n\n\n\nHide welcome box\n\n\n\n\nWelcome!\nThe WordPress coreCore Core is the set of software required to run WordPress. The Core Development Team builds WordPress. development team builds WordPress! Follow this site for\u00a0general updates, status reports, and the occasional code debate. There\u2019s lots of ways to contribute:\nFound a bugbug A bug is an error or unexpected result. Performance improvements, code optimization, and are considered enhancements, not defects. After feature freeze, only bugs are dealt with, with regressions (adverse changes from the previous version) being the highest priority.? Create a ticket in the bug tracker.\nWant to contribute? Get started quickly with tickets marked as good first bugs for new contributors or join a bug scrub. There\u2019s more on the reports page, like patches needing testing, and on feature projects page.\nOther questions? Here is a detailed handbook for contributors, complete with tutorials.\n\n\nCommunication\nCore uses Slack\u00a0for real-time communication. Contributors live all over the world, so there are discussions happening at all hours of the day.\nCore development meetings are every Wednesday at 20:00 UTC in the #core channel on Slack. Anyone can join and participate or listen in!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nAri Stathopoulos\n\n11:17 am on April 19, 2023 \n\n\n\n\t\t\t\t\t\u00a0\n\t\t\t\t\n\nStatus update on the SQLite project\n\n\nThis post is an update to the proposal for officially support SQLite in WordPress. The initial implementation was included in the Performance Lab pluginPlugin A plugin is a piece of software containing a group of functions that can be added to a WordPress website. They can extend functionality or add new features to your WordPress websites. WordPress plugins are written in the PHP programming language and integrate seamlessly with WordPress. These can be free in the WordPress.org Plugin Directory https://wordpress.org/plugins/ or can be cost-based plugin from a third-party and then released as a stand-alone plugin.\nThat initial implementation was based on wp-sqlite-db by @aaemnnosttv, which in turn, was a fork of an older plugin. \nOver the course of the last 6 month, issues with that implementation surfaced and the project experienced some limitations. As a result, we (@zieladam and @aristath) decided to rewrite it using a more future-proof concept.\nThe code has been completely rewritten to use an SQL Lexer and is now stable and able to handle all WordPress queries properly. The SQL Lexer is part of the PHPMyAdmin/SQL-Parser project (licensed under the GPLGPL GNU General Public License. Also see copyright license. 2.0) and it was adapted for WordPress, effectively implementing a MySQL to SQLite translation engine. This provides improved security, as well as compatibility.\nThe update has already been released in the standalone plugin and will soon be ported to the Performance Lab plugin. Most WordPress Unit Tests now pass, with the exception of a few that require patching WordPress CoreCore Core is the set of software required to run WordPress. The Core Development Team builds WordPress..\nThe next step would be to implement these changes to WordPress core instead of using a plugin. To that end, we have a draft Pull Request and an accompanying Trac ticket.\nWhy should this be in Core and not as a plugin?\nIn its current form, the SQLite implementation is a plugin. Just like all plugins, it can only be installed on a pre-existing website. As a result, a site can only use an SQLite database if it already has a MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. database \u2013 effectively negating all the benefits that SQLite can bring to WordPress.\nUsing the\u00a0featured\u00a0plugin is a great way to allow users to test the implementation and iron out any issues etc. However, long-term, it doesn\u2019t make sense to use it as a plugin.\u00a0\nWhat are the next necessary decisions?\nThere needs to be a decision, if the WordPress project wants to provide an option to users during WordPress installation, so they can choose whether they want to use a MySQL or an SQLite database. If no option is available in the UIUI User interface, then users would have to manually add define( 'DB_ENGINE', 'sqlite' ); in their wp-config.php file.\nAdding an option to select the database type may initially raise some eyebrows thinking that the famous 5-minute installation process will become more complicated, but in fact, it\u2019s the exact opposite: If users pick SQLite as their database, they don\u2019t need to create a MySQL db or enter their credentials in the installation screen, as no separate server is required.\nA prototype of the UI changes are already available via the pull request in WordPress Core, to showcase how easy it would be to install WP using SQLite instead of MySQL. \nThe proof-of-concept UI in that implementation checks if the server supports SQLite and MySQL: \nIf SQLite is supported but not MySQL, then it defaults to SQLite and no UI option is shown to users. This is for example what happens in the WordPress Playground\u00a0\u2013 it is vanilla WordPress that defaults to\u00a0SQLite.\nSimilarly, if the server supports MySQL and not SQLite, then the installation will use MySQL and no option will be shown to users.\nThe UI option will only show if both SQLite and MySQL are supported by the server.\nHow can this implementation be tested? \nThe next step would be to thoroughly test the implementation with all the plugins you normally use. You can use the SQLite Database Integration plugin to test an SQLite database on your existing website, or better yet \u2013 you can test the pull request in WordPress Core.\nIf you test the plugin, keep in mind that it does not copy your current data from MySQL to SQLite, as mentioned in the call-for-testing post.\nProps @zieladam for proofreading and contributing to this post, @bph for peer reviewShare this:TwitterFacebookLogin to Reply\n\n\n\n\n\n\n\n\n\n\n\n\nSamuel Wood (Otto)\n\n11:34 am on April 19, 2023 \n\n\n\n\nAre there any plans for performance testing around the differences between SQLite and mySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/.? I\u2019m thinking benchmark in an ideal situation sort of thing, for comparison testing only. Real world testing will have to be on various hosting situations, and so may come later.\n\n\n\n\n\n\n\n\nAri Stathopoulos\n\n11:46 am on April 19, 2023 \n\n\n\n\nYes, there are definitely plans to run benchmarks and compare MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. vs SQLite, though tbh I expect that SQLite will really shine in low-end servers. In high-end servers I haven\u2019t seen any performance regressions, and in my tests the difference is no more than a couple milliseconds so negligible.\nWe\u2019ll need to run a series of tests on a variety of environments to have a more rounded opinion \u2013 my own tests are nothing more than anecdotal evidence. I have reached out to a couple of hosts already and they have agreed to help us test things in real-world servers so we\u2019ll have more concrete stats.\n\n\n\n\n\n\n\n\ngridpane\n\n2:55 pm on April 19, 2023 \n\n\n\n\nAri, \nIf you need more hosts testing this out feel free to pingPing The act of sending a very small amount of data to an end point.  Ping is used in computer science to illicit a response from a target server to test it\u2019s connection. Ping is also a term used by Slack users to @ someone or send them a direct message (DM). Users might say something along the lines of \u201cPing me when the meeting starts.\u201d me. We can try this under a handful of different stacks at GridPane.com\n\n\n\n\n\n\n\n\nJavier Casares\n\n6:48 am on April 22, 2023 \n\n\n\n\nWe can try something like the phpunit-test-runner?\n\n\n\n\n\n\n\n\n\n\n\n\nDaniele Scasciafratte\n\n11:38 am on April 19, 2023 \n\n\n\n\nInstead, in the case of a website with already mysqlMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. that want to change to sqlite?\n\n\n\n\n\n\n\n\nAri Stathopoulos\n\n11:48 am on April 19, 2023 \n\n\n\n\nIt\u2019s possible to convert a MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. database to SQLite using the CLICLI Command Line Interface. Terminal (Bash) in Mac, Command Prompt in Windows, or WP-CLI for WordPress., and if SQLite gets merged in CoreCore Core is the set of software required to run WordPress. The Core Development Team builds WordPress., we\u2019ll need to build a pluginPlugin A plugin is a piece of software containing a group of functions that can be added to a WordPress website. They can extend functionality or add new features to your WordPress websites. WordPress plugins are written in the PHP programming language and integrate seamlessly with WordPress. These can be free in the WordPress.org Plugin Directory https://wordpress.org/plugins/ or can be cost-based plugin from a third-party that does the database migrationMigration Moving the code, database and media files for a website site from one server to another. Most typically done when changing hosting companies.. Migration tasks are not something that should be part of Core, so it will need to be in a plugin.\nAlternatively, you could export content from your MySQL database using the WordPress exporter, then switch to an SQLite database, and import the content from the XML\n\n\n\n\n\n\n\n\nXavi Ivars\n\n12:10 pm on April 19, 2023 \n\n\n\n\n> It\u2019s possible to convert a MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. database to SQLite using the CLICLI Command Line Interface. Terminal (Bash) in Mac, Command Prompt in Windows, or WP-CLI for WordPress.\nIs there any documentation around this? \nI\u2019d love to test this in a couple of (low traffic & non-critical) production sites, and evaluate the performance differences.\n\n\n\n\n\n\n\n\nAri Stathopoulos\n\n12:17 pm on April 19, 2023 \n\n\n\n\nNo official documentation, but with a quick search for \u201cconvert MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. to SQLite\u201d I see there are plenty of solutions out there!\n\n\n\n\n\n\n\n\nXavi Ivars\n\n12:27 pm on April 19, 2023 \n\n\n\n\nOh, when you said \u201cthe CLICLI Command Line Interface. Terminal (Bash) in Mac, Command Prompt in Windows, or WP-CLI for WordPress.\u201d, for some reason I read \u201cwp-cliWP-CLI WP-CLI is the Command Line Interface for WordPress, used to do administrative and development tasks in a programmatic way. The project page is http://wp-cli.org/ https://make.wordpress.org/cli/\u201d, and was getting frustrated for not finding any relevant information anywhere \ud83d\ude42\n\n\n\n\n\n\n\n\nJavier Casares\n\n6:49 am on April 22, 2023 \n\n\n\n\nI explain a little in my presentation. There are the slides on the WPTV page.\nhttps://wordpress.tv/2023/03/12/wordpress-con-sqlite/\n\n\n\n\n\n\n\n\nJavier Casares\n\n6:51 am on April 22, 2023 \n\n\n\n\nWith mysql2sqlite.\nSomething like:\n\nmysqldump--skip-extended-insert --compact wordpress> wordpress.sql\nmysql2sqlite wordpress.sql| sqlite3 wordpress.sqlite\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nzieladam\n\n1:25 pm on April 19, 2023 \n\n\n\n\nIt should be possible to import `mysql_dump` and PHPMyAdmin export files using the MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/.->SQLite translator shipped with the sqlite-database-integration pluginPlugin A plugin is a piece of software containing a group of functions that can be added to a WordPress website. They can extend functionality or add new features to your WordPress websites. WordPress plugins are written in the PHP programming language and integrate seamlessly with WordPress. These can be free in the WordPress.org Plugin Directory https://wordpress.org/plugins/ or can be cost-based plugin from a third-party. There isn\u2019t a script or a dedicated function that does that at the moment, but it could be built since all the necessary building blocks are in place.\n\n\n\n\n\n\n\n\n\n\nJonathan Desrosiers\n\n12:45 pm on April 19, 2023 \n\n\n\n\nThe SQL Lexer is part of the PHPMyAdmin/SQL-Parser project (licensed under the GPLGPL GNU General Public License. Also see copyright license. 2.0) and it was adapted for WordPress, effectively implementing a MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. to SQLite translationtranslation The process (or result) of changing text, words, and display formatting to support another language. Also see localization, internationalization. engine.\nI have a question around this. Can you elaborate a bit on \u201cadapted for WordPress\u201d?\nWhat I\u2019m mainly concerned with is how heavily the implementation in the pluginPlugin A plugin is a piece of software containing a group of functions that can be added to a WordPress website. They can extend functionality or add new features to your WordPress websites. WordPress plugins are written in the PHP programming language and integrate seamlessly with WordPress. These can be free in the WordPress.org Plugin Directory https://wordpress.org/plugins/ or can be cost-based plugin from a third-party has changed from the PHPMyAdmin/SQL-Parser project. If it\u2019s very different, it introduces a serious maintenance burden when big fixes, security updates, etc. are released upstream as this would not be trivial.\n\n\n\n\n\n\n\n\nAri Stathopoulos\n\n5:26 am on April 20, 2023 \n\n\n\n\nI have a question around this. Can you elaborate a bit on \u201cadapted for WordPress\u201d?\n\nWe didn\u2019t need all of the package, so in order to simplify things a bit, we extracted the relevant code from the package, combined some classes to make them into a single file, and then applied the WordPress Coding StandardsWordPress Coding Standards The Accessibility, PHP, JavaScript, CSS, HTML, etc. coding standards as published in the WordPress Coding Standards Handbook.\nMay also refer to The collection of PHP_CodeSniffer rules (sniffs) used to format and validate PHP code developed for WordPress according to the PHP coding standards. to it.\nAll the logic stayed the same, and the process didn\u2019t take more than a few hours.\nIf in the future we want to reduce the maintenance burden, we can use the package as-is. For this implementation we went for something minimal and small, but if we want more we can just use the whole package as a drop-in replacement for our simplified version of it.\n\n\n\n\n\n\n\n\n\n\nAaron Jorbin\n\n3:16 pm on April 19, 2023 \n\n\n\n\nTalk of merging to coreCore Core is the set of software required to run WordPress. The Core Development Team builds WordPress. feels incredibly premature for a couple of reasons:\n1) The pluginPlugin A plugin is a piece of software containing a group of functions that can be added to a WordPress website. They can extend functionality or add new features to your WordPress websites. WordPress plugins are written in the PHP programming language and integrate seamlessly with WordPress. These can be free in the WordPress.org Plugin Directory https://wordpress.org/plugins/ or can be cost-based plugin from a third-party now only has around 30 installations.  I think there needs to be much higher adoption in order to understand how the near-infinite number of plugins will work with this deep underlying change to WordPress.  \n2) The WordPress Philosophy has long included the line\n\n\nMany end users of WordPress are non-technically minded. They don\u2019t know what AJAX is, nor do they care about which version of PHPPHP The web scripting language in which WordPress is primarily architected. WordPress requires PHP 5.6.20 or higher they are using. The average WordPress user simply wants to be able to write without problems or interruption. These are the users that we design the software for as they are ultimately the ones who are going to spend the most time using it for what it was built for.\n\nAssuming that a user is going to understand different database engines and the potential tradeoffs feels far stretched to me. Therfore, any implementation really needs to be rock solid and extremely thoroughly tested. \n3) I have serious concerns about the christian superiority that the SQLite project has in its \u201ccode of ethics\u201d and if WordPress as a project wants to align itself there. As a non-christian, I feel explicitly not welcome to participate there. The Diversity, Equity, and Inclusion in WordPress statement makes clear that this Project believes\n\n \u201cInclusion is making sure that the environment is built to not simply tolerate diverse groups but to celebrate them as well.\u201d\n\nHow does providing official support to a project that does not tolerate diverse groups let alone celebrate them help WordPress achieve this goal?\n\n\n\n\n\n\n\n\nDavid Anderson\n\n11:47 pm on April 19, 2023 \n\n\n\n\nSo, the proper interpretation of that phrase in the \u201cDiversity, Equity, and Inclusion in WordPress\u201d statement is that it\u2019s intended to allow WordPress to keep its distance from Christians, who are officially deemed intolerable? That\u2019s interesting.\n\n\n\n\n\n\n\n\nAri Stathopoulos\n\n6:05 am on April 20, 2023 \n\n\n\n\nTalk of merging to coreCore Core is the set of software required to run WordPress. The Core Development Team builds WordPress. feels incredibly premature\nIt is premature. However, looking at the bigger picture, it is not premature to plan for the future and get ready for it.\nIt may be premature now, but it won\u2019t be 2 years from now\u2026 The problem is that we won\u2019t be able to do it in the future unless we start working on it now.\nSQLite is not something that can \u2013 or should \u2013 happen in Core now, or even a year from now. It\u2019s a long-term goal, and should be treated as such.\nI think there needs to be much higher adoption in order to understand how the near-infinite number of plugins will work with this deep underlying change to WordPress.\n\nI agree. Any and all plugins that use $wpdb won\u2019t have any issues. The problem will only be with plugins that use a hardcoded connection to the database, using something like mysqli_real_connect() or a similar function, and passing the DB_NAME, DB_USER, DB_PASSWORD and DB_HOST constants to it. These plugins will need to start using $wpdb instead of custom hardcoded connections \u2013 which is something they should be doing anyways. It\u2019s not something that can happen in a day, but long-term it\u2019s not something that should be considered blockerblocker A bug which is so severe that it blocks a release. IMO.\nAssuming that a user is going to understand different database engines and the potential tradeoffs feels far stretched to me. Therfore, any implementation really needs to be rock solid and extremely thoroughly tested.\n\nI agree 100%! The proof-of-concept UIUI User interface I put in place in the Core PR is just that \u2013 a proof of concept. Something to trigger discussion and allow us to find solutions. It can be anything, even installation scenarios (do you want to create a blogblog (versus network, site)? A small e-commerce site? A large news outlet? The next Amazon?) That is a discussion that will need to happen when the time is right to discuss UI, but it\u2019s is a bit too early for that, I don\u2019t think we\u2019re there yet.\nI have serious concerns about the christian superiority that the SQLite project has in its \u201ccode of ethics\u201d and if WordPress as a project wants to align itself there.\nThat code of ethics applies to people who want to contribute to SQLite itself. SQLite is public-domain and open-source, but not  open-contribution. Their code of ethics is for people who want to become contributors to SQLite. The WordPress project does not contribute to MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. or PHPPHP The web scripting language in which WordPress is primarily architected. WordPress requires PHP 5.6.20 or higher, I don\u2019t see how a contributors code-of-ethics for SQLite is relevant.\nMost of the things we use in our daily life are already tied to SQLite\u2026 The browser uses SQLite internally, my phone/tablet and all other devices use SQLite. Every single app uses SQLite. Chances are the OS does too!\nThe WP data itself may not be currently stored in an SQLite database, but the tech we use to write, access and distribute that data, for the most part is built around SQLite.\nI don\u2019t think we should make technological decisions based on whether we agree or not with a person\u2019s or group\u2019s religious beliefs. We should not dismiss a technology just because we don\u2019t subscribe to the creator\u2019s religious beliefs.\nThe technology is good, it is used everywhere, and it\u2019s not going away \u2013 in fact, it\u2019s constantly growing.\n\n\n\n\n\n\n\n\nDavid Anderson\n\n11:11 am on April 22, 2023 \n\n\n\n\nI don\u2019t think we should make technological decisions based on whether we agree or not with a person\u2019s or group\u2019s religious beliefs. We should not dismiss a technology just because we don\u2019t subscribe to the creator\u2019s religious beliefs.\nAaron Jorbin already quoted from the WordPress code of conduct: \u201cInclusion is making sure that the environment is built to not simply tolerate diverse groups but to celebrate them as well.\u201d Unless this is some kind of Orwellian anti-statement which means the opposite of what it says, this question is already settled. In the WordPress project, the community that the SQLIte represent is not simply to be tolerated, but to be actively celebrated.\n\n\n\n\n\n\n\n\nSergey Biryukov\n\n3:43 pm on April 25, 2023 \n\n\n\n\nThat code of ethics applies to people who want to contribute to SQLite itself.\nIt appears that the current edition also includes a \u201cscope of application\u201d paragraph, so in my understanding it only applies to those who choose so:\n2.1. Scope of Application\nNo one is required to follow The Rule, to know The Rule, or even to think that The Rule is a good idea. [\u2026] individuals are free to dispute or ignore that advice if they wish.\n\n\n\n\n\n\n\n\n\n\n\n\nAndrew Ozz\n\n9:19 pm on April 19, 2023 \n\n\n\n\nTalk of merging to coreCore Core is the set of software required to run WordPress. The Core Development Team builds WordPress. feels incredibly premature\nTotally agree. \nthe SQLite implementation is a pluginPlugin A plugin is a piece of software containing a group of functions that can be added to a WordPress website. They can extend functionality or add new features to your WordPress websites. WordPress plugins are written in the PHP programming language and integrate seamlessly with WordPress. These can be free in the WordPress.org Plugin Directory https://wordpress.org/plugins/ or can be cost-based plugin from a third-party. Just like all plugins, it can only be installed on a pre-existing website. As a result, a site can only use an SQLite database if it already has a MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. database\nThat\u2019s not necessarily true. There are at least couple of ways the SQLite code can be added to WordPress:\n1. As a mu-plugin. These plugins are always loaded and cannot be disabled by the users.\n2. As a \u201cdrop-in\u201d, similar to how caching addons/drop-ins are added.\nBoth of these methods are also better/more suitable for the users as they can be done by the hosting company or the script used for WordPress installation. There are some other benefits like independent updates, etc.\nAnother big concern imho is compatibility with existing plugins that add their own tables or change the database in any way. Seems a lot of testing would have to be done for them.\n\n\n\n\n\n\n\n\nAri Stathopoulos\n\n6:11 am on April 20, 2023 \n\n\n\n\nAnother big concern imho is compatibility with existing plugins that add their own tables or change the database in any way. Seems a lot of testing would have to be done for them.\nYes, that is indeed a concern.\nSo far we\u2019ve tested the SQLite implementation with such plugins and there are no issues.\nThe only problem will be with plugins that use a hardcoded connection to the database, like mysqli( DB_HOST, DB_USER, DB_PASSWORD, DB_NAME );. These plugins will need to start using $wpdb instead.\n\n\n\n\n\n\n\n\n\n\nDavid Anderson\n\n11:48 pm on April 19, 2023 \n\n\n\n\nThe code has been completely rewritten to use an SQL Lexer and is now stable and able to handle all WordPress queries properly\nLast time I used a PHPPHP The web scripting language in which WordPress is primarily architected. WordPress requires PHP 5.6.20 or higher SQL lexer, it was slow. How does this one perform?\n\n\n\n\n\n\n\n\nAri Stathopoulos\n\n6:15 am on April 20, 2023 \n\n\n\n\nI don\u2019t currently have solid numbers and stats to share, that will need to come at a later time.\nHowever, from anecdotal stats from my localhost \u2013 which is by no means a reliable way to compare performance in real-world situations, it\u2019s pretty fast and the impact in performance is in no more than a few milliseconds (single-digit to low double-digit numbers)\n\n\n\n\n\n\n\n\nzieladam\n\n8:40 am on April 27, 2023 \n\n\n\n\n@davidanderson Performance can be increased by lexing just once and caching the result.\nThat being said, I would be super interested to learn about any performance figures you might have seen, even if it\u2019s just a rough estimate based on what you remember.\nIntuitively, I would expect the query execution to be much slower than the Lexer, maybe to the point where the impact of Lexing can is negligible.\n\n\n\n\n\n\n\n\nDavid Anderson\n\n10:15 am on April 27, 2023 \n\n\n\n\nIt was a few years ago. It was for UpdraftPlus \u2013 we were looking at analysing all SQL statements when restoring, using someone\u2019s PHPPHP The web scripting language in which WordPress is primarily architected. WordPress requires PHP 5.6.20 or higher SQL lexer library, in order to be able to handle modifying the backup from one site for another (e.g. table prefix changes, detecting when the restore has moved on from one table to the next when using a customised SQL backup from another tool, handling various multisitemultisite Used to describe a WordPress installation with a network of multiple blogs, grouped by sites. This installation type has shared users tables, and creates separate database tables for each blog (wp_posts becomes wp_0_posts). See also network, blog, site situations, etc.). All I can say is that I remember we concluded it was too slow to be of practical use (and so instead we analysed all the SQL backups we could get our hands on and used our own hand-curated regexes \u2013 which over the years has turned out to work fine for our use case (i.e. we haven\u2019t come across any situations it didn\u2019t catch for many years now IIRC)).\n\n\n\n\n\n\n\n\n\n\n\n\njustlevine\n\n10:24 am on April 20, 2023 \n\n\n\n\nI\u2019m confused. I was under the impression that despite not meeting the \u201cdecisions not options\u201d or the \u201c80% of users\u201d benchmarks for coreCore Core is the set of software required to run WordPress. The Core Development Team builds WordPress. inclusion, the justification for the original proposal eventually came down to \u201cbuilding a database abstraction layer would be a collosal task\u201d so this would be a good starting point on a long term road to abstraction.\nNow the plan is to further entrench dependence on MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. by using a lexer, and the reason for inclusion in core is that same dependence?\nWhy is this is a better approach than addressing the barriers in core that would let is use SQLite (or tbh at db solution) as a drop-in?\n\n\n\n\n\n\n\n\nAri Stathopoulos\n\n11:37 am on April 20, 2023 \n\n\n\n\nA database abstraction layer would need to consist of the following:\n\n\nDatabase Abstraction layer\n\nDatabase drivers\n\nBackwards-compatibility layer for plugins using MySQLMySQL MySQL is a relational database management system. A database is a structured collection of data where content, configuration and other options are stored. https://www.mysql.com/. so that we can translate them to a more abstract SQL syntax\n\n\nWhat we\u2019re doing with the Lexer is implementing a better backwards-compatibility layer. No matter which way we go (DBAL or SQLite-only), that will be a necessary step.\n\n\n\n\n\n\n\n\njustlevine\n\n9:43 pm on April 20, 2023 \n\n\n\n\nThanks for clarifying ( I took \u201cmore future-proof concept\u201d as an indicator that the Lexer was for the abstraction layer, not backcompat).\nI\u2019m still confused about  \u201cWhy should this be in CoreCore Core is the set of software required to run WordPress. The Core Development Team builds WordPress. and not as a pluginPlugin A plugin is a piece of software containing a group of functions that can be added to a WordPress website. They can extend functionality or add new features to your WordPress websites. WordPress plugins are written in the PHP programming language and integrate seamlessly with WordPress. These can be free in the WordPress.org Plugin Directory https://wordpress.org/plugins/ or can be cost-based plugin from a third-party?\u201d The post only says why this doesn\u2019t work as a traditional plugin, but as @azaozz noted (and you seemed to have missed when you replied), that doesn\u2019t explain why an mu-plugin or a dropin wouldn\u2019t be a better home for SQLite support.\nThe fact that the new implementation relies on a Lexer makes the question even stronger, since WP doesn\u2019t need to interact with SQLite directly anymore. Which means there\u2019s even less reason to be including the \u201ctranslationtranslation The process (or result) of changing text, words, and display formatting to support another language. Also see localization, internationalization. engine\u201d for the 80% of users who don\u2019t need it instead of in a dropin.\n\n\n\n\n\n\n\n\n\nLeave a Reply Cancel replyYou must be logged in to post a comment. \nThis site uses Akismet to reduce spam. Learn how your comment data is processed.\n\n\n\nPost navigation\n\u2190 Dev Chat agenda, April 19, 2023 What\u2019s new in Gutenberg 15.6? (19 April) \u2192\n\n\n\n\n\n\n\n\nSearch\n\n\n\nEmail Updates\n\n\nEnter your email address to subscribe to this blog and receive notifications of new posts by email.\n\n\n\n\t\t\t\t\t\t\tEmail Address\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\tSubscribe\t\t\t\t\t\t\n\n\n\n\t\t\t\t\tJoin 5,560 other subscribers\t\t\t\t\n\nRecent UpdatesRecent CommentsNo RepliesRecent UpdatesRecent CommentsNo RepliesCurrent Release The current release in progress is WordPress 6.3.\nPlanned future releases are listed on the Project Roadmap.\nFeature projects not tied to specific releases can be found on the Features page.\n\nRegular ChatsNote: All chats happen on Slack.\n\n\n\nWeekly Developer Meetings: Wednesday 20:00 UTC in #core\n\n\nAbout the Dev Chat\n\n\nAgendas | Summaries\n\n\n\n\n\nAPAC Triage Sessions Tuesday 5:00 UTC alternating between #core and #core-editor\n\n\nJavaScript Weekly Chat Tuesday 14:00 UTC in #core-js\n\n\nPerformance Weekly Chat Tuesday 15:00 UTC in #core-performance\n\n\nMultisite Weekly Chat Tuesday 17:00 UTC in #core-multisite\n\n\nREST API Weekly Chat Thursday 18:00 UTC in #core-restapi\n\n\nEditor Weekly Chat Wednesday 14:00 UTC in #core-editor\n\n\nNew Contributors Chat Wednesday 19:00 UTC in #core\n\n\nImages/Media Weekly Chat Thursday 15:00 UTC in #core-media\n\n\nCSS Weekly Chat Thursday 21:00 UTC in #core-css\n\n\nCustomize Weekly Chat Monday 19:00 UTC in #core-customize\n\n\n\n\nSee all meetings \u2192 \nRecent Posts and Comments\n\n\n\t\t\tTeam Pledges\n\t\t\n\n1853 people have pledged time to contribute to Core Team efforts! When looking for help on a project or program, try starting by reaching out to them!\t\t\n\n\n\n\n\n\n\nAboutNewsHostingDonateSwag\nDocumentationDevelopersGet InvolvedLearn\nShowcasePluginsThemesPatterns\nWordCampWordPress.TVBuddyPressbbPress\nWordPress.comMattPrivacyPublic Code\n\n\n\n\n\n\n\nWordPress.org\n\n\n \n\n\n\n\nWordPress.org\n\n\n\n \n\n\n\nVisit our Facebook page\nVisit our Twitter account\nVisit our Instagram account\nVisit our LinkedIn account\n\n\n\n\n\n\n \n\n\n\n\nssearch\nccompose new post\nr reply\ne edit\nt go to top\nj go to the next post or comment\nk go to the previous post or comment\no toggle comment visibility\nesc cancel edit post or comment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tPlease enable JavaScript to view this page properly.\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n",
    "links": [
        "#content",
        "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2F2023%2F04%2F19%2Fstatus-update-on-the-sqlite-project%2F&locale=en_US",
        "https://login.wordpress.org/register?locale=en_US",
        "https://wordpress.org/",
        "https://wordpress.org/news/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/mobile/",
        "https://wordpress.org/hosting/",
        "https://openverse.org/",
        "https://learn.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://wordpress.org/support/forums/",
        "https://developer.wordpress.org/",
        "https://wordpress.tv/",
        "https://make.wordpress.org/",
        "https://make.wordpress.org/",
        "https://wordpress.org/photos/",
        "https://wordpress.org/five-for-the-future/",
        "https://central.wordcamp.org/",
        "https://www.meetup.com/pro/wordpress/",
        "https://jobs.wordpress.net/",
        "https://wordpress.org/about/",
        "https://wordpress.org/about/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/enterprise/",
        "https://wordpress.org/gutenberg/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/download/",
        "https://wordpress.org/download/",
        "#",
        "https://make.wordpress.org/core/",
        "https://make.wordpress.org/core/reports/",
        "https://make.wordpress.org/core/components/",
        "https://make.wordpress.org/core/handbook/",
        "https://core.trac.wordpress.org/browser",
        "https://core.trac.wordpress.org/timeline",
        "https://login.wordpress.org/?redirect_to=https://core.trac.wordpress.org/newticket",
        "https://wordpress.org/support/bb-login.php?redirect_to=https://core.trac.wordpress.org/newticket",
        "https://core.trac.wordpress.org/tickets/good-first-bugs",
        "https://make.wordpress.org/core/handbook/testing/bug-gardening/",
        "https://make.wordpress.org/core/reports/",
        "https://core.trac.wordpress.org/tickets/needs-testing",
        "https://make.wordpress.org/core/features/",
        "https://make.wordpress.org/core/handbook/",
        "https://make.wordpress.org/chat/",
        "http://time.is/2000_in_UTC",
        "https://wordpress.slack.com/messages/core/",
        "https://make.wordpress.org/chat/",
        "https://profiles.wordpress.org/aristath/",
        "https://profiles.wordpress.org/aristath/",
        "https://make.wordpress.org/core/2022/09/12/lets-make-wordpress-officially-support-sqlite/",
        "https://w.org/plugins/performance-lab",
        "https://w.org/plugins/sqlite-database-integration/",
        "https://github.com/aaemnnosttv/wp-sqlite-db",
        "https://profiles.wordpress.org/aaemnnosttv/",
        "https://w.org/plugins/sqlite-integration/",
        "https://profiles.wordpress.org/zieladam/",
        "https://profiles.wordpress.org/aristath/",
        "https://github.com/phpmyadmin/sql-parser",
        "#copyright-license",
        "https://github.com/WordPress/sqlite-database-integration/pull/9",
        "https://github.com/WordPress/wordpress-develop/pull/3220",
        "https://core.trac.wordpress.org/ticket/57793",
        "https://www.mysql.com/",
        "https://github.com/WordPress/wordpress-develop/pull/3220",
        "https://playground.wordpress.net/",
        "https://w.org/plugins/sqlite-database-integration/",
        "https://github.com/WordPress/wordpress-develop/pull/3220",
        "https://make.wordpress.org/core/2022/12/20/help-us-test-the-sqlite-implementation/#faq",
        "https://profiles.wordpress.org/zieladam/",
        "https://profiles.wordpress.org/bph/",
        "https://make.wordpress.org/core/2023/04/19/status-update-on-the-sqlite-project/?share=twitter",
        "https://make.wordpress.org/core/2023/04/19/status-update-on-the-sqlite-project/?share=facebook",
        "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2F2023%2F04%2F19%2Fstatus-update-on-the-sqlite-project%2F%23respond&locale=en_US",
        "https://profiles.wordpress.org/otto42/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/aristath/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/gridpane/",
        "https://profiles.wordpress.org/javiercasares/",
        "https://github.com/wordpress/phpunit-test-runner/",
        "https://profiles.wordpress.org/mte90/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/aristath/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/xavivars/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/aristath/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/xavivars/",
        "http://wp-cli.org/",
        "https://make.wordpress.org/cli/",
        "https://profiles.wordpress.org/javiercasares/",
        "https://wordpress.tv/2023/03/12/wordpress-con-sqlite/",
        "https://profiles.wordpress.org/javiercasares/",
        "https://github.com/dumblob/mysql2sqlite",
        "https://profiles.wordpress.org/zieladam/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/desrosj/",
        "#copyright-license",
        "https://www.mysql.com/",
        "#l10n",
        "#i18n",
        "https://profiles.wordpress.org/aristath/",
        "https://developer.wordpress.org/coding-standards/",
        "https://github.com/WordPress/WordPress-Coding-Standards/",
        "https://profiles.wordpress.org/jorbin/",
        "https://make.wordpress.org/handbook/diversity-equity-and-inclusion-in-wordpress/",
        "https://profiles.wordpress.org/davidanderson/",
        "https://profiles.wordpress.org/aristath/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/davidanderson/",
        "https://profiles.wordpress.org/sergeybiryukov/",
        "https://profiles.wordpress.org/azaozz/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/aristath/",
        "https://profiles.wordpress.org/davidanderson/",
        "https://profiles.wordpress.org/aristath/",
        "https://profiles.wordpress.org/zieladam/",
        "https://profiles.wordpress.org/davidanderson/",
        "https://profiles.wordpress.org/davidanderson/",
        "https://profiles.wordpress.org/justlevine/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/aristath/",
        "https://www.mysql.com/",
        "https://profiles.wordpress.org/justlevine/",
        "https://profiles.wordpress.org/azaozz/",
        "#l10n",
        "#i18n",
        "/core/2023/04/19/status-update-on-the-sqlite-project/#respond",
        "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2F2023%2F04%2F19%2Fstatus-update-on-the-sqlite-project%2F&locale=en_US",
        "https://akismet.com/privacy/",
        "https://make.wordpress.org/core/2023/04/18/dev-chat-agenda-april-19-2023/",
        "https://make.wordpress.org/core/2023/04/19/whats-new-in-gutenberg-15-6-19-april/",
        "#",
        "https://make.wordpress.org/core/",
        "https://make.wordpress.org/core/?o2_recent_comments=1",
        "https://make.wordpress.org/core/?replies=none",
        "https://make.wordpress.org/core/6-3/",
        "https://wordpress.org/about/roadmap/",
        "https://make.wordpress.org/core/features/",
        "https://make.wordpress.org/chat/",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230503T2000",
        "https://wordpress.slack.com/archives/C02RQBWTW",
        "http://make.wordpress.org/core/weekly-developer-chats/",
        "http://make.wordpress.org/core/tag/agenda",
        "http://make.wordpress.org/core/tag/summary",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230502T0500",
        "https://wordpress.slack.com/archives/C02RQBWTW",
        "https://wordpress.slack.com/archives/C02QB2JS7",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230502T1400",
        "https://wordpress.slack.com/archives/C5UNMSU4R",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230502T1500",
        "https://wordpress.slack.com/archives/C02KGN5K076",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230502T1700",
        "https://wordpress.slack.com/archives/C03BVB47S",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230504T1800",
        "https://wordpress.slack.com/archives/C02RQC26G",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230503T1400",
        "https://wordpress.slack.com/archives/C02QB2JS7",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230503T1900",
        "https://wordpress.slack.com/archives/C02RQBWTW",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230504T1500",
        "https://wordpress.slack.com/archives/C02SX62S6",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230504T2100",
        "https://wordpress.slack.com/archives/CQ7V4966Q",
        "https://www.timeanddate.com/worldclock/fixedtime.html?iso=20230508T1900",
        "https://wordpress.slack.com/archives/C0381N237",
        "https://make.wordpress.org/meetings/",
        "https://make.wordpress.org/core/pledges/",
        "https://wordpress.org/about/",
        "https://wordpress.org/news/",
        "https://wordpress.org/hosting/",
        "https://wordpressfoundation.org/donate/",
        "https://mercantile.wordpress.org/",
        "https://wordpress.org/documentation/",
        "https://developer.wordpress.org/",
        "https://make.wordpress.org/",
        "https://learn.wordpress.org/",
        "https://wordpress.org/showcase/",
        "https://wordpress.org/plugins/",
        "https://wordpress.org/themes/",
        "https://wordpress.org/patterns/",
        "https://central.wordcamp.org/",
        "https://wordpress.tv/",
        "https://buddypress.org/",
        "https://bbpress.org/",
        "https://wordpress.com/?ref=wporg-footer",
        "https://ma.tt/",
        "https://wordpress.org/about/privacy/",
        "https://publiccode.eu/",
        "https://wordpress.org/",
        "https://wordpress.org/",
        "https://www.facebook.com/WordPress/",
        "https://twitter.com/WordPress",
        "https://www.instagram.com/wordpress/",
        "https://www.linkedin.com/company/wordpress"
    ]
}